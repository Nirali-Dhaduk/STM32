
LSM303AGR_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a5c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  08009b20  08009b20  00019b20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a114  0800a114  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a114  0800a114  0001a114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a11c  0800a11c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a11c  0800a11c  0001a11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a120  0800a120  0001a120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  200001dc  0800a300  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  0800a300  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bda  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d97  00000000  00000000  00031dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00033b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00034ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014cd7  00000000  00000000  00035960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f498  00000000  00000000  0004a637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d20b  00000000  00000000  00059acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6cda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bfc  00000000  00000000  000d6d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009b04 	.word	0x08009b04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08009b04 	.word	0x08009b04

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fe37 	bl	80020b0 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fd87 	bl	8001f60 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fe29 	bl	80020b0 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fe1f 	bl	80020b0 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fdaf 	bl	8001fe4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fda5 	bl	8001fe4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f84c 	bl	8000574 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_f2uiz>:
 8000544:	219e      	movs	r1, #158	; 0x9e
 8000546:	b510      	push	{r4, lr}
 8000548:	05c9      	lsls	r1, r1, #23
 800054a:	1c04      	adds	r4, r0, #0
 800054c:	f002 fd34 	bl	8002fb8 <__aeabi_fcmpge>
 8000550:	2800      	cmp	r0, #0
 8000552:	d103      	bne.n	800055c <__aeabi_f2uiz+0x18>
 8000554:	1c20      	adds	r0, r4, #0
 8000556:	f000 fe63 	bl	8001220 <__aeabi_f2iz>
 800055a:	bd10      	pop	{r4, pc}
 800055c:	219e      	movs	r1, #158	; 0x9e
 800055e:	1c20      	adds	r0, r4, #0
 8000560:	05c9      	lsls	r1, r1, #23
 8000562:	f000 fcaf 	bl	8000ec4 <__aeabi_fsub>
 8000566:	f000 fe5b 	bl	8001220 <__aeabi_f2iz>
 800056a:	2380      	movs	r3, #128	; 0x80
 800056c:	061b      	lsls	r3, r3, #24
 800056e:	469c      	mov	ip, r3
 8000570:	4460      	add	r0, ip
 8000572:	e7f2      	b.n	800055a <__aeabi_f2uiz+0x16>

08000574 <__udivmoddi4>:
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	4657      	mov	r7, sl
 8000578:	464e      	mov	r6, r9
 800057a:	4645      	mov	r5, r8
 800057c:	46de      	mov	lr, fp
 800057e:	b5e0      	push	{r5, r6, r7, lr}
 8000580:	0004      	movs	r4, r0
 8000582:	000d      	movs	r5, r1
 8000584:	4692      	mov	sl, r2
 8000586:	4699      	mov	r9, r3
 8000588:	b083      	sub	sp, #12
 800058a:	428b      	cmp	r3, r1
 800058c:	d830      	bhi.n	80005f0 <__udivmoddi4+0x7c>
 800058e:	d02d      	beq.n	80005ec <__udivmoddi4+0x78>
 8000590:	4649      	mov	r1, r9
 8000592:	4650      	mov	r0, sl
 8000594:	f002 fd38 	bl	8003008 <__clzdi2>
 8000598:	0029      	movs	r1, r5
 800059a:	0006      	movs	r6, r0
 800059c:	0020      	movs	r0, r4
 800059e:	f002 fd33 	bl	8003008 <__clzdi2>
 80005a2:	1a33      	subs	r3, r6, r0
 80005a4:	4698      	mov	r8, r3
 80005a6:	3b20      	subs	r3, #32
 80005a8:	469b      	mov	fp, r3
 80005aa:	d433      	bmi.n	8000614 <__udivmoddi4+0xa0>
 80005ac:	465a      	mov	r2, fp
 80005ae:	4653      	mov	r3, sl
 80005b0:	4093      	lsls	r3, r2
 80005b2:	4642      	mov	r2, r8
 80005b4:	001f      	movs	r7, r3
 80005b6:	4653      	mov	r3, sl
 80005b8:	4093      	lsls	r3, r2
 80005ba:	001e      	movs	r6, r3
 80005bc:	42af      	cmp	r7, r5
 80005be:	d83a      	bhi.n	8000636 <__udivmoddi4+0xc2>
 80005c0:	42af      	cmp	r7, r5
 80005c2:	d100      	bne.n	80005c6 <__udivmoddi4+0x52>
 80005c4:	e078      	b.n	80006b8 <__udivmoddi4+0x144>
 80005c6:	465b      	mov	r3, fp
 80005c8:	1ba4      	subs	r4, r4, r6
 80005ca:	41bd      	sbcs	r5, r7
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	da00      	bge.n	80005d2 <__udivmoddi4+0x5e>
 80005d0:	e075      	b.n	80006be <__udivmoddi4+0x14a>
 80005d2:	2200      	movs	r2, #0
 80005d4:	2300      	movs	r3, #0
 80005d6:	9200      	str	r2, [sp, #0]
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2301      	movs	r3, #1
 80005dc:	465a      	mov	r2, fp
 80005de:	4093      	lsls	r3, r2
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2301      	movs	r3, #1
 80005e4:	4642      	mov	r2, r8
 80005e6:	4093      	lsls	r3, r2
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	e028      	b.n	800063e <__udivmoddi4+0xca>
 80005ec:	4282      	cmp	r2, r0
 80005ee:	d9cf      	bls.n	8000590 <__udivmoddi4+0x1c>
 80005f0:	2200      	movs	r2, #0
 80005f2:	2300      	movs	r3, #0
 80005f4:	9200      	str	r2, [sp, #0]
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <__udivmoddi4+0x8e>
 80005fe:	601c      	str	r4, [r3, #0]
 8000600:	605d      	str	r5, [r3, #4]
 8000602:	9800      	ldr	r0, [sp, #0]
 8000604:	9901      	ldr	r1, [sp, #4]
 8000606:	b003      	add	sp, #12
 8000608:	bcf0      	pop	{r4, r5, r6, r7}
 800060a:	46bb      	mov	fp, r7
 800060c:	46b2      	mov	sl, r6
 800060e:	46a9      	mov	r9, r5
 8000610:	46a0      	mov	r8, r4
 8000612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000614:	4642      	mov	r2, r8
 8000616:	2320      	movs	r3, #32
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	4652      	mov	r2, sl
 800061c:	40da      	lsrs	r2, r3
 800061e:	4641      	mov	r1, r8
 8000620:	0013      	movs	r3, r2
 8000622:	464a      	mov	r2, r9
 8000624:	408a      	lsls	r2, r1
 8000626:	0017      	movs	r7, r2
 8000628:	4642      	mov	r2, r8
 800062a:	431f      	orrs	r7, r3
 800062c:	4653      	mov	r3, sl
 800062e:	4093      	lsls	r3, r2
 8000630:	001e      	movs	r6, r3
 8000632:	42af      	cmp	r7, r5
 8000634:	d9c4      	bls.n	80005c0 <__udivmoddi4+0x4c>
 8000636:	2200      	movs	r2, #0
 8000638:	2300      	movs	r3, #0
 800063a:	9200      	str	r2, [sp, #0]
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	4643      	mov	r3, r8
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0d9      	beq.n	80005f8 <__udivmoddi4+0x84>
 8000644:	07fb      	lsls	r3, r7, #31
 8000646:	0872      	lsrs	r2, r6, #1
 8000648:	431a      	orrs	r2, r3
 800064a:	4646      	mov	r6, r8
 800064c:	087b      	lsrs	r3, r7, #1
 800064e:	e00e      	b.n	800066e <__udivmoddi4+0xfa>
 8000650:	42ab      	cmp	r3, r5
 8000652:	d101      	bne.n	8000658 <__udivmoddi4+0xe4>
 8000654:	42a2      	cmp	r2, r4
 8000656:	d80c      	bhi.n	8000672 <__udivmoddi4+0xfe>
 8000658:	1aa4      	subs	r4, r4, r2
 800065a:	419d      	sbcs	r5, r3
 800065c:	2001      	movs	r0, #1
 800065e:	1924      	adds	r4, r4, r4
 8000660:	416d      	adcs	r5, r5
 8000662:	2100      	movs	r1, #0
 8000664:	3e01      	subs	r6, #1
 8000666:	1824      	adds	r4, r4, r0
 8000668:	414d      	adcs	r5, r1
 800066a:	2e00      	cmp	r6, #0
 800066c:	d006      	beq.n	800067c <__udivmoddi4+0x108>
 800066e:	42ab      	cmp	r3, r5
 8000670:	d9ee      	bls.n	8000650 <__udivmoddi4+0xdc>
 8000672:	3e01      	subs	r6, #1
 8000674:	1924      	adds	r4, r4, r4
 8000676:	416d      	adcs	r5, r5
 8000678:	2e00      	cmp	r6, #0
 800067a:	d1f8      	bne.n	800066e <__udivmoddi4+0xfa>
 800067c:	9800      	ldr	r0, [sp, #0]
 800067e:	9901      	ldr	r1, [sp, #4]
 8000680:	465b      	mov	r3, fp
 8000682:	1900      	adds	r0, r0, r4
 8000684:	4169      	adcs	r1, r5
 8000686:	2b00      	cmp	r3, #0
 8000688:	db24      	blt.n	80006d4 <__udivmoddi4+0x160>
 800068a:	002b      	movs	r3, r5
 800068c:	465a      	mov	r2, fp
 800068e:	4644      	mov	r4, r8
 8000690:	40d3      	lsrs	r3, r2
 8000692:	002a      	movs	r2, r5
 8000694:	40e2      	lsrs	r2, r4
 8000696:	001c      	movs	r4, r3
 8000698:	465b      	mov	r3, fp
 800069a:	0015      	movs	r5, r2
 800069c:	2b00      	cmp	r3, #0
 800069e:	db2a      	blt.n	80006f6 <__udivmoddi4+0x182>
 80006a0:	0026      	movs	r6, r4
 80006a2:	409e      	lsls	r6, r3
 80006a4:	0033      	movs	r3, r6
 80006a6:	0026      	movs	r6, r4
 80006a8:	4647      	mov	r7, r8
 80006aa:	40be      	lsls	r6, r7
 80006ac:	0032      	movs	r2, r6
 80006ae:	1a80      	subs	r0, r0, r2
 80006b0:	4199      	sbcs	r1, r3
 80006b2:	9000      	str	r0, [sp, #0]
 80006b4:	9101      	str	r1, [sp, #4]
 80006b6:	e79f      	b.n	80005f8 <__udivmoddi4+0x84>
 80006b8:	42a3      	cmp	r3, r4
 80006ba:	d8bc      	bhi.n	8000636 <__udivmoddi4+0xc2>
 80006bc:	e783      	b.n	80005c6 <__udivmoddi4+0x52>
 80006be:	4642      	mov	r2, r8
 80006c0:	2320      	movs	r3, #32
 80006c2:	2100      	movs	r1, #0
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	2200      	movs	r2, #0
 80006c8:	9100      	str	r1, [sp, #0]
 80006ca:	9201      	str	r2, [sp, #4]
 80006cc:	2201      	movs	r2, #1
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	9201      	str	r2, [sp, #4]
 80006d2:	e786      	b.n	80005e2 <__udivmoddi4+0x6e>
 80006d4:	4642      	mov	r2, r8
 80006d6:	2320      	movs	r3, #32
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	002a      	movs	r2, r5
 80006dc:	4646      	mov	r6, r8
 80006de:	409a      	lsls	r2, r3
 80006e0:	0023      	movs	r3, r4
 80006e2:	40f3      	lsrs	r3, r6
 80006e4:	4644      	mov	r4, r8
 80006e6:	4313      	orrs	r3, r2
 80006e8:	002a      	movs	r2, r5
 80006ea:	40e2      	lsrs	r2, r4
 80006ec:	001c      	movs	r4, r3
 80006ee:	465b      	mov	r3, fp
 80006f0:	0015      	movs	r5, r2
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	dad4      	bge.n	80006a0 <__udivmoddi4+0x12c>
 80006f6:	4642      	mov	r2, r8
 80006f8:	002f      	movs	r7, r5
 80006fa:	2320      	movs	r3, #32
 80006fc:	0026      	movs	r6, r4
 80006fe:	4097      	lsls	r7, r2
 8000700:	1a9b      	subs	r3, r3, r2
 8000702:	40de      	lsrs	r6, r3
 8000704:	003b      	movs	r3, r7
 8000706:	4333      	orrs	r3, r6
 8000708:	e7cd      	b.n	80006a6 <__udivmoddi4+0x132>
 800070a:	46c0      	nop			; (mov r8, r8)

0800070c <__aeabi_fadd>:
 800070c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070e:	46c6      	mov	lr, r8
 8000710:	0243      	lsls	r3, r0, #9
 8000712:	0a5b      	lsrs	r3, r3, #9
 8000714:	024e      	lsls	r6, r1, #9
 8000716:	0045      	lsls	r5, r0, #1
 8000718:	004f      	lsls	r7, r1, #1
 800071a:	00da      	lsls	r2, r3, #3
 800071c:	0fc4      	lsrs	r4, r0, #31
 800071e:	469c      	mov	ip, r3
 8000720:	0a70      	lsrs	r0, r6, #9
 8000722:	4690      	mov	r8, r2
 8000724:	b500      	push	{lr}
 8000726:	0e2d      	lsrs	r5, r5, #24
 8000728:	0e3f      	lsrs	r7, r7, #24
 800072a:	0fc9      	lsrs	r1, r1, #31
 800072c:	09b6      	lsrs	r6, r6, #6
 800072e:	428c      	cmp	r4, r1
 8000730:	d04b      	beq.n	80007ca <__aeabi_fadd+0xbe>
 8000732:	1bea      	subs	r2, r5, r7
 8000734:	2a00      	cmp	r2, #0
 8000736:	dd36      	ble.n	80007a6 <__aeabi_fadd+0x9a>
 8000738:	2f00      	cmp	r7, #0
 800073a:	d061      	beq.n	8000800 <__aeabi_fadd+0xf4>
 800073c:	2dff      	cmp	r5, #255	; 0xff
 800073e:	d100      	bne.n	8000742 <__aeabi_fadd+0x36>
 8000740:	e0ad      	b.n	800089e <__aeabi_fadd+0x192>
 8000742:	2380      	movs	r3, #128	; 0x80
 8000744:	04db      	lsls	r3, r3, #19
 8000746:	431e      	orrs	r6, r3
 8000748:	2a1b      	cmp	r2, #27
 800074a:	dc00      	bgt.n	800074e <__aeabi_fadd+0x42>
 800074c:	e0d3      	b.n	80008f6 <__aeabi_fadd+0x1ea>
 800074e:	2001      	movs	r0, #1
 8000750:	4643      	mov	r3, r8
 8000752:	1a18      	subs	r0, r3, r0
 8000754:	0143      	lsls	r3, r0, #5
 8000756:	d400      	bmi.n	800075a <__aeabi_fadd+0x4e>
 8000758:	e08c      	b.n	8000874 <__aeabi_fadd+0x168>
 800075a:	0180      	lsls	r0, r0, #6
 800075c:	0987      	lsrs	r7, r0, #6
 800075e:	0038      	movs	r0, r7
 8000760:	f002 fc34 	bl	8002fcc <__clzsi2>
 8000764:	3805      	subs	r0, #5
 8000766:	4087      	lsls	r7, r0
 8000768:	4285      	cmp	r5, r0
 800076a:	dc00      	bgt.n	800076e <__aeabi_fadd+0x62>
 800076c:	e0b6      	b.n	80008dc <__aeabi_fadd+0x1d0>
 800076e:	1a2d      	subs	r5, r5, r0
 8000770:	48b3      	ldr	r0, [pc, #716]	; (8000a40 <__aeabi_fadd+0x334>)
 8000772:	4038      	ands	r0, r7
 8000774:	0743      	lsls	r3, r0, #29
 8000776:	d004      	beq.n	8000782 <__aeabi_fadd+0x76>
 8000778:	230f      	movs	r3, #15
 800077a:	4003      	ands	r3, r0
 800077c:	2b04      	cmp	r3, #4
 800077e:	d000      	beq.n	8000782 <__aeabi_fadd+0x76>
 8000780:	3004      	adds	r0, #4
 8000782:	0143      	lsls	r3, r0, #5
 8000784:	d400      	bmi.n	8000788 <__aeabi_fadd+0x7c>
 8000786:	e078      	b.n	800087a <__aeabi_fadd+0x16e>
 8000788:	1c6a      	adds	r2, r5, #1
 800078a:	2dfe      	cmp	r5, #254	; 0xfe
 800078c:	d065      	beq.n	800085a <__aeabi_fadd+0x14e>
 800078e:	0180      	lsls	r0, r0, #6
 8000790:	0a43      	lsrs	r3, r0, #9
 8000792:	469c      	mov	ip, r3
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	4663      	mov	r3, ip
 8000798:	05d0      	lsls	r0, r2, #23
 800079a:	4318      	orrs	r0, r3
 800079c:	07e4      	lsls	r4, r4, #31
 800079e:	4320      	orrs	r0, r4
 80007a0:	bc80      	pop	{r7}
 80007a2:	46b8      	mov	r8, r7
 80007a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a6:	2a00      	cmp	r2, #0
 80007a8:	d035      	beq.n	8000816 <__aeabi_fadd+0x10a>
 80007aa:	1b7a      	subs	r2, r7, r5
 80007ac:	2d00      	cmp	r5, #0
 80007ae:	d000      	beq.n	80007b2 <__aeabi_fadd+0xa6>
 80007b0:	e0af      	b.n	8000912 <__aeabi_fadd+0x206>
 80007b2:	4643      	mov	r3, r8
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d100      	bne.n	80007ba <__aeabi_fadd+0xae>
 80007b8:	e0a7      	b.n	800090a <__aeabi_fadd+0x1fe>
 80007ba:	1e53      	subs	r3, r2, #1
 80007bc:	2a01      	cmp	r2, #1
 80007be:	d100      	bne.n	80007c2 <__aeabi_fadd+0xb6>
 80007c0:	e12f      	b.n	8000a22 <__aeabi_fadd+0x316>
 80007c2:	2aff      	cmp	r2, #255	; 0xff
 80007c4:	d069      	beq.n	800089a <__aeabi_fadd+0x18e>
 80007c6:	001a      	movs	r2, r3
 80007c8:	e0aa      	b.n	8000920 <__aeabi_fadd+0x214>
 80007ca:	1be9      	subs	r1, r5, r7
 80007cc:	2900      	cmp	r1, #0
 80007ce:	dd70      	ble.n	80008b2 <__aeabi_fadd+0x1a6>
 80007d0:	2f00      	cmp	r7, #0
 80007d2:	d037      	beq.n	8000844 <__aeabi_fadd+0x138>
 80007d4:	2dff      	cmp	r5, #255	; 0xff
 80007d6:	d062      	beq.n	800089e <__aeabi_fadd+0x192>
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	04db      	lsls	r3, r3, #19
 80007dc:	431e      	orrs	r6, r3
 80007de:	291b      	cmp	r1, #27
 80007e0:	dc00      	bgt.n	80007e4 <__aeabi_fadd+0xd8>
 80007e2:	e0b0      	b.n	8000946 <__aeabi_fadd+0x23a>
 80007e4:	2001      	movs	r0, #1
 80007e6:	4440      	add	r0, r8
 80007e8:	0143      	lsls	r3, r0, #5
 80007ea:	d543      	bpl.n	8000874 <__aeabi_fadd+0x168>
 80007ec:	3501      	adds	r5, #1
 80007ee:	2dff      	cmp	r5, #255	; 0xff
 80007f0:	d033      	beq.n	800085a <__aeabi_fadd+0x14e>
 80007f2:	2301      	movs	r3, #1
 80007f4:	4a93      	ldr	r2, [pc, #588]	; (8000a44 <__aeabi_fadd+0x338>)
 80007f6:	4003      	ands	r3, r0
 80007f8:	0840      	lsrs	r0, r0, #1
 80007fa:	4010      	ands	r0, r2
 80007fc:	4318      	orrs	r0, r3
 80007fe:	e7b9      	b.n	8000774 <__aeabi_fadd+0x68>
 8000800:	2e00      	cmp	r6, #0
 8000802:	d100      	bne.n	8000806 <__aeabi_fadd+0xfa>
 8000804:	e083      	b.n	800090e <__aeabi_fadd+0x202>
 8000806:	1e51      	subs	r1, r2, #1
 8000808:	2a01      	cmp	r2, #1
 800080a:	d100      	bne.n	800080e <__aeabi_fadd+0x102>
 800080c:	e0d8      	b.n	80009c0 <__aeabi_fadd+0x2b4>
 800080e:	2aff      	cmp	r2, #255	; 0xff
 8000810:	d045      	beq.n	800089e <__aeabi_fadd+0x192>
 8000812:	000a      	movs	r2, r1
 8000814:	e798      	b.n	8000748 <__aeabi_fadd+0x3c>
 8000816:	27fe      	movs	r7, #254	; 0xfe
 8000818:	1c6a      	adds	r2, r5, #1
 800081a:	4217      	tst	r7, r2
 800081c:	d000      	beq.n	8000820 <__aeabi_fadd+0x114>
 800081e:	e086      	b.n	800092e <__aeabi_fadd+0x222>
 8000820:	2d00      	cmp	r5, #0
 8000822:	d000      	beq.n	8000826 <__aeabi_fadd+0x11a>
 8000824:	e0b7      	b.n	8000996 <__aeabi_fadd+0x28a>
 8000826:	4643      	mov	r3, r8
 8000828:	2b00      	cmp	r3, #0
 800082a:	d100      	bne.n	800082e <__aeabi_fadd+0x122>
 800082c:	e0f3      	b.n	8000a16 <__aeabi_fadd+0x30a>
 800082e:	2200      	movs	r2, #0
 8000830:	2e00      	cmp	r6, #0
 8000832:	d0b0      	beq.n	8000796 <__aeabi_fadd+0x8a>
 8000834:	1b98      	subs	r0, r3, r6
 8000836:	0143      	lsls	r3, r0, #5
 8000838:	d400      	bmi.n	800083c <__aeabi_fadd+0x130>
 800083a:	e0fa      	b.n	8000a32 <__aeabi_fadd+0x326>
 800083c:	4643      	mov	r3, r8
 800083e:	000c      	movs	r4, r1
 8000840:	1af0      	subs	r0, r6, r3
 8000842:	e797      	b.n	8000774 <__aeabi_fadd+0x68>
 8000844:	2e00      	cmp	r6, #0
 8000846:	d100      	bne.n	800084a <__aeabi_fadd+0x13e>
 8000848:	e0c8      	b.n	80009dc <__aeabi_fadd+0x2d0>
 800084a:	1e4a      	subs	r2, r1, #1
 800084c:	2901      	cmp	r1, #1
 800084e:	d100      	bne.n	8000852 <__aeabi_fadd+0x146>
 8000850:	e0ae      	b.n	80009b0 <__aeabi_fadd+0x2a4>
 8000852:	29ff      	cmp	r1, #255	; 0xff
 8000854:	d023      	beq.n	800089e <__aeabi_fadd+0x192>
 8000856:	0011      	movs	r1, r2
 8000858:	e7c1      	b.n	80007de <__aeabi_fadd+0xd2>
 800085a:	2300      	movs	r3, #0
 800085c:	22ff      	movs	r2, #255	; 0xff
 800085e:	469c      	mov	ip, r3
 8000860:	e799      	b.n	8000796 <__aeabi_fadd+0x8a>
 8000862:	21fe      	movs	r1, #254	; 0xfe
 8000864:	1c6a      	adds	r2, r5, #1
 8000866:	4211      	tst	r1, r2
 8000868:	d077      	beq.n	800095a <__aeabi_fadd+0x24e>
 800086a:	2aff      	cmp	r2, #255	; 0xff
 800086c:	d0f5      	beq.n	800085a <__aeabi_fadd+0x14e>
 800086e:	0015      	movs	r5, r2
 8000870:	4446      	add	r6, r8
 8000872:	0870      	lsrs	r0, r6, #1
 8000874:	0743      	lsls	r3, r0, #29
 8000876:	d000      	beq.n	800087a <__aeabi_fadd+0x16e>
 8000878:	e77e      	b.n	8000778 <__aeabi_fadd+0x6c>
 800087a:	08c3      	lsrs	r3, r0, #3
 800087c:	2dff      	cmp	r5, #255	; 0xff
 800087e:	d00e      	beq.n	800089e <__aeabi_fadd+0x192>
 8000880:	025b      	lsls	r3, r3, #9
 8000882:	0a5b      	lsrs	r3, r3, #9
 8000884:	469c      	mov	ip, r3
 8000886:	b2ea      	uxtb	r2, r5
 8000888:	e785      	b.n	8000796 <__aeabi_fadd+0x8a>
 800088a:	2e00      	cmp	r6, #0
 800088c:	d007      	beq.n	800089e <__aeabi_fadd+0x192>
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	03d2      	lsls	r2, r2, #15
 8000892:	4213      	tst	r3, r2
 8000894:	d003      	beq.n	800089e <__aeabi_fadd+0x192>
 8000896:	4210      	tst	r0, r2
 8000898:	d101      	bne.n	800089e <__aeabi_fadd+0x192>
 800089a:	000c      	movs	r4, r1
 800089c:	0003      	movs	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d0db      	beq.n	800085a <__aeabi_fadd+0x14e>
 80008a2:	2080      	movs	r0, #128	; 0x80
 80008a4:	03c0      	lsls	r0, r0, #15
 80008a6:	4318      	orrs	r0, r3
 80008a8:	0240      	lsls	r0, r0, #9
 80008aa:	0a43      	lsrs	r3, r0, #9
 80008ac:	469c      	mov	ip, r3
 80008ae:	22ff      	movs	r2, #255	; 0xff
 80008b0:	e771      	b.n	8000796 <__aeabi_fadd+0x8a>
 80008b2:	2900      	cmp	r1, #0
 80008b4:	d0d5      	beq.n	8000862 <__aeabi_fadd+0x156>
 80008b6:	1b7a      	subs	r2, r7, r5
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d160      	bne.n	800097e <__aeabi_fadd+0x272>
 80008bc:	4643      	mov	r3, r8
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d024      	beq.n	800090c <__aeabi_fadd+0x200>
 80008c2:	1e53      	subs	r3, r2, #1
 80008c4:	2a01      	cmp	r2, #1
 80008c6:	d073      	beq.n	80009b0 <__aeabi_fadd+0x2a4>
 80008c8:	2aff      	cmp	r2, #255	; 0xff
 80008ca:	d0e7      	beq.n	800089c <__aeabi_fadd+0x190>
 80008cc:	001a      	movs	r2, r3
 80008ce:	2a1b      	cmp	r2, #27
 80008d0:	dc00      	bgt.n	80008d4 <__aeabi_fadd+0x1c8>
 80008d2:	e085      	b.n	80009e0 <__aeabi_fadd+0x2d4>
 80008d4:	2001      	movs	r0, #1
 80008d6:	003d      	movs	r5, r7
 80008d8:	1980      	adds	r0, r0, r6
 80008da:	e785      	b.n	80007e8 <__aeabi_fadd+0xdc>
 80008dc:	2320      	movs	r3, #32
 80008de:	003a      	movs	r2, r7
 80008e0:	1b45      	subs	r5, r0, r5
 80008e2:	0038      	movs	r0, r7
 80008e4:	3501      	adds	r5, #1
 80008e6:	40ea      	lsrs	r2, r5
 80008e8:	1b5d      	subs	r5, r3, r5
 80008ea:	40a8      	lsls	r0, r5
 80008ec:	1e43      	subs	r3, r0, #1
 80008ee:	4198      	sbcs	r0, r3
 80008f0:	2500      	movs	r5, #0
 80008f2:	4310      	orrs	r0, r2
 80008f4:	e73e      	b.n	8000774 <__aeabi_fadd+0x68>
 80008f6:	2320      	movs	r3, #32
 80008f8:	0030      	movs	r0, r6
 80008fa:	1a9b      	subs	r3, r3, r2
 80008fc:	0031      	movs	r1, r6
 80008fe:	4098      	lsls	r0, r3
 8000900:	40d1      	lsrs	r1, r2
 8000902:	1e43      	subs	r3, r0, #1
 8000904:	4198      	sbcs	r0, r3
 8000906:	4308      	orrs	r0, r1
 8000908:	e722      	b.n	8000750 <__aeabi_fadd+0x44>
 800090a:	000c      	movs	r4, r1
 800090c:	0003      	movs	r3, r0
 800090e:	0015      	movs	r5, r2
 8000910:	e7b4      	b.n	800087c <__aeabi_fadd+0x170>
 8000912:	2fff      	cmp	r7, #255	; 0xff
 8000914:	d0c1      	beq.n	800089a <__aeabi_fadd+0x18e>
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	4640      	mov	r0, r8
 800091a:	04db      	lsls	r3, r3, #19
 800091c:	4318      	orrs	r0, r3
 800091e:	4680      	mov	r8, r0
 8000920:	2a1b      	cmp	r2, #27
 8000922:	dd51      	ble.n	80009c8 <__aeabi_fadd+0x2bc>
 8000924:	2001      	movs	r0, #1
 8000926:	000c      	movs	r4, r1
 8000928:	003d      	movs	r5, r7
 800092a:	1a30      	subs	r0, r6, r0
 800092c:	e712      	b.n	8000754 <__aeabi_fadd+0x48>
 800092e:	4643      	mov	r3, r8
 8000930:	1b9f      	subs	r7, r3, r6
 8000932:	017b      	lsls	r3, r7, #5
 8000934:	d42b      	bmi.n	800098e <__aeabi_fadd+0x282>
 8000936:	2f00      	cmp	r7, #0
 8000938:	d000      	beq.n	800093c <__aeabi_fadd+0x230>
 800093a:	e710      	b.n	800075e <__aeabi_fadd+0x52>
 800093c:	2300      	movs	r3, #0
 800093e:	2400      	movs	r4, #0
 8000940:	2200      	movs	r2, #0
 8000942:	469c      	mov	ip, r3
 8000944:	e727      	b.n	8000796 <__aeabi_fadd+0x8a>
 8000946:	2320      	movs	r3, #32
 8000948:	0032      	movs	r2, r6
 800094a:	0030      	movs	r0, r6
 800094c:	40ca      	lsrs	r2, r1
 800094e:	1a59      	subs	r1, r3, r1
 8000950:	4088      	lsls	r0, r1
 8000952:	1e43      	subs	r3, r0, #1
 8000954:	4198      	sbcs	r0, r3
 8000956:	4310      	orrs	r0, r2
 8000958:	e745      	b.n	80007e6 <__aeabi_fadd+0xda>
 800095a:	2d00      	cmp	r5, #0
 800095c:	d14a      	bne.n	80009f4 <__aeabi_fadd+0x2e8>
 800095e:	4643      	mov	r3, r8
 8000960:	2b00      	cmp	r3, #0
 8000962:	d063      	beq.n	8000a2c <__aeabi_fadd+0x320>
 8000964:	2200      	movs	r2, #0
 8000966:	2e00      	cmp	r6, #0
 8000968:	d100      	bne.n	800096c <__aeabi_fadd+0x260>
 800096a:	e714      	b.n	8000796 <__aeabi_fadd+0x8a>
 800096c:	0030      	movs	r0, r6
 800096e:	4440      	add	r0, r8
 8000970:	0143      	lsls	r3, r0, #5
 8000972:	d400      	bmi.n	8000976 <__aeabi_fadd+0x26a>
 8000974:	e77e      	b.n	8000874 <__aeabi_fadd+0x168>
 8000976:	4b32      	ldr	r3, [pc, #200]	; (8000a40 <__aeabi_fadd+0x334>)
 8000978:	3501      	adds	r5, #1
 800097a:	4018      	ands	r0, r3
 800097c:	e77a      	b.n	8000874 <__aeabi_fadd+0x168>
 800097e:	2fff      	cmp	r7, #255	; 0xff
 8000980:	d08c      	beq.n	800089c <__aeabi_fadd+0x190>
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	4641      	mov	r1, r8
 8000986:	04db      	lsls	r3, r3, #19
 8000988:	4319      	orrs	r1, r3
 800098a:	4688      	mov	r8, r1
 800098c:	e79f      	b.n	80008ce <__aeabi_fadd+0x1c2>
 800098e:	4643      	mov	r3, r8
 8000990:	000c      	movs	r4, r1
 8000992:	1af7      	subs	r7, r6, r3
 8000994:	e6e3      	b.n	800075e <__aeabi_fadd+0x52>
 8000996:	4642      	mov	r2, r8
 8000998:	2a00      	cmp	r2, #0
 800099a:	d000      	beq.n	800099e <__aeabi_fadd+0x292>
 800099c:	e775      	b.n	800088a <__aeabi_fadd+0x17e>
 800099e:	2e00      	cmp	r6, #0
 80009a0:	d000      	beq.n	80009a4 <__aeabi_fadd+0x298>
 80009a2:	e77a      	b.n	800089a <__aeabi_fadd+0x18e>
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	03db      	lsls	r3, r3, #15
 80009a8:	2400      	movs	r4, #0
 80009aa:	469c      	mov	ip, r3
 80009ac:	22ff      	movs	r2, #255	; 0xff
 80009ae:	e6f2      	b.n	8000796 <__aeabi_fadd+0x8a>
 80009b0:	0030      	movs	r0, r6
 80009b2:	4440      	add	r0, r8
 80009b4:	2501      	movs	r5, #1
 80009b6:	0143      	lsls	r3, r0, #5
 80009b8:	d400      	bmi.n	80009bc <__aeabi_fadd+0x2b0>
 80009ba:	e75b      	b.n	8000874 <__aeabi_fadd+0x168>
 80009bc:	2502      	movs	r5, #2
 80009be:	e718      	b.n	80007f2 <__aeabi_fadd+0xe6>
 80009c0:	4643      	mov	r3, r8
 80009c2:	2501      	movs	r5, #1
 80009c4:	1b98      	subs	r0, r3, r6
 80009c6:	e6c5      	b.n	8000754 <__aeabi_fadd+0x48>
 80009c8:	2320      	movs	r3, #32
 80009ca:	4644      	mov	r4, r8
 80009cc:	4640      	mov	r0, r8
 80009ce:	40d4      	lsrs	r4, r2
 80009d0:	1a9a      	subs	r2, r3, r2
 80009d2:	4090      	lsls	r0, r2
 80009d4:	1e43      	subs	r3, r0, #1
 80009d6:	4198      	sbcs	r0, r3
 80009d8:	4320      	orrs	r0, r4
 80009da:	e7a4      	b.n	8000926 <__aeabi_fadd+0x21a>
 80009dc:	000d      	movs	r5, r1
 80009de:	e74d      	b.n	800087c <__aeabi_fadd+0x170>
 80009e0:	2320      	movs	r3, #32
 80009e2:	4641      	mov	r1, r8
 80009e4:	4640      	mov	r0, r8
 80009e6:	40d1      	lsrs	r1, r2
 80009e8:	1a9a      	subs	r2, r3, r2
 80009ea:	4090      	lsls	r0, r2
 80009ec:	1e43      	subs	r3, r0, #1
 80009ee:	4198      	sbcs	r0, r3
 80009f0:	4308      	orrs	r0, r1
 80009f2:	e770      	b.n	80008d6 <__aeabi_fadd+0x1ca>
 80009f4:	4642      	mov	r2, r8
 80009f6:	2a00      	cmp	r2, #0
 80009f8:	d100      	bne.n	80009fc <__aeabi_fadd+0x2f0>
 80009fa:	e74f      	b.n	800089c <__aeabi_fadd+0x190>
 80009fc:	2e00      	cmp	r6, #0
 80009fe:	d100      	bne.n	8000a02 <__aeabi_fadd+0x2f6>
 8000a00:	e74d      	b.n	800089e <__aeabi_fadd+0x192>
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	03d2      	lsls	r2, r2, #15
 8000a06:	4213      	tst	r3, r2
 8000a08:	d100      	bne.n	8000a0c <__aeabi_fadd+0x300>
 8000a0a:	e748      	b.n	800089e <__aeabi_fadd+0x192>
 8000a0c:	4210      	tst	r0, r2
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_fadd+0x306>
 8000a10:	e745      	b.n	800089e <__aeabi_fadd+0x192>
 8000a12:	0003      	movs	r3, r0
 8000a14:	e743      	b.n	800089e <__aeabi_fadd+0x192>
 8000a16:	2e00      	cmp	r6, #0
 8000a18:	d090      	beq.n	800093c <__aeabi_fadd+0x230>
 8000a1a:	000c      	movs	r4, r1
 8000a1c:	4684      	mov	ip, r0
 8000a1e:	2200      	movs	r2, #0
 8000a20:	e6b9      	b.n	8000796 <__aeabi_fadd+0x8a>
 8000a22:	4643      	mov	r3, r8
 8000a24:	000c      	movs	r4, r1
 8000a26:	1af0      	subs	r0, r6, r3
 8000a28:	3501      	adds	r5, #1
 8000a2a:	e693      	b.n	8000754 <__aeabi_fadd+0x48>
 8000a2c:	4684      	mov	ip, r0
 8000a2e:	2200      	movs	r2, #0
 8000a30:	e6b1      	b.n	8000796 <__aeabi_fadd+0x8a>
 8000a32:	2800      	cmp	r0, #0
 8000a34:	d000      	beq.n	8000a38 <__aeabi_fadd+0x32c>
 8000a36:	e71d      	b.n	8000874 <__aeabi_fadd+0x168>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	2400      	movs	r4, #0
 8000a3c:	469c      	mov	ip, r3
 8000a3e:	e6aa      	b.n	8000796 <__aeabi_fadd+0x8a>
 8000a40:	fbffffff 	.word	0xfbffffff
 8000a44:	7dffffff 	.word	0x7dffffff

08000a48 <__aeabi_fdiv>:
 8000a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a4a:	464f      	mov	r7, r9
 8000a4c:	4646      	mov	r6, r8
 8000a4e:	46d6      	mov	lr, sl
 8000a50:	0245      	lsls	r5, r0, #9
 8000a52:	b5c0      	push	{r6, r7, lr}
 8000a54:	0047      	lsls	r7, r0, #1
 8000a56:	1c0c      	adds	r4, r1, #0
 8000a58:	0a6d      	lsrs	r5, r5, #9
 8000a5a:	0e3f      	lsrs	r7, r7, #24
 8000a5c:	0fc6      	lsrs	r6, r0, #31
 8000a5e:	2f00      	cmp	r7, #0
 8000a60:	d100      	bne.n	8000a64 <__aeabi_fdiv+0x1c>
 8000a62:	e070      	b.n	8000b46 <__aeabi_fdiv+0xfe>
 8000a64:	2fff      	cmp	r7, #255	; 0xff
 8000a66:	d100      	bne.n	8000a6a <__aeabi_fdiv+0x22>
 8000a68:	e075      	b.n	8000b56 <__aeabi_fdiv+0x10e>
 8000a6a:	00eb      	lsls	r3, r5, #3
 8000a6c:	2580      	movs	r5, #128	; 0x80
 8000a6e:	04ed      	lsls	r5, r5, #19
 8000a70:	431d      	orrs	r5, r3
 8000a72:	2300      	movs	r3, #0
 8000a74:	4699      	mov	r9, r3
 8000a76:	469a      	mov	sl, r3
 8000a78:	3f7f      	subs	r7, #127	; 0x7f
 8000a7a:	0260      	lsls	r0, r4, #9
 8000a7c:	0a43      	lsrs	r3, r0, #9
 8000a7e:	4698      	mov	r8, r3
 8000a80:	0063      	lsls	r3, r4, #1
 8000a82:	0e1b      	lsrs	r3, r3, #24
 8000a84:	0fe4      	lsrs	r4, r4, #31
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d04e      	beq.n	8000b28 <__aeabi_fdiv+0xe0>
 8000a8a:	2bff      	cmp	r3, #255	; 0xff
 8000a8c:	d046      	beq.n	8000b1c <__aeabi_fdiv+0xd4>
 8000a8e:	4642      	mov	r2, r8
 8000a90:	00d0      	lsls	r0, r2, #3
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	04d2      	lsls	r2, r2, #19
 8000a96:	4302      	orrs	r2, r0
 8000a98:	4690      	mov	r8, r2
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	3b7f      	subs	r3, #127	; 0x7f
 8000a9e:	0031      	movs	r1, r6
 8000aa0:	1aff      	subs	r7, r7, r3
 8000aa2:	464b      	mov	r3, r9
 8000aa4:	4061      	eors	r1, r4
 8000aa6:	b2c9      	uxtb	r1, r1
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	2b0f      	cmp	r3, #15
 8000aac:	d900      	bls.n	8000ab0 <__aeabi_fdiv+0x68>
 8000aae:	e0b5      	b.n	8000c1c <__aeabi_fdiv+0x1d4>
 8000ab0:	486e      	ldr	r0, [pc, #440]	; (8000c6c <__aeabi_fdiv+0x224>)
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	58c3      	ldr	r3, [r0, r3]
 8000ab6:	469f      	mov	pc, r3
 8000ab8:	2300      	movs	r3, #0
 8000aba:	4698      	mov	r8, r3
 8000abc:	0026      	movs	r6, r4
 8000abe:	4645      	mov	r5, r8
 8000ac0:	4692      	mov	sl, r2
 8000ac2:	4653      	mov	r3, sl
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d100      	bne.n	8000aca <__aeabi_fdiv+0x82>
 8000ac8:	e089      	b.n	8000bde <__aeabi_fdiv+0x196>
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fdiv+0x88>
 8000ace:	e09e      	b.n	8000c0e <__aeabi_fdiv+0x1c6>
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d018      	beq.n	8000b06 <__aeabi_fdiv+0xbe>
 8000ad4:	003b      	movs	r3, r7
 8000ad6:	337f      	adds	r3, #127	; 0x7f
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	dd69      	ble.n	8000bb0 <__aeabi_fdiv+0x168>
 8000adc:	076a      	lsls	r2, r5, #29
 8000ade:	d004      	beq.n	8000aea <__aeabi_fdiv+0xa2>
 8000ae0:	220f      	movs	r2, #15
 8000ae2:	402a      	ands	r2, r5
 8000ae4:	2a04      	cmp	r2, #4
 8000ae6:	d000      	beq.n	8000aea <__aeabi_fdiv+0xa2>
 8000ae8:	3504      	adds	r5, #4
 8000aea:	012a      	lsls	r2, r5, #4
 8000aec:	d503      	bpl.n	8000af6 <__aeabi_fdiv+0xae>
 8000aee:	4b60      	ldr	r3, [pc, #384]	; (8000c70 <__aeabi_fdiv+0x228>)
 8000af0:	401d      	ands	r5, r3
 8000af2:	003b      	movs	r3, r7
 8000af4:	3380      	adds	r3, #128	; 0x80
 8000af6:	2bfe      	cmp	r3, #254	; 0xfe
 8000af8:	dd00      	ble.n	8000afc <__aeabi_fdiv+0xb4>
 8000afa:	e070      	b.n	8000bde <__aeabi_fdiv+0x196>
 8000afc:	01ad      	lsls	r5, r5, #6
 8000afe:	0a6d      	lsrs	r5, r5, #9
 8000b00:	b2d8      	uxtb	r0, r3
 8000b02:	e002      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000b04:	000e      	movs	r6, r1
 8000b06:	2000      	movs	r0, #0
 8000b08:	2500      	movs	r5, #0
 8000b0a:	05c0      	lsls	r0, r0, #23
 8000b0c:	4328      	orrs	r0, r5
 8000b0e:	07f6      	lsls	r6, r6, #31
 8000b10:	4330      	orrs	r0, r6
 8000b12:	bce0      	pop	{r5, r6, r7}
 8000b14:	46ba      	mov	sl, r7
 8000b16:	46b1      	mov	r9, r6
 8000b18:	46a8      	mov	r8, r5
 8000b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b1c:	4643      	mov	r3, r8
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d13f      	bne.n	8000ba2 <__aeabi_fdiv+0x15a>
 8000b22:	2202      	movs	r2, #2
 8000b24:	3fff      	subs	r7, #255	; 0xff
 8000b26:	e003      	b.n	8000b30 <__aeabi_fdiv+0xe8>
 8000b28:	4643      	mov	r3, r8
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12d      	bne.n	8000b8a <__aeabi_fdiv+0x142>
 8000b2e:	2201      	movs	r2, #1
 8000b30:	0031      	movs	r1, r6
 8000b32:	464b      	mov	r3, r9
 8000b34:	4061      	eors	r1, r4
 8000b36:	b2c9      	uxtb	r1, r1
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	2b0f      	cmp	r3, #15
 8000b3c:	d834      	bhi.n	8000ba8 <__aeabi_fdiv+0x160>
 8000b3e:	484d      	ldr	r0, [pc, #308]	; (8000c74 <__aeabi_fdiv+0x22c>)
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	58c3      	ldr	r3, [r0, r3]
 8000b44:	469f      	mov	pc, r3
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d113      	bne.n	8000b72 <__aeabi_fdiv+0x12a>
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	4699      	mov	r9, r3
 8000b4e:	3b03      	subs	r3, #3
 8000b50:	2700      	movs	r7, #0
 8000b52:	469a      	mov	sl, r3
 8000b54:	e791      	b.n	8000a7a <__aeabi_fdiv+0x32>
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	d105      	bne.n	8000b66 <__aeabi_fdiv+0x11e>
 8000b5a:	2308      	movs	r3, #8
 8000b5c:	4699      	mov	r9, r3
 8000b5e:	3b06      	subs	r3, #6
 8000b60:	27ff      	movs	r7, #255	; 0xff
 8000b62:	469a      	mov	sl, r3
 8000b64:	e789      	b.n	8000a7a <__aeabi_fdiv+0x32>
 8000b66:	230c      	movs	r3, #12
 8000b68:	4699      	mov	r9, r3
 8000b6a:	3b09      	subs	r3, #9
 8000b6c:	27ff      	movs	r7, #255	; 0xff
 8000b6e:	469a      	mov	sl, r3
 8000b70:	e783      	b.n	8000a7a <__aeabi_fdiv+0x32>
 8000b72:	0028      	movs	r0, r5
 8000b74:	f002 fa2a 	bl	8002fcc <__clzsi2>
 8000b78:	2776      	movs	r7, #118	; 0x76
 8000b7a:	1f43      	subs	r3, r0, #5
 8000b7c:	409d      	lsls	r5, r3
 8000b7e:	2300      	movs	r3, #0
 8000b80:	427f      	negs	r7, r7
 8000b82:	4699      	mov	r9, r3
 8000b84:	469a      	mov	sl, r3
 8000b86:	1a3f      	subs	r7, r7, r0
 8000b88:	e777      	b.n	8000a7a <__aeabi_fdiv+0x32>
 8000b8a:	4640      	mov	r0, r8
 8000b8c:	f002 fa1e 	bl	8002fcc <__clzsi2>
 8000b90:	4642      	mov	r2, r8
 8000b92:	1f43      	subs	r3, r0, #5
 8000b94:	409a      	lsls	r2, r3
 8000b96:	2376      	movs	r3, #118	; 0x76
 8000b98:	425b      	negs	r3, r3
 8000b9a:	4690      	mov	r8, r2
 8000b9c:	1a1b      	subs	r3, r3, r0
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	e77d      	b.n	8000a9e <__aeabi_fdiv+0x56>
 8000ba2:	23ff      	movs	r3, #255	; 0xff
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	e77a      	b.n	8000a9e <__aeabi_fdiv+0x56>
 8000ba8:	000e      	movs	r6, r1
 8000baa:	20ff      	movs	r0, #255	; 0xff
 8000bac:	2500      	movs	r5, #0
 8000bae:	e7ac      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	1ac0      	subs	r0, r0, r3
 8000bb4:	281b      	cmp	r0, #27
 8000bb6:	dca6      	bgt.n	8000b06 <__aeabi_fdiv+0xbe>
 8000bb8:	379e      	adds	r7, #158	; 0x9e
 8000bba:	002a      	movs	r2, r5
 8000bbc:	40bd      	lsls	r5, r7
 8000bbe:	40c2      	lsrs	r2, r0
 8000bc0:	1e6b      	subs	r3, r5, #1
 8000bc2:	419d      	sbcs	r5, r3
 8000bc4:	4315      	orrs	r5, r2
 8000bc6:	076b      	lsls	r3, r5, #29
 8000bc8:	d004      	beq.n	8000bd4 <__aeabi_fdiv+0x18c>
 8000bca:	230f      	movs	r3, #15
 8000bcc:	402b      	ands	r3, r5
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	d000      	beq.n	8000bd4 <__aeabi_fdiv+0x18c>
 8000bd2:	3504      	adds	r5, #4
 8000bd4:	016b      	lsls	r3, r5, #5
 8000bd6:	d544      	bpl.n	8000c62 <__aeabi_fdiv+0x21a>
 8000bd8:	2001      	movs	r0, #1
 8000bda:	2500      	movs	r5, #0
 8000bdc:	e795      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000bde:	20ff      	movs	r0, #255	; 0xff
 8000be0:	2500      	movs	r5, #0
 8000be2:	e792      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000be4:	2580      	movs	r5, #128	; 0x80
 8000be6:	2600      	movs	r6, #0
 8000be8:	20ff      	movs	r0, #255	; 0xff
 8000bea:	03ed      	lsls	r5, r5, #15
 8000bec:	e78d      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000bee:	2300      	movs	r3, #0
 8000bf0:	4698      	mov	r8, r3
 8000bf2:	2080      	movs	r0, #128	; 0x80
 8000bf4:	03c0      	lsls	r0, r0, #15
 8000bf6:	4205      	tst	r5, r0
 8000bf8:	d009      	beq.n	8000c0e <__aeabi_fdiv+0x1c6>
 8000bfa:	4643      	mov	r3, r8
 8000bfc:	4203      	tst	r3, r0
 8000bfe:	d106      	bne.n	8000c0e <__aeabi_fdiv+0x1c6>
 8000c00:	4645      	mov	r5, r8
 8000c02:	4305      	orrs	r5, r0
 8000c04:	026d      	lsls	r5, r5, #9
 8000c06:	0026      	movs	r6, r4
 8000c08:	20ff      	movs	r0, #255	; 0xff
 8000c0a:	0a6d      	lsrs	r5, r5, #9
 8000c0c:	e77d      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000c0e:	2080      	movs	r0, #128	; 0x80
 8000c10:	03c0      	lsls	r0, r0, #15
 8000c12:	4305      	orrs	r5, r0
 8000c14:	026d      	lsls	r5, r5, #9
 8000c16:	20ff      	movs	r0, #255	; 0xff
 8000c18:	0a6d      	lsrs	r5, r5, #9
 8000c1a:	e776      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000c1c:	4642      	mov	r2, r8
 8000c1e:	016b      	lsls	r3, r5, #5
 8000c20:	0150      	lsls	r0, r2, #5
 8000c22:	4283      	cmp	r3, r0
 8000c24:	d219      	bcs.n	8000c5a <__aeabi_fdiv+0x212>
 8000c26:	221b      	movs	r2, #27
 8000c28:	2500      	movs	r5, #0
 8000c2a:	3f01      	subs	r7, #1
 8000c2c:	2601      	movs	r6, #1
 8000c2e:	001c      	movs	r4, r3
 8000c30:	006d      	lsls	r5, r5, #1
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	2c00      	cmp	r4, #0
 8000c36:	db01      	blt.n	8000c3c <__aeabi_fdiv+0x1f4>
 8000c38:	4298      	cmp	r0, r3
 8000c3a:	d801      	bhi.n	8000c40 <__aeabi_fdiv+0x1f8>
 8000c3c:	1a1b      	subs	r3, r3, r0
 8000c3e:	4335      	orrs	r5, r6
 8000c40:	3a01      	subs	r2, #1
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d1f3      	bne.n	8000c2e <__aeabi_fdiv+0x1e6>
 8000c46:	1e5a      	subs	r2, r3, #1
 8000c48:	4193      	sbcs	r3, r2
 8000c4a:	431d      	orrs	r5, r3
 8000c4c:	003b      	movs	r3, r7
 8000c4e:	337f      	adds	r3, #127	; 0x7f
 8000c50:	000e      	movs	r6, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	dd00      	ble.n	8000c58 <__aeabi_fdiv+0x210>
 8000c56:	e741      	b.n	8000adc <__aeabi_fdiv+0x94>
 8000c58:	e7aa      	b.n	8000bb0 <__aeabi_fdiv+0x168>
 8000c5a:	221a      	movs	r2, #26
 8000c5c:	2501      	movs	r5, #1
 8000c5e:	1a1b      	subs	r3, r3, r0
 8000c60:	e7e4      	b.n	8000c2c <__aeabi_fdiv+0x1e4>
 8000c62:	01ad      	lsls	r5, r5, #6
 8000c64:	2000      	movs	r0, #0
 8000c66:	0a6d      	lsrs	r5, r5, #9
 8000c68:	e74f      	b.n	8000b0a <__aeabi_fdiv+0xc2>
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	08009b8c 	.word	0x08009b8c
 8000c70:	f7ffffff 	.word	0xf7ffffff
 8000c74:	08009bcc 	.word	0x08009bcc

08000c78 <__aeabi_fmul>:
 8000c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7a:	464f      	mov	r7, r9
 8000c7c:	4646      	mov	r6, r8
 8000c7e:	46d6      	mov	lr, sl
 8000c80:	0244      	lsls	r4, r0, #9
 8000c82:	0045      	lsls	r5, r0, #1
 8000c84:	b5c0      	push	{r6, r7, lr}
 8000c86:	0a64      	lsrs	r4, r4, #9
 8000c88:	1c0f      	adds	r7, r1, #0
 8000c8a:	0e2d      	lsrs	r5, r5, #24
 8000c8c:	0fc6      	lsrs	r6, r0, #31
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d100      	bne.n	8000c94 <__aeabi_fmul+0x1c>
 8000c92:	e08d      	b.n	8000db0 <__aeabi_fmul+0x138>
 8000c94:	2dff      	cmp	r5, #255	; 0xff
 8000c96:	d100      	bne.n	8000c9a <__aeabi_fmul+0x22>
 8000c98:	e092      	b.n	8000dc0 <__aeabi_fmul+0x148>
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	2080      	movs	r0, #128	; 0x80
 8000c9e:	4699      	mov	r9, r3
 8000ca0:	469a      	mov	sl, r3
 8000ca2:	00e4      	lsls	r4, r4, #3
 8000ca4:	04c0      	lsls	r0, r0, #19
 8000ca6:	4304      	orrs	r4, r0
 8000ca8:	3d7f      	subs	r5, #127	; 0x7f
 8000caa:	0278      	lsls	r0, r7, #9
 8000cac:	0a43      	lsrs	r3, r0, #9
 8000cae:	4698      	mov	r8, r3
 8000cb0:	007b      	lsls	r3, r7, #1
 8000cb2:	0e1b      	lsrs	r3, r3, #24
 8000cb4:	0fff      	lsrs	r7, r7, #31
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_fmul+0x44>
 8000cba:	e070      	b.n	8000d9e <__aeabi_fmul+0x126>
 8000cbc:	2bff      	cmp	r3, #255	; 0xff
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_fmul+0x4a>
 8000cc0:	e086      	b.n	8000dd0 <__aeabi_fmul+0x158>
 8000cc2:	4642      	mov	r2, r8
 8000cc4:	00d0      	lsls	r0, r2, #3
 8000cc6:	2280      	movs	r2, #128	; 0x80
 8000cc8:	3b7f      	subs	r3, #127	; 0x7f
 8000cca:	18ed      	adds	r5, r5, r3
 8000ccc:	2300      	movs	r3, #0
 8000cce:	04d2      	lsls	r2, r2, #19
 8000cd0:	4302      	orrs	r2, r0
 8000cd2:	4690      	mov	r8, r2
 8000cd4:	469c      	mov	ip, r3
 8000cd6:	0031      	movs	r1, r6
 8000cd8:	464b      	mov	r3, r9
 8000cda:	4079      	eors	r1, r7
 8000cdc:	1c68      	adds	r0, r5, #1
 8000cde:	2b0f      	cmp	r3, #15
 8000ce0:	d81c      	bhi.n	8000d1c <__aeabi_fmul+0xa4>
 8000ce2:	4a76      	ldr	r2, [pc, #472]	; (8000ebc <__aeabi_fmul+0x244>)
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	58d3      	ldr	r3, [r2, r3]
 8000ce8:	469f      	mov	pc, r3
 8000cea:	0039      	movs	r1, r7
 8000cec:	4644      	mov	r4, r8
 8000cee:	46e2      	mov	sl, ip
 8000cf0:	4653      	mov	r3, sl
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d00f      	beq.n	8000d16 <__aeabi_fmul+0x9e>
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_fmul+0x84>
 8000cfa:	e0d7      	b.n	8000eac <__aeabi_fmul+0x234>
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d137      	bne.n	8000d70 <__aeabi_fmul+0xf8>
 8000d00:	2000      	movs	r0, #0
 8000d02:	2400      	movs	r4, #0
 8000d04:	05c0      	lsls	r0, r0, #23
 8000d06:	4320      	orrs	r0, r4
 8000d08:	07c9      	lsls	r1, r1, #31
 8000d0a:	4308      	orrs	r0, r1
 8000d0c:	bce0      	pop	{r5, r6, r7}
 8000d0e:	46ba      	mov	sl, r7
 8000d10:	46b1      	mov	r9, r6
 8000d12:	46a8      	mov	r8, r5
 8000d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d16:	20ff      	movs	r0, #255	; 0xff
 8000d18:	2400      	movs	r4, #0
 8000d1a:	e7f3      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000d1c:	0c26      	lsrs	r6, r4, #16
 8000d1e:	0424      	lsls	r4, r4, #16
 8000d20:	0c22      	lsrs	r2, r4, #16
 8000d22:	4644      	mov	r4, r8
 8000d24:	0424      	lsls	r4, r4, #16
 8000d26:	0c24      	lsrs	r4, r4, #16
 8000d28:	4643      	mov	r3, r8
 8000d2a:	0027      	movs	r7, r4
 8000d2c:	0c1b      	lsrs	r3, r3, #16
 8000d2e:	4357      	muls	r7, r2
 8000d30:	4374      	muls	r4, r6
 8000d32:	435a      	muls	r2, r3
 8000d34:	435e      	muls	r6, r3
 8000d36:	1912      	adds	r2, r2, r4
 8000d38:	0c3b      	lsrs	r3, r7, #16
 8000d3a:	189b      	adds	r3, r3, r2
 8000d3c:	429c      	cmp	r4, r3
 8000d3e:	d903      	bls.n	8000d48 <__aeabi_fmul+0xd0>
 8000d40:	2280      	movs	r2, #128	; 0x80
 8000d42:	0252      	lsls	r2, r2, #9
 8000d44:	4694      	mov	ip, r2
 8000d46:	4466      	add	r6, ip
 8000d48:	043f      	lsls	r7, r7, #16
 8000d4a:	041a      	lsls	r2, r3, #16
 8000d4c:	0c3f      	lsrs	r7, r7, #16
 8000d4e:	19d2      	adds	r2, r2, r7
 8000d50:	0194      	lsls	r4, r2, #6
 8000d52:	1e67      	subs	r7, r4, #1
 8000d54:	41bc      	sbcs	r4, r7
 8000d56:	0c1b      	lsrs	r3, r3, #16
 8000d58:	0e92      	lsrs	r2, r2, #26
 8000d5a:	199b      	adds	r3, r3, r6
 8000d5c:	4314      	orrs	r4, r2
 8000d5e:	019b      	lsls	r3, r3, #6
 8000d60:	431c      	orrs	r4, r3
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	d400      	bmi.n	8000d68 <__aeabi_fmul+0xf0>
 8000d66:	e09b      	b.n	8000ea0 <__aeabi_fmul+0x228>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	0862      	lsrs	r2, r4, #1
 8000d6c:	401c      	ands	r4, r3
 8000d6e:	4314      	orrs	r4, r2
 8000d70:	0002      	movs	r2, r0
 8000d72:	327f      	adds	r2, #127	; 0x7f
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	dd64      	ble.n	8000e42 <__aeabi_fmul+0x1ca>
 8000d78:	0763      	lsls	r3, r4, #29
 8000d7a:	d004      	beq.n	8000d86 <__aeabi_fmul+0x10e>
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	4023      	ands	r3, r4
 8000d80:	2b04      	cmp	r3, #4
 8000d82:	d000      	beq.n	8000d86 <__aeabi_fmul+0x10e>
 8000d84:	3404      	adds	r4, #4
 8000d86:	0123      	lsls	r3, r4, #4
 8000d88:	d503      	bpl.n	8000d92 <__aeabi_fmul+0x11a>
 8000d8a:	0002      	movs	r2, r0
 8000d8c:	4b4c      	ldr	r3, [pc, #304]	; (8000ec0 <__aeabi_fmul+0x248>)
 8000d8e:	3280      	adds	r2, #128	; 0x80
 8000d90:	401c      	ands	r4, r3
 8000d92:	2afe      	cmp	r2, #254	; 0xfe
 8000d94:	dcbf      	bgt.n	8000d16 <__aeabi_fmul+0x9e>
 8000d96:	01a4      	lsls	r4, r4, #6
 8000d98:	0a64      	lsrs	r4, r4, #9
 8000d9a:	b2d0      	uxtb	r0, r2
 8000d9c:	e7b2      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000d9e:	4643      	mov	r3, r8
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d13d      	bne.n	8000e20 <__aeabi_fmul+0x1a8>
 8000da4:	464a      	mov	r2, r9
 8000da6:	3301      	adds	r3, #1
 8000da8:	431a      	orrs	r2, r3
 8000daa:	4691      	mov	r9, r2
 8000dac:	469c      	mov	ip, r3
 8000dae:	e792      	b.n	8000cd6 <__aeabi_fmul+0x5e>
 8000db0:	2c00      	cmp	r4, #0
 8000db2:	d129      	bne.n	8000e08 <__aeabi_fmul+0x190>
 8000db4:	2304      	movs	r3, #4
 8000db6:	4699      	mov	r9, r3
 8000db8:	3b03      	subs	r3, #3
 8000dba:	2500      	movs	r5, #0
 8000dbc:	469a      	mov	sl, r3
 8000dbe:	e774      	b.n	8000caa <__aeabi_fmul+0x32>
 8000dc0:	2c00      	cmp	r4, #0
 8000dc2:	d11b      	bne.n	8000dfc <__aeabi_fmul+0x184>
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	4699      	mov	r9, r3
 8000dc8:	3b06      	subs	r3, #6
 8000dca:	25ff      	movs	r5, #255	; 0xff
 8000dcc:	469a      	mov	sl, r3
 8000dce:	e76c      	b.n	8000caa <__aeabi_fmul+0x32>
 8000dd0:	4643      	mov	r3, r8
 8000dd2:	35ff      	adds	r5, #255	; 0xff
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d10b      	bne.n	8000df0 <__aeabi_fmul+0x178>
 8000dd8:	2302      	movs	r3, #2
 8000dda:	464a      	mov	r2, r9
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	4691      	mov	r9, r2
 8000de0:	469c      	mov	ip, r3
 8000de2:	e778      	b.n	8000cd6 <__aeabi_fmul+0x5e>
 8000de4:	4653      	mov	r3, sl
 8000de6:	0031      	movs	r1, r6
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d000      	beq.n	8000dee <__aeabi_fmul+0x176>
 8000dec:	e783      	b.n	8000cf6 <__aeabi_fmul+0x7e>
 8000dee:	e792      	b.n	8000d16 <__aeabi_fmul+0x9e>
 8000df0:	2303      	movs	r3, #3
 8000df2:	464a      	mov	r2, r9
 8000df4:	431a      	orrs	r2, r3
 8000df6:	4691      	mov	r9, r2
 8000df8:	469c      	mov	ip, r3
 8000dfa:	e76c      	b.n	8000cd6 <__aeabi_fmul+0x5e>
 8000dfc:	230c      	movs	r3, #12
 8000dfe:	4699      	mov	r9, r3
 8000e00:	3b09      	subs	r3, #9
 8000e02:	25ff      	movs	r5, #255	; 0xff
 8000e04:	469a      	mov	sl, r3
 8000e06:	e750      	b.n	8000caa <__aeabi_fmul+0x32>
 8000e08:	0020      	movs	r0, r4
 8000e0a:	f002 f8df 	bl	8002fcc <__clzsi2>
 8000e0e:	2576      	movs	r5, #118	; 0x76
 8000e10:	1f43      	subs	r3, r0, #5
 8000e12:	409c      	lsls	r4, r3
 8000e14:	2300      	movs	r3, #0
 8000e16:	426d      	negs	r5, r5
 8000e18:	4699      	mov	r9, r3
 8000e1a:	469a      	mov	sl, r3
 8000e1c:	1a2d      	subs	r5, r5, r0
 8000e1e:	e744      	b.n	8000caa <__aeabi_fmul+0x32>
 8000e20:	4640      	mov	r0, r8
 8000e22:	f002 f8d3 	bl	8002fcc <__clzsi2>
 8000e26:	4642      	mov	r2, r8
 8000e28:	1f43      	subs	r3, r0, #5
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	1a2d      	subs	r5, r5, r0
 8000e30:	4690      	mov	r8, r2
 8000e32:	469c      	mov	ip, r3
 8000e34:	3d76      	subs	r5, #118	; 0x76
 8000e36:	e74e      	b.n	8000cd6 <__aeabi_fmul+0x5e>
 8000e38:	2480      	movs	r4, #128	; 0x80
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	20ff      	movs	r0, #255	; 0xff
 8000e3e:	03e4      	lsls	r4, r4, #15
 8000e40:	e760      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000e42:	2301      	movs	r3, #1
 8000e44:	1a9b      	subs	r3, r3, r2
 8000e46:	2b1b      	cmp	r3, #27
 8000e48:	dd00      	ble.n	8000e4c <__aeabi_fmul+0x1d4>
 8000e4a:	e759      	b.n	8000d00 <__aeabi_fmul+0x88>
 8000e4c:	0022      	movs	r2, r4
 8000e4e:	309e      	adds	r0, #158	; 0x9e
 8000e50:	40da      	lsrs	r2, r3
 8000e52:	4084      	lsls	r4, r0
 8000e54:	0013      	movs	r3, r2
 8000e56:	1e62      	subs	r2, r4, #1
 8000e58:	4194      	sbcs	r4, r2
 8000e5a:	431c      	orrs	r4, r3
 8000e5c:	0763      	lsls	r3, r4, #29
 8000e5e:	d004      	beq.n	8000e6a <__aeabi_fmul+0x1f2>
 8000e60:	230f      	movs	r3, #15
 8000e62:	4023      	ands	r3, r4
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	d000      	beq.n	8000e6a <__aeabi_fmul+0x1f2>
 8000e68:	3404      	adds	r4, #4
 8000e6a:	0163      	lsls	r3, r4, #5
 8000e6c:	d51a      	bpl.n	8000ea4 <__aeabi_fmul+0x22c>
 8000e6e:	2001      	movs	r0, #1
 8000e70:	2400      	movs	r4, #0
 8000e72:	e747      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000e74:	2080      	movs	r0, #128	; 0x80
 8000e76:	03c0      	lsls	r0, r0, #15
 8000e78:	4204      	tst	r4, r0
 8000e7a:	d009      	beq.n	8000e90 <__aeabi_fmul+0x218>
 8000e7c:	4643      	mov	r3, r8
 8000e7e:	4203      	tst	r3, r0
 8000e80:	d106      	bne.n	8000e90 <__aeabi_fmul+0x218>
 8000e82:	4644      	mov	r4, r8
 8000e84:	4304      	orrs	r4, r0
 8000e86:	0264      	lsls	r4, r4, #9
 8000e88:	0039      	movs	r1, r7
 8000e8a:	20ff      	movs	r0, #255	; 0xff
 8000e8c:	0a64      	lsrs	r4, r4, #9
 8000e8e:	e739      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000e90:	2080      	movs	r0, #128	; 0x80
 8000e92:	03c0      	lsls	r0, r0, #15
 8000e94:	4304      	orrs	r4, r0
 8000e96:	0264      	lsls	r4, r4, #9
 8000e98:	0031      	movs	r1, r6
 8000e9a:	20ff      	movs	r0, #255	; 0xff
 8000e9c:	0a64      	lsrs	r4, r4, #9
 8000e9e:	e731      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000ea0:	0028      	movs	r0, r5
 8000ea2:	e765      	b.n	8000d70 <__aeabi_fmul+0xf8>
 8000ea4:	01a4      	lsls	r4, r4, #6
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	0a64      	lsrs	r4, r4, #9
 8000eaa:	e72b      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000eac:	2080      	movs	r0, #128	; 0x80
 8000eae:	03c0      	lsls	r0, r0, #15
 8000eb0:	4304      	orrs	r4, r0
 8000eb2:	0264      	lsls	r4, r4, #9
 8000eb4:	20ff      	movs	r0, #255	; 0xff
 8000eb6:	0a64      	lsrs	r4, r4, #9
 8000eb8:	e724      	b.n	8000d04 <__aeabi_fmul+0x8c>
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	08009c0c 	.word	0x08009c0c
 8000ec0:	f7ffffff 	.word	0xf7ffffff

08000ec4 <__aeabi_fsub>:
 8000ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec6:	46ce      	mov	lr, r9
 8000ec8:	4647      	mov	r7, r8
 8000eca:	0243      	lsls	r3, r0, #9
 8000ecc:	0a5b      	lsrs	r3, r3, #9
 8000ece:	024e      	lsls	r6, r1, #9
 8000ed0:	00da      	lsls	r2, r3, #3
 8000ed2:	4694      	mov	ip, r2
 8000ed4:	0a72      	lsrs	r2, r6, #9
 8000ed6:	4691      	mov	r9, r2
 8000ed8:	0045      	lsls	r5, r0, #1
 8000eda:	004a      	lsls	r2, r1, #1
 8000edc:	b580      	push	{r7, lr}
 8000ede:	0e2d      	lsrs	r5, r5, #24
 8000ee0:	001f      	movs	r7, r3
 8000ee2:	0fc4      	lsrs	r4, r0, #31
 8000ee4:	0e12      	lsrs	r2, r2, #24
 8000ee6:	0fc9      	lsrs	r1, r1, #31
 8000ee8:	09b6      	lsrs	r6, r6, #6
 8000eea:	2aff      	cmp	r2, #255	; 0xff
 8000eec:	d05b      	beq.n	8000fa6 <__aeabi_fsub+0xe2>
 8000eee:	2001      	movs	r0, #1
 8000ef0:	4041      	eors	r1, r0
 8000ef2:	428c      	cmp	r4, r1
 8000ef4:	d039      	beq.n	8000f6a <__aeabi_fsub+0xa6>
 8000ef6:	1aa8      	subs	r0, r5, r2
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	dd5a      	ble.n	8000fb2 <__aeabi_fsub+0xee>
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d06a      	beq.n	8000fd6 <__aeabi_fsub+0x112>
 8000f00:	2dff      	cmp	r5, #255	; 0xff
 8000f02:	d100      	bne.n	8000f06 <__aeabi_fsub+0x42>
 8000f04:	e0d9      	b.n	80010ba <__aeabi_fsub+0x1f6>
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	04d2      	lsls	r2, r2, #19
 8000f0a:	4316      	orrs	r6, r2
 8000f0c:	281b      	cmp	r0, #27
 8000f0e:	dc00      	bgt.n	8000f12 <__aeabi_fsub+0x4e>
 8000f10:	e0e9      	b.n	80010e6 <__aeabi_fsub+0x222>
 8000f12:	2001      	movs	r0, #1
 8000f14:	4663      	mov	r3, ip
 8000f16:	1a18      	subs	r0, r3, r0
 8000f18:	0143      	lsls	r3, r0, #5
 8000f1a:	d400      	bmi.n	8000f1e <__aeabi_fsub+0x5a>
 8000f1c:	e0b4      	b.n	8001088 <__aeabi_fsub+0x1c4>
 8000f1e:	0180      	lsls	r0, r0, #6
 8000f20:	0987      	lsrs	r7, r0, #6
 8000f22:	0038      	movs	r0, r7
 8000f24:	f002 f852 	bl	8002fcc <__clzsi2>
 8000f28:	3805      	subs	r0, #5
 8000f2a:	4087      	lsls	r7, r0
 8000f2c:	4285      	cmp	r5, r0
 8000f2e:	dc00      	bgt.n	8000f32 <__aeabi_fsub+0x6e>
 8000f30:	e0cc      	b.n	80010cc <__aeabi_fsub+0x208>
 8000f32:	1a2d      	subs	r5, r5, r0
 8000f34:	48b5      	ldr	r0, [pc, #724]	; (800120c <__aeabi_fsub+0x348>)
 8000f36:	4038      	ands	r0, r7
 8000f38:	0743      	lsls	r3, r0, #29
 8000f3a:	d004      	beq.n	8000f46 <__aeabi_fsub+0x82>
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	4003      	ands	r3, r0
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d000      	beq.n	8000f46 <__aeabi_fsub+0x82>
 8000f44:	3004      	adds	r0, #4
 8000f46:	0143      	lsls	r3, r0, #5
 8000f48:	d400      	bmi.n	8000f4c <__aeabi_fsub+0x88>
 8000f4a:	e0a0      	b.n	800108e <__aeabi_fsub+0x1ca>
 8000f4c:	1c6a      	adds	r2, r5, #1
 8000f4e:	2dfe      	cmp	r5, #254	; 0xfe
 8000f50:	d100      	bne.n	8000f54 <__aeabi_fsub+0x90>
 8000f52:	e08d      	b.n	8001070 <__aeabi_fsub+0x1ac>
 8000f54:	0180      	lsls	r0, r0, #6
 8000f56:	0a47      	lsrs	r7, r0, #9
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	05d0      	lsls	r0, r2, #23
 8000f5c:	4338      	orrs	r0, r7
 8000f5e:	07e4      	lsls	r4, r4, #31
 8000f60:	4320      	orrs	r0, r4
 8000f62:	bcc0      	pop	{r6, r7}
 8000f64:	46b9      	mov	r9, r7
 8000f66:	46b0      	mov	r8, r6
 8000f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f6a:	1aa8      	subs	r0, r5, r2
 8000f6c:	4680      	mov	r8, r0
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	dd45      	ble.n	8000ffe <__aeabi_fsub+0x13a>
 8000f72:	2a00      	cmp	r2, #0
 8000f74:	d070      	beq.n	8001058 <__aeabi_fsub+0x194>
 8000f76:	2dff      	cmp	r5, #255	; 0xff
 8000f78:	d100      	bne.n	8000f7c <__aeabi_fsub+0xb8>
 8000f7a:	e09e      	b.n	80010ba <__aeabi_fsub+0x1f6>
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	04db      	lsls	r3, r3, #19
 8000f80:	431e      	orrs	r6, r3
 8000f82:	4643      	mov	r3, r8
 8000f84:	2b1b      	cmp	r3, #27
 8000f86:	dc00      	bgt.n	8000f8a <__aeabi_fsub+0xc6>
 8000f88:	e0d2      	b.n	8001130 <__aeabi_fsub+0x26c>
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	4460      	add	r0, ip
 8000f8e:	0143      	lsls	r3, r0, #5
 8000f90:	d57a      	bpl.n	8001088 <__aeabi_fsub+0x1c4>
 8000f92:	3501      	adds	r5, #1
 8000f94:	2dff      	cmp	r5, #255	; 0xff
 8000f96:	d06b      	beq.n	8001070 <__aeabi_fsub+0x1ac>
 8000f98:	2301      	movs	r3, #1
 8000f9a:	4a9d      	ldr	r2, [pc, #628]	; (8001210 <__aeabi_fsub+0x34c>)
 8000f9c:	4003      	ands	r3, r0
 8000f9e:	0840      	lsrs	r0, r0, #1
 8000fa0:	4010      	ands	r0, r2
 8000fa2:	4318      	orrs	r0, r3
 8000fa4:	e7c8      	b.n	8000f38 <__aeabi_fsub+0x74>
 8000fa6:	2e00      	cmp	r6, #0
 8000fa8:	d020      	beq.n	8000fec <__aeabi_fsub+0x128>
 8000faa:	428c      	cmp	r4, r1
 8000fac:	d023      	beq.n	8000ff6 <__aeabi_fsub+0x132>
 8000fae:	0028      	movs	r0, r5
 8000fb0:	38ff      	subs	r0, #255	; 0xff
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	d039      	beq.n	800102a <__aeabi_fsub+0x166>
 8000fb6:	1b57      	subs	r7, r2, r5
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d000      	beq.n	8000fbe <__aeabi_fsub+0xfa>
 8000fbc:	e09d      	b.n	80010fa <__aeabi_fsub+0x236>
 8000fbe:	4663      	mov	r3, ip
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_fsub+0x102>
 8000fc4:	e0db      	b.n	800117e <__aeabi_fsub+0x2ba>
 8000fc6:	1e7b      	subs	r3, r7, #1
 8000fc8:	2f01      	cmp	r7, #1
 8000fca:	d100      	bne.n	8000fce <__aeabi_fsub+0x10a>
 8000fcc:	e10d      	b.n	80011ea <__aeabi_fsub+0x326>
 8000fce:	2fff      	cmp	r7, #255	; 0xff
 8000fd0:	d071      	beq.n	80010b6 <__aeabi_fsub+0x1f2>
 8000fd2:	001f      	movs	r7, r3
 8000fd4:	e098      	b.n	8001108 <__aeabi_fsub+0x244>
 8000fd6:	2e00      	cmp	r6, #0
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_fsub+0x118>
 8000fda:	e0a7      	b.n	800112c <__aeabi_fsub+0x268>
 8000fdc:	1e42      	subs	r2, r0, #1
 8000fde:	2801      	cmp	r0, #1
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_fsub+0x120>
 8000fe2:	e0e6      	b.n	80011b2 <__aeabi_fsub+0x2ee>
 8000fe4:	28ff      	cmp	r0, #255	; 0xff
 8000fe6:	d068      	beq.n	80010ba <__aeabi_fsub+0x1f6>
 8000fe8:	0010      	movs	r0, r2
 8000fea:	e78f      	b.n	8000f0c <__aeabi_fsub+0x48>
 8000fec:	2001      	movs	r0, #1
 8000fee:	4041      	eors	r1, r0
 8000ff0:	42a1      	cmp	r1, r4
 8000ff2:	d000      	beq.n	8000ff6 <__aeabi_fsub+0x132>
 8000ff4:	e77f      	b.n	8000ef6 <__aeabi_fsub+0x32>
 8000ff6:	20ff      	movs	r0, #255	; 0xff
 8000ff8:	4240      	negs	r0, r0
 8000ffa:	4680      	mov	r8, r0
 8000ffc:	44a8      	add	r8, r5
 8000ffe:	4640      	mov	r0, r8
 8001000:	2800      	cmp	r0, #0
 8001002:	d038      	beq.n	8001076 <__aeabi_fsub+0x1b2>
 8001004:	1b51      	subs	r1, r2, r5
 8001006:	2d00      	cmp	r5, #0
 8001008:	d100      	bne.n	800100c <__aeabi_fsub+0x148>
 800100a:	e0ae      	b.n	800116a <__aeabi_fsub+0x2a6>
 800100c:	2aff      	cmp	r2, #255	; 0xff
 800100e:	d100      	bne.n	8001012 <__aeabi_fsub+0x14e>
 8001010:	e0df      	b.n	80011d2 <__aeabi_fsub+0x30e>
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	4660      	mov	r0, ip
 8001016:	04db      	lsls	r3, r3, #19
 8001018:	4318      	orrs	r0, r3
 800101a:	4684      	mov	ip, r0
 800101c:	291b      	cmp	r1, #27
 800101e:	dc00      	bgt.n	8001022 <__aeabi_fsub+0x15e>
 8001020:	e0d9      	b.n	80011d6 <__aeabi_fsub+0x312>
 8001022:	2001      	movs	r0, #1
 8001024:	0015      	movs	r5, r2
 8001026:	1980      	adds	r0, r0, r6
 8001028:	e7b1      	b.n	8000f8e <__aeabi_fsub+0xca>
 800102a:	20fe      	movs	r0, #254	; 0xfe
 800102c:	1c6a      	adds	r2, r5, #1
 800102e:	4210      	tst	r0, r2
 8001030:	d171      	bne.n	8001116 <__aeabi_fsub+0x252>
 8001032:	2d00      	cmp	r5, #0
 8001034:	d000      	beq.n	8001038 <__aeabi_fsub+0x174>
 8001036:	e0a6      	b.n	8001186 <__aeabi_fsub+0x2c2>
 8001038:	4663      	mov	r3, ip
 800103a:	2b00      	cmp	r3, #0
 800103c:	d100      	bne.n	8001040 <__aeabi_fsub+0x17c>
 800103e:	e0d9      	b.n	80011f4 <__aeabi_fsub+0x330>
 8001040:	2200      	movs	r2, #0
 8001042:	2e00      	cmp	r6, #0
 8001044:	d100      	bne.n	8001048 <__aeabi_fsub+0x184>
 8001046:	e788      	b.n	8000f5a <__aeabi_fsub+0x96>
 8001048:	1b98      	subs	r0, r3, r6
 800104a:	0143      	lsls	r3, r0, #5
 800104c:	d400      	bmi.n	8001050 <__aeabi_fsub+0x18c>
 800104e:	e0e1      	b.n	8001214 <__aeabi_fsub+0x350>
 8001050:	4663      	mov	r3, ip
 8001052:	000c      	movs	r4, r1
 8001054:	1af0      	subs	r0, r6, r3
 8001056:	e76f      	b.n	8000f38 <__aeabi_fsub+0x74>
 8001058:	2e00      	cmp	r6, #0
 800105a:	d100      	bne.n	800105e <__aeabi_fsub+0x19a>
 800105c:	e0b7      	b.n	80011ce <__aeabi_fsub+0x30a>
 800105e:	0002      	movs	r2, r0
 8001060:	3a01      	subs	r2, #1
 8001062:	2801      	cmp	r0, #1
 8001064:	d100      	bne.n	8001068 <__aeabi_fsub+0x1a4>
 8001066:	e09c      	b.n	80011a2 <__aeabi_fsub+0x2de>
 8001068:	28ff      	cmp	r0, #255	; 0xff
 800106a:	d026      	beq.n	80010ba <__aeabi_fsub+0x1f6>
 800106c:	4690      	mov	r8, r2
 800106e:	e788      	b.n	8000f82 <__aeabi_fsub+0xbe>
 8001070:	22ff      	movs	r2, #255	; 0xff
 8001072:	2700      	movs	r7, #0
 8001074:	e771      	b.n	8000f5a <__aeabi_fsub+0x96>
 8001076:	20fe      	movs	r0, #254	; 0xfe
 8001078:	1c6a      	adds	r2, r5, #1
 800107a:	4210      	tst	r0, r2
 800107c:	d064      	beq.n	8001148 <__aeabi_fsub+0x284>
 800107e:	2aff      	cmp	r2, #255	; 0xff
 8001080:	d0f6      	beq.n	8001070 <__aeabi_fsub+0x1ac>
 8001082:	0015      	movs	r5, r2
 8001084:	4466      	add	r6, ip
 8001086:	0870      	lsrs	r0, r6, #1
 8001088:	0743      	lsls	r3, r0, #29
 800108a:	d000      	beq.n	800108e <__aeabi_fsub+0x1ca>
 800108c:	e756      	b.n	8000f3c <__aeabi_fsub+0x78>
 800108e:	08c3      	lsrs	r3, r0, #3
 8001090:	2dff      	cmp	r5, #255	; 0xff
 8001092:	d012      	beq.n	80010ba <__aeabi_fsub+0x1f6>
 8001094:	025b      	lsls	r3, r3, #9
 8001096:	0a5f      	lsrs	r7, r3, #9
 8001098:	b2ea      	uxtb	r2, r5
 800109a:	e75e      	b.n	8000f5a <__aeabi_fsub+0x96>
 800109c:	4662      	mov	r2, ip
 800109e:	2a00      	cmp	r2, #0
 80010a0:	d100      	bne.n	80010a4 <__aeabi_fsub+0x1e0>
 80010a2:	e096      	b.n	80011d2 <__aeabi_fsub+0x30e>
 80010a4:	2e00      	cmp	r6, #0
 80010a6:	d008      	beq.n	80010ba <__aeabi_fsub+0x1f6>
 80010a8:	2280      	movs	r2, #128	; 0x80
 80010aa:	03d2      	lsls	r2, r2, #15
 80010ac:	4213      	tst	r3, r2
 80010ae:	d004      	beq.n	80010ba <__aeabi_fsub+0x1f6>
 80010b0:	4648      	mov	r0, r9
 80010b2:	4210      	tst	r0, r2
 80010b4:	d101      	bne.n	80010ba <__aeabi_fsub+0x1f6>
 80010b6:	000c      	movs	r4, r1
 80010b8:	464b      	mov	r3, r9
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0d8      	beq.n	8001070 <__aeabi_fsub+0x1ac>
 80010be:	2780      	movs	r7, #128	; 0x80
 80010c0:	03ff      	lsls	r7, r7, #15
 80010c2:	431f      	orrs	r7, r3
 80010c4:	027f      	lsls	r7, r7, #9
 80010c6:	22ff      	movs	r2, #255	; 0xff
 80010c8:	0a7f      	lsrs	r7, r7, #9
 80010ca:	e746      	b.n	8000f5a <__aeabi_fsub+0x96>
 80010cc:	2320      	movs	r3, #32
 80010ce:	003a      	movs	r2, r7
 80010d0:	1b45      	subs	r5, r0, r5
 80010d2:	0038      	movs	r0, r7
 80010d4:	3501      	adds	r5, #1
 80010d6:	40ea      	lsrs	r2, r5
 80010d8:	1b5d      	subs	r5, r3, r5
 80010da:	40a8      	lsls	r0, r5
 80010dc:	1e43      	subs	r3, r0, #1
 80010de:	4198      	sbcs	r0, r3
 80010e0:	2500      	movs	r5, #0
 80010e2:	4310      	orrs	r0, r2
 80010e4:	e728      	b.n	8000f38 <__aeabi_fsub+0x74>
 80010e6:	2320      	movs	r3, #32
 80010e8:	1a1b      	subs	r3, r3, r0
 80010ea:	0032      	movs	r2, r6
 80010ec:	409e      	lsls	r6, r3
 80010ee:	40c2      	lsrs	r2, r0
 80010f0:	0030      	movs	r0, r6
 80010f2:	1e43      	subs	r3, r0, #1
 80010f4:	4198      	sbcs	r0, r3
 80010f6:	4310      	orrs	r0, r2
 80010f8:	e70c      	b.n	8000f14 <__aeabi_fsub+0x50>
 80010fa:	2aff      	cmp	r2, #255	; 0xff
 80010fc:	d0db      	beq.n	80010b6 <__aeabi_fsub+0x1f2>
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	4660      	mov	r0, ip
 8001102:	04db      	lsls	r3, r3, #19
 8001104:	4318      	orrs	r0, r3
 8001106:	4684      	mov	ip, r0
 8001108:	2f1b      	cmp	r7, #27
 800110a:	dd56      	ble.n	80011ba <__aeabi_fsub+0x2f6>
 800110c:	2001      	movs	r0, #1
 800110e:	000c      	movs	r4, r1
 8001110:	0015      	movs	r5, r2
 8001112:	1a30      	subs	r0, r6, r0
 8001114:	e700      	b.n	8000f18 <__aeabi_fsub+0x54>
 8001116:	4663      	mov	r3, ip
 8001118:	1b9f      	subs	r7, r3, r6
 800111a:	017b      	lsls	r3, r7, #5
 800111c:	d43d      	bmi.n	800119a <__aeabi_fsub+0x2d6>
 800111e:	2f00      	cmp	r7, #0
 8001120:	d000      	beq.n	8001124 <__aeabi_fsub+0x260>
 8001122:	e6fe      	b.n	8000f22 <__aeabi_fsub+0x5e>
 8001124:	2400      	movs	r4, #0
 8001126:	2200      	movs	r2, #0
 8001128:	2700      	movs	r7, #0
 800112a:	e716      	b.n	8000f5a <__aeabi_fsub+0x96>
 800112c:	0005      	movs	r5, r0
 800112e:	e7af      	b.n	8001090 <__aeabi_fsub+0x1cc>
 8001130:	0032      	movs	r2, r6
 8001132:	4643      	mov	r3, r8
 8001134:	4641      	mov	r1, r8
 8001136:	40da      	lsrs	r2, r3
 8001138:	2320      	movs	r3, #32
 800113a:	1a5b      	subs	r3, r3, r1
 800113c:	409e      	lsls	r6, r3
 800113e:	0030      	movs	r0, r6
 8001140:	1e43      	subs	r3, r0, #1
 8001142:	4198      	sbcs	r0, r3
 8001144:	4310      	orrs	r0, r2
 8001146:	e721      	b.n	8000f8c <__aeabi_fsub+0xc8>
 8001148:	2d00      	cmp	r5, #0
 800114a:	d1a7      	bne.n	800109c <__aeabi_fsub+0x1d8>
 800114c:	4663      	mov	r3, ip
 800114e:	2b00      	cmp	r3, #0
 8001150:	d059      	beq.n	8001206 <__aeabi_fsub+0x342>
 8001152:	2200      	movs	r2, #0
 8001154:	2e00      	cmp	r6, #0
 8001156:	d100      	bne.n	800115a <__aeabi_fsub+0x296>
 8001158:	e6ff      	b.n	8000f5a <__aeabi_fsub+0x96>
 800115a:	0030      	movs	r0, r6
 800115c:	4460      	add	r0, ip
 800115e:	0143      	lsls	r3, r0, #5
 8001160:	d592      	bpl.n	8001088 <__aeabi_fsub+0x1c4>
 8001162:	4b2a      	ldr	r3, [pc, #168]	; (800120c <__aeabi_fsub+0x348>)
 8001164:	3501      	adds	r5, #1
 8001166:	4018      	ands	r0, r3
 8001168:	e78e      	b.n	8001088 <__aeabi_fsub+0x1c4>
 800116a:	4663      	mov	r3, ip
 800116c:	2b00      	cmp	r3, #0
 800116e:	d047      	beq.n	8001200 <__aeabi_fsub+0x33c>
 8001170:	1e4b      	subs	r3, r1, #1
 8001172:	2901      	cmp	r1, #1
 8001174:	d015      	beq.n	80011a2 <__aeabi_fsub+0x2de>
 8001176:	29ff      	cmp	r1, #255	; 0xff
 8001178:	d02b      	beq.n	80011d2 <__aeabi_fsub+0x30e>
 800117a:	0019      	movs	r1, r3
 800117c:	e74e      	b.n	800101c <__aeabi_fsub+0x158>
 800117e:	000c      	movs	r4, r1
 8001180:	464b      	mov	r3, r9
 8001182:	003d      	movs	r5, r7
 8001184:	e784      	b.n	8001090 <__aeabi_fsub+0x1cc>
 8001186:	4662      	mov	r2, ip
 8001188:	2a00      	cmp	r2, #0
 800118a:	d18b      	bne.n	80010a4 <__aeabi_fsub+0x1e0>
 800118c:	2e00      	cmp	r6, #0
 800118e:	d192      	bne.n	80010b6 <__aeabi_fsub+0x1f2>
 8001190:	2780      	movs	r7, #128	; 0x80
 8001192:	2400      	movs	r4, #0
 8001194:	22ff      	movs	r2, #255	; 0xff
 8001196:	03ff      	lsls	r7, r7, #15
 8001198:	e6df      	b.n	8000f5a <__aeabi_fsub+0x96>
 800119a:	4663      	mov	r3, ip
 800119c:	000c      	movs	r4, r1
 800119e:	1af7      	subs	r7, r6, r3
 80011a0:	e6bf      	b.n	8000f22 <__aeabi_fsub+0x5e>
 80011a2:	0030      	movs	r0, r6
 80011a4:	4460      	add	r0, ip
 80011a6:	2501      	movs	r5, #1
 80011a8:	0143      	lsls	r3, r0, #5
 80011aa:	d400      	bmi.n	80011ae <__aeabi_fsub+0x2ea>
 80011ac:	e76c      	b.n	8001088 <__aeabi_fsub+0x1c4>
 80011ae:	2502      	movs	r5, #2
 80011b0:	e6f2      	b.n	8000f98 <__aeabi_fsub+0xd4>
 80011b2:	4663      	mov	r3, ip
 80011b4:	2501      	movs	r5, #1
 80011b6:	1b98      	subs	r0, r3, r6
 80011b8:	e6ae      	b.n	8000f18 <__aeabi_fsub+0x54>
 80011ba:	2320      	movs	r3, #32
 80011bc:	4664      	mov	r4, ip
 80011be:	4660      	mov	r0, ip
 80011c0:	40fc      	lsrs	r4, r7
 80011c2:	1bdf      	subs	r7, r3, r7
 80011c4:	40b8      	lsls	r0, r7
 80011c6:	1e43      	subs	r3, r0, #1
 80011c8:	4198      	sbcs	r0, r3
 80011ca:	4320      	orrs	r0, r4
 80011cc:	e79f      	b.n	800110e <__aeabi_fsub+0x24a>
 80011ce:	0005      	movs	r5, r0
 80011d0:	e75e      	b.n	8001090 <__aeabi_fsub+0x1cc>
 80011d2:	464b      	mov	r3, r9
 80011d4:	e771      	b.n	80010ba <__aeabi_fsub+0x1f6>
 80011d6:	2320      	movs	r3, #32
 80011d8:	4665      	mov	r5, ip
 80011da:	4660      	mov	r0, ip
 80011dc:	40cd      	lsrs	r5, r1
 80011de:	1a59      	subs	r1, r3, r1
 80011e0:	4088      	lsls	r0, r1
 80011e2:	1e43      	subs	r3, r0, #1
 80011e4:	4198      	sbcs	r0, r3
 80011e6:	4328      	orrs	r0, r5
 80011e8:	e71c      	b.n	8001024 <__aeabi_fsub+0x160>
 80011ea:	4663      	mov	r3, ip
 80011ec:	000c      	movs	r4, r1
 80011ee:	2501      	movs	r5, #1
 80011f0:	1af0      	subs	r0, r6, r3
 80011f2:	e691      	b.n	8000f18 <__aeabi_fsub+0x54>
 80011f4:	2e00      	cmp	r6, #0
 80011f6:	d095      	beq.n	8001124 <__aeabi_fsub+0x260>
 80011f8:	000c      	movs	r4, r1
 80011fa:	464f      	mov	r7, r9
 80011fc:	2200      	movs	r2, #0
 80011fe:	e6ac      	b.n	8000f5a <__aeabi_fsub+0x96>
 8001200:	464b      	mov	r3, r9
 8001202:	000d      	movs	r5, r1
 8001204:	e744      	b.n	8001090 <__aeabi_fsub+0x1cc>
 8001206:	464f      	mov	r7, r9
 8001208:	2200      	movs	r2, #0
 800120a:	e6a6      	b.n	8000f5a <__aeabi_fsub+0x96>
 800120c:	fbffffff 	.word	0xfbffffff
 8001210:	7dffffff 	.word	0x7dffffff
 8001214:	2800      	cmp	r0, #0
 8001216:	d000      	beq.n	800121a <__aeabi_fsub+0x356>
 8001218:	e736      	b.n	8001088 <__aeabi_fsub+0x1c4>
 800121a:	2400      	movs	r4, #0
 800121c:	2700      	movs	r7, #0
 800121e:	e69c      	b.n	8000f5a <__aeabi_fsub+0x96>

08001220 <__aeabi_f2iz>:
 8001220:	0241      	lsls	r1, r0, #9
 8001222:	0042      	lsls	r2, r0, #1
 8001224:	0fc3      	lsrs	r3, r0, #31
 8001226:	0a49      	lsrs	r1, r1, #9
 8001228:	2000      	movs	r0, #0
 800122a:	0e12      	lsrs	r2, r2, #24
 800122c:	2a7e      	cmp	r2, #126	; 0x7e
 800122e:	dd03      	ble.n	8001238 <__aeabi_f2iz+0x18>
 8001230:	2a9d      	cmp	r2, #157	; 0x9d
 8001232:	dd02      	ble.n	800123a <__aeabi_f2iz+0x1a>
 8001234:	4a09      	ldr	r2, [pc, #36]	; (800125c <__aeabi_f2iz+0x3c>)
 8001236:	1898      	adds	r0, r3, r2
 8001238:	4770      	bx	lr
 800123a:	2080      	movs	r0, #128	; 0x80
 800123c:	0400      	lsls	r0, r0, #16
 800123e:	4301      	orrs	r1, r0
 8001240:	2a95      	cmp	r2, #149	; 0x95
 8001242:	dc07      	bgt.n	8001254 <__aeabi_f2iz+0x34>
 8001244:	2096      	movs	r0, #150	; 0x96
 8001246:	1a82      	subs	r2, r0, r2
 8001248:	40d1      	lsrs	r1, r2
 800124a:	4248      	negs	r0, r1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1f3      	bne.n	8001238 <__aeabi_f2iz+0x18>
 8001250:	0008      	movs	r0, r1
 8001252:	e7f1      	b.n	8001238 <__aeabi_f2iz+0x18>
 8001254:	3a96      	subs	r2, #150	; 0x96
 8001256:	4091      	lsls	r1, r2
 8001258:	e7f7      	b.n	800124a <__aeabi_f2iz+0x2a>
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	7fffffff 	.word	0x7fffffff

08001260 <__aeabi_i2f>:
 8001260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001262:	2800      	cmp	r0, #0
 8001264:	d013      	beq.n	800128e <__aeabi_i2f+0x2e>
 8001266:	17c3      	asrs	r3, r0, #31
 8001268:	18c6      	adds	r6, r0, r3
 800126a:	405e      	eors	r6, r3
 800126c:	0fc4      	lsrs	r4, r0, #31
 800126e:	0030      	movs	r0, r6
 8001270:	f001 feac 	bl	8002fcc <__clzsi2>
 8001274:	239e      	movs	r3, #158	; 0x9e
 8001276:	0005      	movs	r5, r0
 8001278:	1a1b      	subs	r3, r3, r0
 800127a:	2b96      	cmp	r3, #150	; 0x96
 800127c:	dc0f      	bgt.n	800129e <__aeabi_i2f+0x3e>
 800127e:	2808      	cmp	r0, #8
 8001280:	dd01      	ble.n	8001286 <__aeabi_i2f+0x26>
 8001282:	3d08      	subs	r5, #8
 8001284:	40ae      	lsls	r6, r5
 8001286:	0276      	lsls	r6, r6, #9
 8001288:	0a76      	lsrs	r6, r6, #9
 800128a:	b2d8      	uxtb	r0, r3
 800128c:	e002      	b.n	8001294 <__aeabi_i2f+0x34>
 800128e:	2400      	movs	r4, #0
 8001290:	2000      	movs	r0, #0
 8001292:	2600      	movs	r6, #0
 8001294:	05c0      	lsls	r0, r0, #23
 8001296:	4330      	orrs	r0, r6
 8001298:	07e4      	lsls	r4, r4, #31
 800129a:	4320      	orrs	r0, r4
 800129c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800129e:	2b99      	cmp	r3, #153	; 0x99
 80012a0:	dd0c      	ble.n	80012bc <__aeabi_i2f+0x5c>
 80012a2:	2205      	movs	r2, #5
 80012a4:	0031      	movs	r1, r6
 80012a6:	1a12      	subs	r2, r2, r0
 80012a8:	40d1      	lsrs	r1, r2
 80012aa:	000a      	movs	r2, r1
 80012ac:	0001      	movs	r1, r0
 80012ae:	0030      	movs	r0, r6
 80012b0:	311b      	adds	r1, #27
 80012b2:	4088      	lsls	r0, r1
 80012b4:	1e41      	subs	r1, r0, #1
 80012b6:	4188      	sbcs	r0, r1
 80012b8:	4302      	orrs	r2, r0
 80012ba:	0016      	movs	r6, r2
 80012bc:	2d05      	cmp	r5, #5
 80012be:	dc12      	bgt.n	80012e6 <__aeabi_i2f+0x86>
 80012c0:	0031      	movs	r1, r6
 80012c2:	4f0d      	ldr	r7, [pc, #52]	; (80012f8 <__aeabi_i2f+0x98>)
 80012c4:	4039      	ands	r1, r7
 80012c6:	0772      	lsls	r2, r6, #29
 80012c8:	d009      	beq.n	80012de <__aeabi_i2f+0x7e>
 80012ca:	200f      	movs	r0, #15
 80012cc:	4030      	ands	r0, r6
 80012ce:	2804      	cmp	r0, #4
 80012d0:	d005      	beq.n	80012de <__aeabi_i2f+0x7e>
 80012d2:	3104      	adds	r1, #4
 80012d4:	014a      	lsls	r2, r1, #5
 80012d6:	d502      	bpl.n	80012de <__aeabi_i2f+0x7e>
 80012d8:	239f      	movs	r3, #159	; 0x9f
 80012da:	4039      	ands	r1, r7
 80012dc:	1b5b      	subs	r3, r3, r5
 80012de:	0189      	lsls	r1, r1, #6
 80012e0:	0a4e      	lsrs	r6, r1, #9
 80012e2:	b2d8      	uxtb	r0, r3
 80012e4:	e7d6      	b.n	8001294 <__aeabi_i2f+0x34>
 80012e6:	1f6a      	subs	r2, r5, #5
 80012e8:	4096      	lsls	r6, r2
 80012ea:	0031      	movs	r1, r6
 80012ec:	4f02      	ldr	r7, [pc, #8]	; (80012f8 <__aeabi_i2f+0x98>)
 80012ee:	4039      	ands	r1, r7
 80012f0:	0772      	lsls	r2, r6, #29
 80012f2:	d0f4      	beq.n	80012de <__aeabi_i2f+0x7e>
 80012f4:	e7e9      	b.n	80012ca <__aeabi_i2f+0x6a>
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	fbffffff 	.word	0xfbffffff

080012fc <__aeabi_dadd>:
 80012fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fe:	464f      	mov	r7, r9
 8001300:	4646      	mov	r6, r8
 8001302:	46d6      	mov	lr, sl
 8001304:	000d      	movs	r5, r1
 8001306:	0004      	movs	r4, r0
 8001308:	b5c0      	push	{r6, r7, lr}
 800130a:	001f      	movs	r7, r3
 800130c:	0011      	movs	r1, r2
 800130e:	0328      	lsls	r0, r5, #12
 8001310:	0f62      	lsrs	r2, r4, #29
 8001312:	0a40      	lsrs	r0, r0, #9
 8001314:	4310      	orrs	r0, r2
 8001316:	007a      	lsls	r2, r7, #1
 8001318:	0d52      	lsrs	r2, r2, #21
 800131a:	00e3      	lsls	r3, r4, #3
 800131c:	033c      	lsls	r4, r7, #12
 800131e:	4691      	mov	r9, r2
 8001320:	0a64      	lsrs	r4, r4, #9
 8001322:	0ffa      	lsrs	r2, r7, #31
 8001324:	0f4f      	lsrs	r7, r1, #29
 8001326:	006e      	lsls	r6, r5, #1
 8001328:	4327      	orrs	r7, r4
 800132a:	4692      	mov	sl, r2
 800132c:	46b8      	mov	r8, r7
 800132e:	0d76      	lsrs	r6, r6, #21
 8001330:	0fed      	lsrs	r5, r5, #31
 8001332:	00c9      	lsls	r1, r1, #3
 8001334:	4295      	cmp	r5, r2
 8001336:	d100      	bne.n	800133a <__aeabi_dadd+0x3e>
 8001338:	e099      	b.n	800146e <__aeabi_dadd+0x172>
 800133a:	464c      	mov	r4, r9
 800133c:	1b34      	subs	r4, r6, r4
 800133e:	46a4      	mov	ip, r4
 8001340:	2c00      	cmp	r4, #0
 8001342:	dc00      	bgt.n	8001346 <__aeabi_dadd+0x4a>
 8001344:	e07c      	b.n	8001440 <__aeabi_dadd+0x144>
 8001346:	464a      	mov	r2, r9
 8001348:	2a00      	cmp	r2, #0
 800134a:	d100      	bne.n	800134e <__aeabi_dadd+0x52>
 800134c:	e0b8      	b.n	80014c0 <__aeabi_dadd+0x1c4>
 800134e:	4ac5      	ldr	r2, [pc, #788]	; (8001664 <__aeabi_dadd+0x368>)
 8001350:	4296      	cmp	r6, r2
 8001352:	d100      	bne.n	8001356 <__aeabi_dadd+0x5a>
 8001354:	e11c      	b.n	8001590 <__aeabi_dadd+0x294>
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	003c      	movs	r4, r7
 800135a:	0412      	lsls	r2, r2, #16
 800135c:	4314      	orrs	r4, r2
 800135e:	46a0      	mov	r8, r4
 8001360:	4662      	mov	r2, ip
 8001362:	2a38      	cmp	r2, #56	; 0x38
 8001364:	dd00      	ble.n	8001368 <__aeabi_dadd+0x6c>
 8001366:	e161      	b.n	800162c <__aeabi_dadd+0x330>
 8001368:	2a1f      	cmp	r2, #31
 800136a:	dd00      	ble.n	800136e <__aeabi_dadd+0x72>
 800136c:	e1cc      	b.n	8001708 <__aeabi_dadd+0x40c>
 800136e:	4664      	mov	r4, ip
 8001370:	2220      	movs	r2, #32
 8001372:	1b12      	subs	r2, r2, r4
 8001374:	4644      	mov	r4, r8
 8001376:	4094      	lsls	r4, r2
 8001378:	000f      	movs	r7, r1
 800137a:	46a1      	mov	r9, r4
 800137c:	4664      	mov	r4, ip
 800137e:	4091      	lsls	r1, r2
 8001380:	40e7      	lsrs	r7, r4
 8001382:	464c      	mov	r4, r9
 8001384:	1e4a      	subs	r2, r1, #1
 8001386:	4191      	sbcs	r1, r2
 8001388:	433c      	orrs	r4, r7
 800138a:	4642      	mov	r2, r8
 800138c:	4321      	orrs	r1, r4
 800138e:	4664      	mov	r4, ip
 8001390:	40e2      	lsrs	r2, r4
 8001392:	1a80      	subs	r0, r0, r2
 8001394:	1a5c      	subs	r4, r3, r1
 8001396:	42a3      	cmp	r3, r4
 8001398:	419b      	sbcs	r3, r3
 800139a:	425f      	negs	r7, r3
 800139c:	1bc7      	subs	r7, r0, r7
 800139e:	023b      	lsls	r3, r7, #8
 80013a0:	d400      	bmi.n	80013a4 <__aeabi_dadd+0xa8>
 80013a2:	e0d0      	b.n	8001546 <__aeabi_dadd+0x24a>
 80013a4:	027f      	lsls	r7, r7, #9
 80013a6:	0a7f      	lsrs	r7, r7, #9
 80013a8:	2f00      	cmp	r7, #0
 80013aa:	d100      	bne.n	80013ae <__aeabi_dadd+0xb2>
 80013ac:	e0ff      	b.n	80015ae <__aeabi_dadd+0x2b2>
 80013ae:	0038      	movs	r0, r7
 80013b0:	f001 fe0c 	bl	8002fcc <__clzsi2>
 80013b4:	0001      	movs	r1, r0
 80013b6:	3908      	subs	r1, #8
 80013b8:	2320      	movs	r3, #32
 80013ba:	0022      	movs	r2, r4
 80013bc:	1a5b      	subs	r3, r3, r1
 80013be:	408f      	lsls	r7, r1
 80013c0:	40da      	lsrs	r2, r3
 80013c2:	408c      	lsls	r4, r1
 80013c4:	4317      	orrs	r7, r2
 80013c6:	42b1      	cmp	r1, r6
 80013c8:	da00      	bge.n	80013cc <__aeabi_dadd+0xd0>
 80013ca:	e0ff      	b.n	80015cc <__aeabi_dadd+0x2d0>
 80013cc:	1b89      	subs	r1, r1, r6
 80013ce:	1c4b      	adds	r3, r1, #1
 80013d0:	2b1f      	cmp	r3, #31
 80013d2:	dd00      	ble.n	80013d6 <__aeabi_dadd+0xda>
 80013d4:	e0a8      	b.n	8001528 <__aeabi_dadd+0x22c>
 80013d6:	2220      	movs	r2, #32
 80013d8:	0039      	movs	r1, r7
 80013da:	1ad2      	subs	r2, r2, r3
 80013dc:	0020      	movs	r0, r4
 80013de:	4094      	lsls	r4, r2
 80013e0:	4091      	lsls	r1, r2
 80013e2:	40d8      	lsrs	r0, r3
 80013e4:	1e62      	subs	r2, r4, #1
 80013e6:	4194      	sbcs	r4, r2
 80013e8:	40df      	lsrs	r7, r3
 80013ea:	2600      	movs	r6, #0
 80013ec:	4301      	orrs	r1, r0
 80013ee:	430c      	orrs	r4, r1
 80013f0:	0763      	lsls	r3, r4, #29
 80013f2:	d009      	beq.n	8001408 <__aeabi_dadd+0x10c>
 80013f4:	230f      	movs	r3, #15
 80013f6:	4023      	ands	r3, r4
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d005      	beq.n	8001408 <__aeabi_dadd+0x10c>
 80013fc:	1d23      	adds	r3, r4, #4
 80013fe:	42a3      	cmp	r3, r4
 8001400:	41a4      	sbcs	r4, r4
 8001402:	4264      	negs	r4, r4
 8001404:	193f      	adds	r7, r7, r4
 8001406:	001c      	movs	r4, r3
 8001408:	023b      	lsls	r3, r7, #8
 800140a:	d400      	bmi.n	800140e <__aeabi_dadd+0x112>
 800140c:	e09e      	b.n	800154c <__aeabi_dadd+0x250>
 800140e:	4b95      	ldr	r3, [pc, #596]	; (8001664 <__aeabi_dadd+0x368>)
 8001410:	3601      	adds	r6, #1
 8001412:	429e      	cmp	r6, r3
 8001414:	d100      	bne.n	8001418 <__aeabi_dadd+0x11c>
 8001416:	e0b7      	b.n	8001588 <__aeabi_dadd+0x28c>
 8001418:	4a93      	ldr	r2, [pc, #588]	; (8001668 <__aeabi_dadd+0x36c>)
 800141a:	08e4      	lsrs	r4, r4, #3
 800141c:	4017      	ands	r7, r2
 800141e:	077b      	lsls	r3, r7, #29
 8001420:	0571      	lsls	r1, r6, #21
 8001422:	027f      	lsls	r7, r7, #9
 8001424:	4323      	orrs	r3, r4
 8001426:	0b3f      	lsrs	r7, r7, #12
 8001428:	0d4a      	lsrs	r2, r1, #21
 800142a:	0512      	lsls	r2, r2, #20
 800142c:	433a      	orrs	r2, r7
 800142e:	07ed      	lsls	r5, r5, #31
 8001430:	432a      	orrs	r2, r5
 8001432:	0018      	movs	r0, r3
 8001434:	0011      	movs	r1, r2
 8001436:	bce0      	pop	{r5, r6, r7}
 8001438:	46ba      	mov	sl, r7
 800143a:	46b1      	mov	r9, r6
 800143c:	46a8      	mov	r8, r5
 800143e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001440:	2c00      	cmp	r4, #0
 8001442:	d04b      	beq.n	80014dc <__aeabi_dadd+0x1e0>
 8001444:	464c      	mov	r4, r9
 8001446:	1ba4      	subs	r4, r4, r6
 8001448:	46a4      	mov	ip, r4
 800144a:	2e00      	cmp	r6, #0
 800144c:	d000      	beq.n	8001450 <__aeabi_dadd+0x154>
 800144e:	e123      	b.n	8001698 <__aeabi_dadd+0x39c>
 8001450:	0004      	movs	r4, r0
 8001452:	431c      	orrs	r4, r3
 8001454:	d100      	bne.n	8001458 <__aeabi_dadd+0x15c>
 8001456:	e1af      	b.n	80017b8 <__aeabi_dadd+0x4bc>
 8001458:	4662      	mov	r2, ip
 800145a:	1e54      	subs	r4, r2, #1
 800145c:	2a01      	cmp	r2, #1
 800145e:	d100      	bne.n	8001462 <__aeabi_dadd+0x166>
 8001460:	e215      	b.n	800188e <__aeabi_dadd+0x592>
 8001462:	4d80      	ldr	r5, [pc, #512]	; (8001664 <__aeabi_dadd+0x368>)
 8001464:	45ac      	cmp	ip, r5
 8001466:	d100      	bne.n	800146a <__aeabi_dadd+0x16e>
 8001468:	e1c8      	b.n	80017fc <__aeabi_dadd+0x500>
 800146a:	46a4      	mov	ip, r4
 800146c:	e11b      	b.n	80016a6 <__aeabi_dadd+0x3aa>
 800146e:	464a      	mov	r2, r9
 8001470:	1ab2      	subs	r2, r6, r2
 8001472:	4694      	mov	ip, r2
 8001474:	2a00      	cmp	r2, #0
 8001476:	dc00      	bgt.n	800147a <__aeabi_dadd+0x17e>
 8001478:	e0ac      	b.n	80015d4 <__aeabi_dadd+0x2d8>
 800147a:	464a      	mov	r2, r9
 800147c:	2a00      	cmp	r2, #0
 800147e:	d043      	beq.n	8001508 <__aeabi_dadd+0x20c>
 8001480:	4a78      	ldr	r2, [pc, #480]	; (8001664 <__aeabi_dadd+0x368>)
 8001482:	4296      	cmp	r6, r2
 8001484:	d100      	bne.n	8001488 <__aeabi_dadd+0x18c>
 8001486:	e1af      	b.n	80017e8 <__aeabi_dadd+0x4ec>
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	003c      	movs	r4, r7
 800148c:	0412      	lsls	r2, r2, #16
 800148e:	4314      	orrs	r4, r2
 8001490:	46a0      	mov	r8, r4
 8001492:	4662      	mov	r2, ip
 8001494:	2a38      	cmp	r2, #56	; 0x38
 8001496:	dc67      	bgt.n	8001568 <__aeabi_dadd+0x26c>
 8001498:	2a1f      	cmp	r2, #31
 800149a:	dc00      	bgt.n	800149e <__aeabi_dadd+0x1a2>
 800149c:	e15f      	b.n	800175e <__aeabi_dadd+0x462>
 800149e:	4647      	mov	r7, r8
 80014a0:	3a20      	subs	r2, #32
 80014a2:	40d7      	lsrs	r7, r2
 80014a4:	4662      	mov	r2, ip
 80014a6:	2a20      	cmp	r2, #32
 80014a8:	d005      	beq.n	80014b6 <__aeabi_dadd+0x1ba>
 80014aa:	4664      	mov	r4, ip
 80014ac:	2240      	movs	r2, #64	; 0x40
 80014ae:	1b12      	subs	r2, r2, r4
 80014b0:	4644      	mov	r4, r8
 80014b2:	4094      	lsls	r4, r2
 80014b4:	4321      	orrs	r1, r4
 80014b6:	1e4a      	subs	r2, r1, #1
 80014b8:	4191      	sbcs	r1, r2
 80014ba:	000c      	movs	r4, r1
 80014bc:	433c      	orrs	r4, r7
 80014be:	e057      	b.n	8001570 <__aeabi_dadd+0x274>
 80014c0:	003a      	movs	r2, r7
 80014c2:	430a      	orrs	r2, r1
 80014c4:	d100      	bne.n	80014c8 <__aeabi_dadd+0x1cc>
 80014c6:	e105      	b.n	80016d4 <__aeabi_dadd+0x3d8>
 80014c8:	0022      	movs	r2, r4
 80014ca:	3a01      	subs	r2, #1
 80014cc:	2c01      	cmp	r4, #1
 80014ce:	d100      	bne.n	80014d2 <__aeabi_dadd+0x1d6>
 80014d0:	e182      	b.n	80017d8 <__aeabi_dadd+0x4dc>
 80014d2:	4c64      	ldr	r4, [pc, #400]	; (8001664 <__aeabi_dadd+0x368>)
 80014d4:	45a4      	cmp	ip, r4
 80014d6:	d05b      	beq.n	8001590 <__aeabi_dadd+0x294>
 80014d8:	4694      	mov	ip, r2
 80014da:	e741      	b.n	8001360 <__aeabi_dadd+0x64>
 80014dc:	4c63      	ldr	r4, [pc, #396]	; (800166c <__aeabi_dadd+0x370>)
 80014de:	1c77      	adds	r7, r6, #1
 80014e0:	4227      	tst	r7, r4
 80014e2:	d000      	beq.n	80014e6 <__aeabi_dadd+0x1ea>
 80014e4:	e0c4      	b.n	8001670 <__aeabi_dadd+0x374>
 80014e6:	0004      	movs	r4, r0
 80014e8:	431c      	orrs	r4, r3
 80014ea:	2e00      	cmp	r6, #0
 80014ec:	d000      	beq.n	80014f0 <__aeabi_dadd+0x1f4>
 80014ee:	e169      	b.n	80017c4 <__aeabi_dadd+0x4c8>
 80014f0:	2c00      	cmp	r4, #0
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x1fa>
 80014f4:	e1bf      	b.n	8001876 <__aeabi_dadd+0x57a>
 80014f6:	4644      	mov	r4, r8
 80014f8:	430c      	orrs	r4, r1
 80014fa:	d000      	beq.n	80014fe <__aeabi_dadd+0x202>
 80014fc:	e1d0      	b.n	80018a0 <__aeabi_dadd+0x5a4>
 80014fe:	0742      	lsls	r2, r0, #29
 8001500:	08db      	lsrs	r3, r3, #3
 8001502:	4313      	orrs	r3, r2
 8001504:	08c0      	lsrs	r0, r0, #3
 8001506:	e029      	b.n	800155c <__aeabi_dadd+0x260>
 8001508:	003a      	movs	r2, r7
 800150a:	430a      	orrs	r2, r1
 800150c:	d100      	bne.n	8001510 <__aeabi_dadd+0x214>
 800150e:	e170      	b.n	80017f2 <__aeabi_dadd+0x4f6>
 8001510:	4662      	mov	r2, ip
 8001512:	4664      	mov	r4, ip
 8001514:	3a01      	subs	r2, #1
 8001516:	2c01      	cmp	r4, #1
 8001518:	d100      	bne.n	800151c <__aeabi_dadd+0x220>
 800151a:	e0e0      	b.n	80016de <__aeabi_dadd+0x3e2>
 800151c:	4c51      	ldr	r4, [pc, #324]	; (8001664 <__aeabi_dadd+0x368>)
 800151e:	45a4      	cmp	ip, r4
 8001520:	d100      	bne.n	8001524 <__aeabi_dadd+0x228>
 8001522:	e161      	b.n	80017e8 <__aeabi_dadd+0x4ec>
 8001524:	4694      	mov	ip, r2
 8001526:	e7b4      	b.n	8001492 <__aeabi_dadd+0x196>
 8001528:	003a      	movs	r2, r7
 800152a:	391f      	subs	r1, #31
 800152c:	40ca      	lsrs	r2, r1
 800152e:	0011      	movs	r1, r2
 8001530:	2b20      	cmp	r3, #32
 8001532:	d003      	beq.n	800153c <__aeabi_dadd+0x240>
 8001534:	2240      	movs	r2, #64	; 0x40
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	409f      	lsls	r7, r3
 800153a:	433c      	orrs	r4, r7
 800153c:	1e63      	subs	r3, r4, #1
 800153e:	419c      	sbcs	r4, r3
 8001540:	2700      	movs	r7, #0
 8001542:	2600      	movs	r6, #0
 8001544:	430c      	orrs	r4, r1
 8001546:	0763      	lsls	r3, r4, #29
 8001548:	d000      	beq.n	800154c <__aeabi_dadd+0x250>
 800154a:	e753      	b.n	80013f4 <__aeabi_dadd+0xf8>
 800154c:	46b4      	mov	ip, r6
 800154e:	08e4      	lsrs	r4, r4, #3
 8001550:	077b      	lsls	r3, r7, #29
 8001552:	4323      	orrs	r3, r4
 8001554:	08f8      	lsrs	r0, r7, #3
 8001556:	4a43      	ldr	r2, [pc, #268]	; (8001664 <__aeabi_dadd+0x368>)
 8001558:	4594      	cmp	ip, r2
 800155a:	d01d      	beq.n	8001598 <__aeabi_dadd+0x29c>
 800155c:	4662      	mov	r2, ip
 800155e:	0307      	lsls	r7, r0, #12
 8001560:	0552      	lsls	r2, r2, #21
 8001562:	0b3f      	lsrs	r7, r7, #12
 8001564:	0d52      	lsrs	r2, r2, #21
 8001566:	e760      	b.n	800142a <__aeabi_dadd+0x12e>
 8001568:	4644      	mov	r4, r8
 800156a:	430c      	orrs	r4, r1
 800156c:	1e62      	subs	r2, r4, #1
 800156e:	4194      	sbcs	r4, r2
 8001570:	18e4      	adds	r4, r4, r3
 8001572:	429c      	cmp	r4, r3
 8001574:	419b      	sbcs	r3, r3
 8001576:	425f      	negs	r7, r3
 8001578:	183f      	adds	r7, r7, r0
 800157a:	023b      	lsls	r3, r7, #8
 800157c:	d5e3      	bpl.n	8001546 <__aeabi_dadd+0x24a>
 800157e:	4b39      	ldr	r3, [pc, #228]	; (8001664 <__aeabi_dadd+0x368>)
 8001580:	3601      	adds	r6, #1
 8001582:	429e      	cmp	r6, r3
 8001584:	d000      	beq.n	8001588 <__aeabi_dadd+0x28c>
 8001586:	e0b5      	b.n	80016f4 <__aeabi_dadd+0x3f8>
 8001588:	0032      	movs	r2, r6
 800158a:	2700      	movs	r7, #0
 800158c:	2300      	movs	r3, #0
 800158e:	e74c      	b.n	800142a <__aeabi_dadd+0x12e>
 8001590:	0742      	lsls	r2, r0, #29
 8001592:	08db      	lsrs	r3, r3, #3
 8001594:	4313      	orrs	r3, r2
 8001596:	08c0      	lsrs	r0, r0, #3
 8001598:	001a      	movs	r2, r3
 800159a:	4302      	orrs	r2, r0
 800159c:	d100      	bne.n	80015a0 <__aeabi_dadd+0x2a4>
 800159e:	e1e1      	b.n	8001964 <__aeabi_dadd+0x668>
 80015a0:	2780      	movs	r7, #128	; 0x80
 80015a2:	033f      	lsls	r7, r7, #12
 80015a4:	4307      	orrs	r7, r0
 80015a6:	033f      	lsls	r7, r7, #12
 80015a8:	4a2e      	ldr	r2, [pc, #184]	; (8001664 <__aeabi_dadd+0x368>)
 80015aa:	0b3f      	lsrs	r7, r7, #12
 80015ac:	e73d      	b.n	800142a <__aeabi_dadd+0x12e>
 80015ae:	0020      	movs	r0, r4
 80015b0:	f001 fd0c 	bl	8002fcc <__clzsi2>
 80015b4:	0001      	movs	r1, r0
 80015b6:	3118      	adds	r1, #24
 80015b8:	291f      	cmp	r1, #31
 80015ba:	dc00      	bgt.n	80015be <__aeabi_dadd+0x2c2>
 80015bc:	e6fc      	b.n	80013b8 <__aeabi_dadd+0xbc>
 80015be:	3808      	subs	r0, #8
 80015c0:	4084      	lsls	r4, r0
 80015c2:	0027      	movs	r7, r4
 80015c4:	2400      	movs	r4, #0
 80015c6:	42b1      	cmp	r1, r6
 80015c8:	db00      	blt.n	80015cc <__aeabi_dadd+0x2d0>
 80015ca:	e6ff      	b.n	80013cc <__aeabi_dadd+0xd0>
 80015cc:	4a26      	ldr	r2, [pc, #152]	; (8001668 <__aeabi_dadd+0x36c>)
 80015ce:	1a76      	subs	r6, r6, r1
 80015d0:	4017      	ands	r7, r2
 80015d2:	e70d      	b.n	80013f0 <__aeabi_dadd+0xf4>
 80015d4:	2a00      	cmp	r2, #0
 80015d6:	d02f      	beq.n	8001638 <__aeabi_dadd+0x33c>
 80015d8:	464a      	mov	r2, r9
 80015da:	1b92      	subs	r2, r2, r6
 80015dc:	4694      	mov	ip, r2
 80015de:	2e00      	cmp	r6, #0
 80015e0:	d100      	bne.n	80015e4 <__aeabi_dadd+0x2e8>
 80015e2:	e0ad      	b.n	8001740 <__aeabi_dadd+0x444>
 80015e4:	4a1f      	ldr	r2, [pc, #124]	; (8001664 <__aeabi_dadd+0x368>)
 80015e6:	4591      	cmp	r9, r2
 80015e8:	d100      	bne.n	80015ec <__aeabi_dadd+0x2f0>
 80015ea:	e10f      	b.n	800180c <__aeabi_dadd+0x510>
 80015ec:	2280      	movs	r2, #128	; 0x80
 80015ee:	0412      	lsls	r2, r2, #16
 80015f0:	4310      	orrs	r0, r2
 80015f2:	4662      	mov	r2, ip
 80015f4:	2a38      	cmp	r2, #56	; 0x38
 80015f6:	dd00      	ble.n	80015fa <__aeabi_dadd+0x2fe>
 80015f8:	e10f      	b.n	800181a <__aeabi_dadd+0x51e>
 80015fa:	2a1f      	cmp	r2, #31
 80015fc:	dd00      	ble.n	8001600 <__aeabi_dadd+0x304>
 80015fe:	e180      	b.n	8001902 <__aeabi_dadd+0x606>
 8001600:	4664      	mov	r4, ip
 8001602:	2220      	movs	r2, #32
 8001604:	001e      	movs	r6, r3
 8001606:	1b12      	subs	r2, r2, r4
 8001608:	4667      	mov	r7, ip
 800160a:	0004      	movs	r4, r0
 800160c:	4093      	lsls	r3, r2
 800160e:	4094      	lsls	r4, r2
 8001610:	40fe      	lsrs	r6, r7
 8001612:	1e5a      	subs	r2, r3, #1
 8001614:	4193      	sbcs	r3, r2
 8001616:	40f8      	lsrs	r0, r7
 8001618:	4334      	orrs	r4, r6
 800161a:	431c      	orrs	r4, r3
 800161c:	4480      	add	r8, r0
 800161e:	1864      	adds	r4, r4, r1
 8001620:	428c      	cmp	r4, r1
 8001622:	41bf      	sbcs	r7, r7
 8001624:	427f      	negs	r7, r7
 8001626:	464e      	mov	r6, r9
 8001628:	4447      	add	r7, r8
 800162a:	e7a6      	b.n	800157a <__aeabi_dadd+0x27e>
 800162c:	4642      	mov	r2, r8
 800162e:	430a      	orrs	r2, r1
 8001630:	0011      	movs	r1, r2
 8001632:	1e4a      	subs	r2, r1, #1
 8001634:	4191      	sbcs	r1, r2
 8001636:	e6ad      	b.n	8001394 <__aeabi_dadd+0x98>
 8001638:	4c0c      	ldr	r4, [pc, #48]	; (800166c <__aeabi_dadd+0x370>)
 800163a:	1c72      	adds	r2, r6, #1
 800163c:	4222      	tst	r2, r4
 800163e:	d000      	beq.n	8001642 <__aeabi_dadd+0x346>
 8001640:	e0a1      	b.n	8001786 <__aeabi_dadd+0x48a>
 8001642:	0002      	movs	r2, r0
 8001644:	431a      	orrs	r2, r3
 8001646:	2e00      	cmp	r6, #0
 8001648:	d000      	beq.n	800164c <__aeabi_dadd+0x350>
 800164a:	e0fa      	b.n	8001842 <__aeabi_dadd+0x546>
 800164c:	2a00      	cmp	r2, #0
 800164e:	d100      	bne.n	8001652 <__aeabi_dadd+0x356>
 8001650:	e145      	b.n	80018de <__aeabi_dadd+0x5e2>
 8001652:	003a      	movs	r2, r7
 8001654:	430a      	orrs	r2, r1
 8001656:	d000      	beq.n	800165a <__aeabi_dadd+0x35e>
 8001658:	e146      	b.n	80018e8 <__aeabi_dadd+0x5ec>
 800165a:	0742      	lsls	r2, r0, #29
 800165c:	08db      	lsrs	r3, r3, #3
 800165e:	4313      	orrs	r3, r2
 8001660:	08c0      	lsrs	r0, r0, #3
 8001662:	e77b      	b.n	800155c <__aeabi_dadd+0x260>
 8001664:	000007ff 	.word	0x000007ff
 8001668:	ff7fffff 	.word	0xff7fffff
 800166c:	000007fe 	.word	0x000007fe
 8001670:	4647      	mov	r7, r8
 8001672:	1a5c      	subs	r4, r3, r1
 8001674:	1bc2      	subs	r2, r0, r7
 8001676:	42a3      	cmp	r3, r4
 8001678:	41bf      	sbcs	r7, r7
 800167a:	427f      	negs	r7, r7
 800167c:	46b9      	mov	r9, r7
 800167e:	0017      	movs	r7, r2
 8001680:	464a      	mov	r2, r9
 8001682:	1abf      	subs	r7, r7, r2
 8001684:	023a      	lsls	r2, r7, #8
 8001686:	d500      	bpl.n	800168a <__aeabi_dadd+0x38e>
 8001688:	e08d      	b.n	80017a6 <__aeabi_dadd+0x4aa>
 800168a:	0023      	movs	r3, r4
 800168c:	433b      	orrs	r3, r7
 800168e:	d000      	beq.n	8001692 <__aeabi_dadd+0x396>
 8001690:	e68a      	b.n	80013a8 <__aeabi_dadd+0xac>
 8001692:	2000      	movs	r0, #0
 8001694:	2500      	movs	r5, #0
 8001696:	e761      	b.n	800155c <__aeabi_dadd+0x260>
 8001698:	4cb4      	ldr	r4, [pc, #720]	; (800196c <__aeabi_dadd+0x670>)
 800169a:	45a1      	cmp	r9, r4
 800169c:	d100      	bne.n	80016a0 <__aeabi_dadd+0x3a4>
 800169e:	e0ad      	b.n	80017fc <__aeabi_dadd+0x500>
 80016a0:	2480      	movs	r4, #128	; 0x80
 80016a2:	0424      	lsls	r4, r4, #16
 80016a4:	4320      	orrs	r0, r4
 80016a6:	4664      	mov	r4, ip
 80016a8:	2c38      	cmp	r4, #56	; 0x38
 80016aa:	dc3d      	bgt.n	8001728 <__aeabi_dadd+0x42c>
 80016ac:	4662      	mov	r2, ip
 80016ae:	2c1f      	cmp	r4, #31
 80016b0:	dd00      	ble.n	80016b4 <__aeabi_dadd+0x3b8>
 80016b2:	e0b7      	b.n	8001824 <__aeabi_dadd+0x528>
 80016b4:	2520      	movs	r5, #32
 80016b6:	001e      	movs	r6, r3
 80016b8:	1b2d      	subs	r5, r5, r4
 80016ba:	0004      	movs	r4, r0
 80016bc:	40ab      	lsls	r3, r5
 80016be:	40ac      	lsls	r4, r5
 80016c0:	40d6      	lsrs	r6, r2
 80016c2:	40d0      	lsrs	r0, r2
 80016c4:	4642      	mov	r2, r8
 80016c6:	1e5d      	subs	r5, r3, #1
 80016c8:	41ab      	sbcs	r3, r5
 80016ca:	4334      	orrs	r4, r6
 80016cc:	1a12      	subs	r2, r2, r0
 80016ce:	4690      	mov	r8, r2
 80016d0:	4323      	orrs	r3, r4
 80016d2:	e02c      	b.n	800172e <__aeabi_dadd+0x432>
 80016d4:	0742      	lsls	r2, r0, #29
 80016d6:	08db      	lsrs	r3, r3, #3
 80016d8:	4313      	orrs	r3, r2
 80016da:	08c0      	lsrs	r0, r0, #3
 80016dc:	e73b      	b.n	8001556 <__aeabi_dadd+0x25a>
 80016de:	185c      	adds	r4, r3, r1
 80016e0:	429c      	cmp	r4, r3
 80016e2:	419b      	sbcs	r3, r3
 80016e4:	4440      	add	r0, r8
 80016e6:	425b      	negs	r3, r3
 80016e8:	18c7      	adds	r7, r0, r3
 80016ea:	2601      	movs	r6, #1
 80016ec:	023b      	lsls	r3, r7, #8
 80016ee:	d400      	bmi.n	80016f2 <__aeabi_dadd+0x3f6>
 80016f0:	e729      	b.n	8001546 <__aeabi_dadd+0x24a>
 80016f2:	2602      	movs	r6, #2
 80016f4:	4a9e      	ldr	r2, [pc, #632]	; (8001970 <__aeabi_dadd+0x674>)
 80016f6:	0863      	lsrs	r3, r4, #1
 80016f8:	4017      	ands	r7, r2
 80016fa:	2201      	movs	r2, #1
 80016fc:	4014      	ands	r4, r2
 80016fe:	431c      	orrs	r4, r3
 8001700:	07fb      	lsls	r3, r7, #31
 8001702:	431c      	orrs	r4, r3
 8001704:	087f      	lsrs	r7, r7, #1
 8001706:	e673      	b.n	80013f0 <__aeabi_dadd+0xf4>
 8001708:	4644      	mov	r4, r8
 800170a:	3a20      	subs	r2, #32
 800170c:	40d4      	lsrs	r4, r2
 800170e:	4662      	mov	r2, ip
 8001710:	2a20      	cmp	r2, #32
 8001712:	d005      	beq.n	8001720 <__aeabi_dadd+0x424>
 8001714:	4667      	mov	r7, ip
 8001716:	2240      	movs	r2, #64	; 0x40
 8001718:	1bd2      	subs	r2, r2, r7
 800171a:	4647      	mov	r7, r8
 800171c:	4097      	lsls	r7, r2
 800171e:	4339      	orrs	r1, r7
 8001720:	1e4a      	subs	r2, r1, #1
 8001722:	4191      	sbcs	r1, r2
 8001724:	4321      	orrs	r1, r4
 8001726:	e635      	b.n	8001394 <__aeabi_dadd+0x98>
 8001728:	4303      	orrs	r3, r0
 800172a:	1e58      	subs	r0, r3, #1
 800172c:	4183      	sbcs	r3, r0
 800172e:	1acc      	subs	r4, r1, r3
 8001730:	42a1      	cmp	r1, r4
 8001732:	41bf      	sbcs	r7, r7
 8001734:	4643      	mov	r3, r8
 8001736:	427f      	negs	r7, r7
 8001738:	4655      	mov	r5, sl
 800173a:	464e      	mov	r6, r9
 800173c:	1bdf      	subs	r7, r3, r7
 800173e:	e62e      	b.n	800139e <__aeabi_dadd+0xa2>
 8001740:	0002      	movs	r2, r0
 8001742:	431a      	orrs	r2, r3
 8001744:	d100      	bne.n	8001748 <__aeabi_dadd+0x44c>
 8001746:	e0bd      	b.n	80018c4 <__aeabi_dadd+0x5c8>
 8001748:	4662      	mov	r2, ip
 800174a:	4664      	mov	r4, ip
 800174c:	3a01      	subs	r2, #1
 800174e:	2c01      	cmp	r4, #1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x458>
 8001752:	e0e5      	b.n	8001920 <__aeabi_dadd+0x624>
 8001754:	4c85      	ldr	r4, [pc, #532]	; (800196c <__aeabi_dadd+0x670>)
 8001756:	45a4      	cmp	ip, r4
 8001758:	d058      	beq.n	800180c <__aeabi_dadd+0x510>
 800175a:	4694      	mov	ip, r2
 800175c:	e749      	b.n	80015f2 <__aeabi_dadd+0x2f6>
 800175e:	4664      	mov	r4, ip
 8001760:	2220      	movs	r2, #32
 8001762:	1b12      	subs	r2, r2, r4
 8001764:	4644      	mov	r4, r8
 8001766:	4094      	lsls	r4, r2
 8001768:	000f      	movs	r7, r1
 800176a:	46a1      	mov	r9, r4
 800176c:	4664      	mov	r4, ip
 800176e:	4091      	lsls	r1, r2
 8001770:	40e7      	lsrs	r7, r4
 8001772:	464c      	mov	r4, r9
 8001774:	1e4a      	subs	r2, r1, #1
 8001776:	4191      	sbcs	r1, r2
 8001778:	433c      	orrs	r4, r7
 800177a:	4642      	mov	r2, r8
 800177c:	430c      	orrs	r4, r1
 800177e:	4661      	mov	r1, ip
 8001780:	40ca      	lsrs	r2, r1
 8001782:	1880      	adds	r0, r0, r2
 8001784:	e6f4      	b.n	8001570 <__aeabi_dadd+0x274>
 8001786:	4c79      	ldr	r4, [pc, #484]	; (800196c <__aeabi_dadd+0x670>)
 8001788:	42a2      	cmp	r2, r4
 800178a:	d100      	bne.n	800178e <__aeabi_dadd+0x492>
 800178c:	e6fd      	b.n	800158a <__aeabi_dadd+0x28e>
 800178e:	1859      	adds	r1, r3, r1
 8001790:	4299      	cmp	r1, r3
 8001792:	419b      	sbcs	r3, r3
 8001794:	4440      	add	r0, r8
 8001796:	425f      	negs	r7, r3
 8001798:	19c7      	adds	r7, r0, r7
 800179a:	07fc      	lsls	r4, r7, #31
 800179c:	0849      	lsrs	r1, r1, #1
 800179e:	0016      	movs	r6, r2
 80017a0:	430c      	orrs	r4, r1
 80017a2:	087f      	lsrs	r7, r7, #1
 80017a4:	e6cf      	b.n	8001546 <__aeabi_dadd+0x24a>
 80017a6:	1acc      	subs	r4, r1, r3
 80017a8:	42a1      	cmp	r1, r4
 80017aa:	41bf      	sbcs	r7, r7
 80017ac:	4643      	mov	r3, r8
 80017ae:	427f      	negs	r7, r7
 80017b0:	1a18      	subs	r0, r3, r0
 80017b2:	4655      	mov	r5, sl
 80017b4:	1bc7      	subs	r7, r0, r7
 80017b6:	e5f7      	b.n	80013a8 <__aeabi_dadd+0xac>
 80017b8:	08c9      	lsrs	r1, r1, #3
 80017ba:	077b      	lsls	r3, r7, #29
 80017bc:	4655      	mov	r5, sl
 80017be:	430b      	orrs	r3, r1
 80017c0:	08f8      	lsrs	r0, r7, #3
 80017c2:	e6c8      	b.n	8001556 <__aeabi_dadd+0x25a>
 80017c4:	2c00      	cmp	r4, #0
 80017c6:	d000      	beq.n	80017ca <__aeabi_dadd+0x4ce>
 80017c8:	e081      	b.n	80018ce <__aeabi_dadd+0x5d2>
 80017ca:	4643      	mov	r3, r8
 80017cc:	430b      	orrs	r3, r1
 80017ce:	d115      	bne.n	80017fc <__aeabi_dadd+0x500>
 80017d0:	2080      	movs	r0, #128	; 0x80
 80017d2:	2500      	movs	r5, #0
 80017d4:	0300      	lsls	r0, r0, #12
 80017d6:	e6e3      	b.n	80015a0 <__aeabi_dadd+0x2a4>
 80017d8:	1a5c      	subs	r4, r3, r1
 80017da:	42a3      	cmp	r3, r4
 80017dc:	419b      	sbcs	r3, r3
 80017de:	1bc7      	subs	r7, r0, r7
 80017e0:	425b      	negs	r3, r3
 80017e2:	2601      	movs	r6, #1
 80017e4:	1aff      	subs	r7, r7, r3
 80017e6:	e5da      	b.n	800139e <__aeabi_dadd+0xa2>
 80017e8:	0742      	lsls	r2, r0, #29
 80017ea:	08db      	lsrs	r3, r3, #3
 80017ec:	4313      	orrs	r3, r2
 80017ee:	08c0      	lsrs	r0, r0, #3
 80017f0:	e6d2      	b.n	8001598 <__aeabi_dadd+0x29c>
 80017f2:	0742      	lsls	r2, r0, #29
 80017f4:	08db      	lsrs	r3, r3, #3
 80017f6:	4313      	orrs	r3, r2
 80017f8:	08c0      	lsrs	r0, r0, #3
 80017fa:	e6ac      	b.n	8001556 <__aeabi_dadd+0x25a>
 80017fc:	4643      	mov	r3, r8
 80017fe:	4642      	mov	r2, r8
 8001800:	08c9      	lsrs	r1, r1, #3
 8001802:	075b      	lsls	r3, r3, #29
 8001804:	4655      	mov	r5, sl
 8001806:	430b      	orrs	r3, r1
 8001808:	08d0      	lsrs	r0, r2, #3
 800180a:	e6c5      	b.n	8001598 <__aeabi_dadd+0x29c>
 800180c:	4643      	mov	r3, r8
 800180e:	4642      	mov	r2, r8
 8001810:	075b      	lsls	r3, r3, #29
 8001812:	08c9      	lsrs	r1, r1, #3
 8001814:	430b      	orrs	r3, r1
 8001816:	08d0      	lsrs	r0, r2, #3
 8001818:	e6be      	b.n	8001598 <__aeabi_dadd+0x29c>
 800181a:	4303      	orrs	r3, r0
 800181c:	001c      	movs	r4, r3
 800181e:	1e63      	subs	r3, r4, #1
 8001820:	419c      	sbcs	r4, r3
 8001822:	e6fc      	b.n	800161e <__aeabi_dadd+0x322>
 8001824:	0002      	movs	r2, r0
 8001826:	3c20      	subs	r4, #32
 8001828:	40e2      	lsrs	r2, r4
 800182a:	0014      	movs	r4, r2
 800182c:	4662      	mov	r2, ip
 800182e:	2a20      	cmp	r2, #32
 8001830:	d003      	beq.n	800183a <__aeabi_dadd+0x53e>
 8001832:	2540      	movs	r5, #64	; 0x40
 8001834:	1aad      	subs	r5, r5, r2
 8001836:	40a8      	lsls	r0, r5
 8001838:	4303      	orrs	r3, r0
 800183a:	1e58      	subs	r0, r3, #1
 800183c:	4183      	sbcs	r3, r0
 800183e:	4323      	orrs	r3, r4
 8001840:	e775      	b.n	800172e <__aeabi_dadd+0x432>
 8001842:	2a00      	cmp	r2, #0
 8001844:	d0e2      	beq.n	800180c <__aeabi_dadd+0x510>
 8001846:	003a      	movs	r2, r7
 8001848:	430a      	orrs	r2, r1
 800184a:	d0cd      	beq.n	80017e8 <__aeabi_dadd+0x4ec>
 800184c:	0742      	lsls	r2, r0, #29
 800184e:	08db      	lsrs	r3, r3, #3
 8001850:	4313      	orrs	r3, r2
 8001852:	2280      	movs	r2, #128	; 0x80
 8001854:	08c0      	lsrs	r0, r0, #3
 8001856:	0312      	lsls	r2, r2, #12
 8001858:	4210      	tst	r0, r2
 800185a:	d006      	beq.n	800186a <__aeabi_dadd+0x56e>
 800185c:	08fc      	lsrs	r4, r7, #3
 800185e:	4214      	tst	r4, r2
 8001860:	d103      	bne.n	800186a <__aeabi_dadd+0x56e>
 8001862:	0020      	movs	r0, r4
 8001864:	08cb      	lsrs	r3, r1, #3
 8001866:	077a      	lsls	r2, r7, #29
 8001868:	4313      	orrs	r3, r2
 800186a:	0f5a      	lsrs	r2, r3, #29
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	0752      	lsls	r2, r2, #29
 8001870:	08db      	lsrs	r3, r3, #3
 8001872:	4313      	orrs	r3, r2
 8001874:	e690      	b.n	8001598 <__aeabi_dadd+0x29c>
 8001876:	4643      	mov	r3, r8
 8001878:	430b      	orrs	r3, r1
 800187a:	d100      	bne.n	800187e <__aeabi_dadd+0x582>
 800187c:	e709      	b.n	8001692 <__aeabi_dadd+0x396>
 800187e:	4643      	mov	r3, r8
 8001880:	4642      	mov	r2, r8
 8001882:	08c9      	lsrs	r1, r1, #3
 8001884:	075b      	lsls	r3, r3, #29
 8001886:	4655      	mov	r5, sl
 8001888:	430b      	orrs	r3, r1
 800188a:	08d0      	lsrs	r0, r2, #3
 800188c:	e666      	b.n	800155c <__aeabi_dadd+0x260>
 800188e:	1acc      	subs	r4, r1, r3
 8001890:	42a1      	cmp	r1, r4
 8001892:	4189      	sbcs	r1, r1
 8001894:	1a3f      	subs	r7, r7, r0
 8001896:	4249      	negs	r1, r1
 8001898:	4655      	mov	r5, sl
 800189a:	2601      	movs	r6, #1
 800189c:	1a7f      	subs	r7, r7, r1
 800189e:	e57e      	b.n	800139e <__aeabi_dadd+0xa2>
 80018a0:	4642      	mov	r2, r8
 80018a2:	1a5c      	subs	r4, r3, r1
 80018a4:	1a87      	subs	r7, r0, r2
 80018a6:	42a3      	cmp	r3, r4
 80018a8:	4192      	sbcs	r2, r2
 80018aa:	4252      	negs	r2, r2
 80018ac:	1abf      	subs	r7, r7, r2
 80018ae:	023a      	lsls	r2, r7, #8
 80018b0:	d53d      	bpl.n	800192e <__aeabi_dadd+0x632>
 80018b2:	1acc      	subs	r4, r1, r3
 80018b4:	42a1      	cmp	r1, r4
 80018b6:	4189      	sbcs	r1, r1
 80018b8:	4643      	mov	r3, r8
 80018ba:	4249      	negs	r1, r1
 80018bc:	1a1f      	subs	r7, r3, r0
 80018be:	4655      	mov	r5, sl
 80018c0:	1a7f      	subs	r7, r7, r1
 80018c2:	e595      	b.n	80013f0 <__aeabi_dadd+0xf4>
 80018c4:	077b      	lsls	r3, r7, #29
 80018c6:	08c9      	lsrs	r1, r1, #3
 80018c8:	430b      	orrs	r3, r1
 80018ca:	08f8      	lsrs	r0, r7, #3
 80018cc:	e643      	b.n	8001556 <__aeabi_dadd+0x25a>
 80018ce:	4644      	mov	r4, r8
 80018d0:	08db      	lsrs	r3, r3, #3
 80018d2:	430c      	orrs	r4, r1
 80018d4:	d130      	bne.n	8001938 <__aeabi_dadd+0x63c>
 80018d6:	0742      	lsls	r2, r0, #29
 80018d8:	4313      	orrs	r3, r2
 80018da:	08c0      	lsrs	r0, r0, #3
 80018dc:	e65c      	b.n	8001598 <__aeabi_dadd+0x29c>
 80018de:	077b      	lsls	r3, r7, #29
 80018e0:	08c9      	lsrs	r1, r1, #3
 80018e2:	430b      	orrs	r3, r1
 80018e4:	08f8      	lsrs	r0, r7, #3
 80018e6:	e639      	b.n	800155c <__aeabi_dadd+0x260>
 80018e8:	185c      	adds	r4, r3, r1
 80018ea:	429c      	cmp	r4, r3
 80018ec:	419b      	sbcs	r3, r3
 80018ee:	4440      	add	r0, r8
 80018f0:	425b      	negs	r3, r3
 80018f2:	18c7      	adds	r7, r0, r3
 80018f4:	023b      	lsls	r3, r7, #8
 80018f6:	d400      	bmi.n	80018fa <__aeabi_dadd+0x5fe>
 80018f8:	e625      	b.n	8001546 <__aeabi_dadd+0x24a>
 80018fa:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <__aeabi_dadd+0x674>)
 80018fc:	2601      	movs	r6, #1
 80018fe:	401f      	ands	r7, r3
 8001900:	e621      	b.n	8001546 <__aeabi_dadd+0x24a>
 8001902:	0004      	movs	r4, r0
 8001904:	3a20      	subs	r2, #32
 8001906:	40d4      	lsrs	r4, r2
 8001908:	4662      	mov	r2, ip
 800190a:	2a20      	cmp	r2, #32
 800190c:	d004      	beq.n	8001918 <__aeabi_dadd+0x61c>
 800190e:	2240      	movs	r2, #64	; 0x40
 8001910:	4666      	mov	r6, ip
 8001912:	1b92      	subs	r2, r2, r6
 8001914:	4090      	lsls	r0, r2
 8001916:	4303      	orrs	r3, r0
 8001918:	1e5a      	subs	r2, r3, #1
 800191a:	4193      	sbcs	r3, r2
 800191c:	431c      	orrs	r4, r3
 800191e:	e67e      	b.n	800161e <__aeabi_dadd+0x322>
 8001920:	185c      	adds	r4, r3, r1
 8001922:	428c      	cmp	r4, r1
 8001924:	4189      	sbcs	r1, r1
 8001926:	4440      	add	r0, r8
 8001928:	4249      	negs	r1, r1
 800192a:	1847      	adds	r7, r0, r1
 800192c:	e6dd      	b.n	80016ea <__aeabi_dadd+0x3ee>
 800192e:	0023      	movs	r3, r4
 8001930:	433b      	orrs	r3, r7
 8001932:	d100      	bne.n	8001936 <__aeabi_dadd+0x63a>
 8001934:	e6ad      	b.n	8001692 <__aeabi_dadd+0x396>
 8001936:	e606      	b.n	8001546 <__aeabi_dadd+0x24a>
 8001938:	0744      	lsls	r4, r0, #29
 800193a:	4323      	orrs	r3, r4
 800193c:	2480      	movs	r4, #128	; 0x80
 800193e:	08c0      	lsrs	r0, r0, #3
 8001940:	0324      	lsls	r4, r4, #12
 8001942:	4220      	tst	r0, r4
 8001944:	d008      	beq.n	8001958 <__aeabi_dadd+0x65c>
 8001946:	4642      	mov	r2, r8
 8001948:	08d6      	lsrs	r6, r2, #3
 800194a:	4226      	tst	r6, r4
 800194c:	d104      	bne.n	8001958 <__aeabi_dadd+0x65c>
 800194e:	4655      	mov	r5, sl
 8001950:	0030      	movs	r0, r6
 8001952:	08cb      	lsrs	r3, r1, #3
 8001954:	0751      	lsls	r1, r2, #29
 8001956:	430b      	orrs	r3, r1
 8001958:	0f5a      	lsrs	r2, r3, #29
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	08db      	lsrs	r3, r3, #3
 800195e:	0752      	lsls	r2, r2, #29
 8001960:	4313      	orrs	r3, r2
 8001962:	e619      	b.n	8001598 <__aeabi_dadd+0x29c>
 8001964:	2300      	movs	r3, #0
 8001966:	4a01      	ldr	r2, [pc, #4]	; (800196c <__aeabi_dadd+0x670>)
 8001968:	001f      	movs	r7, r3
 800196a:	e55e      	b.n	800142a <__aeabi_dadd+0x12e>
 800196c:	000007ff 	.word	0x000007ff
 8001970:	ff7fffff 	.word	0xff7fffff

08001974 <__aeabi_ddiv>:
 8001974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001976:	4657      	mov	r7, sl
 8001978:	464e      	mov	r6, r9
 800197a:	4645      	mov	r5, r8
 800197c:	46de      	mov	lr, fp
 800197e:	b5e0      	push	{r5, r6, r7, lr}
 8001980:	4681      	mov	r9, r0
 8001982:	0005      	movs	r5, r0
 8001984:	030c      	lsls	r4, r1, #12
 8001986:	0048      	lsls	r0, r1, #1
 8001988:	4692      	mov	sl, r2
 800198a:	001f      	movs	r7, r3
 800198c:	b085      	sub	sp, #20
 800198e:	0b24      	lsrs	r4, r4, #12
 8001990:	0d40      	lsrs	r0, r0, #21
 8001992:	0fce      	lsrs	r6, r1, #31
 8001994:	2800      	cmp	r0, #0
 8001996:	d100      	bne.n	800199a <__aeabi_ddiv+0x26>
 8001998:	e156      	b.n	8001c48 <__aeabi_ddiv+0x2d4>
 800199a:	4bd4      	ldr	r3, [pc, #848]	; (8001cec <__aeabi_ddiv+0x378>)
 800199c:	4298      	cmp	r0, r3
 800199e:	d100      	bne.n	80019a2 <__aeabi_ddiv+0x2e>
 80019a0:	e172      	b.n	8001c88 <__aeabi_ddiv+0x314>
 80019a2:	0f6b      	lsrs	r3, r5, #29
 80019a4:	00e4      	lsls	r4, r4, #3
 80019a6:	431c      	orrs	r4, r3
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	041b      	lsls	r3, r3, #16
 80019ac:	4323      	orrs	r3, r4
 80019ae:	4698      	mov	r8, r3
 80019b0:	4bcf      	ldr	r3, [pc, #828]	; (8001cf0 <__aeabi_ddiv+0x37c>)
 80019b2:	00ed      	lsls	r5, r5, #3
 80019b4:	469b      	mov	fp, r3
 80019b6:	2300      	movs	r3, #0
 80019b8:	4699      	mov	r9, r3
 80019ba:	4483      	add	fp, r0
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	033c      	lsls	r4, r7, #12
 80019c0:	007b      	lsls	r3, r7, #1
 80019c2:	4650      	mov	r0, sl
 80019c4:	0b24      	lsrs	r4, r4, #12
 80019c6:	0d5b      	lsrs	r3, r3, #21
 80019c8:	0fff      	lsrs	r7, r7, #31
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d100      	bne.n	80019d0 <__aeabi_ddiv+0x5c>
 80019ce:	e11f      	b.n	8001c10 <__aeabi_ddiv+0x29c>
 80019d0:	4ac6      	ldr	r2, [pc, #792]	; (8001cec <__aeabi_ddiv+0x378>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d100      	bne.n	80019d8 <__aeabi_ddiv+0x64>
 80019d6:	e162      	b.n	8001c9e <__aeabi_ddiv+0x32a>
 80019d8:	49c5      	ldr	r1, [pc, #788]	; (8001cf0 <__aeabi_ddiv+0x37c>)
 80019da:	0f42      	lsrs	r2, r0, #29
 80019dc:	468c      	mov	ip, r1
 80019de:	00e4      	lsls	r4, r4, #3
 80019e0:	4659      	mov	r1, fp
 80019e2:	4314      	orrs	r4, r2
 80019e4:	2280      	movs	r2, #128	; 0x80
 80019e6:	4463      	add	r3, ip
 80019e8:	0412      	lsls	r2, r2, #16
 80019ea:	1acb      	subs	r3, r1, r3
 80019ec:	4314      	orrs	r4, r2
 80019ee:	469b      	mov	fp, r3
 80019f0:	00c2      	lsls	r2, r0, #3
 80019f2:	2000      	movs	r0, #0
 80019f4:	0033      	movs	r3, r6
 80019f6:	407b      	eors	r3, r7
 80019f8:	469a      	mov	sl, r3
 80019fa:	464b      	mov	r3, r9
 80019fc:	2b0f      	cmp	r3, #15
 80019fe:	d827      	bhi.n	8001a50 <__aeabi_ddiv+0xdc>
 8001a00:	49bc      	ldr	r1, [pc, #752]	; (8001cf4 <__aeabi_ddiv+0x380>)
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	58cb      	ldr	r3, [r1, r3]
 8001a06:	469f      	mov	pc, r3
 8001a08:	46b2      	mov	sl, r6
 8001a0a:	9b00      	ldr	r3, [sp, #0]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d016      	beq.n	8001a3e <__aeabi_ddiv+0xca>
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d100      	bne.n	8001a16 <__aeabi_ddiv+0xa2>
 8001a14:	e28e      	b.n	8001f34 <__aeabi_ddiv+0x5c0>
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d000      	beq.n	8001a1c <__aeabi_ddiv+0xa8>
 8001a1a:	e0d9      	b.n	8001bd0 <__aeabi_ddiv+0x25c>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	2400      	movs	r4, #0
 8001a20:	2500      	movs	r5, #0
 8001a22:	4652      	mov	r2, sl
 8001a24:	051b      	lsls	r3, r3, #20
 8001a26:	4323      	orrs	r3, r4
 8001a28:	07d2      	lsls	r2, r2, #31
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	0028      	movs	r0, r5
 8001a2e:	0019      	movs	r1, r3
 8001a30:	b005      	add	sp, #20
 8001a32:	bcf0      	pop	{r4, r5, r6, r7}
 8001a34:	46bb      	mov	fp, r7
 8001a36:	46b2      	mov	sl, r6
 8001a38:	46a9      	mov	r9, r5
 8001a3a:	46a0      	mov	r8, r4
 8001a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a3e:	2400      	movs	r4, #0
 8001a40:	2500      	movs	r5, #0
 8001a42:	4baa      	ldr	r3, [pc, #680]	; (8001cec <__aeabi_ddiv+0x378>)
 8001a44:	e7ed      	b.n	8001a22 <__aeabi_ddiv+0xae>
 8001a46:	46ba      	mov	sl, r7
 8001a48:	46a0      	mov	r8, r4
 8001a4a:	0015      	movs	r5, r2
 8001a4c:	9000      	str	r0, [sp, #0]
 8001a4e:	e7dc      	b.n	8001a0a <__aeabi_ddiv+0x96>
 8001a50:	4544      	cmp	r4, r8
 8001a52:	d200      	bcs.n	8001a56 <__aeabi_ddiv+0xe2>
 8001a54:	e1c7      	b.n	8001de6 <__aeabi_ddiv+0x472>
 8001a56:	d100      	bne.n	8001a5a <__aeabi_ddiv+0xe6>
 8001a58:	e1c2      	b.n	8001de0 <__aeabi_ddiv+0x46c>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	425b      	negs	r3, r3
 8001a5e:	469c      	mov	ip, r3
 8001a60:	002e      	movs	r6, r5
 8001a62:	4640      	mov	r0, r8
 8001a64:	2500      	movs	r5, #0
 8001a66:	44e3      	add	fp, ip
 8001a68:	0223      	lsls	r3, r4, #8
 8001a6a:	0e14      	lsrs	r4, r2, #24
 8001a6c:	431c      	orrs	r4, r3
 8001a6e:	0c1b      	lsrs	r3, r3, #16
 8001a70:	4699      	mov	r9, r3
 8001a72:	0423      	lsls	r3, r4, #16
 8001a74:	0c1f      	lsrs	r7, r3, #16
 8001a76:	0212      	lsls	r2, r2, #8
 8001a78:	4649      	mov	r1, r9
 8001a7a:	9200      	str	r2, [sp, #0]
 8001a7c:	9701      	str	r7, [sp, #4]
 8001a7e:	f7fe fbe5 	bl	800024c <__aeabi_uidivmod>
 8001a82:	0002      	movs	r2, r0
 8001a84:	437a      	muls	r2, r7
 8001a86:	040b      	lsls	r3, r1, #16
 8001a88:	0c31      	lsrs	r1, r6, #16
 8001a8a:	4680      	mov	r8, r0
 8001a8c:	4319      	orrs	r1, r3
 8001a8e:	428a      	cmp	r2, r1
 8001a90:	d907      	bls.n	8001aa2 <__aeabi_ddiv+0x12e>
 8001a92:	2301      	movs	r3, #1
 8001a94:	425b      	negs	r3, r3
 8001a96:	469c      	mov	ip, r3
 8001a98:	1909      	adds	r1, r1, r4
 8001a9a:	44e0      	add	r8, ip
 8001a9c:	428c      	cmp	r4, r1
 8001a9e:	d800      	bhi.n	8001aa2 <__aeabi_ddiv+0x12e>
 8001aa0:	e207      	b.n	8001eb2 <__aeabi_ddiv+0x53e>
 8001aa2:	1a88      	subs	r0, r1, r2
 8001aa4:	4649      	mov	r1, r9
 8001aa6:	f7fe fbd1 	bl	800024c <__aeabi_uidivmod>
 8001aaa:	0409      	lsls	r1, r1, #16
 8001aac:	468c      	mov	ip, r1
 8001aae:	0431      	lsls	r1, r6, #16
 8001ab0:	4666      	mov	r6, ip
 8001ab2:	9a01      	ldr	r2, [sp, #4]
 8001ab4:	0c09      	lsrs	r1, r1, #16
 8001ab6:	4342      	muls	r2, r0
 8001ab8:	0003      	movs	r3, r0
 8001aba:	4331      	orrs	r1, r6
 8001abc:	428a      	cmp	r2, r1
 8001abe:	d904      	bls.n	8001aca <__aeabi_ddiv+0x156>
 8001ac0:	1909      	adds	r1, r1, r4
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	428c      	cmp	r4, r1
 8001ac6:	d800      	bhi.n	8001aca <__aeabi_ddiv+0x156>
 8001ac8:	e1ed      	b.n	8001ea6 <__aeabi_ddiv+0x532>
 8001aca:	1a88      	subs	r0, r1, r2
 8001acc:	4642      	mov	r2, r8
 8001ace:	0412      	lsls	r2, r2, #16
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	4690      	mov	r8, r2
 8001ad4:	4641      	mov	r1, r8
 8001ad6:	9b00      	ldr	r3, [sp, #0]
 8001ad8:	040e      	lsls	r6, r1, #16
 8001ada:	0c1b      	lsrs	r3, r3, #16
 8001adc:	001f      	movs	r7, r3
 8001ade:	9302      	str	r3, [sp, #8]
 8001ae0:	9b00      	ldr	r3, [sp, #0]
 8001ae2:	0c36      	lsrs	r6, r6, #16
 8001ae4:	041b      	lsls	r3, r3, #16
 8001ae6:	0c19      	lsrs	r1, r3, #16
 8001ae8:	000b      	movs	r3, r1
 8001aea:	4373      	muls	r3, r6
 8001aec:	0c12      	lsrs	r2, r2, #16
 8001aee:	437e      	muls	r6, r7
 8001af0:	9103      	str	r1, [sp, #12]
 8001af2:	4351      	muls	r1, r2
 8001af4:	437a      	muls	r2, r7
 8001af6:	0c1f      	lsrs	r7, r3, #16
 8001af8:	46bc      	mov	ip, r7
 8001afa:	1876      	adds	r6, r6, r1
 8001afc:	4466      	add	r6, ip
 8001afe:	42b1      	cmp	r1, r6
 8001b00:	d903      	bls.n	8001b0a <__aeabi_ddiv+0x196>
 8001b02:	2180      	movs	r1, #128	; 0x80
 8001b04:	0249      	lsls	r1, r1, #9
 8001b06:	468c      	mov	ip, r1
 8001b08:	4462      	add	r2, ip
 8001b0a:	0c31      	lsrs	r1, r6, #16
 8001b0c:	188a      	adds	r2, r1, r2
 8001b0e:	0431      	lsls	r1, r6, #16
 8001b10:	041e      	lsls	r6, r3, #16
 8001b12:	0c36      	lsrs	r6, r6, #16
 8001b14:	198e      	adds	r6, r1, r6
 8001b16:	4290      	cmp	r0, r2
 8001b18:	d302      	bcc.n	8001b20 <__aeabi_ddiv+0x1ac>
 8001b1a:	d112      	bne.n	8001b42 <__aeabi_ddiv+0x1ce>
 8001b1c:	42b5      	cmp	r5, r6
 8001b1e:	d210      	bcs.n	8001b42 <__aeabi_ddiv+0x1ce>
 8001b20:	4643      	mov	r3, r8
 8001b22:	1e59      	subs	r1, r3, #1
 8001b24:	9b00      	ldr	r3, [sp, #0]
 8001b26:	469c      	mov	ip, r3
 8001b28:	4465      	add	r5, ip
 8001b2a:	001f      	movs	r7, r3
 8001b2c:	429d      	cmp	r5, r3
 8001b2e:	419b      	sbcs	r3, r3
 8001b30:	425b      	negs	r3, r3
 8001b32:	191b      	adds	r3, r3, r4
 8001b34:	18c0      	adds	r0, r0, r3
 8001b36:	4284      	cmp	r4, r0
 8001b38:	d200      	bcs.n	8001b3c <__aeabi_ddiv+0x1c8>
 8001b3a:	e1a0      	b.n	8001e7e <__aeabi_ddiv+0x50a>
 8001b3c:	d100      	bne.n	8001b40 <__aeabi_ddiv+0x1cc>
 8001b3e:	e19b      	b.n	8001e78 <__aeabi_ddiv+0x504>
 8001b40:	4688      	mov	r8, r1
 8001b42:	1bae      	subs	r6, r5, r6
 8001b44:	42b5      	cmp	r5, r6
 8001b46:	41ad      	sbcs	r5, r5
 8001b48:	1a80      	subs	r0, r0, r2
 8001b4a:	426d      	negs	r5, r5
 8001b4c:	1b40      	subs	r0, r0, r5
 8001b4e:	4284      	cmp	r4, r0
 8001b50:	d100      	bne.n	8001b54 <__aeabi_ddiv+0x1e0>
 8001b52:	e1d5      	b.n	8001f00 <__aeabi_ddiv+0x58c>
 8001b54:	4649      	mov	r1, r9
 8001b56:	f7fe fb79 	bl	800024c <__aeabi_uidivmod>
 8001b5a:	9a01      	ldr	r2, [sp, #4]
 8001b5c:	040b      	lsls	r3, r1, #16
 8001b5e:	4342      	muls	r2, r0
 8001b60:	0c31      	lsrs	r1, r6, #16
 8001b62:	0005      	movs	r5, r0
 8001b64:	4319      	orrs	r1, r3
 8001b66:	428a      	cmp	r2, r1
 8001b68:	d900      	bls.n	8001b6c <__aeabi_ddiv+0x1f8>
 8001b6a:	e16c      	b.n	8001e46 <__aeabi_ddiv+0x4d2>
 8001b6c:	1a88      	subs	r0, r1, r2
 8001b6e:	4649      	mov	r1, r9
 8001b70:	f7fe fb6c 	bl	800024c <__aeabi_uidivmod>
 8001b74:	9a01      	ldr	r2, [sp, #4]
 8001b76:	0436      	lsls	r6, r6, #16
 8001b78:	4342      	muls	r2, r0
 8001b7a:	0409      	lsls	r1, r1, #16
 8001b7c:	0c36      	lsrs	r6, r6, #16
 8001b7e:	0003      	movs	r3, r0
 8001b80:	430e      	orrs	r6, r1
 8001b82:	42b2      	cmp	r2, r6
 8001b84:	d900      	bls.n	8001b88 <__aeabi_ddiv+0x214>
 8001b86:	e153      	b.n	8001e30 <__aeabi_ddiv+0x4bc>
 8001b88:	9803      	ldr	r0, [sp, #12]
 8001b8a:	1ab6      	subs	r6, r6, r2
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	042d      	lsls	r5, r5, #16
 8001b90:	431d      	orrs	r5, r3
 8001b92:	9f02      	ldr	r7, [sp, #8]
 8001b94:	042b      	lsls	r3, r5, #16
 8001b96:	0c1b      	lsrs	r3, r3, #16
 8001b98:	435a      	muls	r2, r3
 8001b9a:	437b      	muls	r3, r7
 8001b9c:	469c      	mov	ip, r3
 8001b9e:	0c29      	lsrs	r1, r5, #16
 8001ba0:	4348      	muls	r0, r1
 8001ba2:	0c13      	lsrs	r3, r2, #16
 8001ba4:	4484      	add	ip, r0
 8001ba6:	4463      	add	r3, ip
 8001ba8:	4379      	muls	r1, r7
 8001baa:	4298      	cmp	r0, r3
 8001bac:	d903      	bls.n	8001bb6 <__aeabi_ddiv+0x242>
 8001bae:	2080      	movs	r0, #128	; 0x80
 8001bb0:	0240      	lsls	r0, r0, #9
 8001bb2:	4684      	mov	ip, r0
 8001bb4:	4461      	add	r1, ip
 8001bb6:	0c18      	lsrs	r0, r3, #16
 8001bb8:	0412      	lsls	r2, r2, #16
 8001bba:	041b      	lsls	r3, r3, #16
 8001bbc:	0c12      	lsrs	r2, r2, #16
 8001bbe:	1841      	adds	r1, r0, r1
 8001bc0:	189b      	adds	r3, r3, r2
 8001bc2:	428e      	cmp	r6, r1
 8001bc4:	d200      	bcs.n	8001bc8 <__aeabi_ddiv+0x254>
 8001bc6:	e0ff      	b.n	8001dc8 <__aeabi_ddiv+0x454>
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_ddiv+0x258>
 8001bca:	e0fa      	b.n	8001dc2 <__aeabi_ddiv+0x44e>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	431d      	orrs	r5, r3
 8001bd0:	4a49      	ldr	r2, [pc, #292]	; (8001cf8 <__aeabi_ddiv+0x384>)
 8001bd2:	445a      	add	r2, fp
 8001bd4:	2a00      	cmp	r2, #0
 8001bd6:	dc00      	bgt.n	8001bda <__aeabi_ddiv+0x266>
 8001bd8:	e0aa      	b.n	8001d30 <__aeabi_ddiv+0x3bc>
 8001bda:	076b      	lsls	r3, r5, #29
 8001bdc:	d000      	beq.n	8001be0 <__aeabi_ddiv+0x26c>
 8001bde:	e13d      	b.n	8001e5c <__aeabi_ddiv+0x4e8>
 8001be0:	08ed      	lsrs	r5, r5, #3
 8001be2:	4643      	mov	r3, r8
 8001be4:	01db      	lsls	r3, r3, #7
 8001be6:	d506      	bpl.n	8001bf6 <__aeabi_ddiv+0x282>
 8001be8:	4642      	mov	r2, r8
 8001bea:	4b44      	ldr	r3, [pc, #272]	; (8001cfc <__aeabi_ddiv+0x388>)
 8001bec:	401a      	ands	r2, r3
 8001bee:	4690      	mov	r8, r2
 8001bf0:	2280      	movs	r2, #128	; 0x80
 8001bf2:	00d2      	lsls	r2, r2, #3
 8001bf4:	445a      	add	r2, fp
 8001bf6:	4b42      	ldr	r3, [pc, #264]	; (8001d00 <__aeabi_ddiv+0x38c>)
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	dd00      	ble.n	8001bfe <__aeabi_ddiv+0x28a>
 8001bfc:	e71f      	b.n	8001a3e <__aeabi_ddiv+0xca>
 8001bfe:	4643      	mov	r3, r8
 8001c00:	075b      	lsls	r3, r3, #29
 8001c02:	431d      	orrs	r5, r3
 8001c04:	4643      	mov	r3, r8
 8001c06:	0552      	lsls	r2, r2, #21
 8001c08:	025c      	lsls	r4, r3, #9
 8001c0a:	0b24      	lsrs	r4, r4, #12
 8001c0c:	0d53      	lsrs	r3, r2, #21
 8001c0e:	e708      	b.n	8001a22 <__aeabi_ddiv+0xae>
 8001c10:	4652      	mov	r2, sl
 8001c12:	4322      	orrs	r2, r4
 8001c14:	d100      	bne.n	8001c18 <__aeabi_ddiv+0x2a4>
 8001c16:	e07b      	b.n	8001d10 <__aeabi_ddiv+0x39c>
 8001c18:	2c00      	cmp	r4, #0
 8001c1a:	d100      	bne.n	8001c1e <__aeabi_ddiv+0x2aa>
 8001c1c:	e0fa      	b.n	8001e14 <__aeabi_ddiv+0x4a0>
 8001c1e:	0020      	movs	r0, r4
 8001c20:	f001 f9d4 	bl	8002fcc <__clzsi2>
 8001c24:	0002      	movs	r2, r0
 8001c26:	3a0b      	subs	r2, #11
 8001c28:	231d      	movs	r3, #29
 8001c2a:	0001      	movs	r1, r0
 8001c2c:	1a9b      	subs	r3, r3, r2
 8001c2e:	4652      	mov	r2, sl
 8001c30:	3908      	subs	r1, #8
 8001c32:	40da      	lsrs	r2, r3
 8001c34:	408c      	lsls	r4, r1
 8001c36:	4314      	orrs	r4, r2
 8001c38:	4652      	mov	r2, sl
 8001c3a:	408a      	lsls	r2, r1
 8001c3c:	4b31      	ldr	r3, [pc, #196]	; (8001d04 <__aeabi_ddiv+0x390>)
 8001c3e:	4458      	add	r0, fp
 8001c40:	469b      	mov	fp, r3
 8001c42:	4483      	add	fp, r0
 8001c44:	2000      	movs	r0, #0
 8001c46:	e6d5      	b.n	80019f4 <__aeabi_ddiv+0x80>
 8001c48:	464b      	mov	r3, r9
 8001c4a:	4323      	orrs	r3, r4
 8001c4c:	4698      	mov	r8, r3
 8001c4e:	d044      	beq.n	8001cda <__aeabi_ddiv+0x366>
 8001c50:	2c00      	cmp	r4, #0
 8001c52:	d100      	bne.n	8001c56 <__aeabi_ddiv+0x2e2>
 8001c54:	e0ce      	b.n	8001df4 <__aeabi_ddiv+0x480>
 8001c56:	0020      	movs	r0, r4
 8001c58:	f001 f9b8 	bl	8002fcc <__clzsi2>
 8001c5c:	0001      	movs	r1, r0
 8001c5e:	0002      	movs	r2, r0
 8001c60:	390b      	subs	r1, #11
 8001c62:	231d      	movs	r3, #29
 8001c64:	1a5b      	subs	r3, r3, r1
 8001c66:	4649      	mov	r1, r9
 8001c68:	0010      	movs	r0, r2
 8001c6a:	40d9      	lsrs	r1, r3
 8001c6c:	3808      	subs	r0, #8
 8001c6e:	4084      	lsls	r4, r0
 8001c70:	000b      	movs	r3, r1
 8001c72:	464d      	mov	r5, r9
 8001c74:	4323      	orrs	r3, r4
 8001c76:	4698      	mov	r8, r3
 8001c78:	4085      	lsls	r5, r0
 8001c7a:	4823      	ldr	r0, [pc, #140]	; (8001d08 <__aeabi_ddiv+0x394>)
 8001c7c:	1a83      	subs	r3, r0, r2
 8001c7e:	469b      	mov	fp, r3
 8001c80:	2300      	movs	r3, #0
 8001c82:	4699      	mov	r9, r3
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	e69a      	b.n	80019be <__aeabi_ddiv+0x4a>
 8001c88:	464b      	mov	r3, r9
 8001c8a:	4323      	orrs	r3, r4
 8001c8c:	4698      	mov	r8, r3
 8001c8e:	d11d      	bne.n	8001ccc <__aeabi_ddiv+0x358>
 8001c90:	2308      	movs	r3, #8
 8001c92:	4699      	mov	r9, r3
 8001c94:	3b06      	subs	r3, #6
 8001c96:	2500      	movs	r5, #0
 8001c98:	4683      	mov	fp, r0
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	e68f      	b.n	80019be <__aeabi_ddiv+0x4a>
 8001c9e:	4652      	mov	r2, sl
 8001ca0:	4322      	orrs	r2, r4
 8001ca2:	d109      	bne.n	8001cb8 <__aeabi_ddiv+0x344>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	4649      	mov	r1, r9
 8001ca8:	4319      	orrs	r1, r3
 8001caa:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <__aeabi_ddiv+0x398>)
 8001cac:	4689      	mov	r9, r1
 8001cae:	469c      	mov	ip, r3
 8001cb0:	2400      	movs	r4, #0
 8001cb2:	2002      	movs	r0, #2
 8001cb4:	44e3      	add	fp, ip
 8001cb6:	e69d      	b.n	80019f4 <__aeabi_ddiv+0x80>
 8001cb8:	2303      	movs	r3, #3
 8001cba:	464a      	mov	r2, r9
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <__aeabi_ddiv+0x398>)
 8001cc0:	4691      	mov	r9, r2
 8001cc2:	469c      	mov	ip, r3
 8001cc4:	4652      	mov	r2, sl
 8001cc6:	2003      	movs	r0, #3
 8001cc8:	44e3      	add	fp, ip
 8001cca:	e693      	b.n	80019f4 <__aeabi_ddiv+0x80>
 8001ccc:	230c      	movs	r3, #12
 8001cce:	4699      	mov	r9, r3
 8001cd0:	3b09      	subs	r3, #9
 8001cd2:	46a0      	mov	r8, r4
 8001cd4:	4683      	mov	fp, r0
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	e671      	b.n	80019be <__aeabi_ddiv+0x4a>
 8001cda:	2304      	movs	r3, #4
 8001cdc:	4699      	mov	r9, r3
 8001cde:	2300      	movs	r3, #0
 8001ce0:	469b      	mov	fp, r3
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	2500      	movs	r5, #0
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	e669      	b.n	80019be <__aeabi_ddiv+0x4a>
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	000007ff 	.word	0x000007ff
 8001cf0:	fffffc01 	.word	0xfffffc01
 8001cf4:	08009c4c 	.word	0x08009c4c
 8001cf8:	000003ff 	.word	0x000003ff
 8001cfc:	feffffff 	.word	0xfeffffff
 8001d00:	000007fe 	.word	0x000007fe
 8001d04:	000003f3 	.word	0x000003f3
 8001d08:	fffffc0d 	.word	0xfffffc0d
 8001d0c:	fffff801 	.word	0xfffff801
 8001d10:	4649      	mov	r1, r9
 8001d12:	2301      	movs	r3, #1
 8001d14:	4319      	orrs	r1, r3
 8001d16:	4689      	mov	r9, r1
 8001d18:	2400      	movs	r4, #0
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	e66a      	b.n	80019f4 <__aeabi_ddiv+0x80>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	2480      	movs	r4, #128	; 0x80
 8001d22:	469a      	mov	sl, r3
 8001d24:	2500      	movs	r5, #0
 8001d26:	4b8a      	ldr	r3, [pc, #552]	; (8001f50 <__aeabi_ddiv+0x5dc>)
 8001d28:	0324      	lsls	r4, r4, #12
 8001d2a:	e67a      	b.n	8001a22 <__aeabi_ddiv+0xae>
 8001d2c:	2501      	movs	r5, #1
 8001d2e:	426d      	negs	r5, r5
 8001d30:	2301      	movs	r3, #1
 8001d32:	1a9b      	subs	r3, r3, r2
 8001d34:	2b38      	cmp	r3, #56	; 0x38
 8001d36:	dd00      	ble.n	8001d3a <__aeabi_ddiv+0x3c6>
 8001d38:	e670      	b.n	8001a1c <__aeabi_ddiv+0xa8>
 8001d3a:	2b1f      	cmp	r3, #31
 8001d3c:	dc00      	bgt.n	8001d40 <__aeabi_ddiv+0x3cc>
 8001d3e:	e0bf      	b.n	8001ec0 <__aeabi_ddiv+0x54c>
 8001d40:	211f      	movs	r1, #31
 8001d42:	4249      	negs	r1, r1
 8001d44:	1a8a      	subs	r2, r1, r2
 8001d46:	4641      	mov	r1, r8
 8001d48:	40d1      	lsrs	r1, r2
 8001d4a:	000a      	movs	r2, r1
 8001d4c:	2b20      	cmp	r3, #32
 8001d4e:	d004      	beq.n	8001d5a <__aeabi_ddiv+0x3e6>
 8001d50:	4641      	mov	r1, r8
 8001d52:	4b80      	ldr	r3, [pc, #512]	; (8001f54 <__aeabi_ddiv+0x5e0>)
 8001d54:	445b      	add	r3, fp
 8001d56:	4099      	lsls	r1, r3
 8001d58:	430d      	orrs	r5, r1
 8001d5a:	1e6b      	subs	r3, r5, #1
 8001d5c:	419d      	sbcs	r5, r3
 8001d5e:	2307      	movs	r3, #7
 8001d60:	432a      	orrs	r2, r5
 8001d62:	001d      	movs	r5, r3
 8001d64:	2400      	movs	r4, #0
 8001d66:	4015      	ands	r5, r2
 8001d68:	4213      	tst	r3, r2
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_ddiv+0x3fa>
 8001d6c:	e0d4      	b.n	8001f18 <__aeabi_ddiv+0x5a4>
 8001d6e:	210f      	movs	r1, #15
 8001d70:	2300      	movs	r3, #0
 8001d72:	4011      	ands	r1, r2
 8001d74:	2904      	cmp	r1, #4
 8001d76:	d100      	bne.n	8001d7a <__aeabi_ddiv+0x406>
 8001d78:	e0cb      	b.n	8001f12 <__aeabi_ddiv+0x59e>
 8001d7a:	1d11      	adds	r1, r2, #4
 8001d7c:	4291      	cmp	r1, r2
 8001d7e:	4192      	sbcs	r2, r2
 8001d80:	4252      	negs	r2, r2
 8001d82:	189b      	adds	r3, r3, r2
 8001d84:	000a      	movs	r2, r1
 8001d86:	0219      	lsls	r1, r3, #8
 8001d88:	d400      	bmi.n	8001d8c <__aeabi_ddiv+0x418>
 8001d8a:	e0c2      	b.n	8001f12 <__aeabi_ddiv+0x59e>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	2400      	movs	r4, #0
 8001d90:	2500      	movs	r5, #0
 8001d92:	e646      	b.n	8001a22 <__aeabi_ddiv+0xae>
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	4641      	mov	r1, r8
 8001d98:	031b      	lsls	r3, r3, #12
 8001d9a:	4219      	tst	r1, r3
 8001d9c:	d008      	beq.n	8001db0 <__aeabi_ddiv+0x43c>
 8001d9e:	421c      	tst	r4, r3
 8001da0:	d106      	bne.n	8001db0 <__aeabi_ddiv+0x43c>
 8001da2:	431c      	orrs	r4, r3
 8001da4:	0324      	lsls	r4, r4, #12
 8001da6:	46ba      	mov	sl, r7
 8001da8:	0015      	movs	r5, r2
 8001daa:	4b69      	ldr	r3, [pc, #420]	; (8001f50 <__aeabi_ddiv+0x5dc>)
 8001dac:	0b24      	lsrs	r4, r4, #12
 8001dae:	e638      	b.n	8001a22 <__aeabi_ddiv+0xae>
 8001db0:	2480      	movs	r4, #128	; 0x80
 8001db2:	4643      	mov	r3, r8
 8001db4:	0324      	lsls	r4, r4, #12
 8001db6:	431c      	orrs	r4, r3
 8001db8:	0324      	lsls	r4, r4, #12
 8001dba:	46b2      	mov	sl, r6
 8001dbc:	4b64      	ldr	r3, [pc, #400]	; (8001f50 <__aeabi_ddiv+0x5dc>)
 8001dbe:	0b24      	lsrs	r4, r4, #12
 8001dc0:	e62f      	b.n	8001a22 <__aeabi_ddiv+0xae>
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d100      	bne.n	8001dc8 <__aeabi_ddiv+0x454>
 8001dc6:	e703      	b.n	8001bd0 <__aeabi_ddiv+0x25c>
 8001dc8:	19a6      	adds	r6, r4, r6
 8001dca:	1e68      	subs	r0, r5, #1
 8001dcc:	42a6      	cmp	r6, r4
 8001dce:	d200      	bcs.n	8001dd2 <__aeabi_ddiv+0x45e>
 8001dd0:	e08d      	b.n	8001eee <__aeabi_ddiv+0x57a>
 8001dd2:	428e      	cmp	r6, r1
 8001dd4:	d200      	bcs.n	8001dd8 <__aeabi_ddiv+0x464>
 8001dd6:	e0a3      	b.n	8001f20 <__aeabi_ddiv+0x5ac>
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x468>
 8001dda:	e0b3      	b.n	8001f44 <__aeabi_ddiv+0x5d0>
 8001ddc:	0005      	movs	r5, r0
 8001dde:	e6f5      	b.n	8001bcc <__aeabi_ddiv+0x258>
 8001de0:	42aa      	cmp	r2, r5
 8001de2:	d900      	bls.n	8001de6 <__aeabi_ddiv+0x472>
 8001de4:	e639      	b.n	8001a5a <__aeabi_ddiv+0xe6>
 8001de6:	4643      	mov	r3, r8
 8001de8:	07de      	lsls	r6, r3, #31
 8001dea:	0858      	lsrs	r0, r3, #1
 8001dec:	086b      	lsrs	r3, r5, #1
 8001dee:	431e      	orrs	r6, r3
 8001df0:	07ed      	lsls	r5, r5, #31
 8001df2:	e639      	b.n	8001a68 <__aeabi_ddiv+0xf4>
 8001df4:	4648      	mov	r0, r9
 8001df6:	f001 f8e9 	bl	8002fcc <__clzsi2>
 8001dfa:	0001      	movs	r1, r0
 8001dfc:	0002      	movs	r2, r0
 8001dfe:	3115      	adds	r1, #21
 8001e00:	3220      	adds	r2, #32
 8001e02:	291c      	cmp	r1, #28
 8001e04:	dc00      	bgt.n	8001e08 <__aeabi_ddiv+0x494>
 8001e06:	e72c      	b.n	8001c62 <__aeabi_ddiv+0x2ee>
 8001e08:	464b      	mov	r3, r9
 8001e0a:	3808      	subs	r0, #8
 8001e0c:	4083      	lsls	r3, r0
 8001e0e:	2500      	movs	r5, #0
 8001e10:	4698      	mov	r8, r3
 8001e12:	e732      	b.n	8001c7a <__aeabi_ddiv+0x306>
 8001e14:	f001 f8da 	bl	8002fcc <__clzsi2>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	001a      	movs	r2, r3
 8001e1c:	3215      	adds	r2, #21
 8001e1e:	3020      	adds	r0, #32
 8001e20:	2a1c      	cmp	r2, #28
 8001e22:	dc00      	bgt.n	8001e26 <__aeabi_ddiv+0x4b2>
 8001e24:	e700      	b.n	8001c28 <__aeabi_ddiv+0x2b4>
 8001e26:	4654      	mov	r4, sl
 8001e28:	3b08      	subs	r3, #8
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	409c      	lsls	r4, r3
 8001e2e:	e705      	b.n	8001c3c <__aeabi_ddiv+0x2c8>
 8001e30:	1936      	adds	r6, r6, r4
 8001e32:	3b01      	subs	r3, #1
 8001e34:	42b4      	cmp	r4, r6
 8001e36:	d900      	bls.n	8001e3a <__aeabi_ddiv+0x4c6>
 8001e38:	e6a6      	b.n	8001b88 <__aeabi_ddiv+0x214>
 8001e3a:	42b2      	cmp	r2, r6
 8001e3c:	d800      	bhi.n	8001e40 <__aeabi_ddiv+0x4cc>
 8001e3e:	e6a3      	b.n	8001b88 <__aeabi_ddiv+0x214>
 8001e40:	1e83      	subs	r3, r0, #2
 8001e42:	1936      	adds	r6, r6, r4
 8001e44:	e6a0      	b.n	8001b88 <__aeabi_ddiv+0x214>
 8001e46:	1909      	adds	r1, r1, r4
 8001e48:	3d01      	subs	r5, #1
 8001e4a:	428c      	cmp	r4, r1
 8001e4c:	d900      	bls.n	8001e50 <__aeabi_ddiv+0x4dc>
 8001e4e:	e68d      	b.n	8001b6c <__aeabi_ddiv+0x1f8>
 8001e50:	428a      	cmp	r2, r1
 8001e52:	d800      	bhi.n	8001e56 <__aeabi_ddiv+0x4e2>
 8001e54:	e68a      	b.n	8001b6c <__aeabi_ddiv+0x1f8>
 8001e56:	1e85      	subs	r5, r0, #2
 8001e58:	1909      	adds	r1, r1, r4
 8001e5a:	e687      	b.n	8001b6c <__aeabi_ddiv+0x1f8>
 8001e5c:	230f      	movs	r3, #15
 8001e5e:	402b      	ands	r3, r5
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0x4f2>
 8001e64:	e6bc      	b.n	8001be0 <__aeabi_ddiv+0x26c>
 8001e66:	2305      	movs	r3, #5
 8001e68:	425b      	negs	r3, r3
 8001e6a:	42ab      	cmp	r3, r5
 8001e6c:	419b      	sbcs	r3, r3
 8001e6e:	3504      	adds	r5, #4
 8001e70:	425b      	negs	r3, r3
 8001e72:	08ed      	lsrs	r5, r5, #3
 8001e74:	4498      	add	r8, r3
 8001e76:	e6b4      	b.n	8001be2 <__aeabi_ddiv+0x26e>
 8001e78:	42af      	cmp	r7, r5
 8001e7a:	d900      	bls.n	8001e7e <__aeabi_ddiv+0x50a>
 8001e7c:	e660      	b.n	8001b40 <__aeabi_ddiv+0x1cc>
 8001e7e:	4282      	cmp	r2, r0
 8001e80:	d804      	bhi.n	8001e8c <__aeabi_ddiv+0x518>
 8001e82:	d000      	beq.n	8001e86 <__aeabi_ddiv+0x512>
 8001e84:	e65c      	b.n	8001b40 <__aeabi_ddiv+0x1cc>
 8001e86:	42ae      	cmp	r6, r5
 8001e88:	d800      	bhi.n	8001e8c <__aeabi_ddiv+0x518>
 8001e8a:	e659      	b.n	8001b40 <__aeabi_ddiv+0x1cc>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	425b      	negs	r3, r3
 8001e90:	469c      	mov	ip, r3
 8001e92:	9b00      	ldr	r3, [sp, #0]
 8001e94:	44e0      	add	r8, ip
 8001e96:	469c      	mov	ip, r3
 8001e98:	4465      	add	r5, ip
 8001e9a:	429d      	cmp	r5, r3
 8001e9c:	419b      	sbcs	r3, r3
 8001e9e:	425b      	negs	r3, r3
 8001ea0:	191b      	adds	r3, r3, r4
 8001ea2:	18c0      	adds	r0, r0, r3
 8001ea4:	e64d      	b.n	8001b42 <__aeabi_ddiv+0x1ce>
 8001ea6:	428a      	cmp	r2, r1
 8001ea8:	d800      	bhi.n	8001eac <__aeabi_ddiv+0x538>
 8001eaa:	e60e      	b.n	8001aca <__aeabi_ddiv+0x156>
 8001eac:	1e83      	subs	r3, r0, #2
 8001eae:	1909      	adds	r1, r1, r4
 8001eb0:	e60b      	b.n	8001aca <__aeabi_ddiv+0x156>
 8001eb2:	428a      	cmp	r2, r1
 8001eb4:	d800      	bhi.n	8001eb8 <__aeabi_ddiv+0x544>
 8001eb6:	e5f4      	b.n	8001aa2 <__aeabi_ddiv+0x12e>
 8001eb8:	1e83      	subs	r3, r0, #2
 8001eba:	4698      	mov	r8, r3
 8001ebc:	1909      	adds	r1, r1, r4
 8001ebe:	e5f0      	b.n	8001aa2 <__aeabi_ddiv+0x12e>
 8001ec0:	4925      	ldr	r1, [pc, #148]	; (8001f58 <__aeabi_ddiv+0x5e4>)
 8001ec2:	0028      	movs	r0, r5
 8001ec4:	4459      	add	r1, fp
 8001ec6:	408d      	lsls	r5, r1
 8001ec8:	4642      	mov	r2, r8
 8001eca:	408a      	lsls	r2, r1
 8001ecc:	1e69      	subs	r1, r5, #1
 8001ece:	418d      	sbcs	r5, r1
 8001ed0:	4641      	mov	r1, r8
 8001ed2:	40d8      	lsrs	r0, r3
 8001ed4:	40d9      	lsrs	r1, r3
 8001ed6:	4302      	orrs	r2, r0
 8001ed8:	432a      	orrs	r2, r5
 8001eda:	000b      	movs	r3, r1
 8001edc:	0751      	lsls	r1, r2, #29
 8001ede:	d100      	bne.n	8001ee2 <__aeabi_ddiv+0x56e>
 8001ee0:	e751      	b.n	8001d86 <__aeabi_ddiv+0x412>
 8001ee2:	210f      	movs	r1, #15
 8001ee4:	4011      	ands	r1, r2
 8001ee6:	2904      	cmp	r1, #4
 8001ee8:	d000      	beq.n	8001eec <__aeabi_ddiv+0x578>
 8001eea:	e746      	b.n	8001d7a <__aeabi_ddiv+0x406>
 8001eec:	e74b      	b.n	8001d86 <__aeabi_ddiv+0x412>
 8001eee:	0005      	movs	r5, r0
 8001ef0:	428e      	cmp	r6, r1
 8001ef2:	d000      	beq.n	8001ef6 <__aeabi_ddiv+0x582>
 8001ef4:	e66a      	b.n	8001bcc <__aeabi_ddiv+0x258>
 8001ef6:	9a00      	ldr	r2, [sp, #0]
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d000      	beq.n	8001efe <__aeabi_ddiv+0x58a>
 8001efc:	e666      	b.n	8001bcc <__aeabi_ddiv+0x258>
 8001efe:	e667      	b.n	8001bd0 <__aeabi_ddiv+0x25c>
 8001f00:	4a16      	ldr	r2, [pc, #88]	; (8001f5c <__aeabi_ddiv+0x5e8>)
 8001f02:	445a      	add	r2, fp
 8001f04:	2a00      	cmp	r2, #0
 8001f06:	dc00      	bgt.n	8001f0a <__aeabi_ddiv+0x596>
 8001f08:	e710      	b.n	8001d2c <__aeabi_ddiv+0x3b8>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	2500      	movs	r5, #0
 8001f0e:	4498      	add	r8, r3
 8001f10:	e667      	b.n	8001be2 <__aeabi_ddiv+0x26e>
 8001f12:	075d      	lsls	r5, r3, #29
 8001f14:	025b      	lsls	r3, r3, #9
 8001f16:	0b1c      	lsrs	r4, r3, #12
 8001f18:	08d2      	lsrs	r2, r2, #3
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	4315      	orrs	r5, r2
 8001f1e:	e580      	b.n	8001a22 <__aeabi_ddiv+0xae>
 8001f20:	9800      	ldr	r0, [sp, #0]
 8001f22:	3d02      	subs	r5, #2
 8001f24:	0042      	lsls	r2, r0, #1
 8001f26:	4282      	cmp	r2, r0
 8001f28:	41bf      	sbcs	r7, r7
 8001f2a:	427f      	negs	r7, r7
 8001f2c:	193c      	adds	r4, r7, r4
 8001f2e:	1936      	adds	r6, r6, r4
 8001f30:	9200      	str	r2, [sp, #0]
 8001f32:	e7dd      	b.n	8001ef0 <__aeabi_ddiv+0x57c>
 8001f34:	2480      	movs	r4, #128	; 0x80
 8001f36:	4643      	mov	r3, r8
 8001f38:	0324      	lsls	r4, r4, #12
 8001f3a:	431c      	orrs	r4, r3
 8001f3c:	0324      	lsls	r4, r4, #12
 8001f3e:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <__aeabi_ddiv+0x5dc>)
 8001f40:	0b24      	lsrs	r4, r4, #12
 8001f42:	e56e      	b.n	8001a22 <__aeabi_ddiv+0xae>
 8001f44:	9a00      	ldr	r2, [sp, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d3ea      	bcc.n	8001f20 <__aeabi_ddiv+0x5ac>
 8001f4a:	0005      	movs	r5, r0
 8001f4c:	e7d3      	b.n	8001ef6 <__aeabi_ddiv+0x582>
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	000007ff 	.word	0x000007ff
 8001f54:	0000043e 	.word	0x0000043e
 8001f58:	0000041e 	.word	0x0000041e
 8001f5c:	000003ff 	.word	0x000003ff

08001f60 <__eqdf2>:
 8001f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f62:	464e      	mov	r6, r9
 8001f64:	4645      	mov	r5, r8
 8001f66:	46de      	mov	lr, fp
 8001f68:	4657      	mov	r7, sl
 8001f6a:	4690      	mov	r8, r2
 8001f6c:	b5e0      	push	{r5, r6, r7, lr}
 8001f6e:	0017      	movs	r7, r2
 8001f70:	031a      	lsls	r2, r3, #12
 8001f72:	0b12      	lsrs	r2, r2, #12
 8001f74:	0005      	movs	r5, r0
 8001f76:	4684      	mov	ip, r0
 8001f78:	4819      	ldr	r0, [pc, #100]	; (8001fe0 <__eqdf2+0x80>)
 8001f7a:	030e      	lsls	r6, r1, #12
 8001f7c:	004c      	lsls	r4, r1, #1
 8001f7e:	4691      	mov	r9, r2
 8001f80:	005a      	lsls	r2, r3, #1
 8001f82:	0fdb      	lsrs	r3, r3, #31
 8001f84:	469b      	mov	fp, r3
 8001f86:	0b36      	lsrs	r6, r6, #12
 8001f88:	0d64      	lsrs	r4, r4, #21
 8001f8a:	0fc9      	lsrs	r1, r1, #31
 8001f8c:	0d52      	lsrs	r2, r2, #21
 8001f8e:	4284      	cmp	r4, r0
 8001f90:	d019      	beq.n	8001fc6 <__eqdf2+0x66>
 8001f92:	4282      	cmp	r2, r0
 8001f94:	d010      	beq.n	8001fb8 <__eqdf2+0x58>
 8001f96:	2001      	movs	r0, #1
 8001f98:	4294      	cmp	r4, r2
 8001f9a:	d10e      	bne.n	8001fba <__eqdf2+0x5a>
 8001f9c:	454e      	cmp	r6, r9
 8001f9e:	d10c      	bne.n	8001fba <__eqdf2+0x5a>
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	45c4      	cmp	ip, r8
 8001fa4:	d109      	bne.n	8001fba <__eqdf2+0x5a>
 8001fa6:	4559      	cmp	r1, fp
 8001fa8:	d017      	beq.n	8001fda <__eqdf2+0x7a>
 8001faa:	2c00      	cmp	r4, #0
 8001fac:	d105      	bne.n	8001fba <__eqdf2+0x5a>
 8001fae:	0030      	movs	r0, r6
 8001fb0:	4328      	orrs	r0, r5
 8001fb2:	1e43      	subs	r3, r0, #1
 8001fb4:	4198      	sbcs	r0, r3
 8001fb6:	e000      	b.n	8001fba <__eqdf2+0x5a>
 8001fb8:	2001      	movs	r0, #1
 8001fba:	bcf0      	pop	{r4, r5, r6, r7}
 8001fbc:	46bb      	mov	fp, r7
 8001fbe:	46b2      	mov	sl, r6
 8001fc0:	46a9      	mov	r9, r5
 8001fc2:	46a0      	mov	r8, r4
 8001fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc6:	0033      	movs	r3, r6
 8001fc8:	2001      	movs	r0, #1
 8001fca:	432b      	orrs	r3, r5
 8001fcc:	d1f5      	bne.n	8001fba <__eqdf2+0x5a>
 8001fce:	42a2      	cmp	r2, r4
 8001fd0:	d1f3      	bne.n	8001fba <__eqdf2+0x5a>
 8001fd2:	464b      	mov	r3, r9
 8001fd4:	433b      	orrs	r3, r7
 8001fd6:	d1f0      	bne.n	8001fba <__eqdf2+0x5a>
 8001fd8:	e7e2      	b.n	8001fa0 <__eqdf2+0x40>
 8001fda:	2000      	movs	r0, #0
 8001fdc:	e7ed      	b.n	8001fba <__eqdf2+0x5a>
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	000007ff 	.word	0x000007ff

08001fe4 <__gedf2>:
 8001fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe6:	4647      	mov	r7, r8
 8001fe8:	46ce      	mov	lr, r9
 8001fea:	0004      	movs	r4, r0
 8001fec:	0018      	movs	r0, r3
 8001fee:	0016      	movs	r6, r2
 8001ff0:	031b      	lsls	r3, r3, #12
 8001ff2:	0b1b      	lsrs	r3, r3, #12
 8001ff4:	4d2d      	ldr	r5, [pc, #180]	; (80020ac <__gedf2+0xc8>)
 8001ff6:	004a      	lsls	r2, r1, #1
 8001ff8:	4699      	mov	r9, r3
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	0043      	lsls	r3, r0, #1
 8001ffe:	030f      	lsls	r7, r1, #12
 8002000:	46a4      	mov	ip, r4
 8002002:	46b0      	mov	r8, r6
 8002004:	0b3f      	lsrs	r7, r7, #12
 8002006:	0d52      	lsrs	r2, r2, #21
 8002008:	0fc9      	lsrs	r1, r1, #31
 800200a:	0d5b      	lsrs	r3, r3, #21
 800200c:	0fc0      	lsrs	r0, r0, #31
 800200e:	42aa      	cmp	r2, r5
 8002010:	d021      	beq.n	8002056 <__gedf2+0x72>
 8002012:	42ab      	cmp	r3, r5
 8002014:	d013      	beq.n	800203e <__gedf2+0x5a>
 8002016:	2a00      	cmp	r2, #0
 8002018:	d122      	bne.n	8002060 <__gedf2+0x7c>
 800201a:	433c      	orrs	r4, r7
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <__gedf2+0x42>
 8002020:	464d      	mov	r5, r9
 8002022:	432e      	orrs	r6, r5
 8002024:	d022      	beq.n	800206c <__gedf2+0x88>
 8002026:	2c00      	cmp	r4, #0
 8002028:	d010      	beq.n	800204c <__gedf2+0x68>
 800202a:	4281      	cmp	r1, r0
 800202c:	d022      	beq.n	8002074 <__gedf2+0x90>
 800202e:	2002      	movs	r0, #2
 8002030:	3901      	subs	r1, #1
 8002032:	4008      	ands	r0, r1
 8002034:	3801      	subs	r0, #1
 8002036:	bcc0      	pop	{r6, r7}
 8002038:	46b9      	mov	r9, r7
 800203a:	46b0      	mov	r8, r6
 800203c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800203e:	464d      	mov	r5, r9
 8002040:	432e      	orrs	r6, r5
 8002042:	d129      	bne.n	8002098 <__gedf2+0xb4>
 8002044:	2a00      	cmp	r2, #0
 8002046:	d1f0      	bne.n	800202a <__gedf2+0x46>
 8002048:	433c      	orrs	r4, r7
 800204a:	d1ee      	bne.n	800202a <__gedf2+0x46>
 800204c:	2800      	cmp	r0, #0
 800204e:	d1f2      	bne.n	8002036 <__gedf2+0x52>
 8002050:	2001      	movs	r0, #1
 8002052:	4240      	negs	r0, r0
 8002054:	e7ef      	b.n	8002036 <__gedf2+0x52>
 8002056:	003d      	movs	r5, r7
 8002058:	4325      	orrs	r5, r4
 800205a:	d11d      	bne.n	8002098 <__gedf2+0xb4>
 800205c:	4293      	cmp	r3, r2
 800205e:	d0ee      	beq.n	800203e <__gedf2+0x5a>
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1e2      	bne.n	800202a <__gedf2+0x46>
 8002064:	464c      	mov	r4, r9
 8002066:	4326      	orrs	r6, r4
 8002068:	d1df      	bne.n	800202a <__gedf2+0x46>
 800206a:	e7e0      	b.n	800202e <__gedf2+0x4a>
 800206c:	2000      	movs	r0, #0
 800206e:	2c00      	cmp	r4, #0
 8002070:	d0e1      	beq.n	8002036 <__gedf2+0x52>
 8002072:	e7dc      	b.n	800202e <__gedf2+0x4a>
 8002074:	429a      	cmp	r2, r3
 8002076:	dc0a      	bgt.n	800208e <__gedf2+0xaa>
 8002078:	dbe8      	blt.n	800204c <__gedf2+0x68>
 800207a:	454f      	cmp	r7, r9
 800207c:	d8d7      	bhi.n	800202e <__gedf2+0x4a>
 800207e:	d00e      	beq.n	800209e <__gedf2+0xba>
 8002080:	2000      	movs	r0, #0
 8002082:	454f      	cmp	r7, r9
 8002084:	d2d7      	bcs.n	8002036 <__gedf2+0x52>
 8002086:	2900      	cmp	r1, #0
 8002088:	d0e2      	beq.n	8002050 <__gedf2+0x6c>
 800208a:	0008      	movs	r0, r1
 800208c:	e7d3      	b.n	8002036 <__gedf2+0x52>
 800208e:	4243      	negs	r3, r0
 8002090:	4158      	adcs	r0, r3
 8002092:	0040      	lsls	r0, r0, #1
 8002094:	3801      	subs	r0, #1
 8002096:	e7ce      	b.n	8002036 <__gedf2+0x52>
 8002098:	2002      	movs	r0, #2
 800209a:	4240      	negs	r0, r0
 800209c:	e7cb      	b.n	8002036 <__gedf2+0x52>
 800209e:	45c4      	cmp	ip, r8
 80020a0:	d8c5      	bhi.n	800202e <__gedf2+0x4a>
 80020a2:	2000      	movs	r0, #0
 80020a4:	45c4      	cmp	ip, r8
 80020a6:	d2c6      	bcs.n	8002036 <__gedf2+0x52>
 80020a8:	e7ed      	b.n	8002086 <__gedf2+0xa2>
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	000007ff 	.word	0x000007ff

080020b0 <__ledf2>:
 80020b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b2:	4647      	mov	r7, r8
 80020b4:	46ce      	mov	lr, r9
 80020b6:	0004      	movs	r4, r0
 80020b8:	0018      	movs	r0, r3
 80020ba:	0016      	movs	r6, r2
 80020bc:	031b      	lsls	r3, r3, #12
 80020be:	0b1b      	lsrs	r3, r3, #12
 80020c0:	4d2c      	ldr	r5, [pc, #176]	; (8002174 <__ledf2+0xc4>)
 80020c2:	004a      	lsls	r2, r1, #1
 80020c4:	4699      	mov	r9, r3
 80020c6:	b580      	push	{r7, lr}
 80020c8:	0043      	lsls	r3, r0, #1
 80020ca:	030f      	lsls	r7, r1, #12
 80020cc:	46a4      	mov	ip, r4
 80020ce:	46b0      	mov	r8, r6
 80020d0:	0b3f      	lsrs	r7, r7, #12
 80020d2:	0d52      	lsrs	r2, r2, #21
 80020d4:	0fc9      	lsrs	r1, r1, #31
 80020d6:	0d5b      	lsrs	r3, r3, #21
 80020d8:	0fc0      	lsrs	r0, r0, #31
 80020da:	42aa      	cmp	r2, r5
 80020dc:	d00d      	beq.n	80020fa <__ledf2+0x4a>
 80020de:	42ab      	cmp	r3, r5
 80020e0:	d010      	beq.n	8002104 <__ledf2+0x54>
 80020e2:	2a00      	cmp	r2, #0
 80020e4:	d127      	bne.n	8002136 <__ledf2+0x86>
 80020e6:	433c      	orrs	r4, r7
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d111      	bne.n	8002110 <__ledf2+0x60>
 80020ec:	464d      	mov	r5, r9
 80020ee:	432e      	orrs	r6, r5
 80020f0:	d10e      	bne.n	8002110 <__ledf2+0x60>
 80020f2:	2000      	movs	r0, #0
 80020f4:	2c00      	cmp	r4, #0
 80020f6:	d015      	beq.n	8002124 <__ledf2+0x74>
 80020f8:	e00e      	b.n	8002118 <__ledf2+0x68>
 80020fa:	003d      	movs	r5, r7
 80020fc:	4325      	orrs	r5, r4
 80020fe:	d110      	bne.n	8002122 <__ledf2+0x72>
 8002100:	4293      	cmp	r3, r2
 8002102:	d118      	bne.n	8002136 <__ledf2+0x86>
 8002104:	464d      	mov	r5, r9
 8002106:	432e      	orrs	r6, r5
 8002108:	d10b      	bne.n	8002122 <__ledf2+0x72>
 800210a:	2a00      	cmp	r2, #0
 800210c:	d102      	bne.n	8002114 <__ledf2+0x64>
 800210e:	433c      	orrs	r4, r7
 8002110:	2c00      	cmp	r4, #0
 8002112:	d00b      	beq.n	800212c <__ledf2+0x7c>
 8002114:	4281      	cmp	r1, r0
 8002116:	d014      	beq.n	8002142 <__ledf2+0x92>
 8002118:	2002      	movs	r0, #2
 800211a:	3901      	subs	r1, #1
 800211c:	4008      	ands	r0, r1
 800211e:	3801      	subs	r0, #1
 8002120:	e000      	b.n	8002124 <__ledf2+0x74>
 8002122:	2002      	movs	r0, #2
 8002124:	bcc0      	pop	{r6, r7}
 8002126:	46b9      	mov	r9, r7
 8002128:	46b0      	mov	r8, r6
 800212a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800212c:	2800      	cmp	r0, #0
 800212e:	d1f9      	bne.n	8002124 <__ledf2+0x74>
 8002130:	2001      	movs	r0, #1
 8002132:	4240      	negs	r0, r0
 8002134:	e7f6      	b.n	8002124 <__ledf2+0x74>
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1ec      	bne.n	8002114 <__ledf2+0x64>
 800213a:	464c      	mov	r4, r9
 800213c:	4326      	orrs	r6, r4
 800213e:	d1e9      	bne.n	8002114 <__ledf2+0x64>
 8002140:	e7ea      	b.n	8002118 <__ledf2+0x68>
 8002142:	429a      	cmp	r2, r3
 8002144:	dd04      	ble.n	8002150 <__ledf2+0xa0>
 8002146:	4243      	negs	r3, r0
 8002148:	4158      	adcs	r0, r3
 800214a:	0040      	lsls	r0, r0, #1
 800214c:	3801      	subs	r0, #1
 800214e:	e7e9      	b.n	8002124 <__ledf2+0x74>
 8002150:	429a      	cmp	r2, r3
 8002152:	dbeb      	blt.n	800212c <__ledf2+0x7c>
 8002154:	454f      	cmp	r7, r9
 8002156:	d8df      	bhi.n	8002118 <__ledf2+0x68>
 8002158:	d006      	beq.n	8002168 <__ledf2+0xb8>
 800215a:	2000      	movs	r0, #0
 800215c:	454f      	cmp	r7, r9
 800215e:	d2e1      	bcs.n	8002124 <__ledf2+0x74>
 8002160:	2900      	cmp	r1, #0
 8002162:	d0e5      	beq.n	8002130 <__ledf2+0x80>
 8002164:	0008      	movs	r0, r1
 8002166:	e7dd      	b.n	8002124 <__ledf2+0x74>
 8002168:	45c4      	cmp	ip, r8
 800216a:	d8d5      	bhi.n	8002118 <__ledf2+0x68>
 800216c:	2000      	movs	r0, #0
 800216e:	45c4      	cmp	ip, r8
 8002170:	d2d8      	bcs.n	8002124 <__ledf2+0x74>
 8002172:	e7f5      	b.n	8002160 <__ledf2+0xb0>
 8002174:	000007ff 	.word	0x000007ff

08002178 <__aeabi_dmul>:
 8002178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800217a:	4657      	mov	r7, sl
 800217c:	464e      	mov	r6, r9
 800217e:	4645      	mov	r5, r8
 8002180:	46de      	mov	lr, fp
 8002182:	b5e0      	push	{r5, r6, r7, lr}
 8002184:	4698      	mov	r8, r3
 8002186:	030c      	lsls	r4, r1, #12
 8002188:	004b      	lsls	r3, r1, #1
 800218a:	0006      	movs	r6, r0
 800218c:	4692      	mov	sl, r2
 800218e:	b087      	sub	sp, #28
 8002190:	0b24      	lsrs	r4, r4, #12
 8002192:	0d5b      	lsrs	r3, r3, #21
 8002194:	0fcf      	lsrs	r7, r1, #31
 8002196:	2b00      	cmp	r3, #0
 8002198:	d100      	bne.n	800219c <__aeabi_dmul+0x24>
 800219a:	e15c      	b.n	8002456 <__aeabi_dmul+0x2de>
 800219c:	4ad9      	ldr	r2, [pc, #868]	; (8002504 <__aeabi_dmul+0x38c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d100      	bne.n	80021a4 <__aeabi_dmul+0x2c>
 80021a2:	e175      	b.n	8002490 <__aeabi_dmul+0x318>
 80021a4:	0f42      	lsrs	r2, r0, #29
 80021a6:	00e4      	lsls	r4, r4, #3
 80021a8:	4314      	orrs	r4, r2
 80021aa:	2280      	movs	r2, #128	; 0x80
 80021ac:	0412      	lsls	r2, r2, #16
 80021ae:	4314      	orrs	r4, r2
 80021b0:	4ad5      	ldr	r2, [pc, #852]	; (8002508 <__aeabi_dmul+0x390>)
 80021b2:	00c5      	lsls	r5, r0, #3
 80021b4:	4694      	mov	ip, r2
 80021b6:	4463      	add	r3, ip
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	2300      	movs	r3, #0
 80021bc:	4699      	mov	r9, r3
 80021be:	469b      	mov	fp, r3
 80021c0:	4643      	mov	r3, r8
 80021c2:	4642      	mov	r2, r8
 80021c4:	031e      	lsls	r6, r3, #12
 80021c6:	0fd2      	lsrs	r2, r2, #31
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4650      	mov	r0, sl
 80021cc:	4690      	mov	r8, r2
 80021ce:	0b36      	lsrs	r6, r6, #12
 80021d0:	0d5b      	lsrs	r3, r3, #21
 80021d2:	d100      	bne.n	80021d6 <__aeabi_dmul+0x5e>
 80021d4:	e120      	b.n	8002418 <__aeabi_dmul+0x2a0>
 80021d6:	4acb      	ldr	r2, [pc, #812]	; (8002504 <__aeabi_dmul+0x38c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d100      	bne.n	80021de <__aeabi_dmul+0x66>
 80021dc:	e162      	b.n	80024a4 <__aeabi_dmul+0x32c>
 80021de:	49ca      	ldr	r1, [pc, #808]	; (8002508 <__aeabi_dmul+0x390>)
 80021e0:	0f42      	lsrs	r2, r0, #29
 80021e2:	468c      	mov	ip, r1
 80021e4:	9900      	ldr	r1, [sp, #0]
 80021e6:	4463      	add	r3, ip
 80021e8:	00f6      	lsls	r6, r6, #3
 80021ea:	468c      	mov	ip, r1
 80021ec:	4316      	orrs	r6, r2
 80021ee:	2280      	movs	r2, #128	; 0x80
 80021f0:	449c      	add	ip, r3
 80021f2:	0412      	lsls	r2, r2, #16
 80021f4:	4663      	mov	r3, ip
 80021f6:	4316      	orrs	r6, r2
 80021f8:	00c2      	lsls	r2, r0, #3
 80021fa:	2000      	movs	r0, #0
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	9900      	ldr	r1, [sp, #0]
 8002200:	4643      	mov	r3, r8
 8002202:	3101      	adds	r1, #1
 8002204:	468c      	mov	ip, r1
 8002206:	4649      	mov	r1, r9
 8002208:	407b      	eors	r3, r7
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	290f      	cmp	r1, #15
 800220e:	d826      	bhi.n	800225e <__aeabi_dmul+0xe6>
 8002210:	4bbe      	ldr	r3, [pc, #760]	; (800250c <__aeabi_dmul+0x394>)
 8002212:	0089      	lsls	r1, r1, #2
 8002214:	5859      	ldr	r1, [r3, r1]
 8002216:	468f      	mov	pc, r1
 8002218:	4643      	mov	r3, r8
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	0034      	movs	r4, r6
 800221e:	0015      	movs	r5, r2
 8002220:	4683      	mov	fp, r0
 8002222:	465b      	mov	r3, fp
 8002224:	2b02      	cmp	r3, #2
 8002226:	d016      	beq.n	8002256 <__aeabi_dmul+0xde>
 8002228:	2b03      	cmp	r3, #3
 800222a:	d100      	bne.n	800222e <__aeabi_dmul+0xb6>
 800222c:	e203      	b.n	8002636 <__aeabi_dmul+0x4be>
 800222e:	2b01      	cmp	r3, #1
 8002230:	d000      	beq.n	8002234 <__aeabi_dmul+0xbc>
 8002232:	e0cd      	b.n	80023d0 <__aeabi_dmul+0x258>
 8002234:	2200      	movs	r2, #0
 8002236:	2400      	movs	r4, #0
 8002238:	2500      	movs	r5, #0
 800223a:	9b01      	ldr	r3, [sp, #4]
 800223c:	0512      	lsls	r2, r2, #20
 800223e:	4322      	orrs	r2, r4
 8002240:	07db      	lsls	r3, r3, #31
 8002242:	431a      	orrs	r2, r3
 8002244:	0028      	movs	r0, r5
 8002246:	0011      	movs	r1, r2
 8002248:	b007      	add	sp, #28
 800224a:	bcf0      	pop	{r4, r5, r6, r7}
 800224c:	46bb      	mov	fp, r7
 800224e:	46b2      	mov	sl, r6
 8002250:	46a9      	mov	r9, r5
 8002252:	46a0      	mov	r8, r4
 8002254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002256:	2400      	movs	r4, #0
 8002258:	2500      	movs	r5, #0
 800225a:	4aaa      	ldr	r2, [pc, #680]	; (8002504 <__aeabi_dmul+0x38c>)
 800225c:	e7ed      	b.n	800223a <__aeabi_dmul+0xc2>
 800225e:	0c28      	lsrs	r0, r5, #16
 8002260:	042d      	lsls	r5, r5, #16
 8002262:	0c2d      	lsrs	r5, r5, #16
 8002264:	002b      	movs	r3, r5
 8002266:	0c11      	lsrs	r1, r2, #16
 8002268:	0412      	lsls	r2, r2, #16
 800226a:	0c12      	lsrs	r2, r2, #16
 800226c:	4353      	muls	r3, r2
 800226e:	4698      	mov	r8, r3
 8002270:	0013      	movs	r3, r2
 8002272:	002f      	movs	r7, r5
 8002274:	4343      	muls	r3, r0
 8002276:	4699      	mov	r9, r3
 8002278:	434f      	muls	r7, r1
 800227a:	444f      	add	r7, r9
 800227c:	46bb      	mov	fp, r7
 800227e:	4647      	mov	r7, r8
 8002280:	000b      	movs	r3, r1
 8002282:	0c3f      	lsrs	r7, r7, #16
 8002284:	46ba      	mov	sl, r7
 8002286:	4343      	muls	r3, r0
 8002288:	44da      	add	sl, fp
 800228a:	9302      	str	r3, [sp, #8]
 800228c:	45d1      	cmp	r9, sl
 800228e:	d904      	bls.n	800229a <__aeabi_dmul+0x122>
 8002290:	2780      	movs	r7, #128	; 0x80
 8002292:	027f      	lsls	r7, r7, #9
 8002294:	46b9      	mov	r9, r7
 8002296:	444b      	add	r3, r9
 8002298:	9302      	str	r3, [sp, #8]
 800229a:	4653      	mov	r3, sl
 800229c:	0c1b      	lsrs	r3, r3, #16
 800229e:	469b      	mov	fp, r3
 80022a0:	4653      	mov	r3, sl
 80022a2:	041f      	lsls	r7, r3, #16
 80022a4:	4643      	mov	r3, r8
 80022a6:	041b      	lsls	r3, r3, #16
 80022a8:	0c1b      	lsrs	r3, r3, #16
 80022aa:	4698      	mov	r8, r3
 80022ac:	003b      	movs	r3, r7
 80022ae:	4443      	add	r3, r8
 80022b0:	9304      	str	r3, [sp, #16]
 80022b2:	0c33      	lsrs	r3, r6, #16
 80022b4:	0436      	lsls	r6, r6, #16
 80022b6:	0c36      	lsrs	r6, r6, #16
 80022b8:	4698      	mov	r8, r3
 80022ba:	0033      	movs	r3, r6
 80022bc:	4343      	muls	r3, r0
 80022be:	4699      	mov	r9, r3
 80022c0:	4643      	mov	r3, r8
 80022c2:	4343      	muls	r3, r0
 80022c4:	002f      	movs	r7, r5
 80022c6:	469a      	mov	sl, r3
 80022c8:	4643      	mov	r3, r8
 80022ca:	4377      	muls	r7, r6
 80022cc:	435d      	muls	r5, r3
 80022ce:	0c38      	lsrs	r0, r7, #16
 80022d0:	444d      	add	r5, r9
 80022d2:	1945      	adds	r5, r0, r5
 80022d4:	45a9      	cmp	r9, r5
 80022d6:	d903      	bls.n	80022e0 <__aeabi_dmul+0x168>
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	025b      	lsls	r3, r3, #9
 80022dc:	4699      	mov	r9, r3
 80022de:	44ca      	add	sl, r9
 80022e0:	043f      	lsls	r7, r7, #16
 80022e2:	0c28      	lsrs	r0, r5, #16
 80022e4:	0c3f      	lsrs	r7, r7, #16
 80022e6:	042d      	lsls	r5, r5, #16
 80022e8:	19ed      	adds	r5, r5, r7
 80022ea:	0c27      	lsrs	r7, r4, #16
 80022ec:	0424      	lsls	r4, r4, #16
 80022ee:	0c24      	lsrs	r4, r4, #16
 80022f0:	0003      	movs	r3, r0
 80022f2:	0020      	movs	r0, r4
 80022f4:	4350      	muls	r0, r2
 80022f6:	437a      	muls	r2, r7
 80022f8:	4691      	mov	r9, r2
 80022fa:	003a      	movs	r2, r7
 80022fc:	4453      	add	r3, sl
 80022fe:	9305      	str	r3, [sp, #20]
 8002300:	0c03      	lsrs	r3, r0, #16
 8002302:	469a      	mov	sl, r3
 8002304:	434a      	muls	r2, r1
 8002306:	4361      	muls	r1, r4
 8002308:	4449      	add	r1, r9
 800230a:	4451      	add	r1, sl
 800230c:	44ab      	add	fp, r5
 800230e:	4589      	cmp	r9, r1
 8002310:	d903      	bls.n	800231a <__aeabi_dmul+0x1a2>
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	025b      	lsls	r3, r3, #9
 8002316:	4699      	mov	r9, r3
 8002318:	444a      	add	r2, r9
 800231a:	0400      	lsls	r0, r0, #16
 800231c:	0c0b      	lsrs	r3, r1, #16
 800231e:	0c00      	lsrs	r0, r0, #16
 8002320:	0409      	lsls	r1, r1, #16
 8002322:	1809      	adds	r1, r1, r0
 8002324:	0020      	movs	r0, r4
 8002326:	4699      	mov	r9, r3
 8002328:	4643      	mov	r3, r8
 800232a:	4370      	muls	r0, r6
 800232c:	435c      	muls	r4, r3
 800232e:	437e      	muls	r6, r7
 8002330:	435f      	muls	r7, r3
 8002332:	0c03      	lsrs	r3, r0, #16
 8002334:	4698      	mov	r8, r3
 8002336:	19a4      	adds	r4, r4, r6
 8002338:	4444      	add	r4, r8
 800233a:	444a      	add	r2, r9
 800233c:	9703      	str	r7, [sp, #12]
 800233e:	42a6      	cmp	r6, r4
 8002340:	d904      	bls.n	800234c <__aeabi_dmul+0x1d4>
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	025b      	lsls	r3, r3, #9
 8002346:	4698      	mov	r8, r3
 8002348:	4447      	add	r7, r8
 800234a:	9703      	str	r7, [sp, #12]
 800234c:	0423      	lsls	r3, r4, #16
 800234e:	9e02      	ldr	r6, [sp, #8]
 8002350:	469a      	mov	sl, r3
 8002352:	9b05      	ldr	r3, [sp, #20]
 8002354:	445e      	add	r6, fp
 8002356:	4698      	mov	r8, r3
 8002358:	42ae      	cmp	r6, r5
 800235a:	41ad      	sbcs	r5, r5
 800235c:	1876      	adds	r6, r6, r1
 800235e:	428e      	cmp	r6, r1
 8002360:	4189      	sbcs	r1, r1
 8002362:	0400      	lsls	r0, r0, #16
 8002364:	0c00      	lsrs	r0, r0, #16
 8002366:	4450      	add	r0, sl
 8002368:	4440      	add	r0, r8
 800236a:	426d      	negs	r5, r5
 800236c:	1947      	adds	r7, r0, r5
 800236e:	46b8      	mov	r8, r7
 8002370:	4693      	mov	fp, r2
 8002372:	4249      	negs	r1, r1
 8002374:	4689      	mov	r9, r1
 8002376:	44c3      	add	fp, r8
 8002378:	44d9      	add	r9, fp
 800237a:	4298      	cmp	r0, r3
 800237c:	4180      	sbcs	r0, r0
 800237e:	45a8      	cmp	r8, r5
 8002380:	41ad      	sbcs	r5, r5
 8002382:	4593      	cmp	fp, r2
 8002384:	4192      	sbcs	r2, r2
 8002386:	4589      	cmp	r9, r1
 8002388:	4189      	sbcs	r1, r1
 800238a:	426d      	negs	r5, r5
 800238c:	4240      	negs	r0, r0
 800238e:	4328      	orrs	r0, r5
 8002390:	0c24      	lsrs	r4, r4, #16
 8002392:	4252      	negs	r2, r2
 8002394:	4249      	negs	r1, r1
 8002396:	430a      	orrs	r2, r1
 8002398:	9b03      	ldr	r3, [sp, #12]
 800239a:	1900      	adds	r0, r0, r4
 800239c:	1880      	adds	r0, r0, r2
 800239e:	18c7      	adds	r7, r0, r3
 80023a0:	464b      	mov	r3, r9
 80023a2:	0ddc      	lsrs	r4, r3, #23
 80023a4:	9b04      	ldr	r3, [sp, #16]
 80023a6:	0275      	lsls	r5, r6, #9
 80023a8:	431d      	orrs	r5, r3
 80023aa:	1e6a      	subs	r2, r5, #1
 80023ac:	4195      	sbcs	r5, r2
 80023ae:	464b      	mov	r3, r9
 80023b0:	0df6      	lsrs	r6, r6, #23
 80023b2:	027f      	lsls	r7, r7, #9
 80023b4:	4335      	orrs	r5, r6
 80023b6:	025a      	lsls	r2, r3, #9
 80023b8:	433c      	orrs	r4, r7
 80023ba:	4315      	orrs	r5, r2
 80023bc:	01fb      	lsls	r3, r7, #7
 80023be:	d400      	bmi.n	80023c2 <__aeabi_dmul+0x24a>
 80023c0:	e11c      	b.n	80025fc <__aeabi_dmul+0x484>
 80023c2:	2101      	movs	r1, #1
 80023c4:	086a      	lsrs	r2, r5, #1
 80023c6:	400d      	ands	r5, r1
 80023c8:	4315      	orrs	r5, r2
 80023ca:	07e2      	lsls	r2, r4, #31
 80023cc:	4315      	orrs	r5, r2
 80023ce:	0864      	lsrs	r4, r4, #1
 80023d0:	494f      	ldr	r1, [pc, #316]	; (8002510 <__aeabi_dmul+0x398>)
 80023d2:	4461      	add	r1, ip
 80023d4:	2900      	cmp	r1, #0
 80023d6:	dc00      	bgt.n	80023da <__aeabi_dmul+0x262>
 80023d8:	e0b0      	b.n	800253c <__aeabi_dmul+0x3c4>
 80023da:	076b      	lsls	r3, r5, #29
 80023dc:	d009      	beq.n	80023f2 <__aeabi_dmul+0x27a>
 80023de:	220f      	movs	r2, #15
 80023e0:	402a      	ands	r2, r5
 80023e2:	2a04      	cmp	r2, #4
 80023e4:	d005      	beq.n	80023f2 <__aeabi_dmul+0x27a>
 80023e6:	1d2a      	adds	r2, r5, #4
 80023e8:	42aa      	cmp	r2, r5
 80023ea:	41ad      	sbcs	r5, r5
 80023ec:	426d      	negs	r5, r5
 80023ee:	1964      	adds	r4, r4, r5
 80023f0:	0015      	movs	r5, r2
 80023f2:	01e3      	lsls	r3, r4, #7
 80023f4:	d504      	bpl.n	8002400 <__aeabi_dmul+0x288>
 80023f6:	2180      	movs	r1, #128	; 0x80
 80023f8:	4a46      	ldr	r2, [pc, #280]	; (8002514 <__aeabi_dmul+0x39c>)
 80023fa:	00c9      	lsls	r1, r1, #3
 80023fc:	4014      	ands	r4, r2
 80023fe:	4461      	add	r1, ip
 8002400:	4a45      	ldr	r2, [pc, #276]	; (8002518 <__aeabi_dmul+0x3a0>)
 8002402:	4291      	cmp	r1, r2
 8002404:	dd00      	ble.n	8002408 <__aeabi_dmul+0x290>
 8002406:	e726      	b.n	8002256 <__aeabi_dmul+0xde>
 8002408:	0762      	lsls	r2, r4, #29
 800240a:	08ed      	lsrs	r5, r5, #3
 800240c:	0264      	lsls	r4, r4, #9
 800240e:	0549      	lsls	r1, r1, #21
 8002410:	4315      	orrs	r5, r2
 8002412:	0b24      	lsrs	r4, r4, #12
 8002414:	0d4a      	lsrs	r2, r1, #21
 8002416:	e710      	b.n	800223a <__aeabi_dmul+0xc2>
 8002418:	4652      	mov	r2, sl
 800241a:	4332      	orrs	r2, r6
 800241c:	d100      	bne.n	8002420 <__aeabi_dmul+0x2a8>
 800241e:	e07f      	b.n	8002520 <__aeabi_dmul+0x3a8>
 8002420:	2e00      	cmp	r6, #0
 8002422:	d100      	bne.n	8002426 <__aeabi_dmul+0x2ae>
 8002424:	e0dc      	b.n	80025e0 <__aeabi_dmul+0x468>
 8002426:	0030      	movs	r0, r6
 8002428:	f000 fdd0 	bl	8002fcc <__clzsi2>
 800242c:	0002      	movs	r2, r0
 800242e:	3a0b      	subs	r2, #11
 8002430:	231d      	movs	r3, #29
 8002432:	0001      	movs	r1, r0
 8002434:	1a9b      	subs	r3, r3, r2
 8002436:	4652      	mov	r2, sl
 8002438:	3908      	subs	r1, #8
 800243a:	40da      	lsrs	r2, r3
 800243c:	408e      	lsls	r6, r1
 800243e:	4316      	orrs	r6, r2
 8002440:	4652      	mov	r2, sl
 8002442:	408a      	lsls	r2, r1
 8002444:	9b00      	ldr	r3, [sp, #0]
 8002446:	4935      	ldr	r1, [pc, #212]	; (800251c <__aeabi_dmul+0x3a4>)
 8002448:	1a18      	subs	r0, r3, r0
 800244a:	0003      	movs	r3, r0
 800244c:	468c      	mov	ip, r1
 800244e:	4463      	add	r3, ip
 8002450:	2000      	movs	r0, #0
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	e6d3      	b.n	80021fe <__aeabi_dmul+0x86>
 8002456:	0025      	movs	r5, r4
 8002458:	4305      	orrs	r5, r0
 800245a:	d04a      	beq.n	80024f2 <__aeabi_dmul+0x37a>
 800245c:	2c00      	cmp	r4, #0
 800245e:	d100      	bne.n	8002462 <__aeabi_dmul+0x2ea>
 8002460:	e0b0      	b.n	80025c4 <__aeabi_dmul+0x44c>
 8002462:	0020      	movs	r0, r4
 8002464:	f000 fdb2 	bl	8002fcc <__clzsi2>
 8002468:	0001      	movs	r1, r0
 800246a:	0002      	movs	r2, r0
 800246c:	390b      	subs	r1, #11
 800246e:	231d      	movs	r3, #29
 8002470:	0010      	movs	r0, r2
 8002472:	1a5b      	subs	r3, r3, r1
 8002474:	0031      	movs	r1, r6
 8002476:	0035      	movs	r5, r6
 8002478:	3808      	subs	r0, #8
 800247a:	4084      	lsls	r4, r0
 800247c:	40d9      	lsrs	r1, r3
 800247e:	4085      	lsls	r5, r0
 8002480:	430c      	orrs	r4, r1
 8002482:	4826      	ldr	r0, [pc, #152]	; (800251c <__aeabi_dmul+0x3a4>)
 8002484:	1a83      	subs	r3, r0, r2
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	2300      	movs	r3, #0
 800248a:	4699      	mov	r9, r3
 800248c:	469b      	mov	fp, r3
 800248e:	e697      	b.n	80021c0 <__aeabi_dmul+0x48>
 8002490:	0005      	movs	r5, r0
 8002492:	4325      	orrs	r5, r4
 8002494:	d126      	bne.n	80024e4 <__aeabi_dmul+0x36c>
 8002496:	2208      	movs	r2, #8
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	2302      	movs	r3, #2
 800249c:	2400      	movs	r4, #0
 800249e:	4691      	mov	r9, r2
 80024a0:	469b      	mov	fp, r3
 80024a2:	e68d      	b.n	80021c0 <__aeabi_dmul+0x48>
 80024a4:	4652      	mov	r2, sl
 80024a6:	9b00      	ldr	r3, [sp, #0]
 80024a8:	4332      	orrs	r2, r6
 80024aa:	d110      	bne.n	80024ce <__aeabi_dmul+0x356>
 80024ac:	4915      	ldr	r1, [pc, #84]	; (8002504 <__aeabi_dmul+0x38c>)
 80024ae:	2600      	movs	r6, #0
 80024b0:	468c      	mov	ip, r1
 80024b2:	4463      	add	r3, ip
 80024b4:	4649      	mov	r1, r9
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2302      	movs	r3, #2
 80024ba:	4319      	orrs	r1, r3
 80024bc:	4689      	mov	r9, r1
 80024be:	2002      	movs	r0, #2
 80024c0:	e69d      	b.n	80021fe <__aeabi_dmul+0x86>
 80024c2:	465b      	mov	r3, fp
 80024c4:	9701      	str	r7, [sp, #4]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d000      	beq.n	80024cc <__aeabi_dmul+0x354>
 80024ca:	e6ad      	b.n	8002228 <__aeabi_dmul+0xb0>
 80024cc:	e6c3      	b.n	8002256 <__aeabi_dmul+0xde>
 80024ce:	4a0d      	ldr	r2, [pc, #52]	; (8002504 <__aeabi_dmul+0x38c>)
 80024d0:	2003      	movs	r0, #3
 80024d2:	4694      	mov	ip, r2
 80024d4:	4463      	add	r3, ip
 80024d6:	464a      	mov	r2, r9
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	2303      	movs	r3, #3
 80024dc:	431a      	orrs	r2, r3
 80024de:	4691      	mov	r9, r2
 80024e0:	4652      	mov	r2, sl
 80024e2:	e68c      	b.n	80021fe <__aeabi_dmul+0x86>
 80024e4:	220c      	movs	r2, #12
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	2303      	movs	r3, #3
 80024ea:	0005      	movs	r5, r0
 80024ec:	4691      	mov	r9, r2
 80024ee:	469b      	mov	fp, r3
 80024f0:	e666      	b.n	80021c0 <__aeabi_dmul+0x48>
 80024f2:	2304      	movs	r3, #4
 80024f4:	4699      	mov	r9, r3
 80024f6:	2300      	movs	r3, #0
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	3301      	adds	r3, #1
 80024fc:	2400      	movs	r4, #0
 80024fe:	469b      	mov	fp, r3
 8002500:	e65e      	b.n	80021c0 <__aeabi_dmul+0x48>
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	000007ff 	.word	0x000007ff
 8002508:	fffffc01 	.word	0xfffffc01
 800250c:	08009c8c 	.word	0x08009c8c
 8002510:	000003ff 	.word	0x000003ff
 8002514:	feffffff 	.word	0xfeffffff
 8002518:	000007fe 	.word	0x000007fe
 800251c:	fffffc0d 	.word	0xfffffc0d
 8002520:	4649      	mov	r1, r9
 8002522:	2301      	movs	r3, #1
 8002524:	4319      	orrs	r1, r3
 8002526:	4689      	mov	r9, r1
 8002528:	2600      	movs	r6, #0
 800252a:	2001      	movs	r0, #1
 800252c:	e667      	b.n	80021fe <__aeabi_dmul+0x86>
 800252e:	2300      	movs	r3, #0
 8002530:	2480      	movs	r4, #128	; 0x80
 8002532:	2500      	movs	r5, #0
 8002534:	4a43      	ldr	r2, [pc, #268]	; (8002644 <__aeabi_dmul+0x4cc>)
 8002536:	9301      	str	r3, [sp, #4]
 8002538:	0324      	lsls	r4, r4, #12
 800253a:	e67e      	b.n	800223a <__aeabi_dmul+0xc2>
 800253c:	2001      	movs	r0, #1
 800253e:	1a40      	subs	r0, r0, r1
 8002540:	2838      	cmp	r0, #56	; 0x38
 8002542:	dd00      	ble.n	8002546 <__aeabi_dmul+0x3ce>
 8002544:	e676      	b.n	8002234 <__aeabi_dmul+0xbc>
 8002546:	281f      	cmp	r0, #31
 8002548:	dd5b      	ble.n	8002602 <__aeabi_dmul+0x48a>
 800254a:	221f      	movs	r2, #31
 800254c:	0023      	movs	r3, r4
 800254e:	4252      	negs	r2, r2
 8002550:	1a51      	subs	r1, r2, r1
 8002552:	40cb      	lsrs	r3, r1
 8002554:	0019      	movs	r1, r3
 8002556:	2820      	cmp	r0, #32
 8002558:	d003      	beq.n	8002562 <__aeabi_dmul+0x3ea>
 800255a:	4a3b      	ldr	r2, [pc, #236]	; (8002648 <__aeabi_dmul+0x4d0>)
 800255c:	4462      	add	r2, ip
 800255e:	4094      	lsls	r4, r2
 8002560:	4325      	orrs	r5, r4
 8002562:	1e6a      	subs	r2, r5, #1
 8002564:	4195      	sbcs	r5, r2
 8002566:	002a      	movs	r2, r5
 8002568:	430a      	orrs	r2, r1
 800256a:	2107      	movs	r1, #7
 800256c:	000d      	movs	r5, r1
 800256e:	2400      	movs	r4, #0
 8002570:	4015      	ands	r5, r2
 8002572:	4211      	tst	r1, r2
 8002574:	d05b      	beq.n	800262e <__aeabi_dmul+0x4b6>
 8002576:	210f      	movs	r1, #15
 8002578:	2400      	movs	r4, #0
 800257a:	4011      	ands	r1, r2
 800257c:	2904      	cmp	r1, #4
 800257e:	d053      	beq.n	8002628 <__aeabi_dmul+0x4b0>
 8002580:	1d11      	adds	r1, r2, #4
 8002582:	4291      	cmp	r1, r2
 8002584:	4192      	sbcs	r2, r2
 8002586:	4252      	negs	r2, r2
 8002588:	18a4      	adds	r4, r4, r2
 800258a:	000a      	movs	r2, r1
 800258c:	0223      	lsls	r3, r4, #8
 800258e:	d54b      	bpl.n	8002628 <__aeabi_dmul+0x4b0>
 8002590:	2201      	movs	r2, #1
 8002592:	2400      	movs	r4, #0
 8002594:	2500      	movs	r5, #0
 8002596:	e650      	b.n	800223a <__aeabi_dmul+0xc2>
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	031b      	lsls	r3, r3, #12
 800259c:	421c      	tst	r4, r3
 800259e:	d009      	beq.n	80025b4 <__aeabi_dmul+0x43c>
 80025a0:	421e      	tst	r6, r3
 80025a2:	d107      	bne.n	80025b4 <__aeabi_dmul+0x43c>
 80025a4:	4333      	orrs	r3, r6
 80025a6:	031c      	lsls	r4, r3, #12
 80025a8:	4643      	mov	r3, r8
 80025aa:	0015      	movs	r5, r2
 80025ac:	0b24      	lsrs	r4, r4, #12
 80025ae:	4a25      	ldr	r2, [pc, #148]	; (8002644 <__aeabi_dmul+0x4cc>)
 80025b0:	9301      	str	r3, [sp, #4]
 80025b2:	e642      	b.n	800223a <__aeabi_dmul+0xc2>
 80025b4:	2280      	movs	r2, #128	; 0x80
 80025b6:	0312      	lsls	r2, r2, #12
 80025b8:	4314      	orrs	r4, r2
 80025ba:	0324      	lsls	r4, r4, #12
 80025bc:	4a21      	ldr	r2, [pc, #132]	; (8002644 <__aeabi_dmul+0x4cc>)
 80025be:	0b24      	lsrs	r4, r4, #12
 80025c0:	9701      	str	r7, [sp, #4]
 80025c2:	e63a      	b.n	800223a <__aeabi_dmul+0xc2>
 80025c4:	f000 fd02 	bl	8002fcc <__clzsi2>
 80025c8:	0001      	movs	r1, r0
 80025ca:	0002      	movs	r2, r0
 80025cc:	3115      	adds	r1, #21
 80025ce:	3220      	adds	r2, #32
 80025d0:	291c      	cmp	r1, #28
 80025d2:	dc00      	bgt.n	80025d6 <__aeabi_dmul+0x45e>
 80025d4:	e74b      	b.n	800246e <__aeabi_dmul+0x2f6>
 80025d6:	0034      	movs	r4, r6
 80025d8:	3808      	subs	r0, #8
 80025da:	2500      	movs	r5, #0
 80025dc:	4084      	lsls	r4, r0
 80025de:	e750      	b.n	8002482 <__aeabi_dmul+0x30a>
 80025e0:	f000 fcf4 	bl	8002fcc <__clzsi2>
 80025e4:	0003      	movs	r3, r0
 80025e6:	001a      	movs	r2, r3
 80025e8:	3215      	adds	r2, #21
 80025ea:	3020      	adds	r0, #32
 80025ec:	2a1c      	cmp	r2, #28
 80025ee:	dc00      	bgt.n	80025f2 <__aeabi_dmul+0x47a>
 80025f0:	e71e      	b.n	8002430 <__aeabi_dmul+0x2b8>
 80025f2:	4656      	mov	r6, sl
 80025f4:	3b08      	subs	r3, #8
 80025f6:	2200      	movs	r2, #0
 80025f8:	409e      	lsls	r6, r3
 80025fa:	e723      	b.n	8002444 <__aeabi_dmul+0x2cc>
 80025fc:	9b00      	ldr	r3, [sp, #0]
 80025fe:	469c      	mov	ip, r3
 8002600:	e6e6      	b.n	80023d0 <__aeabi_dmul+0x258>
 8002602:	4912      	ldr	r1, [pc, #72]	; (800264c <__aeabi_dmul+0x4d4>)
 8002604:	0022      	movs	r2, r4
 8002606:	4461      	add	r1, ip
 8002608:	002e      	movs	r6, r5
 800260a:	408d      	lsls	r5, r1
 800260c:	408a      	lsls	r2, r1
 800260e:	40c6      	lsrs	r6, r0
 8002610:	1e69      	subs	r1, r5, #1
 8002612:	418d      	sbcs	r5, r1
 8002614:	4332      	orrs	r2, r6
 8002616:	432a      	orrs	r2, r5
 8002618:	40c4      	lsrs	r4, r0
 800261a:	0753      	lsls	r3, r2, #29
 800261c:	d0b6      	beq.n	800258c <__aeabi_dmul+0x414>
 800261e:	210f      	movs	r1, #15
 8002620:	4011      	ands	r1, r2
 8002622:	2904      	cmp	r1, #4
 8002624:	d1ac      	bne.n	8002580 <__aeabi_dmul+0x408>
 8002626:	e7b1      	b.n	800258c <__aeabi_dmul+0x414>
 8002628:	0765      	lsls	r5, r4, #29
 800262a:	0264      	lsls	r4, r4, #9
 800262c:	0b24      	lsrs	r4, r4, #12
 800262e:	08d2      	lsrs	r2, r2, #3
 8002630:	4315      	orrs	r5, r2
 8002632:	2200      	movs	r2, #0
 8002634:	e601      	b.n	800223a <__aeabi_dmul+0xc2>
 8002636:	2280      	movs	r2, #128	; 0x80
 8002638:	0312      	lsls	r2, r2, #12
 800263a:	4314      	orrs	r4, r2
 800263c:	0324      	lsls	r4, r4, #12
 800263e:	4a01      	ldr	r2, [pc, #4]	; (8002644 <__aeabi_dmul+0x4cc>)
 8002640:	0b24      	lsrs	r4, r4, #12
 8002642:	e5fa      	b.n	800223a <__aeabi_dmul+0xc2>
 8002644:	000007ff 	.word	0x000007ff
 8002648:	0000043e 	.word	0x0000043e
 800264c:	0000041e 	.word	0x0000041e

08002650 <__aeabi_dsub>:
 8002650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002652:	4657      	mov	r7, sl
 8002654:	464e      	mov	r6, r9
 8002656:	4645      	mov	r5, r8
 8002658:	46de      	mov	lr, fp
 800265a:	b5e0      	push	{r5, r6, r7, lr}
 800265c:	001e      	movs	r6, r3
 800265e:	0017      	movs	r7, r2
 8002660:	004a      	lsls	r2, r1, #1
 8002662:	030b      	lsls	r3, r1, #12
 8002664:	0d52      	lsrs	r2, r2, #21
 8002666:	0a5b      	lsrs	r3, r3, #9
 8002668:	4690      	mov	r8, r2
 800266a:	0f42      	lsrs	r2, r0, #29
 800266c:	431a      	orrs	r2, r3
 800266e:	0fcd      	lsrs	r5, r1, #31
 8002670:	4ccd      	ldr	r4, [pc, #820]	; (80029a8 <__aeabi_dsub+0x358>)
 8002672:	0331      	lsls	r1, r6, #12
 8002674:	00c3      	lsls	r3, r0, #3
 8002676:	4694      	mov	ip, r2
 8002678:	0070      	lsls	r0, r6, #1
 800267a:	0f7a      	lsrs	r2, r7, #29
 800267c:	0a49      	lsrs	r1, r1, #9
 800267e:	00ff      	lsls	r7, r7, #3
 8002680:	469a      	mov	sl, r3
 8002682:	46b9      	mov	r9, r7
 8002684:	0d40      	lsrs	r0, r0, #21
 8002686:	0ff6      	lsrs	r6, r6, #31
 8002688:	4311      	orrs	r1, r2
 800268a:	42a0      	cmp	r0, r4
 800268c:	d100      	bne.n	8002690 <__aeabi_dsub+0x40>
 800268e:	e0b1      	b.n	80027f4 <__aeabi_dsub+0x1a4>
 8002690:	2201      	movs	r2, #1
 8002692:	4056      	eors	r6, r2
 8002694:	46b3      	mov	fp, r6
 8002696:	42b5      	cmp	r5, r6
 8002698:	d100      	bne.n	800269c <__aeabi_dsub+0x4c>
 800269a:	e088      	b.n	80027ae <__aeabi_dsub+0x15e>
 800269c:	4642      	mov	r2, r8
 800269e:	1a12      	subs	r2, r2, r0
 80026a0:	2a00      	cmp	r2, #0
 80026a2:	dc00      	bgt.n	80026a6 <__aeabi_dsub+0x56>
 80026a4:	e0ae      	b.n	8002804 <__aeabi_dsub+0x1b4>
 80026a6:	2800      	cmp	r0, #0
 80026a8:	d100      	bne.n	80026ac <__aeabi_dsub+0x5c>
 80026aa:	e0c1      	b.n	8002830 <__aeabi_dsub+0x1e0>
 80026ac:	48be      	ldr	r0, [pc, #760]	; (80029a8 <__aeabi_dsub+0x358>)
 80026ae:	4580      	cmp	r8, r0
 80026b0:	d100      	bne.n	80026b4 <__aeabi_dsub+0x64>
 80026b2:	e151      	b.n	8002958 <__aeabi_dsub+0x308>
 80026b4:	2080      	movs	r0, #128	; 0x80
 80026b6:	0400      	lsls	r0, r0, #16
 80026b8:	4301      	orrs	r1, r0
 80026ba:	2a38      	cmp	r2, #56	; 0x38
 80026bc:	dd00      	ble.n	80026c0 <__aeabi_dsub+0x70>
 80026be:	e17b      	b.n	80029b8 <__aeabi_dsub+0x368>
 80026c0:	2a1f      	cmp	r2, #31
 80026c2:	dd00      	ble.n	80026c6 <__aeabi_dsub+0x76>
 80026c4:	e1ee      	b.n	8002aa4 <__aeabi_dsub+0x454>
 80026c6:	2020      	movs	r0, #32
 80026c8:	003e      	movs	r6, r7
 80026ca:	1a80      	subs	r0, r0, r2
 80026cc:	000c      	movs	r4, r1
 80026ce:	40d6      	lsrs	r6, r2
 80026d0:	40d1      	lsrs	r1, r2
 80026d2:	4087      	lsls	r7, r0
 80026d4:	4662      	mov	r2, ip
 80026d6:	4084      	lsls	r4, r0
 80026d8:	1a52      	subs	r2, r2, r1
 80026da:	1e78      	subs	r0, r7, #1
 80026dc:	4187      	sbcs	r7, r0
 80026de:	4694      	mov	ip, r2
 80026e0:	4334      	orrs	r4, r6
 80026e2:	4327      	orrs	r7, r4
 80026e4:	1bdc      	subs	r4, r3, r7
 80026e6:	42a3      	cmp	r3, r4
 80026e8:	419b      	sbcs	r3, r3
 80026ea:	4662      	mov	r2, ip
 80026ec:	425b      	negs	r3, r3
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	4699      	mov	r9, r3
 80026f2:	464b      	mov	r3, r9
 80026f4:	021b      	lsls	r3, r3, #8
 80026f6:	d400      	bmi.n	80026fa <__aeabi_dsub+0xaa>
 80026f8:	e118      	b.n	800292c <__aeabi_dsub+0x2dc>
 80026fa:	464b      	mov	r3, r9
 80026fc:	0258      	lsls	r0, r3, #9
 80026fe:	0a43      	lsrs	r3, r0, #9
 8002700:	4699      	mov	r9, r3
 8002702:	464b      	mov	r3, r9
 8002704:	2b00      	cmp	r3, #0
 8002706:	d100      	bne.n	800270a <__aeabi_dsub+0xba>
 8002708:	e137      	b.n	800297a <__aeabi_dsub+0x32a>
 800270a:	4648      	mov	r0, r9
 800270c:	f000 fc5e 	bl	8002fcc <__clzsi2>
 8002710:	0001      	movs	r1, r0
 8002712:	3908      	subs	r1, #8
 8002714:	2320      	movs	r3, #32
 8002716:	0022      	movs	r2, r4
 8002718:	4648      	mov	r0, r9
 800271a:	1a5b      	subs	r3, r3, r1
 800271c:	40da      	lsrs	r2, r3
 800271e:	4088      	lsls	r0, r1
 8002720:	408c      	lsls	r4, r1
 8002722:	4643      	mov	r3, r8
 8002724:	4310      	orrs	r0, r2
 8002726:	4588      	cmp	r8, r1
 8002728:	dd00      	ble.n	800272c <__aeabi_dsub+0xdc>
 800272a:	e136      	b.n	800299a <__aeabi_dsub+0x34a>
 800272c:	1ac9      	subs	r1, r1, r3
 800272e:	1c4b      	adds	r3, r1, #1
 8002730:	2b1f      	cmp	r3, #31
 8002732:	dd00      	ble.n	8002736 <__aeabi_dsub+0xe6>
 8002734:	e0ea      	b.n	800290c <__aeabi_dsub+0x2bc>
 8002736:	2220      	movs	r2, #32
 8002738:	0026      	movs	r6, r4
 800273a:	1ad2      	subs	r2, r2, r3
 800273c:	0001      	movs	r1, r0
 800273e:	4094      	lsls	r4, r2
 8002740:	40de      	lsrs	r6, r3
 8002742:	40d8      	lsrs	r0, r3
 8002744:	2300      	movs	r3, #0
 8002746:	4091      	lsls	r1, r2
 8002748:	1e62      	subs	r2, r4, #1
 800274a:	4194      	sbcs	r4, r2
 800274c:	4681      	mov	r9, r0
 800274e:	4698      	mov	r8, r3
 8002750:	4331      	orrs	r1, r6
 8002752:	430c      	orrs	r4, r1
 8002754:	0763      	lsls	r3, r4, #29
 8002756:	d009      	beq.n	800276c <__aeabi_dsub+0x11c>
 8002758:	230f      	movs	r3, #15
 800275a:	4023      	ands	r3, r4
 800275c:	2b04      	cmp	r3, #4
 800275e:	d005      	beq.n	800276c <__aeabi_dsub+0x11c>
 8002760:	1d23      	adds	r3, r4, #4
 8002762:	42a3      	cmp	r3, r4
 8002764:	41a4      	sbcs	r4, r4
 8002766:	4264      	negs	r4, r4
 8002768:	44a1      	add	r9, r4
 800276a:	001c      	movs	r4, r3
 800276c:	464b      	mov	r3, r9
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	d400      	bmi.n	8002774 <__aeabi_dsub+0x124>
 8002772:	e0de      	b.n	8002932 <__aeabi_dsub+0x2e2>
 8002774:	4641      	mov	r1, r8
 8002776:	4b8c      	ldr	r3, [pc, #560]	; (80029a8 <__aeabi_dsub+0x358>)
 8002778:	3101      	adds	r1, #1
 800277a:	4299      	cmp	r1, r3
 800277c:	d100      	bne.n	8002780 <__aeabi_dsub+0x130>
 800277e:	e0e7      	b.n	8002950 <__aeabi_dsub+0x300>
 8002780:	464b      	mov	r3, r9
 8002782:	488a      	ldr	r0, [pc, #552]	; (80029ac <__aeabi_dsub+0x35c>)
 8002784:	08e4      	lsrs	r4, r4, #3
 8002786:	4003      	ands	r3, r0
 8002788:	0018      	movs	r0, r3
 800278a:	0549      	lsls	r1, r1, #21
 800278c:	075b      	lsls	r3, r3, #29
 800278e:	0240      	lsls	r0, r0, #9
 8002790:	4323      	orrs	r3, r4
 8002792:	0d4a      	lsrs	r2, r1, #21
 8002794:	0b04      	lsrs	r4, r0, #12
 8002796:	0512      	lsls	r2, r2, #20
 8002798:	07ed      	lsls	r5, r5, #31
 800279a:	4322      	orrs	r2, r4
 800279c:	432a      	orrs	r2, r5
 800279e:	0018      	movs	r0, r3
 80027a0:	0011      	movs	r1, r2
 80027a2:	bcf0      	pop	{r4, r5, r6, r7}
 80027a4:	46bb      	mov	fp, r7
 80027a6:	46b2      	mov	sl, r6
 80027a8:	46a9      	mov	r9, r5
 80027aa:	46a0      	mov	r8, r4
 80027ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027ae:	4642      	mov	r2, r8
 80027b0:	1a12      	subs	r2, r2, r0
 80027b2:	2a00      	cmp	r2, #0
 80027b4:	dd52      	ble.n	800285c <__aeabi_dsub+0x20c>
 80027b6:	2800      	cmp	r0, #0
 80027b8:	d100      	bne.n	80027bc <__aeabi_dsub+0x16c>
 80027ba:	e09c      	b.n	80028f6 <__aeabi_dsub+0x2a6>
 80027bc:	45a0      	cmp	r8, r4
 80027be:	d100      	bne.n	80027c2 <__aeabi_dsub+0x172>
 80027c0:	e0ca      	b.n	8002958 <__aeabi_dsub+0x308>
 80027c2:	2080      	movs	r0, #128	; 0x80
 80027c4:	0400      	lsls	r0, r0, #16
 80027c6:	4301      	orrs	r1, r0
 80027c8:	2a38      	cmp	r2, #56	; 0x38
 80027ca:	dd00      	ble.n	80027ce <__aeabi_dsub+0x17e>
 80027cc:	e149      	b.n	8002a62 <__aeabi_dsub+0x412>
 80027ce:	2a1f      	cmp	r2, #31
 80027d0:	dc00      	bgt.n	80027d4 <__aeabi_dsub+0x184>
 80027d2:	e197      	b.n	8002b04 <__aeabi_dsub+0x4b4>
 80027d4:	0010      	movs	r0, r2
 80027d6:	000e      	movs	r6, r1
 80027d8:	3820      	subs	r0, #32
 80027da:	40c6      	lsrs	r6, r0
 80027dc:	2a20      	cmp	r2, #32
 80027de:	d004      	beq.n	80027ea <__aeabi_dsub+0x19a>
 80027e0:	2040      	movs	r0, #64	; 0x40
 80027e2:	1a82      	subs	r2, r0, r2
 80027e4:	4091      	lsls	r1, r2
 80027e6:	430f      	orrs	r7, r1
 80027e8:	46b9      	mov	r9, r7
 80027ea:	464c      	mov	r4, r9
 80027ec:	1e62      	subs	r2, r4, #1
 80027ee:	4194      	sbcs	r4, r2
 80027f0:	4334      	orrs	r4, r6
 80027f2:	e13a      	b.n	8002a6a <__aeabi_dsub+0x41a>
 80027f4:	000a      	movs	r2, r1
 80027f6:	433a      	orrs	r2, r7
 80027f8:	d028      	beq.n	800284c <__aeabi_dsub+0x1fc>
 80027fa:	46b3      	mov	fp, r6
 80027fc:	42b5      	cmp	r5, r6
 80027fe:	d02b      	beq.n	8002858 <__aeabi_dsub+0x208>
 8002800:	4a6b      	ldr	r2, [pc, #428]	; (80029b0 <__aeabi_dsub+0x360>)
 8002802:	4442      	add	r2, r8
 8002804:	2a00      	cmp	r2, #0
 8002806:	d05d      	beq.n	80028c4 <__aeabi_dsub+0x274>
 8002808:	4642      	mov	r2, r8
 800280a:	4644      	mov	r4, r8
 800280c:	1a82      	subs	r2, r0, r2
 800280e:	2c00      	cmp	r4, #0
 8002810:	d000      	beq.n	8002814 <__aeabi_dsub+0x1c4>
 8002812:	e0f5      	b.n	8002a00 <__aeabi_dsub+0x3b0>
 8002814:	4665      	mov	r5, ip
 8002816:	431d      	orrs	r5, r3
 8002818:	d100      	bne.n	800281c <__aeabi_dsub+0x1cc>
 800281a:	e19c      	b.n	8002b56 <__aeabi_dsub+0x506>
 800281c:	1e55      	subs	r5, r2, #1
 800281e:	2a01      	cmp	r2, #1
 8002820:	d100      	bne.n	8002824 <__aeabi_dsub+0x1d4>
 8002822:	e1fb      	b.n	8002c1c <__aeabi_dsub+0x5cc>
 8002824:	4c60      	ldr	r4, [pc, #384]	; (80029a8 <__aeabi_dsub+0x358>)
 8002826:	42a2      	cmp	r2, r4
 8002828:	d100      	bne.n	800282c <__aeabi_dsub+0x1dc>
 800282a:	e1bd      	b.n	8002ba8 <__aeabi_dsub+0x558>
 800282c:	002a      	movs	r2, r5
 800282e:	e0f0      	b.n	8002a12 <__aeabi_dsub+0x3c2>
 8002830:	0008      	movs	r0, r1
 8002832:	4338      	orrs	r0, r7
 8002834:	d100      	bne.n	8002838 <__aeabi_dsub+0x1e8>
 8002836:	e0c3      	b.n	80029c0 <__aeabi_dsub+0x370>
 8002838:	1e50      	subs	r0, r2, #1
 800283a:	2a01      	cmp	r2, #1
 800283c:	d100      	bne.n	8002840 <__aeabi_dsub+0x1f0>
 800283e:	e1a8      	b.n	8002b92 <__aeabi_dsub+0x542>
 8002840:	4c59      	ldr	r4, [pc, #356]	; (80029a8 <__aeabi_dsub+0x358>)
 8002842:	42a2      	cmp	r2, r4
 8002844:	d100      	bne.n	8002848 <__aeabi_dsub+0x1f8>
 8002846:	e087      	b.n	8002958 <__aeabi_dsub+0x308>
 8002848:	0002      	movs	r2, r0
 800284a:	e736      	b.n	80026ba <__aeabi_dsub+0x6a>
 800284c:	2201      	movs	r2, #1
 800284e:	4056      	eors	r6, r2
 8002850:	46b3      	mov	fp, r6
 8002852:	42b5      	cmp	r5, r6
 8002854:	d000      	beq.n	8002858 <__aeabi_dsub+0x208>
 8002856:	e721      	b.n	800269c <__aeabi_dsub+0x4c>
 8002858:	4a55      	ldr	r2, [pc, #340]	; (80029b0 <__aeabi_dsub+0x360>)
 800285a:	4442      	add	r2, r8
 800285c:	2a00      	cmp	r2, #0
 800285e:	d100      	bne.n	8002862 <__aeabi_dsub+0x212>
 8002860:	e0b5      	b.n	80029ce <__aeabi_dsub+0x37e>
 8002862:	4642      	mov	r2, r8
 8002864:	4644      	mov	r4, r8
 8002866:	1a82      	subs	r2, r0, r2
 8002868:	2c00      	cmp	r4, #0
 800286a:	d100      	bne.n	800286e <__aeabi_dsub+0x21e>
 800286c:	e138      	b.n	8002ae0 <__aeabi_dsub+0x490>
 800286e:	4e4e      	ldr	r6, [pc, #312]	; (80029a8 <__aeabi_dsub+0x358>)
 8002870:	42b0      	cmp	r0, r6
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0x226>
 8002874:	e1de      	b.n	8002c34 <__aeabi_dsub+0x5e4>
 8002876:	2680      	movs	r6, #128	; 0x80
 8002878:	4664      	mov	r4, ip
 800287a:	0436      	lsls	r6, r6, #16
 800287c:	4334      	orrs	r4, r6
 800287e:	46a4      	mov	ip, r4
 8002880:	2a38      	cmp	r2, #56	; 0x38
 8002882:	dd00      	ble.n	8002886 <__aeabi_dsub+0x236>
 8002884:	e196      	b.n	8002bb4 <__aeabi_dsub+0x564>
 8002886:	2a1f      	cmp	r2, #31
 8002888:	dd00      	ble.n	800288c <__aeabi_dsub+0x23c>
 800288a:	e224      	b.n	8002cd6 <__aeabi_dsub+0x686>
 800288c:	2620      	movs	r6, #32
 800288e:	1ab4      	subs	r4, r6, r2
 8002890:	46a2      	mov	sl, r4
 8002892:	4664      	mov	r4, ip
 8002894:	4656      	mov	r6, sl
 8002896:	40b4      	lsls	r4, r6
 8002898:	46a1      	mov	r9, r4
 800289a:	001c      	movs	r4, r3
 800289c:	464e      	mov	r6, r9
 800289e:	40d4      	lsrs	r4, r2
 80028a0:	4326      	orrs	r6, r4
 80028a2:	0034      	movs	r4, r6
 80028a4:	4656      	mov	r6, sl
 80028a6:	40b3      	lsls	r3, r6
 80028a8:	1e5e      	subs	r6, r3, #1
 80028aa:	41b3      	sbcs	r3, r6
 80028ac:	431c      	orrs	r4, r3
 80028ae:	4663      	mov	r3, ip
 80028b0:	40d3      	lsrs	r3, r2
 80028b2:	18c9      	adds	r1, r1, r3
 80028b4:	19e4      	adds	r4, r4, r7
 80028b6:	42bc      	cmp	r4, r7
 80028b8:	41bf      	sbcs	r7, r7
 80028ba:	427f      	negs	r7, r7
 80028bc:	46b9      	mov	r9, r7
 80028be:	4680      	mov	r8, r0
 80028c0:	4489      	add	r9, r1
 80028c2:	e0d8      	b.n	8002a76 <__aeabi_dsub+0x426>
 80028c4:	4640      	mov	r0, r8
 80028c6:	4c3b      	ldr	r4, [pc, #236]	; (80029b4 <__aeabi_dsub+0x364>)
 80028c8:	3001      	adds	r0, #1
 80028ca:	4220      	tst	r0, r4
 80028cc:	d000      	beq.n	80028d0 <__aeabi_dsub+0x280>
 80028ce:	e0b4      	b.n	8002a3a <__aeabi_dsub+0x3ea>
 80028d0:	4640      	mov	r0, r8
 80028d2:	2800      	cmp	r0, #0
 80028d4:	d000      	beq.n	80028d8 <__aeabi_dsub+0x288>
 80028d6:	e144      	b.n	8002b62 <__aeabi_dsub+0x512>
 80028d8:	4660      	mov	r0, ip
 80028da:	4318      	orrs	r0, r3
 80028dc:	d100      	bne.n	80028e0 <__aeabi_dsub+0x290>
 80028de:	e190      	b.n	8002c02 <__aeabi_dsub+0x5b2>
 80028e0:	0008      	movs	r0, r1
 80028e2:	4338      	orrs	r0, r7
 80028e4:	d000      	beq.n	80028e8 <__aeabi_dsub+0x298>
 80028e6:	e1aa      	b.n	8002c3e <__aeabi_dsub+0x5ee>
 80028e8:	4661      	mov	r1, ip
 80028ea:	08db      	lsrs	r3, r3, #3
 80028ec:	0749      	lsls	r1, r1, #29
 80028ee:	430b      	orrs	r3, r1
 80028f0:	4661      	mov	r1, ip
 80028f2:	08cc      	lsrs	r4, r1, #3
 80028f4:	e027      	b.n	8002946 <__aeabi_dsub+0x2f6>
 80028f6:	0008      	movs	r0, r1
 80028f8:	4338      	orrs	r0, r7
 80028fa:	d061      	beq.n	80029c0 <__aeabi_dsub+0x370>
 80028fc:	1e50      	subs	r0, r2, #1
 80028fe:	2a01      	cmp	r2, #1
 8002900:	d100      	bne.n	8002904 <__aeabi_dsub+0x2b4>
 8002902:	e139      	b.n	8002b78 <__aeabi_dsub+0x528>
 8002904:	42a2      	cmp	r2, r4
 8002906:	d027      	beq.n	8002958 <__aeabi_dsub+0x308>
 8002908:	0002      	movs	r2, r0
 800290a:	e75d      	b.n	80027c8 <__aeabi_dsub+0x178>
 800290c:	0002      	movs	r2, r0
 800290e:	391f      	subs	r1, #31
 8002910:	40ca      	lsrs	r2, r1
 8002912:	0011      	movs	r1, r2
 8002914:	2b20      	cmp	r3, #32
 8002916:	d003      	beq.n	8002920 <__aeabi_dsub+0x2d0>
 8002918:	2240      	movs	r2, #64	; 0x40
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	4098      	lsls	r0, r3
 800291e:	4304      	orrs	r4, r0
 8002920:	1e63      	subs	r3, r4, #1
 8002922:	419c      	sbcs	r4, r3
 8002924:	2300      	movs	r3, #0
 8002926:	4699      	mov	r9, r3
 8002928:	4698      	mov	r8, r3
 800292a:	430c      	orrs	r4, r1
 800292c:	0763      	lsls	r3, r4, #29
 800292e:	d000      	beq.n	8002932 <__aeabi_dsub+0x2e2>
 8002930:	e712      	b.n	8002758 <__aeabi_dsub+0x108>
 8002932:	464b      	mov	r3, r9
 8002934:	464a      	mov	r2, r9
 8002936:	08e4      	lsrs	r4, r4, #3
 8002938:	075b      	lsls	r3, r3, #29
 800293a:	4323      	orrs	r3, r4
 800293c:	08d4      	lsrs	r4, r2, #3
 800293e:	4642      	mov	r2, r8
 8002940:	4919      	ldr	r1, [pc, #100]	; (80029a8 <__aeabi_dsub+0x358>)
 8002942:	428a      	cmp	r2, r1
 8002944:	d00e      	beq.n	8002964 <__aeabi_dsub+0x314>
 8002946:	0324      	lsls	r4, r4, #12
 8002948:	0552      	lsls	r2, r2, #21
 800294a:	0b24      	lsrs	r4, r4, #12
 800294c:	0d52      	lsrs	r2, r2, #21
 800294e:	e722      	b.n	8002796 <__aeabi_dsub+0x146>
 8002950:	000a      	movs	r2, r1
 8002952:	2400      	movs	r4, #0
 8002954:	2300      	movs	r3, #0
 8002956:	e71e      	b.n	8002796 <__aeabi_dsub+0x146>
 8002958:	08db      	lsrs	r3, r3, #3
 800295a:	4662      	mov	r2, ip
 800295c:	0752      	lsls	r2, r2, #29
 800295e:	4313      	orrs	r3, r2
 8002960:	4662      	mov	r2, ip
 8002962:	08d4      	lsrs	r4, r2, #3
 8002964:	001a      	movs	r2, r3
 8002966:	4322      	orrs	r2, r4
 8002968:	d100      	bne.n	800296c <__aeabi_dsub+0x31c>
 800296a:	e1fc      	b.n	8002d66 <__aeabi_dsub+0x716>
 800296c:	2280      	movs	r2, #128	; 0x80
 800296e:	0312      	lsls	r2, r2, #12
 8002970:	4314      	orrs	r4, r2
 8002972:	0324      	lsls	r4, r4, #12
 8002974:	4a0c      	ldr	r2, [pc, #48]	; (80029a8 <__aeabi_dsub+0x358>)
 8002976:	0b24      	lsrs	r4, r4, #12
 8002978:	e70d      	b.n	8002796 <__aeabi_dsub+0x146>
 800297a:	0020      	movs	r0, r4
 800297c:	f000 fb26 	bl	8002fcc <__clzsi2>
 8002980:	0001      	movs	r1, r0
 8002982:	3118      	adds	r1, #24
 8002984:	291f      	cmp	r1, #31
 8002986:	dc00      	bgt.n	800298a <__aeabi_dsub+0x33a>
 8002988:	e6c4      	b.n	8002714 <__aeabi_dsub+0xc4>
 800298a:	3808      	subs	r0, #8
 800298c:	4084      	lsls	r4, r0
 800298e:	4643      	mov	r3, r8
 8002990:	0020      	movs	r0, r4
 8002992:	2400      	movs	r4, #0
 8002994:	4588      	cmp	r8, r1
 8002996:	dc00      	bgt.n	800299a <__aeabi_dsub+0x34a>
 8002998:	e6c8      	b.n	800272c <__aeabi_dsub+0xdc>
 800299a:	4a04      	ldr	r2, [pc, #16]	; (80029ac <__aeabi_dsub+0x35c>)
 800299c:	1a5b      	subs	r3, r3, r1
 800299e:	4010      	ands	r0, r2
 80029a0:	4698      	mov	r8, r3
 80029a2:	4681      	mov	r9, r0
 80029a4:	e6d6      	b.n	8002754 <__aeabi_dsub+0x104>
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	000007ff 	.word	0x000007ff
 80029ac:	ff7fffff 	.word	0xff7fffff
 80029b0:	fffff801 	.word	0xfffff801
 80029b4:	000007fe 	.word	0x000007fe
 80029b8:	430f      	orrs	r7, r1
 80029ba:	1e7a      	subs	r2, r7, #1
 80029bc:	4197      	sbcs	r7, r2
 80029be:	e691      	b.n	80026e4 <__aeabi_dsub+0x94>
 80029c0:	4661      	mov	r1, ip
 80029c2:	08db      	lsrs	r3, r3, #3
 80029c4:	0749      	lsls	r1, r1, #29
 80029c6:	430b      	orrs	r3, r1
 80029c8:	4661      	mov	r1, ip
 80029ca:	08cc      	lsrs	r4, r1, #3
 80029cc:	e7b8      	b.n	8002940 <__aeabi_dsub+0x2f0>
 80029ce:	4640      	mov	r0, r8
 80029d0:	4cd3      	ldr	r4, [pc, #844]	; (8002d20 <__aeabi_dsub+0x6d0>)
 80029d2:	3001      	adds	r0, #1
 80029d4:	4220      	tst	r0, r4
 80029d6:	d000      	beq.n	80029da <__aeabi_dsub+0x38a>
 80029d8:	e0a2      	b.n	8002b20 <__aeabi_dsub+0x4d0>
 80029da:	4640      	mov	r0, r8
 80029dc:	2800      	cmp	r0, #0
 80029de:	d000      	beq.n	80029e2 <__aeabi_dsub+0x392>
 80029e0:	e101      	b.n	8002be6 <__aeabi_dsub+0x596>
 80029e2:	4660      	mov	r0, ip
 80029e4:	4318      	orrs	r0, r3
 80029e6:	d100      	bne.n	80029ea <__aeabi_dsub+0x39a>
 80029e8:	e15e      	b.n	8002ca8 <__aeabi_dsub+0x658>
 80029ea:	0008      	movs	r0, r1
 80029ec:	4338      	orrs	r0, r7
 80029ee:	d000      	beq.n	80029f2 <__aeabi_dsub+0x3a2>
 80029f0:	e15f      	b.n	8002cb2 <__aeabi_dsub+0x662>
 80029f2:	4661      	mov	r1, ip
 80029f4:	08db      	lsrs	r3, r3, #3
 80029f6:	0749      	lsls	r1, r1, #29
 80029f8:	430b      	orrs	r3, r1
 80029fa:	4661      	mov	r1, ip
 80029fc:	08cc      	lsrs	r4, r1, #3
 80029fe:	e7a2      	b.n	8002946 <__aeabi_dsub+0x2f6>
 8002a00:	4dc8      	ldr	r5, [pc, #800]	; (8002d24 <__aeabi_dsub+0x6d4>)
 8002a02:	42a8      	cmp	r0, r5
 8002a04:	d100      	bne.n	8002a08 <__aeabi_dsub+0x3b8>
 8002a06:	e0cf      	b.n	8002ba8 <__aeabi_dsub+0x558>
 8002a08:	2580      	movs	r5, #128	; 0x80
 8002a0a:	4664      	mov	r4, ip
 8002a0c:	042d      	lsls	r5, r5, #16
 8002a0e:	432c      	orrs	r4, r5
 8002a10:	46a4      	mov	ip, r4
 8002a12:	2a38      	cmp	r2, #56	; 0x38
 8002a14:	dc56      	bgt.n	8002ac4 <__aeabi_dsub+0x474>
 8002a16:	2a1f      	cmp	r2, #31
 8002a18:	dd00      	ble.n	8002a1c <__aeabi_dsub+0x3cc>
 8002a1a:	e0d1      	b.n	8002bc0 <__aeabi_dsub+0x570>
 8002a1c:	2520      	movs	r5, #32
 8002a1e:	001e      	movs	r6, r3
 8002a20:	1aad      	subs	r5, r5, r2
 8002a22:	4664      	mov	r4, ip
 8002a24:	40ab      	lsls	r3, r5
 8002a26:	40ac      	lsls	r4, r5
 8002a28:	40d6      	lsrs	r6, r2
 8002a2a:	1e5d      	subs	r5, r3, #1
 8002a2c:	41ab      	sbcs	r3, r5
 8002a2e:	4334      	orrs	r4, r6
 8002a30:	4323      	orrs	r3, r4
 8002a32:	4664      	mov	r4, ip
 8002a34:	40d4      	lsrs	r4, r2
 8002a36:	1b09      	subs	r1, r1, r4
 8002a38:	e049      	b.n	8002ace <__aeabi_dsub+0x47e>
 8002a3a:	4660      	mov	r0, ip
 8002a3c:	1bdc      	subs	r4, r3, r7
 8002a3e:	1a46      	subs	r6, r0, r1
 8002a40:	42a3      	cmp	r3, r4
 8002a42:	4180      	sbcs	r0, r0
 8002a44:	4240      	negs	r0, r0
 8002a46:	4681      	mov	r9, r0
 8002a48:	0030      	movs	r0, r6
 8002a4a:	464e      	mov	r6, r9
 8002a4c:	1b80      	subs	r0, r0, r6
 8002a4e:	4681      	mov	r9, r0
 8002a50:	0200      	lsls	r0, r0, #8
 8002a52:	d476      	bmi.n	8002b42 <__aeabi_dsub+0x4f2>
 8002a54:	464b      	mov	r3, r9
 8002a56:	4323      	orrs	r3, r4
 8002a58:	d000      	beq.n	8002a5c <__aeabi_dsub+0x40c>
 8002a5a:	e652      	b.n	8002702 <__aeabi_dsub+0xb2>
 8002a5c:	2400      	movs	r4, #0
 8002a5e:	2500      	movs	r5, #0
 8002a60:	e771      	b.n	8002946 <__aeabi_dsub+0x2f6>
 8002a62:	4339      	orrs	r1, r7
 8002a64:	000c      	movs	r4, r1
 8002a66:	1e62      	subs	r2, r4, #1
 8002a68:	4194      	sbcs	r4, r2
 8002a6a:	18e4      	adds	r4, r4, r3
 8002a6c:	429c      	cmp	r4, r3
 8002a6e:	419b      	sbcs	r3, r3
 8002a70:	425b      	negs	r3, r3
 8002a72:	4463      	add	r3, ip
 8002a74:	4699      	mov	r9, r3
 8002a76:	464b      	mov	r3, r9
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	d400      	bmi.n	8002a7e <__aeabi_dsub+0x42e>
 8002a7c:	e756      	b.n	800292c <__aeabi_dsub+0x2dc>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	469c      	mov	ip, r3
 8002a82:	4ba8      	ldr	r3, [pc, #672]	; (8002d24 <__aeabi_dsub+0x6d4>)
 8002a84:	44e0      	add	r8, ip
 8002a86:	4598      	cmp	r8, r3
 8002a88:	d038      	beq.n	8002afc <__aeabi_dsub+0x4ac>
 8002a8a:	464b      	mov	r3, r9
 8002a8c:	48a6      	ldr	r0, [pc, #664]	; (8002d28 <__aeabi_dsub+0x6d8>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4003      	ands	r3, r0
 8002a92:	0018      	movs	r0, r3
 8002a94:	0863      	lsrs	r3, r4, #1
 8002a96:	4014      	ands	r4, r2
 8002a98:	431c      	orrs	r4, r3
 8002a9a:	07c3      	lsls	r3, r0, #31
 8002a9c:	431c      	orrs	r4, r3
 8002a9e:	0843      	lsrs	r3, r0, #1
 8002aa0:	4699      	mov	r9, r3
 8002aa2:	e657      	b.n	8002754 <__aeabi_dsub+0x104>
 8002aa4:	0010      	movs	r0, r2
 8002aa6:	000e      	movs	r6, r1
 8002aa8:	3820      	subs	r0, #32
 8002aaa:	40c6      	lsrs	r6, r0
 8002aac:	2a20      	cmp	r2, #32
 8002aae:	d004      	beq.n	8002aba <__aeabi_dsub+0x46a>
 8002ab0:	2040      	movs	r0, #64	; 0x40
 8002ab2:	1a82      	subs	r2, r0, r2
 8002ab4:	4091      	lsls	r1, r2
 8002ab6:	430f      	orrs	r7, r1
 8002ab8:	46b9      	mov	r9, r7
 8002aba:	464f      	mov	r7, r9
 8002abc:	1e7a      	subs	r2, r7, #1
 8002abe:	4197      	sbcs	r7, r2
 8002ac0:	4337      	orrs	r7, r6
 8002ac2:	e60f      	b.n	80026e4 <__aeabi_dsub+0x94>
 8002ac4:	4662      	mov	r2, ip
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	0013      	movs	r3, r2
 8002aca:	1e5a      	subs	r2, r3, #1
 8002acc:	4193      	sbcs	r3, r2
 8002ace:	1afc      	subs	r4, r7, r3
 8002ad0:	42a7      	cmp	r7, r4
 8002ad2:	41bf      	sbcs	r7, r7
 8002ad4:	427f      	negs	r7, r7
 8002ad6:	1bcb      	subs	r3, r1, r7
 8002ad8:	4699      	mov	r9, r3
 8002ada:	465d      	mov	r5, fp
 8002adc:	4680      	mov	r8, r0
 8002ade:	e608      	b.n	80026f2 <__aeabi_dsub+0xa2>
 8002ae0:	4666      	mov	r6, ip
 8002ae2:	431e      	orrs	r6, r3
 8002ae4:	d100      	bne.n	8002ae8 <__aeabi_dsub+0x498>
 8002ae6:	e0be      	b.n	8002c66 <__aeabi_dsub+0x616>
 8002ae8:	1e56      	subs	r6, r2, #1
 8002aea:	2a01      	cmp	r2, #1
 8002aec:	d100      	bne.n	8002af0 <__aeabi_dsub+0x4a0>
 8002aee:	e109      	b.n	8002d04 <__aeabi_dsub+0x6b4>
 8002af0:	4c8c      	ldr	r4, [pc, #560]	; (8002d24 <__aeabi_dsub+0x6d4>)
 8002af2:	42a2      	cmp	r2, r4
 8002af4:	d100      	bne.n	8002af8 <__aeabi_dsub+0x4a8>
 8002af6:	e119      	b.n	8002d2c <__aeabi_dsub+0x6dc>
 8002af8:	0032      	movs	r2, r6
 8002afa:	e6c1      	b.n	8002880 <__aeabi_dsub+0x230>
 8002afc:	4642      	mov	r2, r8
 8002afe:	2400      	movs	r4, #0
 8002b00:	2300      	movs	r3, #0
 8002b02:	e648      	b.n	8002796 <__aeabi_dsub+0x146>
 8002b04:	2020      	movs	r0, #32
 8002b06:	000c      	movs	r4, r1
 8002b08:	1a80      	subs	r0, r0, r2
 8002b0a:	003e      	movs	r6, r7
 8002b0c:	4087      	lsls	r7, r0
 8002b0e:	4084      	lsls	r4, r0
 8002b10:	40d6      	lsrs	r6, r2
 8002b12:	1e78      	subs	r0, r7, #1
 8002b14:	4187      	sbcs	r7, r0
 8002b16:	40d1      	lsrs	r1, r2
 8002b18:	4334      	orrs	r4, r6
 8002b1a:	433c      	orrs	r4, r7
 8002b1c:	448c      	add	ip, r1
 8002b1e:	e7a4      	b.n	8002a6a <__aeabi_dsub+0x41a>
 8002b20:	4a80      	ldr	r2, [pc, #512]	; (8002d24 <__aeabi_dsub+0x6d4>)
 8002b22:	4290      	cmp	r0, r2
 8002b24:	d100      	bne.n	8002b28 <__aeabi_dsub+0x4d8>
 8002b26:	e0e9      	b.n	8002cfc <__aeabi_dsub+0x6ac>
 8002b28:	19df      	adds	r7, r3, r7
 8002b2a:	429f      	cmp	r7, r3
 8002b2c:	419b      	sbcs	r3, r3
 8002b2e:	4461      	add	r1, ip
 8002b30:	425b      	negs	r3, r3
 8002b32:	18c9      	adds	r1, r1, r3
 8002b34:	07cc      	lsls	r4, r1, #31
 8002b36:	087f      	lsrs	r7, r7, #1
 8002b38:	084b      	lsrs	r3, r1, #1
 8002b3a:	4699      	mov	r9, r3
 8002b3c:	4680      	mov	r8, r0
 8002b3e:	433c      	orrs	r4, r7
 8002b40:	e6f4      	b.n	800292c <__aeabi_dsub+0x2dc>
 8002b42:	1afc      	subs	r4, r7, r3
 8002b44:	42a7      	cmp	r7, r4
 8002b46:	41bf      	sbcs	r7, r7
 8002b48:	4663      	mov	r3, ip
 8002b4a:	427f      	negs	r7, r7
 8002b4c:	1ac9      	subs	r1, r1, r3
 8002b4e:	1bcb      	subs	r3, r1, r7
 8002b50:	4699      	mov	r9, r3
 8002b52:	465d      	mov	r5, fp
 8002b54:	e5d5      	b.n	8002702 <__aeabi_dsub+0xb2>
 8002b56:	08ff      	lsrs	r7, r7, #3
 8002b58:	074b      	lsls	r3, r1, #29
 8002b5a:	465d      	mov	r5, fp
 8002b5c:	433b      	orrs	r3, r7
 8002b5e:	08cc      	lsrs	r4, r1, #3
 8002b60:	e6ee      	b.n	8002940 <__aeabi_dsub+0x2f0>
 8002b62:	4662      	mov	r2, ip
 8002b64:	431a      	orrs	r2, r3
 8002b66:	d000      	beq.n	8002b6a <__aeabi_dsub+0x51a>
 8002b68:	e082      	b.n	8002c70 <__aeabi_dsub+0x620>
 8002b6a:	000b      	movs	r3, r1
 8002b6c:	433b      	orrs	r3, r7
 8002b6e:	d11b      	bne.n	8002ba8 <__aeabi_dsub+0x558>
 8002b70:	2480      	movs	r4, #128	; 0x80
 8002b72:	2500      	movs	r5, #0
 8002b74:	0324      	lsls	r4, r4, #12
 8002b76:	e6f9      	b.n	800296c <__aeabi_dsub+0x31c>
 8002b78:	19dc      	adds	r4, r3, r7
 8002b7a:	429c      	cmp	r4, r3
 8002b7c:	419b      	sbcs	r3, r3
 8002b7e:	4461      	add	r1, ip
 8002b80:	4689      	mov	r9, r1
 8002b82:	425b      	negs	r3, r3
 8002b84:	4499      	add	r9, r3
 8002b86:	464b      	mov	r3, r9
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	d444      	bmi.n	8002c16 <__aeabi_dsub+0x5c6>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	4698      	mov	r8, r3
 8002b90:	e6cc      	b.n	800292c <__aeabi_dsub+0x2dc>
 8002b92:	1bdc      	subs	r4, r3, r7
 8002b94:	4662      	mov	r2, ip
 8002b96:	42a3      	cmp	r3, r4
 8002b98:	419b      	sbcs	r3, r3
 8002b9a:	1a51      	subs	r1, r2, r1
 8002b9c:	425b      	negs	r3, r3
 8002b9e:	1acb      	subs	r3, r1, r3
 8002ba0:	4699      	mov	r9, r3
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	4698      	mov	r8, r3
 8002ba6:	e5a4      	b.n	80026f2 <__aeabi_dsub+0xa2>
 8002ba8:	08ff      	lsrs	r7, r7, #3
 8002baa:	074b      	lsls	r3, r1, #29
 8002bac:	465d      	mov	r5, fp
 8002bae:	433b      	orrs	r3, r7
 8002bb0:	08cc      	lsrs	r4, r1, #3
 8002bb2:	e6d7      	b.n	8002964 <__aeabi_dsub+0x314>
 8002bb4:	4662      	mov	r2, ip
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	0014      	movs	r4, r2
 8002bba:	1e63      	subs	r3, r4, #1
 8002bbc:	419c      	sbcs	r4, r3
 8002bbe:	e679      	b.n	80028b4 <__aeabi_dsub+0x264>
 8002bc0:	0015      	movs	r5, r2
 8002bc2:	4664      	mov	r4, ip
 8002bc4:	3d20      	subs	r5, #32
 8002bc6:	40ec      	lsrs	r4, r5
 8002bc8:	46a0      	mov	r8, r4
 8002bca:	2a20      	cmp	r2, #32
 8002bcc:	d005      	beq.n	8002bda <__aeabi_dsub+0x58a>
 8002bce:	2540      	movs	r5, #64	; 0x40
 8002bd0:	4664      	mov	r4, ip
 8002bd2:	1aaa      	subs	r2, r5, r2
 8002bd4:	4094      	lsls	r4, r2
 8002bd6:	4323      	orrs	r3, r4
 8002bd8:	469a      	mov	sl, r3
 8002bda:	4654      	mov	r4, sl
 8002bdc:	1e63      	subs	r3, r4, #1
 8002bde:	419c      	sbcs	r4, r3
 8002be0:	4643      	mov	r3, r8
 8002be2:	4323      	orrs	r3, r4
 8002be4:	e773      	b.n	8002ace <__aeabi_dsub+0x47e>
 8002be6:	4662      	mov	r2, ip
 8002be8:	431a      	orrs	r2, r3
 8002bea:	d023      	beq.n	8002c34 <__aeabi_dsub+0x5e4>
 8002bec:	000a      	movs	r2, r1
 8002bee:	433a      	orrs	r2, r7
 8002bf0:	d000      	beq.n	8002bf4 <__aeabi_dsub+0x5a4>
 8002bf2:	e0a0      	b.n	8002d36 <__aeabi_dsub+0x6e6>
 8002bf4:	4662      	mov	r2, ip
 8002bf6:	08db      	lsrs	r3, r3, #3
 8002bf8:	0752      	lsls	r2, r2, #29
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	4662      	mov	r2, ip
 8002bfe:	08d4      	lsrs	r4, r2, #3
 8002c00:	e6b0      	b.n	8002964 <__aeabi_dsub+0x314>
 8002c02:	000b      	movs	r3, r1
 8002c04:	433b      	orrs	r3, r7
 8002c06:	d100      	bne.n	8002c0a <__aeabi_dsub+0x5ba>
 8002c08:	e728      	b.n	8002a5c <__aeabi_dsub+0x40c>
 8002c0a:	08ff      	lsrs	r7, r7, #3
 8002c0c:	074b      	lsls	r3, r1, #29
 8002c0e:	465d      	mov	r5, fp
 8002c10:	433b      	orrs	r3, r7
 8002c12:	08cc      	lsrs	r4, r1, #3
 8002c14:	e697      	b.n	8002946 <__aeabi_dsub+0x2f6>
 8002c16:	2302      	movs	r3, #2
 8002c18:	4698      	mov	r8, r3
 8002c1a:	e736      	b.n	8002a8a <__aeabi_dsub+0x43a>
 8002c1c:	1afc      	subs	r4, r7, r3
 8002c1e:	42a7      	cmp	r7, r4
 8002c20:	41bf      	sbcs	r7, r7
 8002c22:	4663      	mov	r3, ip
 8002c24:	427f      	negs	r7, r7
 8002c26:	1ac9      	subs	r1, r1, r3
 8002c28:	1bcb      	subs	r3, r1, r7
 8002c2a:	4699      	mov	r9, r3
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	465d      	mov	r5, fp
 8002c30:	4698      	mov	r8, r3
 8002c32:	e55e      	b.n	80026f2 <__aeabi_dsub+0xa2>
 8002c34:	074b      	lsls	r3, r1, #29
 8002c36:	08ff      	lsrs	r7, r7, #3
 8002c38:	433b      	orrs	r3, r7
 8002c3a:	08cc      	lsrs	r4, r1, #3
 8002c3c:	e692      	b.n	8002964 <__aeabi_dsub+0x314>
 8002c3e:	1bdc      	subs	r4, r3, r7
 8002c40:	4660      	mov	r0, ip
 8002c42:	42a3      	cmp	r3, r4
 8002c44:	41b6      	sbcs	r6, r6
 8002c46:	1a40      	subs	r0, r0, r1
 8002c48:	4276      	negs	r6, r6
 8002c4a:	1b80      	subs	r0, r0, r6
 8002c4c:	4681      	mov	r9, r0
 8002c4e:	0200      	lsls	r0, r0, #8
 8002c50:	d560      	bpl.n	8002d14 <__aeabi_dsub+0x6c4>
 8002c52:	1afc      	subs	r4, r7, r3
 8002c54:	42a7      	cmp	r7, r4
 8002c56:	41bf      	sbcs	r7, r7
 8002c58:	4663      	mov	r3, ip
 8002c5a:	427f      	negs	r7, r7
 8002c5c:	1ac9      	subs	r1, r1, r3
 8002c5e:	1bcb      	subs	r3, r1, r7
 8002c60:	4699      	mov	r9, r3
 8002c62:	465d      	mov	r5, fp
 8002c64:	e576      	b.n	8002754 <__aeabi_dsub+0x104>
 8002c66:	08ff      	lsrs	r7, r7, #3
 8002c68:	074b      	lsls	r3, r1, #29
 8002c6a:	433b      	orrs	r3, r7
 8002c6c:	08cc      	lsrs	r4, r1, #3
 8002c6e:	e667      	b.n	8002940 <__aeabi_dsub+0x2f0>
 8002c70:	000a      	movs	r2, r1
 8002c72:	08db      	lsrs	r3, r3, #3
 8002c74:	433a      	orrs	r2, r7
 8002c76:	d100      	bne.n	8002c7a <__aeabi_dsub+0x62a>
 8002c78:	e66f      	b.n	800295a <__aeabi_dsub+0x30a>
 8002c7a:	4662      	mov	r2, ip
 8002c7c:	0752      	lsls	r2, r2, #29
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	4662      	mov	r2, ip
 8002c82:	08d4      	lsrs	r4, r2, #3
 8002c84:	2280      	movs	r2, #128	; 0x80
 8002c86:	0312      	lsls	r2, r2, #12
 8002c88:	4214      	tst	r4, r2
 8002c8a:	d007      	beq.n	8002c9c <__aeabi_dsub+0x64c>
 8002c8c:	08c8      	lsrs	r0, r1, #3
 8002c8e:	4210      	tst	r0, r2
 8002c90:	d104      	bne.n	8002c9c <__aeabi_dsub+0x64c>
 8002c92:	465d      	mov	r5, fp
 8002c94:	0004      	movs	r4, r0
 8002c96:	08fb      	lsrs	r3, r7, #3
 8002c98:	0749      	lsls	r1, r1, #29
 8002c9a:	430b      	orrs	r3, r1
 8002c9c:	0f5a      	lsrs	r2, r3, #29
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	08db      	lsrs	r3, r3, #3
 8002ca2:	0752      	lsls	r2, r2, #29
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	e65d      	b.n	8002964 <__aeabi_dsub+0x314>
 8002ca8:	074b      	lsls	r3, r1, #29
 8002caa:	08ff      	lsrs	r7, r7, #3
 8002cac:	433b      	orrs	r3, r7
 8002cae:	08cc      	lsrs	r4, r1, #3
 8002cb0:	e649      	b.n	8002946 <__aeabi_dsub+0x2f6>
 8002cb2:	19dc      	adds	r4, r3, r7
 8002cb4:	429c      	cmp	r4, r3
 8002cb6:	419b      	sbcs	r3, r3
 8002cb8:	4461      	add	r1, ip
 8002cba:	4689      	mov	r9, r1
 8002cbc:	425b      	negs	r3, r3
 8002cbe:	4499      	add	r9, r3
 8002cc0:	464b      	mov	r3, r9
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	d400      	bmi.n	8002cc8 <__aeabi_dsub+0x678>
 8002cc6:	e631      	b.n	800292c <__aeabi_dsub+0x2dc>
 8002cc8:	464a      	mov	r2, r9
 8002cca:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <__aeabi_dsub+0x6d8>)
 8002ccc:	401a      	ands	r2, r3
 8002cce:	2301      	movs	r3, #1
 8002cd0:	4691      	mov	r9, r2
 8002cd2:	4698      	mov	r8, r3
 8002cd4:	e62a      	b.n	800292c <__aeabi_dsub+0x2dc>
 8002cd6:	0016      	movs	r6, r2
 8002cd8:	4664      	mov	r4, ip
 8002cda:	3e20      	subs	r6, #32
 8002cdc:	40f4      	lsrs	r4, r6
 8002cde:	46a0      	mov	r8, r4
 8002ce0:	2a20      	cmp	r2, #32
 8002ce2:	d005      	beq.n	8002cf0 <__aeabi_dsub+0x6a0>
 8002ce4:	2640      	movs	r6, #64	; 0x40
 8002ce6:	4664      	mov	r4, ip
 8002ce8:	1ab2      	subs	r2, r6, r2
 8002cea:	4094      	lsls	r4, r2
 8002cec:	4323      	orrs	r3, r4
 8002cee:	469a      	mov	sl, r3
 8002cf0:	4654      	mov	r4, sl
 8002cf2:	1e63      	subs	r3, r4, #1
 8002cf4:	419c      	sbcs	r4, r3
 8002cf6:	4643      	mov	r3, r8
 8002cf8:	431c      	orrs	r4, r3
 8002cfa:	e5db      	b.n	80028b4 <__aeabi_dsub+0x264>
 8002cfc:	0002      	movs	r2, r0
 8002cfe:	2400      	movs	r4, #0
 8002d00:	2300      	movs	r3, #0
 8002d02:	e548      	b.n	8002796 <__aeabi_dsub+0x146>
 8002d04:	19dc      	adds	r4, r3, r7
 8002d06:	42bc      	cmp	r4, r7
 8002d08:	41bf      	sbcs	r7, r7
 8002d0a:	4461      	add	r1, ip
 8002d0c:	4689      	mov	r9, r1
 8002d0e:	427f      	negs	r7, r7
 8002d10:	44b9      	add	r9, r7
 8002d12:	e738      	b.n	8002b86 <__aeabi_dsub+0x536>
 8002d14:	464b      	mov	r3, r9
 8002d16:	4323      	orrs	r3, r4
 8002d18:	d100      	bne.n	8002d1c <__aeabi_dsub+0x6cc>
 8002d1a:	e69f      	b.n	8002a5c <__aeabi_dsub+0x40c>
 8002d1c:	e606      	b.n	800292c <__aeabi_dsub+0x2dc>
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	000007fe 	.word	0x000007fe
 8002d24:	000007ff 	.word	0x000007ff
 8002d28:	ff7fffff 	.word	0xff7fffff
 8002d2c:	08ff      	lsrs	r7, r7, #3
 8002d2e:	074b      	lsls	r3, r1, #29
 8002d30:	433b      	orrs	r3, r7
 8002d32:	08cc      	lsrs	r4, r1, #3
 8002d34:	e616      	b.n	8002964 <__aeabi_dsub+0x314>
 8002d36:	4662      	mov	r2, ip
 8002d38:	08db      	lsrs	r3, r3, #3
 8002d3a:	0752      	lsls	r2, r2, #29
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	4662      	mov	r2, ip
 8002d40:	08d4      	lsrs	r4, r2, #3
 8002d42:	2280      	movs	r2, #128	; 0x80
 8002d44:	0312      	lsls	r2, r2, #12
 8002d46:	4214      	tst	r4, r2
 8002d48:	d007      	beq.n	8002d5a <__aeabi_dsub+0x70a>
 8002d4a:	08c8      	lsrs	r0, r1, #3
 8002d4c:	4210      	tst	r0, r2
 8002d4e:	d104      	bne.n	8002d5a <__aeabi_dsub+0x70a>
 8002d50:	465d      	mov	r5, fp
 8002d52:	0004      	movs	r4, r0
 8002d54:	08fb      	lsrs	r3, r7, #3
 8002d56:	0749      	lsls	r1, r1, #29
 8002d58:	430b      	orrs	r3, r1
 8002d5a:	0f5a      	lsrs	r2, r3, #29
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	0752      	lsls	r2, r2, #29
 8002d60:	08db      	lsrs	r3, r3, #3
 8002d62:	4313      	orrs	r3, r2
 8002d64:	e5fe      	b.n	8002964 <__aeabi_dsub+0x314>
 8002d66:	2300      	movs	r3, #0
 8002d68:	4a01      	ldr	r2, [pc, #4]	; (8002d70 <__aeabi_dsub+0x720>)
 8002d6a:	001c      	movs	r4, r3
 8002d6c:	e513      	b.n	8002796 <__aeabi_dsub+0x146>
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	000007ff 	.word	0x000007ff

08002d74 <__aeabi_dcmpun>:
 8002d74:	b570      	push	{r4, r5, r6, lr}
 8002d76:	0005      	movs	r5, r0
 8002d78:	480c      	ldr	r0, [pc, #48]	; (8002dac <__aeabi_dcmpun+0x38>)
 8002d7a:	031c      	lsls	r4, r3, #12
 8002d7c:	0016      	movs	r6, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	030a      	lsls	r2, r1, #12
 8002d82:	0049      	lsls	r1, r1, #1
 8002d84:	0b12      	lsrs	r2, r2, #12
 8002d86:	0d49      	lsrs	r1, r1, #21
 8002d88:	0b24      	lsrs	r4, r4, #12
 8002d8a:	0d5b      	lsrs	r3, r3, #21
 8002d8c:	4281      	cmp	r1, r0
 8002d8e:	d008      	beq.n	8002da2 <__aeabi_dcmpun+0x2e>
 8002d90:	4a06      	ldr	r2, [pc, #24]	; (8002dac <__aeabi_dcmpun+0x38>)
 8002d92:	2000      	movs	r0, #0
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d103      	bne.n	8002da0 <__aeabi_dcmpun+0x2c>
 8002d98:	0020      	movs	r0, r4
 8002d9a:	4330      	orrs	r0, r6
 8002d9c:	1e43      	subs	r3, r0, #1
 8002d9e:	4198      	sbcs	r0, r3
 8002da0:	bd70      	pop	{r4, r5, r6, pc}
 8002da2:	2001      	movs	r0, #1
 8002da4:	432a      	orrs	r2, r5
 8002da6:	d1fb      	bne.n	8002da0 <__aeabi_dcmpun+0x2c>
 8002da8:	e7f2      	b.n	8002d90 <__aeabi_dcmpun+0x1c>
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	000007ff 	.word	0x000007ff

08002db0 <__aeabi_d2iz>:
 8002db0:	000a      	movs	r2, r1
 8002db2:	b530      	push	{r4, r5, lr}
 8002db4:	4c13      	ldr	r4, [pc, #76]	; (8002e04 <__aeabi_d2iz+0x54>)
 8002db6:	0053      	lsls	r3, r2, #1
 8002db8:	0309      	lsls	r1, r1, #12
 8002dba:	0005      	movs	r5, r0
 8002dbc:	0b09      	lsrs	r1, r1, #12
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	0d5b      	lsrs	r3, r3, #21
 8002dc2:	0fd2      	lsrs	r2, r2, #31
 8002dc4:	42a3      	cmp	r3, r4
 8002dc6:	dd04      	ble.n	8002dd2 <__aeabi_d2iz+0x22>
 8002dc8:	480f      	ldr	r0, [pc, #60]	; (8002e08 <__aeabi_d2iz+0x58>)
 8002dca:	4283      	cmp	r3, r0
 8002dcc:	dd02      	ble.n	8002dd4 <__aeabi_d2iz+0x24>
 8002dce:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <__aeabi_d2iz+0x5c>)
 8002dd0:	18d0      	adds	r0, r2, r3
 8002dd2:	bd30      	pop	{r4, r5, pc}
 8002dd4:	2080      	movs	r0, #128	; 0x80
 8002dd6:	0340      	lsls	r0, r0, #13
 8002dd8:	4301      	orrs	r1, r0
 8002dda:	480d      	ldr	r0, [pc, #52]	; (8002e10 <__aeabi_d2iz+0x60>)
 8002ddc:	1ac0      	subs	r0, r0, r3
 8002dde:	281f      	cmp	r0, #31
 8002de0:	dd08      	ble.n	8002df4 <__aeabi_d2iz+0x44>
 8002de2:	480c      	ldr	r0, [pc, #48]	; (8002e14 <__aeabi_d2iz+0x64>)
 8002de4:	1ac3      	subs	r3, r0, r3
 8002de6:	40d9      	lsrs	r1, r3
 8002de8:	000b      	movs	r3, r1
 8002dea:	4258      	negs	r0, r3
 8002dec:	2a00      	cmp	r2, #0
 8002dee:	d1f0      	bne.n	8002dd2 <__aeabi_d2iz+0x22>
 8002df0:	0018      	movs	r0, r3
 8002df2:	e7ee      	b.n	8002dd2 <__aeabi_d2iz+0x22>
 8002df4:	4c08      	ldr	r4, [pc, #32]	; (8002e18 <__aeabi_d2iz+0x68>)
 8002df6:	40c5      	lsrs	r5, r0
 8002df8:	46a4      	mov	ip, r4
 8002dfa:	4463      	add	r3, ip
 8002dfc:	4099      	lsls	r1, r3
 8002dfe:	000b      	movs	r3, r1
 8002e00:	432b      	orrs	r3, r5
 8002e02:	e7f2      	b.n	8002dea <__aeabi_d2iz+0x3a>
 8002e04:	000003fe 	.word	0x000003fe
 8002e08:	0000041d 	.word	0x0000041d
 8002e0c:	7fffffff 	.word	0x7fffffff
 8002e10:	00000433 	.word	0x00000433
 8002e14:	00000413 	.word	0x00000413
 8002e18:	fffffbed 	.word	0xfffffbed

08002e1c <__aeabi_i2d>:
 8002e1c:	b570      	push	{r4, r5, r6, lr}
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	d016      	beq.n	8002e50 <__aeabi_i2d+0x34>
 8002e22:	17c3      	asrs	r3, r0, #31
 8002e24:	18c5      	adds	r5, r0, r3
 8002e26:	405d      	eors	r5, r3
 8002e28:	0fc4      	lsrs	r4, r0, #31
 8002e2a:	0028      	movs	r0, r5
 8002e2c:	f000 f8ce 	bl	8002fcc <__clzsi2>
 8002e30:	4a11      	ldr	r2, [pc, #68]	; (8002e78 <__aeabi_i2d+0x5c>)
 8002e32:	1a12      	subs	r2, r2, r0
 8002e34:	280a      	cmp	r0, #10
 8002e36:	dc16      	bgt.n	8002e66 <__aeabi_i2d+0x4a>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	002e      	movs	r6, r5
 8002e3c:	3315      	adds	r3, #21
 8002e3e:	409e      	lsls	r6, r3
 8002e40:	230b      	movs	r3, #11
 8002e42:	1a18      	subs	r0, r3, r0
 8002e44:	40c5      	lsrs	r5, r0
 8002e46:	0552      	lsls	r2, r2, #21
 8002e48:	032d      	lsls	r5, r5, #12
 8002e4a:	0b2d      	lsrs	r5, r5, #12
 8002e4c:	0d53      	lsrs	r3, r2, #21
 8002e4e:	e003      	b.n	8002e58 <__aeabi_i2d+0x3c>
 8002e50:	2400      	movs	r4, #0
 8002e52:	2300      	movs	r3, #0
 8002e54:	2500      	movs	r5, #0
 8002e56:	2600      	movs	r6, #0
 8002e58:	051b      	lsls	r3, r3, #20
 8002e5a:	432b      	orrs	r3, r5
 8002e5c:	07e4      	lsls	r4, r4, #31
 8002e5e:	4323      	orrs	r3, r4
 8002e60:	0030      	movs	r0, r6
 8002e62:	0019      	movs	r1, r3
 8002e64:	bd70      	pop	{r4, r5, r6, pc}
 8002e66:	380b      	subs	r0, #11
 8002e68:	4085      	lsls	r5, r0
 8002e6a:	0552      	lsls	r2, r2, #21
 8002e6c:	032d      	lsls	r5, r5, #12
 8002e6e:	2600      	movs	r6, #0
 8002e70:	0b2d      	lsrs	r5, r5, #12
 8002e72:	0d53      	lsrs	r3, r2, #21
 8002e74:	e7f0      	b.n	8002e58 <__aeabi_i2d+0x3c>
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	0000041e 	.word	0x0000041e

08002e7c <__aeabi_ui2d>:
 8002e7c:	b510      	push	{r4, lr}
 8002e7e:	1e04      	subs	r4, r0, #0
 8002e80:	d010      	beq.n	8002ea4 <__aeabi_ui2d+0x28>
 8002e82:	f000 f8a3 	bl	8002fcc <__clzsi2>
 8002e86:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <__aeabi_ui2d+0x48>)
 8002e88:	1a1b      	subs	r3, r3, r0
 8002e8a:	280a      	cmp	r0, #10
 8002e8c:	dc11      	bgt.n	8002eb2 <__aeabi_ui2d+0x36>
 8002e8e:	220b      	movs	r2, #11
 8002e90:	0021      	movs	r1, r4
 8002e92:	1a12      	subs	r2, r2, r0
 8002e94:	40d1      	lsrs	r1, r2
 8002e96:	3015      	adds	r0, #21
 8002e98:	030a      	lsls	r2, r1, #12
 8002e9a:	055b      	lsls	r3, r3, #21
 8002e9c:	4084      	lsls	r4, r0
 8002e9e:	0b12      	lsrs	r2, r2, #12
 8002ea0:	0d5b      	lsrs	r3, r3, #21
 8002ea2:	e001      	b.n	8002ea8 <__aeabi_ui2d+0x2c>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	051b      	lsls	r3, r3, #20
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	0020      	movs	r0, r4
 8002eae:	0019      	movs	r1, r3
 8002eb0:	bd10      	pop	{r4, pc}
 8002eb2:	0022      	movs	r2, r4
 8002eb4:	380b      	subs	r0, #11
 8002eb6:	4082      	lsls	r2, r0
 8002eb8:	055b      	lsls	r3, r3, #21
 8002eba:	0312      	lsls	r2, r2, #12
 8002ebc:	2400      	movs	r4, #0
 8002ebe:	0b12      	lsrs	r2, r2, #12
 8002ec0:	0d5b      	lsrs	r3, r3, #21
 8002ec2:	e7f1      	b.n	8002ea8 <__aeabi_ui2d+0x2c>
 8002ec4:	0000041e 	.word	0x0000041e

08002ec8 <__aeabi_f2d>:
 8002ec8:	b570      	push	{r4, r5, r6, lr}
 8002eca:	0043      	lsls	r3, r0, #1
 8002ecc:	0246      	lsls	r6, r0, #9
 8002ece:	0fc4      	lsrs	r4, r0, #31
 8002ed0:	20fe      	movs	r0, #254	; 0xfe
 8002ed2:	0e1b      	lsrs	r3, r3, #24
 8002ed4:	1c59      	adds	r1, r3, #1
 8002ed6:	0a75      	lsrs	r5, r6, #9
 8002ed8:	4208      	tst	r0, r1
 8002eda:	d00c      	beq.n	8002ef6 <__aeabi_f2d+0x2e>
 8002edc:	22e0      	movs	r2, #224	; 0xe0
 8002ede:	0092      	lsls	r2, r2, #2
 8002ee0:	4694      	mov	ip, r2
 8002ee2:	076d      	lsls	r5, r5, #29
 8002ee4:	0b36      	lsrs	r6, r6, #12
 8002ee6:	4463      	add	r3, ip
 8002ee8:	051b      	lsls	r3, r3, #20
 8002eea:	4333      	orrs	r3, r6
 8002eec:	07e4      	lsls	r4, r4, #31
 8002eee:	4323      	orrs	r3, r4
 8002ef0:	0028      	movs	r0, r5
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	bd70      	pop	{r4, r5, r6, pc}
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d114      	bne.n	8002f24 <__aeabi_f2d+0x5c>
 8002efa:	2d00      	cmp	r5, #0
 8002efc:	d01b      	beq.n	8002f36 <__aeabi_f2d+0x6e>
 8002efe:	0028      	movs	r0, r5
 8002f00:	f000 f864 	bl	8002fcc <__clzsi2>
 8002f04:	280a      	cmp	r0, #10
 8002f06:	dc1c      	bgt.n	8002f42 <__aeabi_f2d+0x7a>
 8002f08:	230b      	movs	r3, #11
 8002f0a:	002e      	movs	r6, r5
 8002f0c:	1a1b      	subs	r3, r3, r0
 8002f0e:	40de      	lsrs	r6, r3
 8002f10:	0003      	movs	r3, r0
 8002f12:	3315      	adds	r3, #21
 8002f14:	409d      	lsls	r5, r3
 8002f16:	4a0e      	ldr	r2, [pc, #56]	; (8002f50 <__aeabi_f2d+0x88>)
 8002f18:	0336      	lsls	r6, r6, #12
 8002f1a:	1a12      	subs	r2, r2, r0
 8002f1c:	0552      	lsls	r2, r2, #21
 8002f1e:	0b36      	lsrs	r6, r6, #12
 8002f20:	0d53      	lsrs	r3, r2, #21
 8002f22:	e7e1      	b.n	8002ee8 <__aeabi_f2d+0x20>
 8002f24:	2d00      	cmp	r5, #0
 8002f26:	d009      	beq.n	8002f3c <__aeabi_f2d+0x74>
 8002f28:	2280      	movs	r2, #128	; 0x80
 8002f2a:	0b36      	lsrs	r6, r6, #12
 8002f2c:	0312      	lsls	r2, r2, #12
 8002f2e:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <__aeabi_f2d+0x8c>)
 8002f30:	076d      	lsls	r5, r5, #29
 8002f32:	4316      	orrs	r6, r2
 8002f34:	e7d8      	b.n	8002ee8 <__aeabi_f2d+0x20>
 8002f36:	2300      	movs	r3, #0
 8002f38:	2600      	movs	r6, #0
 8002f3a:	e7d5      	b.n	8002ee8 <__aeabi_f2d+0x20>
 8002f3c:	2600      	movs	r6, #0
 8002f3e:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <__aeabi_f2d+0x8c>)
 8002f40:	e7d2      	b.n	8002ee8 <__aeabi_f2d+0x20>
 8002f42:	0003      	movs	r3, r0
 8002f44:	3b0b      	subs	r3, #11
 8002f46:	409d      	lsls	r5, r3
 8002f48:	002e      	movs	r6, r5
 8002f4a:	2500      	movs	r5, #0
 8002f4c:	e7e3      	b.n	8002f16 <__aeabi_f2d+0x4e>
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	00000389 	.word	0x00000389
 8002f54:	000007ff 	.word	0x000007ff

08002f58 <__aeabi_cfrcmple>:
 8002f58:	4684      	mov	ip, r0
 8002f5a:	0008      	movs	r0, r1
 8002f5c:	4661      	mov	r1, ip
 8002f5e:	e7ff      	b.n	8002f60 <__aeabi_cfcmpeq>

08002f60 <__aeabi_cfcmpeq>:
 8002f60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002f62:	f000 f8c9 	bl	80030f8 <__lesf2>
 8002f66:	2800      	cmp	r0, #0
 8002f68:	d401      	bmi.n	8002f6e <__aeabi_cfcmpeq+0xe>
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	42c8      	cmn	r0, r1
 8002f6e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002f70 <__aeabi_fcmpeq>:
 8002f70:	b510      	push	{r4, lr}
 8002f72:	f000 f855 	bl	8003020 <__eqsf2>
 8002f76:	4240      	negs	r0, r0
 8002f78:	3001      	adds	r0, #1
 8002f7a:	bd10      	pop	{r4, pc}

08002f7c <__aeabi_fcmplt>:
 8002f7c:	b510      	push	{r4, lr}
 8002f7e:	f000 f8bb 	bl	80030f8 <__lesf2>
 8002f82:	2800      	cmp	r0, #0
 8002f84:	db01      	blt.n	8002f8a <__aeabi_fcmplt+0xe>
 8002f86:	2000      	movs	r0, #0
 8002f88:	bd10      	pop	{r4, pc}
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	bd10      	pop	{r4, pc}
 8002f8e:	46c0      	nop			; (mov r8, r8)

08002f90 <__aeabi_fcmple>:
 8002f90:	b510      	push	{r4, lr}
 8002f92:	f000 f8b1 	bl	80030f8 <__lesf2>
 8002f96:	2800      	cmp	r0, #0
 8002f98:	dd01      	ble.n	8002f9e <__aeabi_fcmple+0xe>
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	bd10      	pop	{r4, pc}
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	bd10      	pop	{r4, pc}
 8002fa2:	46c0      	nop			; (mov r8, r8)

08002fa4 <__aeabi_fcmpgt>:
 8002fa4:	b510      	push	{r4, lr}
 8002fa6:	f000 f861 	bl	800306c <__gesf2>
 8002faa:	2800      	cmp	r0, #0
 8002fac:	dc01      	bgt.n	8002fb2 <__aeabi_fcmpgt+0xe>
 8002fae:	2000      	movs	r0, #0
 8002fb0:	bd10      	pop	{r4, pc}
 8002fb2:	2001      	movs	r0, #1
 8002fb4:	bd10      	pop	{r4, pc}
 8002fb6:	46c0      	nop			; (mov r8, r8)

08002fb8 <__aeabi_fcmpge>:
 8002fb8:	b510      	push	{r4, lr}
 8002fba:	f000 f857 	bl	800306c <__gesf2>
 8002fbe:	2800      	cmp	r0, #0
 8002fc0:	da01      	bge.n	8002fc6 <__aeabi_fcmpge+0xe>
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	bd10      	pop	{r4, pc}
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	bd10      	pop	{r4, pc}
 8002fca:	46c0      	nop			; (mov r8, r8)

08002fcc <__clzsi2>:
 8002fcc:	211c      	movs	r1, #28
 8002fce:	2301      	movs	r3, #1
 8002fd0:	041b      	lsls	r3, r3, #16
 8002fd2:	4298      	cmp	r0, r3
 8002fd4:	d301      	bcc.n	8002fda <__clzsi2+0xe>
 8002fd6:	0c00      	lsrs	r0, r0, #16
 8002fd8:	3910      	subs	r1, #16
 8002fda:	0a1b      	lsrs	r3, r3, #8
 8002fdc:	4298      	cmp	r0, r3
 8002fde:	d301      	bcc.n	8002fe4 <__clzsi2+0x18>
 8002fe0:	0a00      	lsrs	r0, r0, #8
 8002fe2:	3908      	subs	r1, #8
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	4298      	cmp	r0, r3
 8002fe8:	d301      	bcc.n	8002fee <__clzsi2+0x22>
 8002fea:	0900      	lsrs	r0, r0, #4
 8002fec:	3904      	subs	r1, #4
 8002fee:	a202      	add	r2, pc, #8	; (adr r2, 8002ff8 <__clzsi2+0x2c>)
 8002ff0:	5c10      	ldrb	r0, [r2, r0]
 8002ff2:	1840      	adds	r0, r0, r1
 8002ff4:	4770      	bx	lr
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	02020304 	.word	0x02020304
 8002ffc:	01010101 	.word	0x01010101
	...

08003008 <__clzdi2>:
 8003008:	b510      	push	{r4, lr}
 800300a:	2900      	cmp	r1, #0
 800300c:	d103      	bne.n	8003016 <__clzdi2+0xe>
 800300e:	f7ff ffdd 	bl	8002fcc <__clzsi2>
 8003012:	3020      	adds	r0, #32
 8003014:	e002      	b.n	800301c <__clzdi2+0x14>
 8003016:	0008      	movs	r0, r1
 8003018:	f7ff ffd8 	bl	8002fcc <__clzsi2>
 800301c:	bd10      	pop	{r4, pc}
 800301e:	46c0      	nop			; (mov r8, r8)

08003020 <__eqsf2>:
 8003020:	b570      	push	{r4, r5, r6, lr}
 8003022:	0042      	lsls	r2, r0, #1
 8003024:	0245      	lsls	r5, r0, #9
 8003026:	024e      	lsls	r6, r1, #9
 8003028:	004c      	lsls	r4, r1, #1
 800302a:	0fc3      	lsrs	r3, r0, #31
 800302c:	0a6d      	lsrs	r5, r5, #9
 800302e:	2001      	movs	r0, #1
 8003030:	0e12      	lsrs	r2, r2, #24
 8003032:	0a76      	lsrs	r6, r6, #9
 8003034:	0e24      	lsrs	r4, r4, #24
 8003036:	0fc9      	lsrs	r1, r1, #31
 8003038:	2aff      	cmp	r2, #255	; 0xff
 800303a:	d006      	beq.n	800304a <__eqsf2+0x2a>
 800303c:	2cff      	cmp	r4, #255	; 0xff
 800303e:	d003      	beq.n	8003048 <__eqsf2+0x28>
 8003040:	42a2      	cmp	r2, r4
 8003042:	d101      	bne.n	8003048 <__eqsf2+0x28>
 8003044:	42b5      	cmp	r5, r6
 8003046:	d006      	beq.n	8003056 <__eqsf2+0x36>
 8003048:	bd70      	pop	{r4, r5, r6, pc}
 800304a:	2d00      	cmp	r5, #0
 800304c:	d1fc      	bne.n	8003048 <__eqsf2+0x28>
 800304e:	2cff      	cmp	r4, #255	; 0xff
 8003050:	d1fa      	bne.n	8003048 <__eqsf2+0x28>
 8003052:	2e00      	cmp	r6, #0
 8003054:	d1f8      	bne.n	8003048 <__eqsf2+0x28>
 8003056:	428b      	cmp	r3, r1
 8003058:	d006      	beq.n	8003068 <__eqsf2+0x48>
 800305a:	2001      	movs	r0, #1
 800305c:	2a00      	cmp	r2, #0
 800305e:	d1f3      	bne.n	8003048 <__eqsf2+0x28>
 8003060:	0028      	movs	r0, r5
 8003062:	1e43      	subs	r3, r0, #1
 8003064:	4198      	sbcs	r0, r3
 8003066:	e7ef      	b.n	8003048 <__eqsf2+0x28>
 8003068:	2000      	movs	r0, #0
 800306a:	e7ed      	b.n	8003048 <__eqsf2+0x28>

0800306c <__gesf2>:
 800306c:	b570      	push	{r4, r5, r6, lr}
 800306e:	0042      	lsls	r2, r0, #1
 8003070:	0245      	lsls	r5, r0, #9
 8003072:	024e      	lsls	r6, r1, #9
 8003074:	004c      	lsls	r4, r1, #1
 8003076:	0fc3      	lsrs	r3, r0, #31
 8003078:	0a6d      	lsrs	r5, r5, #9
 800307a:	0e12      	lsrs	r2, r2, #24
 800307c:	0a76      	lsrs	r6, r6, #9
 800307e:	0e24      	lsrs	r4, r4, #24
 8003080:	0fc8      	lsrs	r0, r1, #31
 8003082:	2aff      	cmp	r2, #255	; 0xff
 8003084:	d01b      	beq.n	80030be <__gesf2+0x52>
 8003086:	2cff      	cmp	r4, #255	; 0xff
 8003088:	d00e      	beq.n	80030a8 <__gesf2+0x3c>
 800308a:	2a00      	cmp	r2, #0
 800308c:	d11b      	bne.n	80030c6 <__gesf2+0x5a>
 800308e:	2c00      	cmp	r4, #0
 8003090:	d101      	bne.n	8003096 <__gesf2+0x2a>
 8003092:	2e00      	cmp	r6, #0
 8003094:	d01c      	beq.n	80030d0 <__gesf2+0x64>
 8003096:	2d00      	cmp	r5, #0
 8003098:	d00c      	beq.n	80030b4 <__gesf2+0x48>
 800309a:	4283      	cmp	r3, r0
 800309c:	d01c      	beq.n	80030d8 <__gesf2+0x6c>
 800309e:	2102      	movs	r1, #2
 80030a0:	1e58      	subs	r0, r3, #1
 80030a2:	4008      	ands	r0, r1
 80030a4:	3801      	subs	r0, #1
 80030a6:	bd70      	pop	{r4, r5, r6, pc}
 80030a8:	2e00      	cmp	r6, #0
 80030aa:	d122      	bne.n	80030f2 <__gesf2+0x86>
 80030ac:	2a00      	cmp	r2, #0
 80030ae:	d1f4      	bne.n	800309a <__gesf2+0x2e>
 80030b0:	2d00      	cmp	r5, #0
 80030b2:	d1f2      	bne.n	800309a <__gesf2+0x2e>
 80030b4:	2800      	cmp	r0, #0
 80030b6:	d1f6      	bne.n	80030a6 <__gesf2+0x3a>
 80030b8:	2001      	movs	r0, #1
 80030ba:	4240      	negs	r0, r0
 80030bc:	e7f3      	b.n	80030a6 <__gesf2+0x3a>
 80030be:	2d00      	cmp	r5, #0
 80030c0:	d117      	bne.n	80030f2 <__gesf2+0x86>
 80030c2:	2cff      	cmp	r4, #255	; 0xff
 80030c4:	d0f0      	beq.n	80030a8 <__gesf2+0x3c>
 80030c6:	2c00      	cmp	r4, #0
 80030c8:	d1e7      	bne.n	800309a <__gesf2+0x2e>
 80030ca:	2e00      	cmp	r6, #0
 80030cc:	d1e5      	bne.n	800309a <__gesf2+0x2e>
 80030ce:	e7e6      	b.n	800309e <__gesf2+0x32>
 80030d0:	2000      	movs	r0, #0
 80030d2:	2d00      	cmp	r5, #0
 80030d4:	d0e7      	beq.n	80030a6 <__gesf2+0x3a>
 80030d6:	e7e2      	b.n	800309e <__gesf2+0x32>
 80030d8:	42a2      	cmp	r2, r4
 80030da:	dc05      	bgt.n	80030e8 <__gesf2+0x7c>
 80030dc:	dbea      	blt.n	80030b4 <__gesf2+0x48>
 80030de:	42b5      	cmp	r5, r6
 80030e0:	d802      	bhi.n	80030e8 <__gesf2+0x7c>
 80030e2:	d3e7      	bcc.n	80030b4 <__gesf2+0x48>
 80030e4:	2000      	movs	r0, #0
 80030e6:	e7de      	b.n	80030a6 <__gesf2+0x3a>
 80030e8:	4243      	negs	r3, r0
 80030ea:	4158      	adcs	r0, r3
 80030ec:	0040      	lsls	r0, r0, #1
 80030ee:	3801      	subs	r0, #1
 80030f0:	e7d9      	b.n	80030a6 <__gesf2+0x3a>
 80030f2:	2002      	movs	r0, #2
 80030f4:	4240      	negs	r0, r0
 80030f6:	e7d6      	b.n	80030a6 <__gesf2+0x3a>

080030f8 <__lesf2>:
 80030f8:	b570      	push	{r4, r5, r6, lr}
 80030fa:	0042      	lsls	r2, r0, #1
 80030fc:	0245      	lsls	r5, r0, #9
 80030fe:	024e      	lsls	r6, r1, #9
 8003100:	004c      	lsls	r4, r1, #1
 8003102:	0fc3      	lsrs	r3, r0, #31
 8003104:	0a6d      	lsrs	r5, r5, #9
 8003106:	0e12      	lsrs	r2, r2, #24
 8003108:	0a76      	lsrs	r6, r6, #9
 800310a:	0e24      	lsrs	r4, r4, #24
 800310c:	0fc8      	lsrs	r0, r1, #31
 800310e:	2aff      	cmp	r2, #255	; 0xff
 8003110:	d00b      	beq.n	800312a <__lesf2+0x32>
 8003112:	2cff      	cmp	r4, #255	; 0xff
 8003114:	d00d      	beq.n	8003132 <__lesf2+0x3a>
 8003116:	2a00      	cmp	r2, #0
 8003118:	d11f      	bne.n	800315a <__lesf2+0x62>
 800311a:	2c00      	cmp	r4, #0
 800311c:	d116      	bne.n	800314c <__lesf2+0x54>
 800311e:	2e00      	cmp	r6, #0
 8003120:	d114      	bne.n	800314c <__lesf2+0x54>
 8003122:	2000      	movs	r0, #0
 8003124:	2d00      	cmp	r5, #0
 8003126:	d010      	beq.n	800314a <__lesf2+0x52>
 8003128:	e009      	b.n	800313e <__lesf2+0x46>
 800312a:	2d00      	cmp	r5, #0
 800312c:	d10c      	bne.n	8003148 <__lesf2+0x50>
 800312e:	2cff      	cmp	r4, #255	; 0xff
 8003130:	d113      	bne.n	800315a <__lesf2+0x62>
 8003132:	2e00      	cmp	r6, #0
 8003134:	d108      	bne.n	8003148 <__lesf2+0x50>
 8003136:	2a00      	cmp	r2, #0
 8003138:	d008      	beq.n	800314c <__lesf2+0x54>
 800313a:	4283      	cmp	r3, r0
 800313c:	d012      	beq.n	8003164 <__lesf2+0x6c>
 800313e:	2102      	movs	r1, #2
 8003140:	1e58      	subs	r0, r3, #1
 8003142:	4008      	ands	r0, r1
 8003144:	3801      	subs	r0, #1
 8003146:	e000      	b.n	800314a <__lesf2+0x52>
 8003148:	2002      	movs	r0, #2
 800314a:	bd70      	pop	{r4, r5, r6, pc}
 800314c:	2d00      	cmp	r5, #0
 800314e:	d1f4      	bne.n	800313a <__lesf2+0x42>
 8003150:	2800      	cmp	r0, #0
 8003152:	d1fa      	bne.n	800314a <__lesf2+0x52>
 8003154:	2001      	movs	r0, #1
 8003156:	4240      	negs	r0, r0
 8003158:	e7f7      	b.n	800314a <__lesf2+0x52>
 800315a:	2c00      	cmp	r4, #0
 800315c:	d1ed      	bne.n	800313a <__lesf2+0x42>
 800315e:	2e00      	cmp	r6, #0
 8003160:	d1eb      	bne.n	800313a <__lesf2+0x42>
 8003162:	e7ec      	b.n	800313e <__lesf2+0x46>
 8003164:	42a2      	cmp	r2, r4
 8003166:	dc05      	bgt.n	8003174 <__lesf2+0x7c>
 8003168:	dbf2      	blt.n	8003150 <__lesf2+0x58>
 800316a:	42b5      	cmp	r5, r6
 800316c:	d802      	bhi.n	8003174 <__lesf2+0x7c>
 800316e:	d3ef      	bcc.n	8003150 <__lesf2+0x58>
 8003170:	2000      	movs	r0, #0
 8003172:	e7ea      	b.n	800314a <__lesf2+0x52>
 8003174:	4243      	negs	r3, r0
 8003176:	4158      	adcs	r0, r3
 8003178:	0040      	lsls	r0, r0, #1
 800317a:	3801      	subs	r0, #1
 800317c:	e7e5      	b.n	800314a <__lesf2+0x52>
 800317e:	46c0      	nop			; (mov r8, r8)

08003180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003182:	b08f      	sub	sp, #60	; 0x3c
 8003184:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003186:	f001 f915 	bl	80043b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800318a:	f000 f9a1 	bl	80034d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800318e:	f000 fa83 	bl	8003698 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003192:	f000 fa11 	bl	80035b8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8003196:	f000 fa4f 	bl	8003638 <MX_USART1_UART_Init>
// 	     HAL_UART_Transmit(&huart1, EndMSG, sizeof(EndMSG), 10000);
// 	     /*--[ Scanning Done ]--*/


  stmdev_ctx_t dev_ctx_xl;
   dev_ctx_xl.write_reg = platform_write;
 800319a:	2414      	movs	r4, #20
 800319c:	2508      	movs	r5, #8
 800319e:	1963      	adds	r3, r4, r5
 80031a0:	19db      	adds	r3, r3, r7
 80031a2:	4abd      	ldr	r2, [pc, #756]	; (8003498 <main+0x318>)
 80031a4:	601a      	str	r2, [r3, #0]
   dev_ctx_xl.read_reg = platform_read;
 80031a6:	1963      	adds	r3, r4, r5
 80031a8:	19db      	adds	r3, r3, r7
 80031aa:	4abc      	ldr	r2, [pc, #752]	; (800349c <main+0x31c>)
 80031ac:	605a      	str	r2, [r3, #4]
   stmdev_ctx_t dev_ctx_mg;
   dev_ctx_mg.write_reg = platform_write;
 80031ae:	2108      	movs	r1, #8
 80031b0:	194b      	adds	r3, r1, r5
 80031b2:	19db      	adds	r3, r3, r7
 80031b4:	4ab8      	ldr	r2, [pc, #736]	; (8003498 <main+0x318>)
 80031b6:	601a      	str	r2, [r3, #0]
   dev_ctx_mg.read_reg = platform_read;
 80031b8:	194b      	adds	r3, r1, r5
 80031ba:	19db      	adds	r3, r3, r7
 80031bc:	4ab7      	ldr	r2, [pc, #732]	; (800349c <main+0x31c>)
 80031be:	605a      	str	r2, [r3, #4]
   /* Wait boot time and initialize platform specific hardware */
//     platform_init();
     /* Wait sensor boot time */
     platform_delay(1000);
 80031c0:	23fa      	movs	r3, #250	; 0xfa
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	0018      	movs	r0, r3
 80031c6:	f000 fad9 	bl	800377c <platform_delay>

     // set SPI as 3 wire communication
     lsm303agr_xl_spi_mode_set(&dev_ctx_xl, 1); //1:3wire 0:4wire
 80031ca:	1963      	adds	r3, r4, r5
 80031cc:	19db      	adds	r3, r3, r7
 80031ce:	2101      	movs	r1, #1
 80031d0:	0018      	movs	r0, r3
 80031d2:	f001 f8bf 	bl	8004354 <lsm303agr_xl_spi_mode_set>

     /* Check device ID */
     whoamI = 0;
 80031d6:	4bb2      	ldr	r3, [pc, #712]	; (80034a0 <main+0x320>)
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]
     lsm303agr_xl_device_id_get(&dev_ctx_xl, &whoamI);
 80031dc:	4ab0      	ldr	r2, [pc, #704]	; (80034a0 <main+0x320>)
 80031de:	1963      	adds	r3, r4, r5
 80031e0:	19db      	adds	r3, r3, r7
 80031e2:	0011      	movs	r1, r2
 80031e4:	0018      	movs	r0, r3
 80031e6:	f001 f822 	bl	800422e <lsm303agr_xl_device_id_get>

     if ( whoamI != LSM303AGR_ID_XL )
 80031ea:	4bad      	ldr	r3, [pc, #692]	; (80034a0 <main+0x320>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b33      	cmp	r3, #51	; 0x33
 80031f0:	d000      	beq.n	80031f4 <main+0x74>
       while (1); /*manage here device not found */
 80031f2:	e7fe      	b.n	80031f2 <main+0x72>

     whoamI = 0;
 80031f4:	4baa      	ldr	r3, [pc, #680]	; (80034a0 <main+0x320>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]
     lsm303agr_mag_device_id_get(&dev_ctx_mg, &whoamI);
 80031fa:	4aa9      	ldr	r2, [pc, #676]	; (80034a0 <main+0x320>)
 80031fc:	2308      	movs	r3, #8
 80031fe:	2108      	movs	r1, #8
 8003200:	185b      	adds	r3, r3, r1
 8003202:	19db      	adds	r3, r3, r7
 8003204:	0011      	movs	r1, r2
 8003206:	0018      	movs	r0, r3
 8003208:	f001 f835 	bl	8004276 <lsm303agr_mag_device_id_get>

     if ( whoamI != LSM303AGR_ID_MG )
 800320c:	4ba4      	ldr	r3, [pc, #656]	; (80034a0 <main+0x320>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b40      	cmp	r3, #64	; 0x40
 8003212:	d000      	beq.n	8003216 <main+0x96>
       while (1); /*manage here device not found */
 8003214:	e7fe      	b.n	8003214 <main+0x94>

     /* Restore default configuration for magnetometer */
     lsm303agr_mag_reset_set(&dev_ctx_mg, PROPERTY_ENABLE);
 8003216:	2308      	movs	r3, #8
 8003218:	2208      	movs	r2, #8
 800321a:	189b      	adds	r3, r3, r2
 800321c:	19db      	adds	r3, r3, r7
 800321e:	2101      	movs	r1, #1
 8003220:	0018      	movs	r0, r3
 8003222:	f001 f83a 	bl	800429a <lsm303agr_mag_reset_set>

     do {
       lsm303agr_mag_reset_get(&dev_ctx_mg, &rst);
 8003226:	4a9f      	ldr	r2, [pc, #636]	; (80034a4 <main+0x324>)
 8003228:	2408      	movs	r4, #8
 800322a:	2608      	movs	r6, #8
 800322c:	19a3      	adds	r3, r4, r6
 800322e:	19db      	adds	r3, r3, r7
 8003230:	0011      	movs	r1, r2
 8003232:	0018      	movs	r0, r3
 8003234:	f001 f861 	bl	80042fa <lsm303agr_mag_reset_get>
     } while (rst);
 8003238:	4b9a      	ldr	r3, [pc, #616]	; (80034a4 <main+0x324>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f2      	bne.n	8003226 <main+0xa6>

     /* Enable Block Data Update */
     lsm303agr_xl_block_data_update_set(&dev_ctx_xl, PROPERTY_ENABLE);
 8003240:	2514      	movs	r5, #20
 8003242:	19ab      	adds	r3, r5, r6
 8003244:	19db      	adds	r3, r3, r7
 8003246:	2101      	movs	r1, #1
 8003248:	0018      	movs	r0, r3
 800324a:	f000 fe2e 	bl	8003eaa <lsm303agr_xl_block_data_update_set>
     lsm303agr_mag_block_data_update_set(&dev_ctx_mg, PROPERTY_ENABLE);
 800324e:	19a3      	adds	r3, r4, r6
 8003250:	19db      	adds	r3, r3, r7
 8003252:	2101      	movs	r1, #1
 8003254:	0018      	movs	r0, r3
 8003256:	f000 ff67 	bl	8004128 <lsm303agr_mag_block_data_update_set>
     /* Set Output Data Rate */
     lsm303agr_xl_data_rate_set(&dev_ctx_xl, LSM303AGR_XL_ODR_1Hz);
 800325a:	19ab      	adds	r3, r5, r6
 800325c:	19db      	adds	r3, r3, r7
 800325e:	2101      	movs	r1, #1
 8003260:	0018      	movs	r0, r3
 8003262:	f000 fdc4 	bl	8003dee <lsm303agr_xl_data_rate_set>
     lsm303agr_mag_data_rate_set(&dev_ctx_mg, LSM303AGR_MG_ODR_10Hz);
 8003266:	19a3      	adds	r3, r4, r6
 8003268:	19db      	adds	r3, r3, r7
 800326a:	2100      	movs	r1, #0
 800326c:	0018      	movs	r0, r3
 800326e:	f000 fecd 	bl	800400c <lsm303agr_mag_data_rate_set>
     /* Set accelerometer full scale */
     lsm303agr_xl_full_scale_set(&dev_ctx_xl, LSM303AGR_2g);
 8003272:	19ab      	adds	r3, r5, r6
 8003274:	19db      	adds	r3, r3, r7
 8003276:	2100      	movs	r1, #0
 8003278:	0018      	movs	r0, r3
 800327a:	f000 fde6 	bl	8003e4a <lsm303agr_xl_full_scale_set>
     /* Set / Reset magnetic sensor mode */
     lsm303agr_mag_set_rst_mode_set(&dev_ctx_mg,
 800327e:	19a3      	adds	r3, r4, r6
 8003280:	19db      	adds	r3, r3, r7
 8003282:	2101      	movs	r1, #1
 8003284:	0018      	movs	r0, r3
 8003286:	f000 ff1f 	bl	80040c8 <lsm303agr_mag_set_rst_mode_set>
                                    LSM303AGR_SENS_OFF_CANC_EVERY_ODR);
     /* Enable temperature compensation on mag sensor */
     lsm303agr_mag_offset_temp_comp_set(&dev_ctx_mg, PROPERTY_ENABLE);
 800328a:	19a3      	adds	r3, r4, r6
 800328c:	19db      	adds	r3, r3, r7
 800328e:	2101      	movs	r1, #1
 8003290:	0018      	movs	r0, r3
 8003292:	f000 feeb 	bl	800406c <lsm303agr_mag_offset_temp_comp_set>
     /* Enable temperature sensor */
     lsm303agr_temperature_meas_set(&dev_ctx_xl, LSM303AGR_TEMP_ENABLE);
 8003296:	19ab      	adds	r3, r5, r6
 8003298:	19db      	adds	r3, r3, r7
 800329a:	2103      	movs	r1, #3
 800329c:	0018      	movs	r0, r3
 800329e:	f000 fcfc 	bl	8003c9a <lsm303agr_temperature_meas_set>
     /* Set device in continuous mode */
     lsm303agr_xl_operating_mode_set(&dev_ctx_xl, LSM303AGR_HR_12bit);
 80032a2:	19ab      	adds	r3, r5, r6
 80032a4:	19db      	adds	r3, r3, r7
 80032a6:	2100      	movs	r1, #0
 80032a8:	0018      	movs	r0, r3
 80032aa:	f000 fd24 	bl	8003cf6 <lsm303agr_xl_operating_mode_set>
     /* Set magnetometer in continuous mode */
     lsm303agr_mag_operating_mode_set(&dev_ctx_mg,
 80032ae:	19a3      	adds	r3, r4, r6
 80032b0:	19db      	adds	r3, r3, r7
 80032b2:	2100      	movs	r1, #0
 80032b4:	0018      	movs	r0, r3
 80032b6:	f000 fe79 	bl	8003fac <lsm303agr_mag_operating_mode_set>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /*-[ I2C Bus Scanning ]-*/
	    lsm303agr_reg_t reg;
	    lsm303agr_xl_status_get(&dev_ctx_xl, &reg.status_reg_a);
 80032ba:	260c      	movs	r6, #12
 80032bc:	19ba      	adds	r2, r7, r6
 80032be:	2414      	movs	r4, #20
 80032c0:	2508      	movs	r5, #8
 80032c2:	1963      	adds	r3, r4, r5
 80032c4:	19db      	adds	r3, r3, r7
 80032c6:	0011      	movs	r1, r2
 80032c8:	0018      	movs	r0, r3
 80032ca:	f000 ffc2 	bl	8004252 <lsm303agr_xl_status_get>

	    if (reg.status_reg_a.zyxda) {
 80032ce:	19bb      	adds	r3, r7, r6
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2208      	movs	r2, #8
 80032d4:	4013      	ands	r3, r2
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d049      	beq.n	8003370 <main+0x1f0>
	      /* Read accelerometer data */
	      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 80032dc:	4b72      	ldr	r3, [pc, #456]	; (80034a8 <main+0x328>)
 80032de:	2206      	movs	r2, #6
 80032e0:	2100      	movs	r1, #0
 80032e2:	0018      	movs	r0, r3
 80032e4:	f003 fc6c 	bl	8006bc0 <memset>
	      lsm303agr_acceleration_raw_get(&dev_ctx_xl,
 80032e8:	4a6f      	ldr	r2, [pc, #444]	; (80034a8 <main+0x328>)
 80032ea:	1963      	adds	r3, r4, r5
 80032ec:	19db      	adds	r3, r3, r7
 80032ee:	0011      	movs	r1, r2
 80032f0:	0018      	movs	r0, r3
 80032f2:	f000 fe08 	bl	8003f06 <lsm303agr_acceleration_raw_get>
	                                     data_raw_acceleration);
	      acceleration_mg[0] = lsm303agr_from_fs_2g_hr_to_mg(
 80032f6:	4b6c      	ldr	r3, [pc, #432]	; (80034a8 <main+0x328>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	5e9b      	ldrsh	r3, [r3, r2]
 80032fc:	0018      	movs	r0, r3
 80032fe:	f000 fc31 	bl	8003b64 <lsm303agr_from_fs_2g_hr_to_mg>
 8003302:	1c02      	adds	r2, r0, #0
 8003304:	4b69      	ldr	r3, [pc, #420]	; (80034ac <main+0x32c>)
 8003306:	601a      	str	r2, [r3, #0]
	                             data_raw_acceleration[0] );
	      acceleration_mg[1] = lsm303agr_from_fs_2g_hr_to_mg(
 8003308:	4b67      	ldr	r3, [pc, #412]	; (80034a8 <main+0x328>)
 800330a:	2202      	movs	r2, #2
 800330c:	5e9b      	ldrsh	r3, [r3, r2]
 800330e:	0018      	movs	r0, r3
 8003310:	f000 fc28 	bl	8003b64 <lsm303agr_from_fs_2g_hr_to_mg>
 8003314:	1c02      	adds	r2, r0, #0
 8003316:	4b65      	ldr	r3, [pc, #404]	; (80034ac <main+0x32c>)
 8003318:	605a      	str	r2, [r3, #4]
	                             data_raw_acceleration[1] );
	      acceleration_mg[2] = lsm303agr_from_fs_2g_hr_to_mg(
 800331a:	4b63      	ldr	r3, [pc, #396]	; (80034a8 <main+0x328>)
 800331c:	2204      	movs	r2, #4
 800331e:	5e9b      	ldrsh	r3, [r3, r2]
 8003320:	0018      	movs	r0, r3
 8003322:	f000 fc1f 	bl	8003b64 <lsm303agr_from_fs_2g_hr_to_mg>
 8003326:	1c02      	adds	r2, r0, #0
 8003328:	4b60      	ldr	r3, [pc, #384]	; (80034ac <main+0x32c>)
 800332a:	609a      	str	r2, [r3, #8]
	                             data_raw_acceleration[2] );
	      sprintf((char *)tx_buffer,
 800332c:	4b60      	ldr	r3, [pc, #384]	; (80034b0 <main+0x330>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	001e      	movs	r6, r3
	              "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
	              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8003332:	4b5e      	ldr	r3, [pc, #376]	; (80034ac <main+0x32c>)
 8003334:	681b      	ldr	r3, [r3, #0]
	      sprintf((char *)tx_buffer,
 8003336:	1c18      	adds	r0, r3, #0
 8003338:	f7ff fdc6 	bl	8002ec8 <__aeabi_f2d>
 800333c:	6038      	str	r0, [r7, #0]
 800333e:	6079      	str	r1, [r7, #4]
	              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8003340:	4b5a      	ldr	r3, [pc, #360]	; (80034ac <main+0x32c>)
 8003342:	685b      	ldr	r3, [r3, #4]
	      sprintf((char *)tx_buffer,
 8003344:	1c18      	adds	r0, r3, #0
 8003346:	f7ff fdbf 	bl	8002ec8 <__aeabi_f2d>
 800334a:	0004      	movs	r4, r0
 800334c:	000d      	movs	r5, r1
	              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 800334e:	4b57      	ldr	r3, [pc, #348]	; (80034ac <main+0x32c>)
 8003350:	689b      	ldr	r3, [r3, #8]
	      sprintf((char *)tx_buffer,
 8003352:	1c18      	adds	r0, r3, #0
 8003354:	f7ff fdb8 	bl	8002ec8 <__aeabi_f2d>
 8003358:	0002      	movs	r2, r0
 800335a:	000b      	movs	r3, r1
 800335c:	4955      	ldr	r1, [pc, #340]	; (80034b4 <main+0x334>)
 800335e:	9202      	str	r2, [sp, #8]
 8003360:	9303      	str	r3, [sp, #12]
 8003362:	9400      	str	r4, [sp, #0]
 8003364:	9501      	str	r5, [sp, #4]
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	0030      	movs	r0, r6
 800336c:	f004 f89e 	bl	80074ac <siprintf>
//	      tx_com( tx_buffer, strlen( (char const *)tx_buffer ) );
	    }

	    lsm303agr_mag_status_get(&dev_ctx_mg, &reg.status_reg_m);
 8003370:	260c      	movs	r6, #12
 8003372:	19ba      	adds	r2, r7, r6
 8003374:	2408      	movs	r4, #8
 8003376:	2508      	movs	r5, #8
 8003378:	1963      	adds	r3, r4, r5
 800337a:	19db      	adds	r3, r3, r7
 800337c:	0011      	movs	r1, r2
 800337e:	0018      	movs	r0, r3
 8003380:	f000 ffd6 	bl	8004330 <lsm303agr_mag_status_get>

	    if (reg.status_reg_m.zyxda) {
 8003384:	19bb      	adds	r3, r7, r6
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2208      	movs	r2, #8
 800338a:	4013      	ands	r3, r2
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d04d      	beq.n	800342e <main+0x2ae>
	      /* Read magnetic field data */
	      memset(data_raw_magnetic, 0x00, 3 * sizeof(int16_t));
 8003392:	4b49      	ldr	r3, [pc, #292]	; (80034b8 <main+0x338>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2206      	movs	r2, #6
 8003398:	2100      	movs	r1, #0
 800339a:	0018      	movs	r0, r3
 800339c:	f003 fc10 	bl	8006bc0 <memset>
	      lsm303agr_magnetic_raw_get(&dev_ctx_mg, data_raw_magnetic);
 80033a0:	4b45      	ldr	r3, [pc, #276]	; (80034b8 <main+0x338>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	1963      	adds	r3, r4, r5
 80033a6:	19db      	adds	r3, r3, r7
 80033a8:	0011      	movs	r1, r2
 80033aa:	0018      	movs	r0, r3
 80033ac:	f000 feec 	bl	8004188 <lsm303agr_magnetic_raw_get>
	      magnetic_mG[0] = lsm303agr_from_lsb_to_mgauss(
	                         data_raw_magnetic[0]);
 80033b0:	4b41      	ldr	r3, [pc, #260]	; (80034b8 <main+0x338>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	781b      	ldrb	r3, [r3, #0]
	      magnetic_mG[0] = lsm303agr_from_lsb_to_mgauss(
 80033b6:	b21b      	sxth	r3, r3
 80033b8:	0018      	movs	r0, r3
 80033ba:	f000 fc15 	bl	8003be8 <lsm303agr_from_lsb_to_mgauss>
 80033be:	1c03      	adds	r3, r0, #0
 80033c0:	1c18      	adds	r0, r3, #0
 80033c2:	f7fd f8bf 	bl	8000544 <__aeabi_f2uiz>
 80033c6:	0003      	movs	r3, r0
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4b3c      	ldr	r3, [pc, #240]	; (80034bc <main+0x33c>)
 80033cc:	701a      	strb	r2, [r3, #0]
	      magnetic_mG[1] = lsm303agr_from_lsb_to_mgauss(
	                         data_raw_magnetic[1]);
 80033ce:	4b3a      	ldr	r3, [pc, #232]	; (80034b8 <main+0x338>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3301      	adds	r3, #1
 80033d4:	781b      	ldrb	r3, [r3, #0]
	      magnetic_mG[1] = lsm303agr_from_lsb_to_mgauss(
 80033d6:	b21b      	sxth	r3, r3
 80033d8:	0018      	movs	r0, r3
 80033da:	f000 fc05 	bl	8003be8 <lsm303agr_from_lsb_to_mgauss>
 80033de:	1c03      	adds	r3, r0, #0
 80033e0:	1c18      	adds	r0, r3, #0
 80033e2:	f7fd f8af 	bl	8000544 <__aeabi_f2uiz>
 80033e6:	0003      	movs	r3, r0
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	4b34      	ldr	r3, [pc, #208]	; (80034bc <main+0x33c>)
 80033ec:	705a      	strb	r2, [r3, #1]
	      magnetic_mG[2] = lsm303agr_from_lsb_to_mgauss(
	                         data_raw_magnetic[2]);
 80033ee:	4b32      	ldr	r3, [pc, #200]	; (80034b8 <main+0x338>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3302      	adds	r3, #2
 80033f4:	781b      	ldrb	r3, [r3, #0]
	      magnetic_mG[2] = lsm303agr_from_lsb_to_mgauss(
 80033f6:	b21b      	sxth	r3, r3
 80033f8:	0018      	movs	r0, r3
 80033fa:	f000 fbf5 	bl	8003be8 <lsm303agr_from_lsb_to_mgauss>
 80033fe:	1c03      	adds	r3, r0, #0
 8003400:	1c18      	adds	r0, r3, #0
 8003402:	f7fd f89f 	bl	8000544 <__aeabi_f2uiz>
 8003406:	0003      	movs	r3, r0
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <main+0x33c>)
 800340c:	709a      	strb	r2, [r3, #2]
	      sprintf((char *)tx_buffer,
 800340e:	4b28      	ldr	r3, [pc, #160]	; (80034b0 <main+0x330>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	0018      	movs	r0, r3
	              "Magnetic field [mG]:%4.2f\t%4.2f\t%4.2f\r\n",
	              magnetic_mG[0], magnetic_mG[1], magnetic_mG[2]);
 8003414:	4b29      	ldr	r3, [pc, #164]	; (80034bc <main+0x33c>)
 8003416:	781b      	ldrb	r3, [r3, #0]
	      sprintf((char *)tx_buffer,
 8003418:	001a      	movs	r2, r3
	              magnetic_mG[0], magnetic_mG[1], magnetic_mG[2]);
 800341a:	4b28      	ldr	r3, [pc, #160]	; (80034bc <main+0x33c>)
 800341c:	785b      	ldrb	r3, [r3, #1]
	      sprintf((char *)tx_buffer,
 800341e:	001c      	movs	r4, r3
	              magnetic_mG[0], magnetic_mG[1], magnetic_mG[2]);
 8003420:	4b26      	ldr	r3, [pc, #152]	; (80034bc <main+0x33c>)
 8003422:	789b      	ldrb	r3, [r3, #2]
	      sprintf((char *)tx_buffer,
 8003424:	4926      	ldr	r1, [pc, #152]	; (80034c0 <main+0x340>)
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	0023      	movs	r3, r4
 800342a:	f004 f83f 	bl	80074ac <siprintf>
//	      tx_com( tx_buffer, strlen( (char const *)tx_buffer ) );
	    }

	    lsm303agr_temp_data_ready_get(&dev_ctx_xl, &reg.byte);
 800342e:	260c      	movs	r6, #12
 8003430:	19ba      	adds	r2, r7, r6
 8003432:	2414      	movs	r4, #20
 8003434:	2508      	movs	r5, #8
 8003436:	1963      	adds	r3, r4, r5
 8003438:	19db      	adds	r3, r3, r7
 800343a:	0011      	movs	r1, r2
 800343c:	0018      	movs	r0, r3
 800343e:	f000 fbea 	bl	8003c16 <lsm303agr_temp_data_ready_get>

	    if (reg.byte) {
 8003442:	19bb      	adds	r3, r7, r6
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d100      	bne.n	800344c <main+0x2cc>
 800344a:	e736      	b.n	80032ba <main+0x13a>
	      /* Read temperature data */
	      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 800344c:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <main+0x344>)
 800344e:	2202      	movs	r2, #2
 8003450:	2100      	movs	r1, #0
 8003452:	0018      	movs	r0, r3
 8003454:	f003 fbb4 	bl	8006bc0 <memset>
	      lsm303agr_temperature_raw_get(&dev_ctx_xl,
 8003458:	4a1a      	ldr	r2, [pc, #104]	; (80034c4 <main+0x344>)
 800345a:	1963      	adds	r3, r4, r5
 800345c:	19db      	adds	r3, r3, r7
 800345e:	0011      	movs	r1, r2
 8003460:	0018      	movs	r0, r3
 8003462:	f000 fbf3 	bl	8003c4c <lsm303agr_temperature_raw_get>
	                                    &data_raw_temperature);
	      temperature_degC = lsm303agr_from_lsb_hr_to_celsius(
 8003466:	4b17      	ldr	r3, [pc, #92]	; (80034c4 <main+0x344>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	b21b      	sxth	r3, r3
 800346c:	0018      	movs	r0, r3
 800346e:	f000 fb97 	bl	8003ba0 <lsm303agr_from_lsb_hr_to_celsius>
 8003472:	1c03      	adds	r3, r0, #0
 8003474:	1c18      	adds	r0, r3, #0
 8003476:	f7fd f865 	bl	8000544 <__aeabi_f2uiz>
 800347a:	0003      	movs	r3, r0
 800347c:	b2da      	uxtb	r2, r3
 800347e:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <main+0x348>)
 8003480:	701a      	strb	r2, [r3, #0]
	                           data_raw_temperature );
	      sprintf((char *)tx_buffer, "Temperature [degC]:%6.2f\r\n",
 8003482:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <main+0x330>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	0018      	movs	r0, r3
 8003488:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <main+0x348>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	001a      	movs	r2, r3
 800348e:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <main+0x34c>)
 8003490:	0019      	movs	r1, r3
 8003492:	f004 f80b 	bl	80074ac <siprintf>
  {
 8003496:	e710      	b.n	80032ba <main+0x13a>
 8003498:	0800370d 	.word	0x0800370d
 800349c:	08003735 	.word	0x08003735
 80034a0:	200002f8 	.word	0x200002f8
 80034a4:	200002f9 	.word	0x200002f9
 80034a8:	200002e4 	.word	0x200002e4
 80034ac:	200002ec 	.word	0x200002ec
 80034b0:	200002d4 	.word	0x200002d4
 80034b4:	08009b20 	.word	0x08009b20
 80034b8:	200002d8 	.word	0x200002d8
 80034bc:	200002e0 	.word	0x200002e0
 80034c0:	08009b48 	.word	0x08009b48
 80034c4:	200002dc 	.word	0x200002dc
 80034c8:	200002d5 	.word	0x200002d5
 80034cc:	08009b70 	.word	0x08009b70

080034d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034d0:	b590      	push	{r4, r7, lr}
 80034d2:	b09d      	sub	sp, #116	; 0x74
 80034d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034d6:	2438      	movs	r4, #56	; 0x38
 80034d8:	193b      	adds	r3, r7, r4
 80034da:	0018      	movs	r0, r3
 80034dc:	2338      	movs	r3, #56	; 0x38
 80034de:	001a      	movs	r2, r3
 80034e0:	2100      	movs	r1, #0
 80034e2:	f003 fb6d 	bl	8006bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034e6:	2324      	movs	r3, #36	; 0x24
 80034e8:	18fb      	adds	r3, r7, r3
 80034ea:	0018      	movs	r0, r3
 80034ec:	2314      	movs	r3, #20
 80034ee:	001a      	movs	r2, r3
 80034f0:	2100      	movs	r1, #0
 80034f2:	f003 fb65 	bl	8006bc0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034f6:	003b      	movs	r3, r7
 80034f8:	0018      	movs	r0, r3
 80034fa:	2324      	movs	r3, #36	; 0x24
 80034fc:	001a      	movs	r2, r3
 80034fe:	2100      	movs	r1, #0
 8003500:	f003 fb5e 	bl	8006bc0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003504:	4b2a      	ldr	r3, [pc, #168]	; (80035b0 <SystemClock_Config+0xe0>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a2a      	ldr	r2, [pc, #168]	; (80035b4 <SystemClock_Config+0xe4>)
 800350a:	401a      	ands	r2, r3
 800350c:	4b28      	ldr	r3, [pc, #160]	; (80035b0 <SystemClock_Config+0xe0>)
 800350e:	2180      	movs	r1, #128	; 0x80
 8003510:	0109      	lsls	r1, r1, #4
 8003512:	430a      	orrs	r2, r1
 8003514:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003516:	0021      	movs	r1, r4
 8003518:	187b      	adds	r3, r7, r1
 800351a:	2202      	movs	r2, #2
 800351c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800351e:	187b      	adds	r3, r7, r1
 8003520:	2201      	movs	r2, #1
 8003522:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003524:	187b      	adds	r3, r7, r1
 8003526:	2210      	movs	r2, #16
 8003528:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800352a:	187b      	adds	r3, r7, r1
 800352c:	2202      	movs	r2, #2
 800352e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003530:	187b      	adds	r3, r7, r1
 8003532:	2200      	movs	r2, #0
 8003534:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8003536:	187b      	adds	r3, r7, r1
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800353c:	187b      	adds	r3, r7, r1
 800353e:	2280      	movs	r2, #128	; 0x80
 8003540:	0412      	lsls	r2, r2, #16
 8003542:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003544:	187b      	adds	r3, r7, r1
 8003546:	0018      	movs	r0, r3
 8003548:	f001 fe98 	bl	800527c <HAL_RCC_OscConfig>
 800354c:	1e03      	subs	r3, r0, #0
 800354e:	d001      	beq.n	8003554 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8003550:	f000 f920 	bl	8003794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003554:	2124      	movs	r1, #36	; 0x24
 8003556:	187b      	adds	r3, r7, r1
 8003558:	220f      	movs	r2, #15
 800355a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800355c:	187b      	adds	r3, r7, r1
 800355e:	2203      	movs	r2, #3
 8003560:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003562:	187b      	adds	r3, r7, r1
 8003564:	2200      	movs	r2, #0
 8003566:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003568:	187b      	adds	r3, r7, r1
 800356a:	2200      	movs	r2, #0
 800356c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800356e:	187b      	adds	r3, r7, r1
 8003570:	2200      	movs	r2, #0
 8003572:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003574:	187b      	adds	r3, r7, r1
 8003576:	2100      	movs	r1, #0
 8003578:	0018      	movs	r0, r3
 800357a:	f002 fa43 	bl	8005a04 <HAL_RCC_ClockConfig>
 800357e:	1e03      	subs	r3, r0, #0
 8003580:	d001      	beq.n	8003586 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003582:	f000 f907 	bl	8003794 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8003586:	003b      	movs	r3, r7
 8003588:	2209      	movs	r2, #9
 800358a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800358c:	003b      	movs	r3, r7
 800358e:	2200      	movs	r2, #0
 8003590:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003592:	003b      	movs	r3, r7
 8003594:	2200      	movs	r2, #0
 8003596:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003598:	003b      	movs	r3, r7
 800359a:	0018      	movs	r0, r3
 800359c:	f002 fc56 	bl	8005e4c <HAL_RCCEx_PeriphCLKConfig>
 80035a0:	1e03      	subs	r3, r0, #0
 80035a2:	d001      	beq.n	80035a8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80035a4:	f000 f8f6 	bl	8003794 <Error_Handler>
  }
}
 80035a8:	46c0      	nop			; (mov r8, r8)
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b01d      	add	sp, #116	; 0x74
 80035ae:	bd90      	pop	{r4, r7, pc}
 80035b0:	40007000 	.word	0x40007000
 80035b4:	ffffe7ff 	.word	0xffffe7ff

080035b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035bc:	4b1b      	ldr	r3, [pc, #108]	; (800362c <MX_I2C1_Init+0x74>)
 80035be:	4a1c      	ldr	r2, [pc, #112]	; (8003630 <MX_I2C1_Init+0x78>)
 80035c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80035c2:	4b1a      	ldr	r3, [pc, #104]	; (800362c <MX_I2C1_Init+0x74>)
 80035c4:	4a1b      	ldr	r2, [pc, #108]	; (8003634 <MX_I2C1_Init+0x7c>)
 80035c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80035c8:	4b18      	ldr	r3, [pc, #96]	; (800362c <MX_I2C1_Init+0x74>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035ce:	4b17      	ldr	r3, [pc, #92]	; (800362c <MX_I2C1_Init+0x74>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035d4:	4b15      	ldr	r3, [pc, #84]	; (800362c <MX_I2C1_Init+0x74>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80035da:	4b14      	ldr	r3, [pc, #80]	; (800362c <MX_I2C1_Init+0x74>)
 80035dc:	2200      	movs	r2, #0
 80035de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80035e0:	4b12      	ldr	r3, [pc, #72]	; (800362c <MX_I2C1_Init+0x74>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035e6:	4b11      	ldr	r3, [pc, #68]	; (800362c <MX_I2C1_Init+0x74>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035ec:	4b0f      	ldr	r3, [pc, #60]	; (800362c <MX_I2C1_Init+0x74>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035f2:	4b0e      	ldr	r3, [pc, #56]	; (800362c <MX_I2C1_Init+0x74>)
 80035f4:	0018      	movs	r0, r3
 80035f6:	f001 f99b 	bl	8004930 <HAL_I2C_Init>
 80035fa:	1e03      	subs	r3, r0, #0
 80035fc:	d001      	beq.n	8003602 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80035fe:	f000 f8c9 	bl	8003794 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003602:	4b0a      	ldr	r3, [pc, #40]	; (800362c <MX_I2C1_Init+0x74>)
 8003604:	2100      	movs	r1, #0
 8003606:	0018      	movs	r0, r3
 8003608:	f001 fda0 	bl	800514c <HAL_I2CEx_ConfigAnalogFilter>
 800360c:	1e03      	subs	r3, r0, #0
 800360e:	d001      	beq.n	8003614 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003610:	f000 f8c0 	bl	8003794 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <MX_I2C1_Init+0x74>)
 8003616:	2100      	movs	r1, #0
 8003618:	0018      	movs	r0, r3
 800361a:	f001 fde3 	bl	80051e4 <HAL_I2CEx_ConfigDigitalFilter>
 800361e:	1e03      	subs	r3, r0, #0
 8003620:	d001      	beq.n	8003626 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003622:	f000 f8b7 	bl	8003794 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	200001f8 	.word	0x200001f8
 8003630:	40005400 	.word	0x40005400
 8003634:	00303d5b 	.word	0x00303d5b

08003638 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800363c:	4b14      	ldr	r3, [pc, #80]	; (8003690 <MX_USART1_UART_Init+0x58>)
 800363e:	4a15      	ldr	r2, [pc, #84]	; (8003694 <MX_USART1_UART_Init+0x5c>)
 8003640:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003642:	4b13      	ldr	r3, [pc, #76]	; (8003690 <MX_USART1_UART_Init+0x58>)
 8003644:	22e1      	movs	r2, #225	; 0xe1
 8003646:	0252      	lsls	r2, r2, #9
 8003648:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800364a:	4b11      	ldr	r3, [pc, #68]	; (8003690 <MX_USART1_UART_Init+0x58>)
 800364c:	2200      	movs	r2, #0
 800364e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003650:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <MX_USART1_UART_Init+0x58>)
 8003652:	2200      	movs	r2, #0
 8003654:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003656:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <MX_USART1_UART_Init+0x58>)
 8003658:	2200      	movs	r2, #0
 800365a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <MX_USART1_UART_Init+0x58>)
 800365e:	220c      	movs	r2, #12
 8003660:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003662:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <MX_USART1_UART_Init+0x58>)
 8003664:	2200      	movs	r2, #0
 8003666:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003668:	4b09      	ldr	r3, [pc, #36]	; (8003690 <MX_USART1_UART_Init+0x58>)
 800366a:	2200      	movs	r2, #0
 800366c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800366e:	4b08      	ldr	r3, [pc, #32]	; (8003690 <MX_USART1_UART_Init+0x58>)
 8003670:	2200      	movs	r2, #0
 8003672:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003674:	4b06      	ldr	r3, [pc, #24]	; (8003690 <MX_USART1_UART_Init+0x58>)
 8003676:	2200      	movs	r2, #0
 8003678:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800367a:	4b05      	ldr	r3, [pc, #20]	; (8003690 <MX_USART1_UART_Init+0x58>)
 800367c:	0018      	movs	r0, r3
 800367e:	f002 fd73 	bl	8006168 <HAL_UART_Init>
 8003682:	1e03      	subs	r3, r0, #0
 8003684:	d001      	beq.n	800368a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003686:	f000 f885 	bl	8003794 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	2000024c 	.word	0x2000024c
 8003694:	40013800 	.word	0x40013800

08003698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800369e:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <MX_GPIO_Init+0x70>)
 80036a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a2:	4b19      	ldr	r3, [pc, #100]	; (8003708 <MX_GPIO_Init+0x70>)
 80036a4:	2104      	movs	r1, #4
 80036a6:	430a      	orrs	r2, r1
 80036a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80036aa:	4b17      	ldr	r3, [pc, #92]	; (8003708 <MX_GPIO_Init+0x70>)
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	2204      	movs	r2, #4
 80036b0:	4013      	ands	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80036b6:	4b14      	ldr	r3, [pc, #80]	; (8003708 <MX_GPIO_Init+0x70>)
 80036b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ba:	4b13      	ldr	r3, [pc, #76]	; (8003708 <MX_GPIO_Init+0x70>)
 80036bc:	2180      	movs	r1, #128	; 0x80
 80036be:	430a      	orrs	r2, r1
 80036c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80036c2:	4b11      	ldr	r3, [pc, #68]	; (8003708 <MX_GPIO_Init+0x70>)
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	2280      	movs	r2, #128	; 0x80
 80036c8:	4013      	ands	r3, r2
 80036ca:	60bb      	str	r3, [r7, #8]
 80036cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ce:	4b0e      	ldr	r3, [pc, #56]	; (8003708 <MX_GPIO_Init+0x70>)
 80036d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d2:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <MX_GPIO_Init+0x70>)
 80036d4:	2101      	movs	r1, #1
 80036d6:	430a      	orrs	r2, r1
 80036d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80036da:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <MX_GPIO_Init+0x70>)
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	2201      	movs	r2, #1
 80036e0:	4013      	ands	r3, r2
 80036e2:	607b      	str	r3, [r7, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036e6:	4b08      	ldr	r3, [pc, #32]	; (8003708 <MX_GPIO_Init+0x70>)
 80036e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ea:	4b07      	ldr	r3, [pc, #28]	; (8003708 <MX_GPIO_Init+0x70>)
 80036ec:	2102      	movs	r1, #2
 80036ee:	430a      	orrs	r2, r1
 80036f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80036f2:	4b05      	ldr	r3, [pc, #20]	; (8003708 <MX_GPIO_Init+0x70>)
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	2202      	movs	r2, #2
 80036f8:	4013      	ands	r3, r2
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	683b      	ldr	r3, [r7, #0]

}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	46bd      	mov	sp, r7
 8003702:	b004      	add	sp, #16
 8003704:	bd80      	pop	{r7, pc}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	40021000 	.word	0x40021000

0800370c <platform_write>:

/* USER CODE BEGIN 4 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	0008      	movs	r0, r1
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	0019      	movs	r1, r3
 800371a:	230b      	movs	r3, #11
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	1c02      	adds	r2, r0, #0
 8003720:	701a      	strb	r2, [r3, #0]
 8003722:	2308      	movs	r3, #8
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	1c0a      	adds	r2, r1, #0
 8003728:	801a      	strh	r2, [r3, #0]
//	  HAL_GPIO_WritePin(sensbus->cs_port, sensbus->cs_pin, GPIO_PIN_RESET);
//	  HAL_SPI_Transmit(sensbus->hbus, &reg, 1, 1000);
//	  HAL_SPI_Transmit(sensbus->hbus, (uint8_t*) bufp, len, 1000);
//	  HAL_GPIO_WritePin(sensbus->cs_port, sensbus->cs_pin, GPIO_PIN_SET);

	return 0;
 800372a:	2300      	movs	r3, #0
}
 800372c:	0018      	movs	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	b004      	add	sp, #16
 8003732:	bd80      	pop	{r7, pc}

08003734 <platform_read>:
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8003734:	b590      	push	{r4, r7, lr}
 8003736:	b087      	sub	sp, #28
 8003738:	af02      	add	r7, sp, #8
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	0008      	movs	r0, r1
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	0019      	movs	r1, r3
 8003742:	240b      	movs	r4, #11
 8003744:	193b      	adds	r3, r7, r4
 8003746:	1c02      	adds	r2, r0, #0
 8003748:	701a      	strb	r2, [r3, #0]
 800374a:	2308      	movs	r3, #8
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	1c0a      	adds	r2, r1, #0
 8003750:	801a      	strh	r2, [r3, #0]
//
//	  HAL_GPIO_WritePin(sensbus->cs_port, sensbus->cs_pin, GPIO_PIN_RESET);
//	  HAL_SPI_Transmit(sensbus->hbus, &reg, 1, 1000);
//	  HAL_SPI_Receive(sensbus->hbus, bufp, len, 1000);
//	  HAL_GPIO_WritePin(sensbus->cs_port, sensbus->cs_pin, GPIO_PIN_SET);
	HAL_I2C_Master_Receive(&hi2c1, reg, &reg, reg, 10000);
 8003752:	193b      	adds	r3, r7, r4
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	b299      	uxth	r1, r3
 8003758:	193b      	adds	r3, r7, r4
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	b29b      	uxth	r3, r3
 800375e:	193a      	adds	r2, r7, r4
 8003760:	4804      	ldr	r0, [pc, #16]	; (8003774 <platform_read+0x40>)
 8003762:	4c05      	ldr	r4, [pc, #20]	; (8003778 <platform_read+0x44>)
 8003764:	9400      	str	r4, [sp, #0]
 8003766:	f001 f979 	bl	8004a5c <HAL_I2C_Master_Receive>

  return 0;
 800376a:	2300      	movs	r3, #0
}
 800376c:	0018      	movs	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	b005      	add	sp, #20
 8003772:	bd90      	pop	{r4, r7, pc}
 8003774:	200001f8 	.word	0x200001f8
 8003778:	00002710 	.word	0x00002710

0800377c <platform_delay>:
static void platform_delay(uint32_t ms)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	0018      	movs	r0, r3
 8003788:	f000 fe84 	bl	8004494 <HAL_Delay>
}
 800378c:	46c0      	nop			; (mov r8, r8)
 800378e:	46bd      	mov	sp, r7
 8003790:	b002      	add	sp, #8
 8003792:	bd80      	pop	{r7, pc}

08003794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003798:	b672      	cpsid	i
}
 800379a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800379c:	e7fe      	b.n	800379c <Error_Handler+0x8>
	...

080037a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037a4:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <HAL_MspInit+0x24>)
 80037a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037a8:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <HAL_MspInit+0x24>)
 80037aa:	2101      	movs	r1, #1
 80037ac:	430a      	orrs	r2, r1
 80037ae:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <HAL_MspInit+0x24>)
 80037b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b4:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <HAL_MspInit+0x24>)
 80037b6:	2180      	movs	r1, #128	; 0x80
 80037b8:	0549      	lsls	r1, r1, #21
 80037ba:	430a      	orrs	r2, r1
 80037bc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40021000 	.word	0x40021000

080037c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037c8:	b590      	push	{r4, r7, lr}
 80037ca:	b089      	sub	sp, #36	; 0x24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d0:	240c      	movs	r4, #12
 80037d2:	193b      	adds	r3, r7, r4
 80037d4:	0018      	movs	r0, r3
 80037d6:	2314      	movs	r3, #20
 80037d8:	001a      	movs	r2, r3
 80037da:	2100      	movs	r1, #0
 80037dc:	f003 f9f0 	bl	8006bc0 <memset>
  if(hi2c->Instance==I2C1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a17      	ldr	r2, [pc, #92]	; (8003844 <HAL_I2C_MspInit+0x7c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d128      	bne.n	800383c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ea:	4b17      	ldr	r3, [pc, #92]	; (8003848 <HAL_I2C_MspInit+0x80>)
 80037ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ee:	4b16      	ldr	r3, [pc, #88]	; (8003848 <HAL_I2C_MspInit+0x80>)
 80037f0:	2102      	movs	r1, #2
 80037f2:	430a      	orrs	r2, r1
 80037f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80037f6:	4b14      	ldr	r3, [pc, #80]	; (8003848 <HAL_I2C_MspInit+0x80>)
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	2202      	movs	r2, #2
 80037fc:	4013      	ands	r3, r2
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003802:	0021      	movs	r1, r4
 8003804:	187b      	adds	r3, r7, r1
 8003806:	22c0      	movs	r2, #192	; 0xc0
 8003808:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800380a:	187b      	adds	r3, r7, r1
 800380c:	2212      	movs	r2, #18
 800380e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003810:	187b      	adds	r3, r7, r1
 8003812:	2200      	movs	r2, #0
 8003814:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003816:	187b      	adds	r3, r7, r1
 8003818:	2203      	movs	r2, #3
 800381a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800381c:	187b      	adds	r3, r7, r1
 800381e:	2201      	movs	r2, #1
 8003820:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003822:	187b      	adds	r3, r7, r1
 8003824:	4a09      	ldr	r2, [pc, #36]	; (800384c <HAL_I2C_MspInit+0x84>)
 8003826:	0019      	movs	r1, r3
 8003828:	0010      	movs	r0, r2
 800382a:	f000 ff0b 	bl	8004644 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800382e:	4b06      	ldr	r3, [pc, #24]	; (8003848 <HAL_I2C_MspInit+0x80>)
 8003830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003832:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_I2C_MspInit+0x80>)
 8003834:	2180      	movs	r1, #128	; 0x80
 8003836:	0389      	lsls	r1, r1, #14
 8003838:	430a      	orrs	r2, r1
 800383a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800383c:	46c0      	nop			; (mov r8, r8)
 800383e:	46bd      	mov	sp, r7
 8003840:	b009      	add	sp, #36	; 0x24
 8003842:	bd90      	pop	{r4, r7, pc}
 8003844:	40005400 	.word	0x40005400
 8003848:	40021000 	.word	0x40021000
 800384c:	50000400 	.word	0x50000400

08003850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003850:	b590      	push	{r4, r7, lr}
 8003852:	b089      	sub	sp, #36	; 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003858:	240c      	movs	r4, #12
 800385a:	193b      	adds	r3, r7, r4
 800385c:	0018      	movs	r0, r3
 800385e:	2314      	movs	r3, #20
 8003860:	001a      	movs	r2, r3
 8003862:	2100      	movs	r1, #0
 8003864:	f003 f9ac 	bl	8006bc0 <memset>
  if(huart->Instance==USART1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a18      	ldr	r2, [pc, #96]	; (80038d0 <HAL_UART_MspInit+0x80>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d12a      	bne.n	80038c8 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003872:	4b18      	ldr	r3, [pc, #96]	; (80038d4 <HAL_UART_MspInit+0x84>)
 8003874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003876:	4b17      	ldr	r3, [pc, #92]	; (80038d4 <HAL_UART_MspInit+0x84>)
 8003878:	2180      	movs	r1, #128	; 0x80
 800387a:	01c9      	lsls	r1, r1, #7
 800387c:	430a      	orrs	r2, r1
 800387e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003880:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <HAL_UART_MspInit+0x84>)
 8003882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003884:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <HAL_UART_MspInit+0x84>)
 8003886:	2101      	movs	r1, #1
 8003888:	430a      	orrs	r2, r1
 800388a:	62da      	str	r2, [r3, #44]	; 0x2c
 800388c:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <HAL_UART_MspInit+0x84>)
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	2201      	movs	r2, #1
 8003892:	4013      	ands	r3, r2
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003898:	193b      	adds	r3, r7, r4
 800389a:	22c0      	movs	r2, #192	; 0xc0
 800389c:	00d2      	lsls	r2, r2, #3
 800389e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a0:	0021      	movs	r1, r4
 80038a2:	187b      	adds	r3, r7, r1
 80038a4:	2202      	movs	r2, #2
 80038a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	187b      	adds	r3, r7, r1
 80038aa:	2200      	movs	r2, #0
 80038ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ae:	187b      	adds	r3, r7, r1
 80038b0:	2203      	movs	r2, #3
 80038b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80038b4:	187b      	adds	r3, r7, r1
 80038b6:	2204      	movs	r2, #4
 80038b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ba:	187a      	adds	r2, r7, r1
 80038bc:	23a0      	movs	r3, #160	; 0xa0
 80038be:	05db      	lsls	r3, r3, #23
 80038c0:	0011      	movs	r1, r2
 80038c2:	0018      	movs	r0, r3
 80038c4:	f000 febe 	bl	8004644 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80038c8:	46c0      	nop			; (mov r8, r8)
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b009      	add	sp, #36	; 0x24
 80038ce:	bd90      	pop	{r4, r7, pc}
 80038d0:	40013800 	.word	0x40013800
 80038d4:	40021000 	.word	0x40021000

080038d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038dc:	e7fe      	b.n	80038dc <NMI_Handler+0x4>

080038de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038e2:	e7fe      	b.n	80038e2 <HardFault_Handler+0x4>

080038e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80038e8:	46c0      	nop			; (mov r8, r8)
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038fc:	f000 fdae 	bl	800445c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003900:	46c0      	nop			; (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	af00      	add	r7, sp, #0
  return 1;
 800390a:	2301      	movs	r3, #1
}
 800390c:	0018      	movs	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <_kill>:

int _kill(int pid, int sig)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800391c:	f003 f926 	bl	8006b6c <__errno>
 8003920:	0003      	movs	r3, r0
 8003922:	2216      	movs	r2, #22
 8003924:	601a      	str	r2, [r3, #0]
  return -1;
 8003926:	2301      	movs	r3, #1
 8003928:	425b      	negs	r3, r3
}
 800392a:	0018      	movs	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	b002      	add	sp, #8
 8003930:	bd80      	pop	{r7, pc}

08003932 <_exit>:

void _exit (int status)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800393a:	2301      	movs	r3, #1
 800393c:	425a      	negs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	0011      	movs	r1, r2
 8003942:	0018      	movs	r0, r3
 8003944:	f7ff ffe5 	bl	8003912 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003948:	e7fe      	b.n	8003948 <_exit+0x16>

0800394a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b086      	sub	sp, #24
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	e00a      	b.n	8003972 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800395c:	e000      	b.n	8003960 <_read+0x16>
 800395e:	bf00      	nop
 8003960:	0001      	movs	r1, r0
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	60ba      	str	r2, [r7, #8]
 8003968:	b2ca      	uxtb	r2, r1
 800396a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	3301      	adds	r3, #1
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	429a      	cmp	r2, r3
 8003978:	dbf0      	blt.n	800395c <_read+0x12>
  }

  return len;
 800397a:	687b      	ldr	r3, [r7, #4]
}
 800397c:	0018      	movs	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	b006      	add	sp, #24
 8003982:	bd80      	pop	{r7, pc}

08003984 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	e009      	b.n	80039aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	60ba      	str	r2, [r7, #8]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	0018      	movs	r0, r3
 80039a0:	e000      	b.n	80039a4 <_write+0x20>
 80039a2:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	3301      	adds	r3, #1
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	dbf1      	blt.n	8003996 <_write+0x12>
  }
  return len;
 80039b2:	687b      	ldr	r3, [r7, #4]
}
 80039b4:	0018      	movs	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b006      	add	sp, #24
 80039ba:	bd80      	pop	{r7, pc}

080039bc <_close>:

int _close(int file)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039c4:	2301      	movs	r3, #1
 80039c6:	425b      	negs	r3, r3
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b002      	add	sp, #8
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2280      	movs	r2, #128	; 0x80
 80039de:	0192      	lsls	r2, r2, #6
 80039e0:	605a      	str	r2, [r3, #4]
  return 0;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	0018      	movs	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b002      	add	sp, #8
 80039ea:	bd80      	pop	{r7, pc}

080039ec <_isatty>:

int _isatty(int file)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80039f4:	2301      	movs	r3, #1
}
 80039f6:	0018      	movs	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b002      	add	sp, #8
 80039fc:	bd80      	pop	{r7, pc}

080039fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b004      	add	sp, #16
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a1c:	4a14      	ldr	r2, [pc, #80]	; (8003a70 <_sbrk+0x5c>)
 8003a1e:	4b15      	ldr	r3, [pc, #84]	; (8003a74 <_sbrk+0x60>)
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a28:	4b13      	ldr	r3, [pc, #76]	; (8003a78 <_sbrk+0x64>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d102      	bne.n	8003a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a30:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <_sbrk+0x64>)
 8003a32:	4a12      	ldr	r2, [pc, #72]	; (8003a7c <_sbrk+0x68>)
 8003a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a36:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <_sbrk+0x64>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	18d3      	adds	r3, r2, r3
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d207      	bcs.n	8003a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a44:	f003 f892 	bl	8006b6c <__errno>
 8003a48:	0003      	movs	r3, r0
 8003a4a:	220c      	movs	r2, #12
 8003a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	425b      	negs	r3, r3
 8003a52:	e009      	b.n	8003a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a54:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <_sbrk+0x64>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a5a:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <_sbrk+0x64>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	18d2      	adds	r2, r2, r3
 8003a62:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <_sbrk+0x64>)
 8003a64:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003a66:	68fb      	ldr	r3, [r7, #12]
}
 8003a68:	0018      	movs	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b006      	add	sp, #24
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20002000 	.word	0x20002000
 8003a74:	00000400 	.word	0x00000400
 8003a78:	200002fc 	.word	0x200002fc
 8003a7c:	20000318 	.word	0x20000318

08003a80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a84:	46c0      	nop			; (mov r8, r8)
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003a8c:	480d      	ldr	r0, [pc, #52]	; (8003ac4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a8e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a90:	f7ff fff6 	bl	8003a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a94:	480c      	ldr	r0, [pc, #48]	; (8003ac8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a96:	490d      	ldr	r1, [pc, #52]	; (8003acc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a98:	4a0d      	ldr	r2, [pc, #52]	; (8003ad0 <LoopForever+0xe>)
  movs r3, #0
 8003a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a9c:	e002      	b.n	8003aa4 <LoopCopyDataInit>

08003a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aa2:	3304      	adds	r3, #4

08003aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003aa8:	d3f9      	bcc.n	8003a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aaa:	4a0a      	ldr	r2, [pc, #40]	; (8003ad4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003aac:	4c0a      	ldr	r4, [pc, #40]	; (8003ad8 <LoopForever+0x16>)
  movs r3, #0
 8003aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ab0:	e001      	b.n	8003ab6 <LoopFillZerobss>

08003ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ab4:	3204      	adds	r2, #4

08003ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ab8:	d3fb      	bcc.n	8003ab2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003aba:	f003 f85d 	bl	8006b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003abe:	f7ff fb5f 	bl	8003180 <main>

08003ac2 <LoopForever>:

LoopForever:
    b LoopForever
 8003ac2:	e7fe      	b.n	8003ac2 <LoopForever>
  ldr   r0, =_estack
 8003ac4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003acc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003ad0:	0800a124 	.word	0x0800a124
  ldr r2, =_sbss
 8003ad4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003ad8:	20000314 	.word	0x20000314

08003adc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003adc:	e7fe      	b.n	8003adc <ADC1_COMP_IRQHandler>

08003ade <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8003ade:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ae0:	b087      	sub	sp, #28
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	0008      	movs	r0, r1
 8003ae8:	607a      	str	r2, [r7, #4]
 8003aea:	0019      	movs	r1, r3
 8003aec:	260b      	movs	r6, #11
 8003aee:	19bb      	adds	r3, r7, r6
 8003af0:	1c02      	adds	r2, r0, #0
 8003af2:	701a      	strb	r2, [r3, #0]
 8003af4:	2508      	movs	r5, #8
 8003af6:	197b      	adds	r3, r7, r5
 8003af8:	1c0a      	adds	r2, r1, #0
 8003afa:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	685c      	ldr	r4, [r3, #4]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6898      	ldr	r0, [r3, #8]
 8003b04:	197b      	adds	r3, r7, r5
 8003b06:	881d      	ldrh	r5, [r3, #0]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	19bb      	adds	r3, r7, r6
 8003b0c:	7819      	ldrb	r1, [r3, #0]
 8003b0e:	002b      	movs	r3, r5
 8003b10:	47a0      	blx	r4
 8003b12:	0003      	movs	r3, r0
 8003b14:	617b      	str	r3, [r7, #20]

  return ret;
 8003b16:	697b      	ldr	r3, [r7, #20]
}
 8003b18:	0018      	movs	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b007      	add	sp, #28
 8003b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b20 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8003b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	0008      	movs	r0, r1
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	260b      	movs	r6, #11
 8003b30:	19bb      	adds	r3, r7, r6
 8003b32:	1c02      	adds	r2, r0, #0
 8003b34:	701a      	strb	r2, [r3, #0]
 8003b36:	2508      	movs	r5, #8
 8003b38:	197b      	adds	r3, r7, r5
 8003b3a:	1c0a      	adds	r2, r1, #0
 8003b3c:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681c      	ldr	r4, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6898      	ldr	r0, [r3, #8]
 8003b46:	197b      	adds	r3, r7, r5
 8003b48:	881d      	ldrh	r5, [r3, #0]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	19bb      	adds	r3, r7, r6
 8003b4e:	7819      	ldrb	r1, [r3, #0]
 8003b50:	002b      	movs	r3, r5
 8003b52:	47a0      	blx	r4
 8003b54:	0003      	movs	r3, r0
 8003b56:	617b      	str	r3, [r7, #20]

  return ret;
 8003b58:	697b      	ldr	r3, [r7, #20]
}
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	b007      	add	sp, #28
 8003b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003b64 <lsm303agr_from_fs_2g_hr_to_mg>:
  * @{
  *
  */

float_t lsm303agr_from_fs_2g_hr_to_mg(int16_t lsb)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	0002      	movs	r2, r0
 8003b6c:	1dbb      	adds	r3, r7, #6
 8003b6e:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb / 16.0f) * 0.98f;
 8003b70:	1dbb      	adds	r3, r7, #6
 8003b72:	2200      	movs	r2, #0
 8003b74:	5e9b      	ldrsh	r3, [r3, r2]
 8003b76:	0018      	movs	r0, r3
 8003b78:	f7fd fb72 	bl	8001260 <__aeabi_i2f>
 8003b7c:	1c03      	adds	r3, r0, #0
 8003b7e:	2183      	movs	r1, #131	; 0x83
 8003b80:	05c9      	lsls	r1, r1, #23
 8003b82:	1c18      	adds	r0, r3, #0
 8003b84:	f7fc ff60 	bl	8000a48 <__aeabi_fdiv>
 8003b88:	1c03      	adds	r3, r0, #0
 8003b8a:	4904      	ldr	r1, [pc, #16]	; (8003b9c <lsm303agr_from_fs_2g_hr_to_mg+0x38>)
 8003b8c:	1c18      	adds	r0, r3, #0
 8003b8e:	f7fd f873 	bl	8000c78 <__aeabi_fmul>
 8003b92:	1c03      	adds	r3, r0, #0
}
 8003b94:	1c18      	adds	r0, r3, #0
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b002      	add	sp, #8
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	3f7ae148 	.word	0x3f7ae148

08003ba0 <lsm303agr_from_lsb_hr_to_celsius>:
{
  return ((float_t)lsb / 16.0f) * 11.72f;
}

float_t lsm303agr_from_lsb_hr_to_celsius(int16_t lsb)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	0002      	movs	r2, r0
 8003ba8:	1dbb      	adds	r3, r7, #6
 8003baa:	801a      	strh	r2, [r3, #0]
  return (((float_t)lsb / 64.0f) / 4.0f) + 25.0f;
 8003bac:	1dbb      	adds	r3, r7, #6
 8003bae:	2200      	movs	r2, #0
 8003bb0:	5e9b      	ldrsh	r3, [r3, r2]
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f7fd fb54 	bl	8001260 <__aeabi_i2f>
 8003bb8:	1c03      	adds	r3, r0, #0
 8003bba:	2185      	movs	r1, #133	; 0x85
 8003bbc:	05c9      	lsls	r1, r1, #23
 8003bbe:	1c18      	adds	r0, r3, #0
 8003bc0:	f7fc ff42 	bl	8000a48 <__aeabi_fdiv>
 8003bc4:	1c03      	adds	r3, r0, #0
 8003bc6:	2181      	movs	r1, #129	; 0x81
 8003bc8:	05c9      	lsls	r1, r1, #23
 8003bca:	1c18      	adds	r0, r3, #0
 8003bcc:	f7fc ff3c 	bl	8000a48 <__aeabi_fdiv>
 8003bd0:	1c03      	adds	r3, r0, #0
 8003bd2:	4904      	ldr	r1, [pc, #16]	; (8003be4 <lsm303agr_from_lsb_hr_to_celsius+0x44>)
 8003bd4:	1c18      	adds	r0, r3, #0
 8003bd6:	f7fc fd99 	bl	800070c <__aeabi_fadd>
 8003bda:	1c03      	adds	r3, r0, #0
}
 8003bdc:	1c18      	adds	r0, r3, #0
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b002      	add	sp, #8
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	41c80000 	.word	0x41c80000

08003be8 <lsm303agr_from_lsb_to_mgauss>:
{
  return (((float_t)lsb / 256.0f) * 1.0f) + 25.0f;
}

float_t lsm303agr_from_lsb_to_mgauss(int16_t lsb)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	0002      	movs	r2, r0
 8003bf0:	1dbb      	adds	r3, r7, #6
 8003bf2:	801a      	strh	r2, [r3, #0]
  return (float_t)lsb * 1.5f;
 8003bf4:	1dbb      	adds	r3, r7, #6
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	5e9b      	ldrsh	r3, [r3, r2]
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f7fd fb30 	bl	8001260 <__aeabi_i2f>
 8003c00:	1c03      	adds	r3, r0, #0
 8003c02:	21ff      	movs	r1, #255	; 0xff
 8003c04:	0589      	lsls	r1, r1, #22
 8003c06:	1c18      	adds	r0, r3, #0
 8003c08:	f7fd f836 	bl	8000c78 <__aeabi_fmul>
 8003c0c:	1c03      	adds	r3, r0, #0
}
 8003c0e:	1c18      	adds	r0, r3, #0
 8003c10:	46bd      	mov	sp, r7
 8003c12:	b002      	add	sp, #8
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <lsm303agr_temp_data_ready_get>:
  * @param  val    Get the values of tda in reg STATUS_REG_AUX_A.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_temp_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003c16:	b590      	push	{r4, r7, lr}
 8003c18:	b085      	sub	sp, #20
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	6039      	str	r1, [r7, #0]
  lsm303agr_status_reg_aux_a_t status_reg_aux_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_AUX_A,
 8003c20:	2408      	movs	r4, #8
 8003c22:	193a      	adds	r2, r7, r4
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	2301      	movs	r3, #1
 8003c28:	2107      	movs	r1, #7
 8003c2a:	f7ff ff58 	bl	8003ade <lsm303agr_read_reg>
 8003c2e:	0003      	movs	r3, r0
 8003c30:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&status_reg_aux_a, 1);
  *val = status_reg_aux_a.tda;
 8003c32:	193b      	adds	r3, r7, r4
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	075b      	lsls	r3, r3, #29
 8003c38:	0fdb      	lsrs	r3, r3, #31
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	001a      	movs	r2, r3
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	701a      	strb	r2, [r3, #0]

  return ret;
 8003c42:	68fb      	ldr	r3, [r7, #12]
}
 8003c44:	0018      	movs	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b005      	add	sp, #20
 8003c4a:	bd90      	pop	{r4, r7, pc}

08003c4c <lsm303agr_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003c4c:	b590      	push	{r4, r7, lr}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_TEMP_L_A, buff, 2);
 8003c56:	2408      	movs	r4, #8
 8003c58:	193a      	adds	r2, r7, r4
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	210c      	movs	r1, #12
 8003c60:	f7ff ff3d 	bl	8003ade <lsm303agr_read_reg>
 8003c64:	0003      	movs	r3, r0
 8003c66:	60fb      	str	r3, [r7, #12]
  val[0] = (int16_t)buff[1];
 8003c68:	0021      	movs	r1, r4
 8003c6a:	187b      	adds	r3, r7, r1
 8003c6c:	785b      	ldrb	r3, [r3, #1]
 8003c6e:	b21a      	sxth	r2, r3
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2200      	movs	r2, #0
 8003c78:	5e9b      	ldrsh	r3, [r3, r2]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	021b      	lsls	r3, r3, #8
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	187b      	adds	r3, r7, r1
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	18d3      	adds	r3, r2, r3
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	b21a      	sxth	r2, r3
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	801a      	strh	r2, [r3, #0]

  return ret;
 8003c90:	68fb      	ldr	r3, [r7, #12]
}
 8003c92:	0018      	movs	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b005      	add	sp, #20
 8003c98:	bd90      	pop	{r4, r7, pc}

08003c9a <lsm303agr_temperature_meas_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_temperature_meas_set(stmdev_ctx_t *ctx,
                                       lsm303agr_temp_en_a_t val)
{
 8003c9a:	b590      	push	{r4, r7, lr}
 8003c9c:	b085      	sub	sp, #20
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	000a      	movs	r2, r1
 8003ca4:	1cfb      	adds	r3, r7, #3
 8003ca6:	701a      	strb	r2, [r3, #0]
  lsm303agr_temp_cfg_reg_a_t temp_cfg_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_TEMP_CFG_REG_A,
 8003ca8:	2408      	movs	r4, #8
 8003caa:	193a      	adds	r2, r7, r4
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	2301      	movs	r3, #1
 8003cb0:	211f      	movs	r1, #31
 8003cb2:	f7ff ff14 	bl	8003ade <lsm303agr_read_reg>
 8003cb6:	0003      	movs	r3, r0
 8003cb8:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&temp_cfg_reg_a, 1);

  if (ret == 0)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d115      	bne.n	8003cec <lsm303agr_temperature_meas_set+0x52>
  {
    temp_cfg_reg_a.temp_en = (uint8_t)val;
 8003cc0:	1cfb      	adds	r3, r7, #3
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	193b      	adds	r3, r7, r4
 8003ccc:	0190      	lsls	r0, r2, #6
 8003cce:	781a      	ldrb	r2, [r3, #0]
 8003cd0:	213f      	movs	r1, #63	; 0x3f
 8003cd2:	400a      	ands	r2, r1
 8003cd4:	1c11      	adds	r1, r2, #0
 8003cd6:	1c02      	adds	r2, r0, #0
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_TEMP_CFG_REG_A,
 8003cdc:	193a      	adds	r2, r7, r4
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	211f      	movs	r1, #31
 8003ce4:	f7ff ff1c 	bl	8003b20 <lsm303agr_write_reg>
 8003ce8:	0003      	movs	r3, r0
 8003cea:	60fb      	str	r3, [r7, #12]
                              (uint8_t *)&temp_cfg_reg_a, 1);
  }

  return ret;
 8003cec:	68fb      	ldr	r3, [r7, #12]
}
 8003cee:	0018      	movs	r0, r3
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	b005      	add	sp, #20
 8003cf4:	bd90      	pop	{r4, r7, pc}

08003cf6 <lsm303agr_xl_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_set(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t val)
{
 8003cf6:	b590      	push	{r4, r7, lr}
 8003cf8:	b087      	sub	sp, #28
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	000a      	movs	r2, r1
 8003d00:	1cfb      	adds	r3, r7, #3
 8003d02:	701a      	strb	r2, [r3, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  uint8_t lpen, hr;

  if (val == LSM303AGR_HR_12bit)
 8003d04:	1cfb      	adds	r3, r7, #3
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d108      	bne.n	8003d1e <lsm303agr_xl_operating_mode_set+0x28>
  {
    lpen = 0;
 8003d0c:	2313      	movs	r3, #19
 8003d0e:	18fb      	adds	r3, r7, r3
 8003d10:	2200      	movs	r2, #0
 8003d12:	701a      	strb	r2, [r3, #0]
    hr   = 1;
 8003d14:	2312      	movs	r3, #18
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	2201      	movs	r2, #1
 8003d1a:	701a      	strb	r2, [r3, #0]
 8003d1c:	e014      	b.n	8003d48 <lsm303agr_xl_operating_mode_set+0x52>
  }

  else if (val == LSM303AGR_NM_10bit)
 8003d1e:	1cfb      	adds	r3, r7, #3
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d108      	bne.n	8003d38 <lsm303agr_xl_operating_mode_set+0x42>
  {
    lpen = 0;
 8003d26:	2313      	movs	r3, #19
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	701a      	strb	r2, [r3, #0]
    hr   = 0;
 8003d2e:	2312      	movs	r3, #18
 8003d30:	18fb      	adds	r3, r7, r3
 8003d32:	2200      	movs	r2, #0
 8003d34:	701a      	strb	r2, [r3, #0]
 8003d36:	e007      	b.n	8003d48 <lsm303agr_xl_operating_mode_set+0x52>
  }

  else
  {
    lpen = 1;
 8003d38:	2313      	movs	r3, #19
 8003d3a:	18fb      	adds	r3, r7, r3
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	701a      	strb	r2, [r3, #0]
    hr   = 0;
 8003d40:	2312      	movs	r3, #18
 8003d42:	18fb      	adds	r3, r7, r3
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]
  }

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003d48:	2410      	movs	r4, #16
 8003d4a:	193a      	adds	r2, r7, r4
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	2301      	movs	r3, #1
 8003d50:	2120      	movs	r1, #32
 8003d52:	f7ff fec4 	bl	8003ade <lsm303agr_read_reg>
 8003d56:	0003      	movs	r3, r0
 8003d58:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);
  ctrl_reg1_a.lpen = (uint8_t)lpen;
 8003d5a:	2313      	movs	r3, #19
 8003d5c:	18fb      	adds	r3, r7, r3
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2201      	movs	r2, #1
 8003d62:	4013      	ands	r3, r2
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	193b      	adds	r3, r7, r4
 8003d68:	2101      	movs	r1, #1
 8003d6a:	400a      	ands	r2, r1
 8003d6c:	00d0      	lsls	r0, r2, #3
 8003d6e:	781a      	ldrb	r2, [r3, #0]
 8003d70:	2108      	movs	r1, #8
 8003d72:	438a      	bics	r2, r1
 8003d74:	1c11      	adds	r1, r2, #0
 8003d76:	1c02      	adds	r2, r0, #0
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	701a      	strb	r2, [r3, #0]

  if (ret == 0)
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d107      	bne.n	8003d92 <lsm303agr_xl_operating_mode_set+0x9c>
  {
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003d82:	193a      	adds	r2, r7, r4
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	2301      	movs	r3, #1
 8003d88:	2120      	movs	r1, #32
 8003d8a:	f7ff fec9 	bl	8003b20 <lsm303agr_write_reg>
 8003d8e:	0003      	movs	r3, r0
 8003d90:	617b      	str	r3, [r7, #20]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  if (ret == 0)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d108      	bne.n	8003daa <lsm303agr_xl_operating_mode_set+0xb4>
  {
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003d98:	230c      	movs	r3, #12
 8003d9a:	18fa      	adds	r2, r7, r3
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	2301      	movs	r3, #1
 8003da0:	2123      	movs	r1, #35	; 0x23
 8003da2:	f7ff fe9c 	bl	8003ade <lsm303agr_read_reg>
 8003da6:	0003      	movs	r3, r0
 8003da8:	617b      	str	r3, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if (ret == 0)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d119      	bne.n	8003de4 <lsm303agr_xl_operating_mode_set+0xee>
  {
    ctrl_reg4_a.hr = hr;
 8003db0:	2312      	movs	r3, #18
 8003db2:	18fb      	adds	r3, r7, r3
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2201      	movs	r2, #1
 8003db8:	4013      	ands	r3, r2
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	240c      	movs	r4, #12
 8003dbe:	193b      	adds	r3, r7, r4
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	400a      	ands	r2, r1
 8003dc4:	00d0      	lsls	r0, r2, #3
 8003dc6:	781a      	ldrb	r2, [r3, #0]
 8003dc8:	2108      	movs	r1, #8
 8003dca:	438a      	bics	r2, r1
 8003dcc:	1c11      	adds	r1, r2, #0
 8003dce:	1c02      	adds	r2, r0, #0
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003dd4:	193a      	adds	r2, r7, r4
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	2301      	movs	r3, #1
 8003dda:	2123      	movs	r1, #35	; 0x23
 8003ddc:	f7ff fea0 	bl	8003b20 <lsm303agr_write_reg>
 8003de0:	0003      	movs	r3, r0
 8003de2:	617b      	str	r3, [r7, #20]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003de4:	697b      	ldr	r3, [r7, #20]
}
 8003de6:	0018      	movs	r0, r3
 8003de8:	46bd      	mov	sp, r7
 8003dea:	b007      	add	sp, #28
 8003dec:	bd90      	pop	{r4, r7, pc}

08003dee <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8003dee:	b590      	push	{r4, r7, lr}
 8003df0:	b085      	sub	sp, #20
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	000a      	movs	r2, r1
 8003df8:	1cfb      	adds	r3, r7, #3
 8003dfa:	701a      	strb	r2, [r3, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003dfc:	2408      	movs	r4, #8
 8003dfe:	193a      	adds	r2, r7, r4
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	2301      	movs	r3, #1
 8003e04:	2120      	movs	r1, #32
 8003e06:	f7ff fe6a 	bl	8003ade <lsm303agr_read_reg>
 8003e0a:	0003      	movs	r3, r0
 8003e0c:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d115      	bne.n	8003e40 <lsm303agr_xl_data_rate_set+0x52>
  {
    ctrl_reg1_a.odr = (uint8_t)val;
 8003e14:	1cfb      	adds	r3, r7, #3
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	220f      	movs	r2, #15
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	193b      	adds	r3, r7, r4
 8003e20:	0110      	lsls	r0, r2, #4
 8003e22:	781a      	ldrb	r2, [r3, #0]
 8003e24:	210f      	movs	r1, #15
 8003e26:	400a      	ands	r2, r1
 8003e28:	1c11      	adds	r1, r2, #0
 8003e2a:	1c02      	adds	r2, r0, #0
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003e30:	193a      	adds	r2, r7, r4
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	2301      	movs	r3, #1
 8003e36:	2120      	movs	r1, #32
 8003e38:	f7ff fe72 	bl	8003b20 <lsm303agr_write_reg>
 8003e3c:	0003      	movs	r3, r0
 8003e3e:	60fb      	str	r3, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8003e40:	68fb      	ldr	r3, [r7, #12]
}
 8003e42:	0018      	movs	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b005      	add	sp, #20
 8003e48:	bd90      	pop	{r4, r7, pc}

08003e4a <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8003e4a:	b590      	push	{r4, r7, lr}
 8003e4c:	b085      	sub	sp, #20
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	000a      	movs	r2, r1
 8003e54:	1cfb      	adds	r3, r7, #3
 8003e56:	701a      	strb	r2, [r3, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003e58:	2408      	movs	r4, #8
 8003e5a:	193a      	adds	r2, r7, r4
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	2301      	movs	r3, #1
 8003e60:	2123      	movs	r1, #35	; 0x23
 8003e62:	f7ff fe3c 	bl	8003ade <lsm303agr_read_reg>
 8003e66:	0003      	movs	r3, r0
 8003e68:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d117      	bne.n	8003ea0 <lsm303agr_xl_full_scale_set+0x56>
  {
    ctrl_reg4_a.fs = (uint8_t)val;
 8003e70:	1cfb      	adds	r3, r7, #3
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2203      	movs	r2, #3
 8003e76:	4013      	ands	r3, r2
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	193b      	adds	r3, r7, r4
 8003e7c:	2103      	movs	r1, #3
 8003e7e:	400a      	ands	r2, r1
 8003e80:	0110      	lsls	r0, r2, #4
 8003e82:	781a      	ldrb	r2, [r3, #0]
 8003e84:	2130      	movs	r1, #48	; 0x30
 8003e86:	438a      	bics	r2, r1
 8003e88:	1c11      	adds	r1, r2, #0
 8003e8a:	1c02      	adds	r2, r0, #0
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003e90:	193a      	adds	r2, r7, r4
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	2301      	movs	r3, #1
 8003e96:	2123      	movs	r1, #35	; 0x23
 8003e98:	f7ff fe42 	bl	8003b20 <lsm303agr_write_reg>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	60fb      	str	r3, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
}
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	b005      	add	sp, #20
 8003ea8:	bd90      	pop	{r4, r7, pc}

08003eaa <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8003eaa:	b590      	push	{r4, r7, lr}
 8003eac:	b085      	sub	sp, #20
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	000a      	movs	r2, r1
 8003eb4:	1cfb      	adds	r3, r7, #3
 8003eb6:	701a      	strb	r2, [r3, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003eb8:	2408      	movs	r4, #8
 8003eba:	193a      	adds	r2, r7, r4
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	2123      	movs	r1, #35	; 0x23
 8003ec2:	f7ff fe0c 	bl	8003ade <lsm303agr_read_reg>
 8003ec6:	0003      	movs	r3, r0
 8003ec8:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d115      	bne.n	8003efc <lsm303agr_xl_block_data_update_set+0x52>
  {
    ctrl_reg4_a.bdu = (uint8_t)val;
 8003ed0:	1cfb      	adds	r3, r7, #3
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	193b      	adds	r3, r7, r4
 8003edc:	01d0      	lsls	r0, r2, #7
 8003ede:	781a      	ldrb	r2, [r3, #0]
 8003ee0:	217f      	movs	r1, #127	; 0x7f
 8003ee2:	400a      	ands	r2, r1
 8003ee4:	1c11      	adds	r1, r2, #0
 8003ee6:	1c02      	adds	r2, r0, #0
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003eec:	193a      	adds	r2, r7, r4
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	2123      	movs	r1, #35	; 0x23
 8003ef4:	f7ff fe14 	bl	8003b20 <lsm303agr_write_reg>
 8003ef8:	0003      	movs	r3, r0
 8003efa:	60fb      	str	r3, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003efc:	68fb      	ldr	r3, [r7, #12]
}
 8003efe:	0018      	movs	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	b005      	add	sp, #20
 8003f04:	bd90      	pop	{r4, r7, pc}

08003f06 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8003f06:	b590      	push	{r4, r7, lr}
 8003f08:	b087      	sub	sp, #28
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8003f10:	240c      	movs	r4, #12
 8003f12:	193a      	adds	r2, r7, r4
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	2306      	movs	r3, #6
 8003f18:	2128      	movs	r1, #40	; 0x28
 8003f1a:	f7ff fde0 	bl	8003ade <lsm303agr_read_reg>
 8003f1e:	0003      	movs	r3, r0
 8003f20:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003f22:	0021      	movs	r1, r4
 8003f24:	187b      	adds	r3, r7, r1
 8003f26:	785b      	ldrb	r3, [r3, #1]
 8003f28:	b21a      	sxth	r2, r3
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2200      	movs	r2, #0
 8003f32:	5e9b      	ldrsh	r3, [r3, r2]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	187b      	adds	r3, r7, r1
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	18d3      	adds	r3, r2, r3
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	b21a      	sxth	r2, r3
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003f4a:	187b      	adds	r3, r7, r1
 8003f4c:	78da      	ldrb	r2, [r3, #3]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	3302      	adds	r3, #2
 8003f52:	b212      	sxth	r2, r2
 8003f54:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	3302      	adds	r3, #2
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	5e9b      	ldrsh	r3, [r3, r2]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	021b      	lsls	r3, r3, #8
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	187b      	adds	r3, r7, r1
 8003f66:	789b      	ldrb	r3, [r3, #2]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	18d3      	adds	r3, r2, r3
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	3302      	adds	r3, #2
 8003f72:	b212      	sxth	r2, r2
 8003f74:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003f76:	187b      	adds	r3, r7, r1
 8003f78:	795a      	ldrb	r2, [r3, #5]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	b212      	sxth	r2, r2
 8003f80:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	3304      	adds	r3, #4
 8003f86:	2200      	movs	r2, #0
 8003f88:	5e9b      	ldrsh	r3, [r3, r2]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	021b      	lsls	r3, r3, #8
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	187b      	adds	r3, r7, r1
 8003f92:	791b      	ldrb	r3, [r3, #4]
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	18d3      	adds	r3, r2, r3
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	b212      	sxth	r2, r2
 8003fa0:	801a      	strh	r2, [r3, #0]

  return ret;
 8003fa2:	697b      	ldr	r3, [r7, #20]
}
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b007      	add	sp, #28
 8003faa:	bd90      	pop	{r4, r7, pc}

08003fac <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8003fac:	b590      	push	{r4, r7, lr}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	000a      	movs	r2, r1
 8003fb6:	1cfb      	adds	r3, r7, #3
 8003fb8:	701a      	strb	r2, [r3, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003fba:	2408      	movs	r4, #8
 8003fbc:	193a      	adds	r2, r7, r4
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	2160      	movs	r1, #96	; 0x60
 8003fc4:	f7ff fd8b 	bl	8003ade <lsm303agr_read_reg>
 8003fc8:	0003      	movs	r3, r0
 8003fca:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d117      	bne.n	8004002 <lsm303agr_mag_operating_mode_set+0x56>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 8003fd2:	1cfb      	adds	r3, r7, #3
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	4013      	ands	r3, r2
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	193b      	adds	r3, r7, r4
 8003fde:	2103      	movs	r1, #3
 8003fe0:	400a      	ands	r2, r1
 8003fe2:	0010      	movs	r0, r2
 8003fe4:	781a      	ldrb	r2, [r3, #0]
 8003fe6:	2103      	movs	r1, #3
 8003fe8:	438a      	bics	r2, r1
 8003fea:	1c11      	adds	r1, r2, #0
 8003fec:	1c02      	adds	r2, r0, #0
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003ff2:	193a      	adds	r2, r7, r4
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	2160      	movs	r1, #96	; 0x60
 8003ffa:	f7ff fd91 	bl	8003b20 <lsm303agr_write_reg>
 8003ffe:	0003      	movs	r3, r0
 8004000:	60fb      	str	r3, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8004002:	68fb      	ldr	r3, [r7, #12]
}
 8004004:	0018      	movs	r0, r3
 8004006:	46bd      	mov	sp, r7
 8004008:	b005      	add	sp, #20
 800400a:	bd90      	pop	{r4, r7, pc}

0800400c <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 800400c:	b590      	push	{r4, r7, lr}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	000a      	movs	r2, r1
 8004016:	1cfb      	adds	r3, r7, #3
 8004018:	701a      	strb	r2, [r3, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800401a:	2408      	movs	r4, #8
 800401c:	193a      	adds	r2, r7, r4
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	2301      	movs	r3, #1
 8004022:	2160      	movs	r1, #96	; 0x60
 8004024:	f7ff fd5b 	bl	8003ade <lsm303agr_read_reg>
 8004028:	0003      	movs	r3, r0
 800402a:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d117      	bne.n	8004062 <lsm303agr_mag_data_rate_set+0x56>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 8004032:	1cfb      	adds	r3, r7, #3
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2203      	movs	r2, #3
 8004038:	4013      	ands	r3, r2
 800403a:	b2da      	uxtb	r2, r3
 800403c:	193b      	adds	r3, r7, r4
 800403e:	2103      	movs	r1, #3
 8004040:	400a      	ands	r2, r1
 8004042:	0090      	lsls	r0, r2, #2
 8004044:	781a      	ldrb	r2, [r3, #0]
 8004046:	210c      	movs	r1, #12
 8004048:	438a      	bics	r2, r1
 800404a:	1c11      	adds	r1, r2, #0
 800404c:	1c02      	adds	r2, r0, #0
 800404e:	430a      	orrs	r2, r1
 8004050:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004052:	193a      	adds	r2, r7, r4
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	2301      	movs	r3, #1
 8004058:	2160      	movs	r1, #96	; 0x60
 800405a:	f7ff fd61 	bl	8003b20 <lsm303agr_write_reg>
 800405e:	0003      	movs	r3, r0
 8004060:	60fb      	str	r3, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8004062:	68fb      	ldr	r3, [r7, #12]
}
 8004064:	0018      	movs	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	b005      	add	sp, #20
 800406a:	bd90      	pop	{r4, r7, pc}

0800406c <lsm303agr_mag_offset_temp_comp_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_offset_temp_comp_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 800406c:	b590      	push	{r4, r7, lr}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	000a      	movs	r2, r1
 8004076:	1cfb      	adds	r3, r7, #3
 8004078:	701a      	strb	r2, [r3, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800407a:	2408      	movs	r4, #8
 800407c:	193a      	adds	r2, r7, r4
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	2301      	movs	r3, #1
 8004082:	2160      	movs	r1, #96	; 0x60
 8004084:	f7ff fd2b 	bl	8003ade <lsm303agr_read_reg>
 8004088:	0003      	movs	r3, r0
 800408a:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d115      	bne.n	80040be <lsm303agr_mag_offset_temp_comp_set+0x52>
  {
    cfg_reg_a_m.comp_temp_en = (uint8_t)val;
 8004092:	1cfb      	adds	r3, r7, #3
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2201      	movs	r2, #1
 8004098:	4013      	ands	r3, r2
 800409a:	b2da      	uxtb	r2, r3
 800409c:	193b      	adds	r3, r7, r4
 800409e:	01d0      	lsls	r0, r2, #7
 80040a0:	781a      	ldrb	r2, [r3, #0]
 80040a2:	217f      	movs	r1, #127	; 0x7f
 80040a4:	400a      	ands	r2, r1
 80040a6:	1c11      	adds	r1, r2, #0
 80040a8:	1c02      	adds	r2, r0, #0
 80040aa:	430a      	orrs	r2, r1
 80040ac:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80040ae:	193a      	adds	r2, r7, r4
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	2301      	movs	r3, #1
 80040b4:	2160      	movs	r1, #96	; 0x60
 80040b6:	f7ff fd33 	bl	8003b20 <lsm303agr_write_reg>
 80040ba:	0003      	movs	r3, r0
 80040bc:	60fb      	str	r3, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 80040be:	68fb      	ldr	r3, [r7, #12]
}
 80040c0:	0018      	movs	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b005      	add	sp, #20
 80040c6:	bd90      	pop	{r4, r7, pc}

080040c8 <lsm303agr_mag_set_rst_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_set_rst_mode_set(stmdev_ctx_t *ctx,
                                       lsm303agr_set_rst_m_t val)
{
 80040c8:	b590      	push	{r4, r7, lr}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	000a      	movs	r2, r1
 80040d2:	1cfb      	adds	r3, r7, #3
 80040d4:	701a      	strb	r2, [r3, #0]
  lsm303agr_cfg_reg_b_m_t cfg_reg_b_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_B_M,
 80040d6:	2408      	movs	r4, #8
 80040d8:	193a      	adds	r2, r7, r4
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	2301      	movs	r3, #1
 80040de:	2161      	movs	r1, #97	; 0x61
 80040e0:	f7ff fcfd 	bl	8003ade <lsm303agr_read_reg>
 80040e4:	0003      	movs	r3, r0
 80040e6:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&cfg_reg_b_m, 1);

  if (ret == 0)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d117      	bne.n	800411e <lsm303agr_mag_set_rst_mode_set+0x56>
  {
    cfg_reg_b_m.set_rst = (uint8_t)val;
 80040ee:	1cfb      	adds	r3, r7, #3
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2203      	movs	r2, #3
 80040f4:	4013      	ands	r3, r2
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	193b      	adds	r3, r7, r4
 80040fa:	2103      	movs	r1, #3
 80040fc:	400a      	ands	r2, r1
 80040fe:	1890      	adds	r0, r2, r2
 8004100:	781a      	ldrb	r2, [r3, #0]
 8004102:	2106      	movs	r1, #6
 8004104:	438a      	bics	r2, r1
 8004106:	1c11      	adds	r1, r2, #0
 8004108:	1c02      	adds	r2, r0, #0
 800410a:	430a      	orrs	r2, r1
 800410c:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_B_M,
 800410e:	193a      	adds	r2, r7, r4
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	2301      	movs	r3, #1
 8004114:	2161      	movs	r1, #97	; 0x61
 8004116:	f7ff fd03 	bl	8003b20 <lsm303agr_write_reg>
 800411a:	0003      	movs	r3, r0
 800411c:	60fb      	str	r3, [r7, #12]
                              (uint8_t *)&cfg_reg_b_m, 1);
  }

  return ret;
 800411e:	68fb      	ldr	r3, [r7, #12]
}
 8004120:	0018      	movs	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	b005      	add	sp, #20
 8004126:	bd90      	pop	{r4, r7, pc}

08004128 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8004128:	b590      	push	{r4, r7, lr}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	000a      	movs	r2, r1
 8004132:	1cfb      	adds	r3, r7, #3
 8004134:	701a      	strb	r2, [r3, #0]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004136:	2408      	movs	r4, #8
 8004138:	193a      	adds	r2, r7, r4
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	2301      	movs	r3, #1
 800413e:	2162      	movs	r1, #98	; 0x62
 8004140:	f7ff fccd 	bl	8003ade <lsm303agr_read_reg>
 8004144:	0003      	movs	r3, r0
 8004146:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d117      	bne.n	800417e <lsm303agr_mag_block_data_update_set+0x56>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 800414e:	1cfb      	adds	r3, r7, #3
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2201      	movs	r2, #1
 8004154:	4013      	ands	r3, r2
 8004156:	b2da      	uxtb	r2, r3
 8004158:	193b      	adds	r3, r7, r4
 800415a:	2101      	movs	r1, #1
 800415c:	400a      	ands	r2, r1
 800415e:	0110      	lsls	r0, r2, #4
 8004160:	781a      	ldrb	r2, [r3, #0]
 8004162:	2110      	movs	r1, #16
 8004164:	438a      	bics	r2, r1
 8004166:	1c11      	adds	r1, r2, #0
 8004168:	1c02      	adds	r2, r0, #0
 800416a:	430a      	orrs	r2, r1
 800416c:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800416e:	193a      	adds	r2, r7, r4
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	2301      	movs	r3, #1
 8004174:	2162      	movs	r1, #98	; 0x62
 8004176:	f7ff fcd3 	bl	8003b20 <lsm303agr_write_reg>
 800417a:	0003      	movs	r3, r0
 800417c:	60fb      	str	r3, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 800417e:	68fb      	ldr	r3, [r7, #12]
}
 8004180:	0018      	movs	r0, r3
 8004182:	46bd      	mov	sp, r7
 8004184:	b005      	add	sp, #20
 8004186:	bd90      	pop	{r4, r7, pc}

08004188 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004188:	b590      	push	{r4, r7, lr}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8004192:	240c      	movs	r4, #12
 8004194:	193a      	adds	r2, r7, r4
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	2306      	movs	r3, #6
 800419a:	2168      	movs	r1, #104	; 0x68
 800419c:	f7ff fc9f 	bl	8003ade <lsm303agr_read_reg>
 80041a0:	0003      	movs	r3, r0
 80041a2:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 80041a4:	0021      	movs	r1, r4
 80041a6:	187b      	adds	r3, r7, r1
 80041a8:	785b      	ldrb	r3, [r3, #1]
 80041aa:	b21a      	sxth	r2, r3
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2200      	movs	r2, #0
 80041b4:	5e9b      	ldrsh	r3, [r3, r2]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	021b      	lsls	r3, r3, #8
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	187b      	adds	r3, r7, r1
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	18d3      	adds	r3, r2, r3
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	b21a      	sxth	r2, r3
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80041cc:	187b      	adds	r3, r7, r1
 80041ce:	78da      	ldrb	r2, [r3, #3]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	3302      	adds	r3, #2
 80041d4:	b212      	sxth	r2, r2
 80041d6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	3302      	adds	r3, #2
 80041dc:	2200      	movs	r2, #0
 80041de:	5e9b      	ldrsh	r3, [r3, r2]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	021b      	lsls	r3, r3, #8
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	187b      	adds	r3, r7, r1
 80041e8:	789b      	ldrb	r3, [r3, #2]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	18d3      	adds	r3, r2, r3
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	3302      	adds	r3, #2
 80041f4:	b212      	sxth	r2, r2
 80041f6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80041f8:	187b      	adds	r3, r7, r1
 80041fa:	795a      	ldrb	r2, [r3, #5]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	3304      	adds	r3, #4
 8004200:	b212      	sxth	r2, r2
 8004202:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	3304      	adds	r3, #4
 8004208:	2200      	movs	r2, #0
 800420a:	5e9b      	ldrsh	r3, [r3, r2]
 800420c:	b29b      	uxth	r3, r3
 800420e:	021b      	lsls	r3, r3, #8
 8004210:	b29a      	uxth	r2, r3
 8004212:	187b      	adds	r3, r7, r1
 8004214:	791b      	ldrb	r3, [r3, #4]
 8004216:	b29b      	uxth	r3, r3
 8004218:	18d3      	adds	r3, r2, r3
 800421a:	b29a      	uxth	r2, r3
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	3304      	adds	r3, #4
 8004220:	b212      	sxth	r2, r2
 8004222:	801a      	strh	r2, [r3, #0]

  return ret;
 8004224:	697b      	ldr	r3, [r7, #20]
}
 8004226:	0018      	movs	r0, r3
 8004228:	46bd      	mov	sp, r7
 800422a:	b007      	add	sp, #28
 800422c:	bd90      	pop	{r4, r7, pc}

0800422e <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b084      	sub	sp, #16
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	2301      	movs	r3, #1
 800423e:	210f      	movs	r1, #15
 8004240:	f7ff fc4d 	bl	8003ade <lsm303agr_read_reg>
 8004244:	0003      	movs	r3, r0
 8004246:	60fb      	str	r3, [r7, #12]

  return ret;
 8004248:	68fb      	ldr	r3, [r7, #12]
}
 800424a:	0018      	movs	r0, r3
 800424c:	46bd      	mov	sp, r7
 800424e:	b004      	add	sp, #16
 8004250:	bd80      	pop	{r7, pc}

08004252 <lsm303agr_xl_status_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_status_get(stmdev_ctx_t *ctx,
                                lsm303agr_status_reg_a_t *val)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_A, (uint8_t *) val, 1);
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	2301      	movs	r3, #1
 8004262:	2127      	movs	r1, #39	; 0x27
 8004264:	f7ff fc3b 	bl	8003ade <lsm303agr_read_reg>
 8004268:	0003      	movs	r3, r0
 800426a:	60fb      	str	r3, [r7, #12]

  return ret;
 800426c:	68fb      	ldr	r3, [r7, #12]
}
 800426e:	0018      	movs	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	b004      	add	sp, #16
 8004274:	bd80      	pop	{r7, pc}

08004276 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	2301      	movs	r3, #1
 8004286:	214f      	movs	r1, #79	; 0x4f
 8004288:	f7ff fc29 	bl	8003ade <lsm303agr_read_reg>
 800428c:	0003      	movs	r3, r0
 800428e:	60fb      	str	r3, [r7, #12]

  return ret;
 8004290:	68fb      	ldr	r3, [r7, #12]
}
 8004292:	0018      	movs	r0, r3
 8004294:	46bd      	mov	sp, r7
 8004296:	b004      	add	sp, #16
 8004298:	bd80      	pop	{r7, pc}

0800429a <lsm303agr_mag_reset_set>:
  * @param  val    Change the values of soft_rst in reg CFG_REG_A_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800429a:	b590      	push	{r4, r7, lr}
 800429c:	b085      	sub	sp, #20
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	000a      	movs	r2, r1
 80042a4:	1cfb      	adds	r3, r7, #3
 80042a6:	701a      	strb	r2, [r3, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80042a8:	2408      	movs	r4, #8
 80042aa:	193a      	adds	r2, r7, r4
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	2301      	movs	r3, #1
 80042b0:	2160      	movs	r1, #96	; 0x60
 80042b2:	f7ff fc14 	bl	8003ade <lsm303agr_read_reg>
 80042b6:	0003      	movs	r3, r0
 80042b8:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d117      	bne.n	80042f0 <lsm303agr_mag_reset_set+0x56>
  {
    cfg_reg_a_m.soft_rst = (uint8_t)val;
 80042c0:	1cfb      	adds	r3, r7, #3
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2201      	movs	r2, #1
 80042c6:	4013      	ands	r3, r2
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	193b      	adds	r3, r7, r4
 80042cc:	2101      	movs	r1, #1
 80042ce:	400a      	ands	r2, r1
 80042d0:	0150      	lsls	r0, r2, #5
 80042d2:	781a      	ldrb	r2, [r3, #0]
 80042d4:	2120      	movs	r1, #32
 80042d6:	438a      	bics	r2, r1
 80042d8:	1c11      	adds	r1, r2, #0
 80042da:	1c02      	adds	r2, r0, #0
 80042dc:	430a      	orrs	r2, r1
 80042de:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80042e0:	193a      	adds	r2, r7, r4
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	2301      	movs	r3, #1
 80042e6:	2160      	movs	r1, #96	; 0x60
 80042e8:	f7ff fc1a 	bl	8003b20 <lsm303agr_write_reg>
 80042ec:	0003      	movs	r3, r0
 80042ee:	60fb      	str	r3, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 80042f0:	68fb      	ldr	r3, [r7, #12]
}
 80042f2:	0018      	movs	r0, r3
 80042f4:	46bd      	mov	sp, r7
 80042f6:	b005      	add	sp, #20
 80042f8:	bd90      	pop	{r4, r7, pc}

080042fa <lsm303agr_mag_reset_get>:
  * @param  val    Change the values of soft_rst in reg CFG_REG_A_M.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80042fa:	b590      	push	{r4, r7, lr}
 80042fc:	b085      	sub	sp, #20
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004304:	2408      	movs	r4, #8
 8004306:	193a      	adds	r2, r7, r4
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	2301      	movs	r3, #1
 800430c:	2160      	movs	r1, #96	; 0x60
 800430e:	f7ff fbe6 	bl	8003ade <lsm303agr_read_reg>
 8004312:	0003      	movs	r3, r0
 8004314:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);
  *val = cfg_reg_a_m.soft_rst;
 8004316:	193b      	adds	r3, r7, r4
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	069b      	lsls	r3, r3, #26
 800431c:	0fdb      	lsrs	r3, r3, #31
 800431e:	b2db      	uxtb	r3, r3
 8004320:	001a      	movs	r2, r3
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	701a      	strb	r2, [r3, #0]

  return ret;
 8004326:	68fb      	ldr	r3, [r7, #12]
}
 8004328:	0018      	movs	r0, r3
 800432a:	46bd      	mov	sp, r7
 800432c:	b005      	add	sp, #20
 800432e:	bd90      	pop	{r4, r7, pc}

08004330 <lsm303agr_mag_status_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_status_get(stmdev_ctx_t *ctx,
                                 lsm303agr_status_reg_m_t *val)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_M, (uint8_t *) val, 1);
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	2301      	movs	r3, #1
 8004340:	2167      	movs	r1, #103	; 0x67
 8004342:	f7ff fbcc 	bl	8003ade <lsm303agr_read_reg>
 8004346:	0003      	movs	r3, r0
 8004348:	60fb      	str	r3, [r7, #12]

  return ret;
 800434a:	68fb      	ldr	r3, [r7, #12]
}
 800434c:	0018      	movs	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	b004      	add	sp, #16
 8004352:	bd80      	pop	{r7, pc}

08004354 <lsm303agr_xl_spi_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_spi_mode_set(stmdev_ctx_t *ctx,
                                  lsm303agr_sim_a_t val)
{
 8004354:	b590      	push	{r4, r7, lr}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	000a      	movs	r2, r1
 800435e:	1cfb      	adds	r3, r7, #3
 8004360:	701a      	strb	r2, [r3, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004362:	2408      	movs	r4, #8
 8004364:	193a      	adds	r2, r7, r4
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	2301      	movs	r3, #1
 800436a:	2123      	movs	r1, #35	; 0x23
 800436c:	f7ff fbb7 	bl	8003ade <lsm303agr_read_reg>
 8004370:	0003      	movs	r3, r0
 8004372:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d117      	bne.n	80043aa <lsm303agr_xl_spi_mode_set+0x56>
  {
    ctrl_reg4_a.spi_enable = (uint8_t)val;
 800437a:	1cfb      	adds	r3, r7, #3
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2201      	movs	r2, #1
 8004380:	4013      	ands	r3, r2
 8004382:	b2da      	uxtb	r2, r3
 8004384:	193b      	adds	r3, r7, r4
 8004386:	2101      	movs	r1, #1
 8004388:	400a      	ands	r2, r1
 800438a:	0010      	movs	r0, r2
 800438c:	781a      	ldrb	r2, [r3, #0]
 800438e:	2101      	movs	r1, #1
 8004390:	438a      	bics	r2, r1
 8004392:	1c11      	adds	r1, r2, #0
 8004394:	1c02      	adds	r2, r0, #0
 8004396:	430a      	orrs	r2, r1
 8004398:	701a      	strb	r2, [r3, #0]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800439a:	193a      	adds	r2, r7, r4
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	2301      	movs	r3, #1
 80043a0:	2123      	movs	r1, #35	; 0x23
 80043a2:	f7ff fbbd 	bl	8003b20 <lsm303agr_write_reg>
 80043a6:	0003      	movs	r3, r0
 80043a8:	60fb      	str	r3, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 80043aa:	68fb      	ldr	r3, [r7, #12]
}
 80043ac:	0018      	movs	r0, r3
 80043ae:	46bd      	mov	sp, r7
 80043b0:	b005      	add	sp, #20
 80043b2:	bd90      	pop	{r4, r7, pc}

080043b4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80043ba:	1dfb      	adds	r3, r7, #7
 80043bc:	2200      	movs	r2, #0
 80043be:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <HAL_Init+0x3c>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <HAL_Init+0x3c>)
 80043c6:	2140      	movs	r1, #64	; 0x40
 80043c8:	430a      	orrs	r2, r1
 80043ca:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043cc:	2000      	movs	r0, #0
 80043ce:	f000 f811 	bl	80043f4 <HAL_InitTick>
 80043d2:	1e03      	subs	r3, r0, #0
 80043d4:	d003      	beq.n	80043de <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80043d6:	1dfb      	adds	r3, r7, #7
 80043d8:	2201      	movs	r2, #1
 80043da:	701a      	strb	r2, [r3, #0]
 80043dc:	e001      	b.n	80043e2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80043de:	f7ff f9df 	bl	80037a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80043e2:	1dfb      	adds	r3, r7, #7
 80043e4:	781b      	ldrb	r3, [r3, #0]
}
 80043e6:	0018      	movs	r0, r3
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b002      	add	sp, #8
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	46c0      	nop			; (mov r8, r8)
 80043f0:	40022000 	.word	0x40022000

080043f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043f4:	b590      	push	{r4, r7, lr}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043fc:	4b14      	ldr	r3, [pc, #80]	; (8004450 <HAL_InitTick+0x5c>)
 80043fe:	681c      	ldr	r4, [r3, #0]
 8004400:	4b14      	ldr	r3, [pc, #80]	; (8004454 <HAL_InitTick+0x60>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	0019      	movs	r1, r3
 8004406:	23fa      	movs	r3, #250	; 0xfa
 8004408:	0098      	lsls	r0, r3, #2
 800440a:	f7fb fe99 	bl	8000140 <__udivsi3>
 800440e:	0003      	movs	r3, r0
 8004410:	0019      	movs	r1, r3
 8004412:	0020      	movs	r0, r4
 8004414:	f7fb fe94 	bl	8000140 <__udivsi3>
 8004418:	0003      	movs	r3, r0
 800441a:	0018      	movs	r0, r3
 800441c:	f000 f905 	bl	800462a <HAL_SYSTICK_Config>
 8004420:	1e03      	subs	r3, r0, #0
 8004422:	d001      	beq.n	8004428 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e00f      	b.n	8004448 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b03      	cmp	r3, #3
 800442c:	d80b      	bhi.n	8004446 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	2301      	movs	r3, #1
 8004432:	425b      	negs	r3, r3
 8004434:	2200      	movs	r2, #0
 8004436:	0018      	movs	r0, r3
 8004438:	f000 f8e2 	bl	8004600 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <HAL_InitTick+0x64>)
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	e000      	b.n	8004448 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
}
 8004448:	0018      	movs	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	b003      	add	sp, #12
 800444e:	bd90      	pop	{r4, r7, pc}
 8004450:	20000000 	.word	0x20000000
 8004454:	20000008 	.word	0x20000008
 8004458:	20000004 	.word	0x20000004

0800445c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <HAL_IncTick+0x1c>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	001a      	movs	r2, r3
 8004466:	4b05      	ldr	r3, [pc, #20]	; (800447c <HAL_IncTick+0x20>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	18d2      	adds	r2, r2, r3
 800446c:	4b03      	ldr	r3, [pc, #12]	; (800447c <HAL_IncTick+0x20>)
 800446e:	601a      	str	r2, [r3, #0]
}
 8004470:	46c0      	nop			; (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	20000008 	.word	0x20000008
 800447c:	20000300 	.word	0x20000300

08004480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  return uwTick;
 8004484:	4b02      	ldr	r3, [pc, #8]	; (8004490 <HAL_GetTick+0x10>)
 8004486:	681b      	ldr	r3, [r3, #0]
}
 8004488:	0018      	movs	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	20000300 	.word	0x20000300

08004494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800449c:	f7ff fff0 	bl	8004480 <HAL_GetTick>
 80044a0:	0003      	movs	r3, r0
 80044a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3301      	adds	r3, #1
 80044ac:	d005      	beq.n	80044ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044ae:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <HAL_Delay+0x44>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	001a      	movs	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	189b      	adds	r3, r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044ba:	46c0      	nop			; (mov r8, r8)
 80044bc:	f7ff ffe0 	bl	8004480 <HAL_GetTick>
 80044c0:	0002      	movs	r2, r0
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d8f7      	bhi.n	80044bc <HAL_Delay+0x28>
  {
  }
}
 80044cc:	46c0      	nop			; (mov r8, r8)
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b004      	add	sp, #16
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	20000008 	.word	0x20000008

080044dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044dc:	b590      	push	{r4, r7, lr}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	0002      	movs	r2, r0
 80044e4:	6039      	str	r1, [r7, #0]
 80044e6:	1dfb      	adds	r3, r7, #7
 80044e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044ea:	1dfb      	adds	r3, r7, #7
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b7f      	cmp	r3, #127	; 0x7f
 80044f0:	d828      	bhi.n	8004544 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044f2:	4a2f      	ldr	r2, [pc, #188]	; (80045b0 <__NVIC_SetPriority+0xd4>)
 80044f4:	1dfb      	adds	r3, r7, #7
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	b25b      	sxtb	r3, r3
 80044fa:	089b      	lsrs	r3, r3, #2
 80044fc:	33c0      	adds	r3, #192	; 0xc0
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	589b      	ldr	r3, [r3, r2]
 8004502:	1dfa      	adds	r2, r7, #7
 8004504:	7812      	ldrb	r2, [r2, #0]
 8004506:	0011      	movs	r1, r2
 8004508:	2203      	movs	r2, #3
 800450a:	400a      	ands	r2, r1
 800450c:	00d2      	lsls	r2, r2, #3
 800450e:	21ff      	movs	r1, #255	; 0xff
 8004510:	4091      	lsls	r1, r2
 8004512:	000a      	movs	r2, r1
 8004514:	43d2      	mvns	r2, r2
 8004516:	401a      	ands	r2, r3
 8004518:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	019b      	lsls	r3, r3, #6
 800451e:	22ff      	movs	r2, #255	; 0xff
 8004520:	401a      	ands	r2, r3
 8004522:	1dfb      	adds	r3, r7, #7
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	0018      	movs	r0, r3
 8004528:	2303      	movs	r3, #3
 800452a:	4003      	ands	r3, r0
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004530:	481f      	ldr	r0, [pc, #124]	; (80045b0 <__NVIC_SetPriority+0xd4>)
 8004532:	1dfb      	adds	r3, r7, #7
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	b25b      	sxtb	r3, r3
 8004538:	089b      	lsrs	r3, r3, #2
 800453a:	430a      	orrs	r2, r1
 800453c:	33c0      	adds	r3, #192	; 0xc0
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004542:	e031      	b.n	80045a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004544:	4a1b      	ldr	r2, [pc, #108]	; (80045b4 <__NVIC_SetPriority+0xd8>)
 8004546:	1dfb      	adds	r3, r7, #7
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	0019      	movs	r1, r3
 800454c:	230f      	movs	r3, #15
 800454e:	400b      	ands	r3, r1
 8004550:	3b08      	subs	r3, #8
 8004552:	089b      	lsrs	r3, r3, #2
 8004554:	3306      	adds	r3, #6
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	18d3      	adds	r3, r2, r3
 800455a:	3304      	adds	r3, #4
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	1dfa      	adds	r2, r7, #7
 8004560:	7812      	ldrb	r2, [r2, #0]
 8004562:	0011      	movs	r1, r2
 8004564:	2203      	movs	r2, #3
 8004566:	400a      	ands	r2, r1
 8004568:	00d2      	lsls	r2, r2, #3
 800456a:	21ff      	movs	r1, #255	; 0xff
 800456c:	4091      	lsls	r1, r2
 800456e:	000a      	movs	r2, r1
 8004570:	43d2      	mvns	r2, r2
 8004572:	401a      	ands	r2, r3
 8004574:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	019b      	lsls	r3, r3, #6
 800457a:	22ff      	movs	r2, #255	; 0xff
 800457c:	401a      	ands	r2, r3
 800457e:	1dfb      	adds	r3, r7, #7
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	0018      	movs	r0, r3
 8004584:	2303      	movs	r3, #3
 8004586:	4003      	ands	r3, r0
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800458c:	4809      	ldr	r0, [pc, #36]	; (80045b4 <__NVIC_SetPriority+0xd8>)
 800458e:	1dfb      	adds	r3, r7, #7
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	001c      	movs	r4, r3
 8004594:	230f      	movs	r3, #15
 8004596:	4023      	ands	r3, r4
 8004598:	3b08      	subs	r3, #8
 800459a:	089b      	lsrs	r3, r3, #2
 800459c:	430a      	orrs	r2, r1
 800459e:	3306      	adds	r3, #6
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	18c3      	adds	r3, r0, r3
 80045a4:	3304      	adds	r3, #4
 80045a6:	601a      	str	r2, [r3, #0]
}
 80045a8:	46c0      	nop			; (mov r8, r8)
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b003      	add	sp, #12
 80045ae:	bd90      	pop	{r4, r7, pc}
 80045b0:	e000e100 	.word	0xe000e100
 80045b4:	e000ed00 	.word	0xe000ed00

080045b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	1e5a      	subs	r2, r3, #1
 80045c4:	2380      	movs	r3, #128	; 0x80
 80045c6:	045b      	lsls	r3, r3, #17
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d301      	bcc.n	80045d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045cc:	2301      	movs	r3, #1
 80045ce:	e010      	b.n	80045f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045d0:	4b0a      	ldr	r3, [pc, #40]	; (80045fc <SysTick_Config+0x44>)
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	3a01      	subs	r2, #1
 80045d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045d8:	2301      	movs	r3, #1
 80045da:	425b      	negs	r3, r3
 80045dc:	2103      	movs	r1, #3
 80045de:	0018      	movs	r0, r3
 80045e0:	f7ff ff7c 	bl	80044dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <SysTick_Config+0x44>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045ea:	4b04      	ldr	r3, [pc, #16]	; (80045fc <SysTick_Config+0x44>)
 80045ec:	2207      	movs	r2, #7
 80045ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	0018      	movs	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	b002      	add	sp, #8
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	46c0      	nop			; (mov r8, r8)
 80045fc:	e000e010 	.word	0xe000e010

08004600 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	607a      	str	r2, [r7, #4]
 800460a:	210f      	movs	r1, #15
 800460c:	187b      	adds	r3, r7, r1
 800460e:	1c02      	adds	r2, r0, #0
 8004610:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	187b      	adds	r3, r7, r1
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	b25b      	sxtb	r3, r3
 800461a:	0011      	movs	r1, r2
 800461c:	0018      	movs	r0, r3
 800461e:	f7ff ff5d 	bl	80044dc <__NVIC_SetPriority>
}
 8004622:	46c0      	nop			; (mov r8, r8)
 8004624:	46bd      	mov	sp, r7
 8004626:	b004      	add	sp, #16
 8004628:	bd80      	pop	{r7, pc}

0800462a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	0018      	movs	r0, r3
 8004636:	f7ff ffbf 	bl	80045b8 <SysTick_Config>
 800463a:	0003      	movs	r3, r0
}
 800463c:	0018      	movs	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	b002      	add	sp, #8
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004652:	2300      	movs	r3, #0
 8004654:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004656:	2300      	movs	r3, #0
 8004658:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800465a:	e14f      	b.n	80048fc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2101      	movs	r1, #1
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4091      	lsls	r1, r2
 8004666:	000a      	movs	r2, r1
 8004668:	4013      	ands	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d100      	bne.n	8004674 <HAL_GPIO_Init+0x30>
 8004672:	e140      	b.n	80048f6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2203      	movs	r2, #3
 800467a:	4013      	ands	r3, r2
 800467c:	2b01      	cmp	r3, #1
 800467e:	d005      	beq.n	800468c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2203      	movs	r2, #3
 8004686:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004688:	2b02      	cmp	r3, #2
 800468a:	d130      	bne.n	80046ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	2203      	movs	r2, #3
 8004698:	409a      	lsls	r2, r3
 800469a:	0013      	movs	r3, r2
 800469c:	43da      	mvns	r2, r3
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	4013      	ands	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	409a      	lsls	r2, r3
 80046ae:	0013      	movs	r3, r2
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046c2:	2201      	movs	r2, #1
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	409a      	lsls	r2, r3
 80046c8:	0013      	movs	r3, r2
 80046ca:	43da      	mvns	r2, r3
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	4013      	ands	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	091b      	lsrs	r3, r3, #4
 80046d8:	2201      	movs	r2, #1
 80046da:	401a      	ands	r2, r3
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	409a      	lsls	r2, r3
 80046e0:	0013      	movs	r3, r2
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2203      	movs	r2, #3
 80046f4:	4013      	ands	r3, r2
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d017      	beq.n	800472a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	2203      	movs	r2, #3
 8004706:	409a      	lsls	r2, r3
 8004708:	0013      	movs	r3, r2
 800470a:	43da      	mvns	r2, r3
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	4013      	ands	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	409a      	lsls	r2, r3
 800471c:	0013      	movs	r3, r2
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2203      	movs	r2, #3
 8004730:	4013      	ands	r3, r2
 8004732:	2b02      	cmp	r3, #2
 8004734:	d123      	bne.n	800477e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	08da      	lsrs	r2, r3, #3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	3208      	adds	r2, #8
 800473e:	0092      	lsls	r2, r2, #2
 8004740:	58d3      	ldr	r3, [r2, r3]
 8004742:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	2207      	movs	r2, #7
 8004748:	4013      	ands	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	220f      	movs	r2, #15
 800474e:	409a      	lsls	r2, r3
 8004750:	0013      	movs	r3, r2
 8004752:	43da      	mvns	r2, r3
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	4013      	ands	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	691a      	ldr	r2, [r3, #16]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2107      	movs	r1, #7
 8004762:	400b      	ands	r3, r1
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	409a      	lsls	r2, r3
 8004768:	0013      	movs	r3, r2
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	08da      	lsrs	r2, r3, #3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3208      	adds	r2, #8
 8004778:	0092      	lsls	r2, r2, #2
 800477a:	6939      	ldr	r1, [r7, #16]
 800477c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	2203      	movs	r2, #3
 800478a:	409a      	lsls	r2, r3
 800478c:	0013      	movs	r3, r2
 800478e:	43da      	mvns	r2, r3
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	4013      	ands	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2203      	movs	r2, #3
 800479c:	401a      	ands	r2, r3
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	409a      	lsls	r2, r3
 80047a4:	0013      	movs	r3, r2
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	23c0      	movs	r3, #192	; 0xc0
 80047b8:	029b      	lsls	r3, r3, #10
 80047ba:	4013      	ands	r3, r2
 80047bc:	d100      	bne.n	80047c0 <HAL_GPIO_Init+0x17c>
 80047be:	e09a      	b.n	80048f6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c0:	4b54      	ldr	r3, [pc, #336]	; (8004914 <HAL_GPIO_Init+0x2d0>)
 80047c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c4:	4b53      	ldr	r3, [pc, #332]	; (8004914 <HAL_GPIO_Init+0x2d0>)
 80047c6:	2101      	movs	r1, #1
 80047c8:	430a      	orrs	r2, r1
 80047ca:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80047cc:	4a52      	ldr	r2, [pc, #328]	; (8004918 <HAL_GPIO_Init+0x2d4>)
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	089b      	lsrs	r3, r3, #2
 80047d2:	3302      	adds	r3, #2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	589b      	ldr	r3, [r3, r2]
 80047d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2203      	movs	r2, #3
 80047de:	4013      	ands	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	220f      	movs	r2, #15
 80047e4:	409a      	lsls	r2, r3
 80047e6:	0013      	movs	r3, r2
 80047e8:	43da      	mvns	r2, r3
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	4013      	ands	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	23a0      	movs	r3, #160	; 0xa0
 80047f4:	05db      	lsls	r3, r3, #23
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d019      	beq.n	800482e <HAL_GPIO_Init+0x1ea>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a47      	ldr	r2, [pc, #284]	; (800491c <HAL_GPIO_Init+0x2d8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d013      	beq.n	800482a <HAL_GPIO_Init+0x1e6>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a46      	ldr	r2, [pc, #280]	; (8004920 <HAL_GPIO_Init+0x2dc>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00d      	beq.n	8004826 <HAL_GPIO_Init+0x1e2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a45      	ldr	r2, [pc, #276]	; (8004924 <HAL_GPIO_Init+0x2e0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d007      	beq.n	8004822 <HAL_GPIO_Init+0x1de>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a44      	ldr	r2, [pc, #272]	; (8004928 <HAL_GPIO_Init+0x2e4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d101      	bne.n	800481e <HAL_GPIO_Init+0x1da>
 800481a:	2305      	movs	r3, #5
 800481c:	e008      	b.n	8004830 <HAL_GPIO_Init+0x1ec>
 800481e:	2306      	movs	r3, #6
 8004820:	e006      	b.n	8004830 <HAL_GPIO_Init+0x1ec>
 8004822:	2303      	movs	r3, #3
 8004824:	e004      	b.n	8004830 <HAL_GPIO_Init+0x1ec>
 8004826:	2302      	movs	r3, #2
 8004828:	e002      	b.n	8004830 <HAL_GPIO_Init+0x1ec>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <HAL_GPIO_Init+0x1ec>
 800482e:	2300      	movs	r3, #0
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	2103      	movs	r1, #3
 8004834:	400a      	ands	r2, r1
 8004836:	0092      	lsls	r2, r2, #2
 8004838:	4093      	lsls	r3, r2
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004840:	4935      	ldr	r1, [pc, #212]	; (8004918 <HAL_GPIO_Init+0x2d4>)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	089b      	lsrs	r3, r3, #2
 8004846:	3302      	adds	r3, #2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800484e:	4b37      	ldr	r3, [pc, #220]	; (800492c <HAL_GPIO_Init+0x2e8>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	43da      	mvns	r2, r3
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	4013      	ands	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	2380      	movs	r3, #128	; 0x80
 8004864:	035b      	lsls	r3, r3, #13
 8004866:	4013      	ands	r3, r2
 8004868:	d003      	beq.n	8004872 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004872:	4b2e      	ldr	r3, [pc, #184]	; (800492c <HAL_GPIO_Init+0x2e8>)
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004878:	4b2c      	ldr	r3, [pc, #176]	; (800492c <HAL_GPIO_Init+0x2e8>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	43da      	mvns	r2, r3
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	4013      	ands	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	2380      	movs	r3, #128	; 0x80
 800488e:	039b      	lsls	r3, r3, #14
 8004890:	4013      	ands	r3, r2
 8004892:	d003      	beq.n	800489c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	4313      	orrs	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800489c:	4b23      	ldr	r3, [pc, #140]	; (800492c <HAL_GPIO_Init+0x2e8>)
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80048a2:	4b22      	ldr	r3, [pc, #136]	; (800492c <HAL_GPIO_Init+0x2e8>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	43da      	mvns	r2, r3
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4013      	ands	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	2380      	movs	r3, #128	; 0x80
 80048b8:	029b      	lsls	r3, r3, #10
 80048ba:	4013      	ands	r3, r2
 80048bc:	d003      	beq.n	80048c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80048c6:	4b19      	ldr	r3, [pc, #100]	; (800492c <HAL_GPIO_Init+0x2e8>)
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048cc:	4b17      	ldr	r3, [pc, #92]	; (800492c <HAL_GPIO_Init+0x2e8>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	43da      	mvns	r2, r3
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4013      	ands	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	2380      	movs	r3, #128	; 0x80
 80048e2:	025b      	lsls	r3, r3, #9
 80048e4:	4013      	ands	r3, r2
 80048e6:	d003      	beq.n	80048f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80048f0:	4b0e      	ldr	r3, [pc, #56]	; (800492c <HAL_GPIO_Init+0x2e8>)
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	3301      	adds	r3, #1
 80048fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	40da      	lsrs	r2, r3
 8004904:	1e13      	subs	r3, r2, #0
 8004906:	d000      	beq.n	800490a <HAL_GPIO_Init+0x2c6>
 8004908:	e6a8      	b.n	800465c <HAL_GPIO_Init+0x18>
  }
}
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	46c0      	nop			; (mov r8, r8)
 800490e:	46bd      	mov	sp, r7
 8004910:	b006      	add	sp, #24
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40021000 	.word	0x40021000
 8004918:	40010000 	.word	0x40010000
 800491c:	50000400 	.word	0x50000400
 8004920:	50000800 	.word	0x50000800
 8004924:	50000c00 	.word	0x50000c00
 8004928:	50001c00 	.word	0x50001c00
 800492c:	40010400 	.word	0x40010400

08004930 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e082      	b.n	8004a48 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2241      	movs	r2, #65	; 0x41
 8004946:	5c9b      	ldrb	r3, [r3, r2]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d107      	bne.n	800495e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2240      	movs	r2, #64	; 0x40
 8004952:	2100      	movs	r1, #0
 8004954:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	0018      	movs	r0, r3
 800495a:	f7fe ff35 	bl	80037c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2241      	movs	r2, #65	; 0x41
 8004962:	2124      	movs	r1, #36	; 0x24
 8004964:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2101      	movs	r1, #1
 8004972:	438a      	bics	r2, r1
 8004974:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4934      	ldr	r1, [pc, #208]	; (8004a50 <HAL_I2C_Init+0x120>)
 8004980:	400a      	ands	r2, r1
 8004982:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689a      	ldr	r2, [r3, #8]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4931      	ldr	r1, [pc, #196]	; (8004a54 <HAL_I2C_Init+0x124>)
 8004990:	400a      	ands	r2, r1
 8004992:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d108      	bne.n	80049ae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2180      	movs	r1, #128	; 0x80
 80049a6:	0209      	lsls	r1, r1, #8
 80049a8:	430a      	orrs	r2, r1
 80049aa:	609a      	str	r2, [r3, #8]
 80049ac:	e007      	b.n	80049be <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2184      	movs	r1, #132	; 0x84
 80049b8:	0209      	lsls	r1, r1, #8
 80049ba:	430a      	orrs	r2, r1
 80049bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d104      	bne.n	80049d0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2280      	movs	r2, #128	; 0x80
 80049cc:	0112      	lsls	r2, r2, #4
 80049ce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	491f      	ldr	r1, [pc, #124]	; (8004a58 <HAL_I2C_Init+0x128>)
 80049dc:	430a      	orrs	r2, r1
 80049de:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	491a      	ldr	r1, [pc, #104]	; (8004a54 <HAL_I2C_Init+0x124>)
 80049ec:	400a      	ands	r2, r1
 80049ee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69d9      	ldr	r1, [r3, #28]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1a      	ldr	r2, [r3, #32]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2101      	movs	r1, #1
 8004a26:	430a      	orrs	r2, r1
 8004a28:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2241      	movs	r2, #65	; 0x41
 8004a34:	2120      	movs	r1, #32
 8004a36:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2242      	movs	r2, #66	; 0x42
 8004a42:	2100      	movs	r1, #0
 8004a44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	0018      	movs	r0, r3
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b002      	add	sp, #8
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	f0ffffff 	.word	0xf0ffffff
 8004a54:	ffff7fff 	.word	0xffff7fff
 8004a58:	02008000 	.word	0x02008000

08004a5c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004a5c:	b590      	push	{r4, r7, lr}
 8004a5e:	b089      	sub	sp, #36	; 0x24
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	0008      	movs	r0, r1
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	0019      	movs	r1, r3
 8004a6a:	230a      	movs	r3, #10
 8004a6c:	18fb      	adds	r3, r7, r3
 8004a6e:	1c02      	adds	r2, r0, #0
 8004a70:	801a      	strh	r2, [r3, #0]
 8004a72:	2308      	movs	r3, #8
 8004a74:	18fb      	adds	r3, r7, r3
 8004a76:	1c0a      	adds	r2, r1, #0
 8004a78:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2241      	movs	r2, #65	; 0x41
 8004a7e:	5c9b      	ldrb	r3, [r3, r2]
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b20      	cmp	r3, #32
 8004a84:	d000      	beq.n	8004a88 <HAL_I2C_Master_Receive+0x2c>
 8004a86:	e0e8      	b.n	8004c5a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2240      	movs	r2, #64	; 0x40
 8004a8c:	5c9b      	ldrb	r3, [r3, r2]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d101      	bne.n	8004a96 <HAL_I2C_Master_Receive+0x3a>
 8004a92:	2302      	movs	r3, #2
 8004a94:	e0e2      	b.n	8004c5c <HAL_I2C_Master_Receive+0x200>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2240      	movs	r2, #64	; 0x40
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a9e:	f7ff fcef 	bl	8004480 <HAL_GetTick>
 8004aa2:	0003      	movs	r3, r0
 8004aa4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004aa6:	2380      	movs	r3, #128	; 0x80
 8004aa8:	0219      	lsls	r1, r3, #8
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	2319      	movs	r3, #25
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f000 f8fc 	bl	8004cb0 <I2C_WaitOnFlagUntilTimeout>
 8004ab8:	1e03      	subs	r3, r0, #0
 8004aba:	d001      	beq.n	8004ac0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e0cd      	b.n	8004c5c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2241      	movs	r2, #65	; 0x41
 8004ac4:	2122      	movs	r1, #34	; 0x22
 8004ac6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2242      	movs	r2, #66	; 0x42
 8004acc:	2110      	movs	r1, #16
 8004ace:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2208      	movs	r2, #8
 8004ae0:	18ba      	adds	r2, r7, r2
 8004ae2:	8812      	ldrh	r2, [r2, #0]
 8004ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2bff      	cmp	r3, #255	; 0xff
 8004af4:	d911      	bls.n	8004b1a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	22ff      	movs	r2, #255	; 0xff
 8004afa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	2380      	movs	r3, #128	; 0x80
 8004b04:	045c      	lsls	r4, r3, #17
 8004b06:	230a      	movs	r3, #10
 8004b08:	18fb      	adds	r3, r7, r3
 8004b0a:	8819      	ldrh	r1, [r3, #0]
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	4b55      	ldr	r3, [pc, #340]	; (8004c64 <HAL_I2C_Master_Receive+0x208>)
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	0023      	movs	r3, r4
 8004b14:	f000 fae0 	bl	80050d8 <I2C_TransferConfig>
 8004b18:	e076      	b.n	8004c08 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	2380      	movs	r3, #128	; 0x80
 8004b2c:	049c      	lsls	r4, r3, #18
 8004b2e:	230a      	movs	r3, #10
 8004b30:	18fb      	adds	r3, r7, r3
 8004b32:	8819      	ldrh	r1, [r3, #0]
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	4b4b      	ldr	r3, [pc, #300]	; (8004c64 <HAL_I2C_Master_Receive+0x208>)
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	0023      	movs	r3, r4
 8004b3c:	f000 facc 	bl	80050d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004b40:	e062      	b.n	8004c08 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f000 f943 	bl	8004dd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b4e:	1e03      	subs	r3, r0, #0
 8004b50:	d001      	beq.n	8004b56 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e082      	b.n	8004c5c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d03a      	beq.n	8004c08 <HAL_I2C_Master_Receive+0x1ac>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d136      	bne.n	8004c08 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	0013      	movs	r3, r2
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2180      	movs	r1, #128	; 0x80
 8004ba8:	f000 f882 	bl	8004cb0 <I2C_WaitOnFlagUntilTimeout>
 8004bac:	1e03      	subs	r3, r0, #0
 8004bae:	d001      	beq.n	8004bb4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e053      	b.n	8004c5c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	2bff      	cmp	r3, #255	; 0xff
 8004bbc:	d911      	bls.n	8004be2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	22ff      	movs	r2, #255	; 0xff
 8004bc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	2380      	movs	r3, #128	; 0x80
 8004bcc:	045c      	lsls	r4, r3, #17
 8004bce:	230a      	movs	r3, #10
 8004bd0:	18fb      	adds	r3, r7, r3
 8004bd2:	8819      	ldrh	r1, [r3, #0]
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	0023      	movs	r3, r4
 8004bdc:	f000 fa7c 	bl	80050d8 <I2C_TransferConfig>
 8004be0:	e012      	b.n	8004c08 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	2380      	movs	r3, #128	; 0x80
 8004bf4:	049c      	lsls	r4, r3, #18
 8004bf6:	230a      	movs	r3, #10
 8004bf8:	18fb      	adds	r3, r7, r3
 8004bfa:	8819      	ldrh	r1, [r3, #0]
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	0023      	movs	r3, r4
 8004c04:	f000 fa68 	bl	80050d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d197      	bne.n	8004b42 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f000 f897 	bl	8004d4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c1e:	1e03      	subs	r3, r0, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e01a      	b.n	8004c5c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	490b      	ldr	r1, [pc, #44]	; (8004c68 <HAL_I2C_Master_Receive+0x20c>)
 8004c3a:	400a      	ands	r2, r1
 8004c3c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2241      	movs	r2, #65	; 0x41
 8004c42:	2120      	movs	r1, #32
 8004c44:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2242      	movs	r2, #66	; 0x42
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2240      	movs	r2, #64	; 0x40
 8004c52:	2100      	movs	r1, #0
 8004c54:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	e000      	b.n	8004c5c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004c5a:	2302      	movs	r3, #2
  }
}
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	b007      	add	sp, #28
 8004c62:	bd90      	pop	{r4, r7, pc}
 8004c64:	80002400 	.word	0x80002400
 8004c68:	fe00e800 	.word	0xfe00e800

08004c6c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d103      	bne.n	8004c8a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2200      	movs	r2, #0
 8004c88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	2201      	movs	r2, #1
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d007      	beq.n	8004ca8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699a      	ldr	r2, [r3, #24]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	619a      	str	r2, [r3, #24]
  }
}
 8004ca8:	46c0      	nop			; (mov r8, r8)
 8004caa:	46bd      	mov	sp, r7
 8004cac:	b002      	add	sp, #8
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	1dfb      	adds	r3, r7, #7
 8004cbe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cc0:	e030      	b.n	8004d24 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	d02d      	beq.n	8004d24 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc8:	f7ff fbda 	bl	8004480 <HAL_GetTick>
 8004ccc:	0002      	movs	r2, r0
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d302      	bcc.n	8004cde <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d122      	bne.n	8004d24 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	425a      	negs	r2, r3
 8004cee:	4153      	adcs	r3, r2
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	001a      	movs	r2, r3
 8004cf4:	1dfb      	adds	r3, r7, #7
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d113      	bne.n	8004d24 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d00:	2220      	movs	r2, #32
 8004d02:	431a      	orrs	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2241      	movs	r2, #65	; 0x41
 8004d0c:	2120      	movs	r1, #32
 8004d0e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2242      	movs	r2, #66	; 0x42
 8004d14:	2100      	movs	r1, #0
 8004d16:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2240      	movs	r2, #64	; 0x40
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e00f      	b.n	8004d44 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	425a      	negs	r2, r3
 8004d34:	4153      	adcs	r3, r2
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	001a      	movs	r2, r3
 8004d3a:	1dfb      	adds	r3, r7, #7
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d0bf      	beq.n	8004cc2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	0018      	movs	r0, r3
 8004d46:	46bd      	mov	sp, r7
 8004d48:	b004      	add	sp, #16
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d58:	e02f      	b.n	8004dba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	68b9      	ldr	r1, [r7, #8]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f000 f8b9 	bl	8004ed8 <I2C_IsErrorOccurred>
 8004d66:	1e03      	subs	r3, r0, #0
 8004d68:	d001      	beq.n	8004d6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e02d      	b.n	8004dca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6e:	f7ff fb87 	bl	8004480 <HAL_GetTick>
 8004d72:	0002      	movs	r2, r0
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d302      	bcc.n	8004d84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d11a      	bne.n	8004dba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	d013      	beq.n	8004dba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d96:	2220      	movs	r2, #32
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2241      	movs	r2, #65	; 0x41
 8004da2:	2120      	movs	r1, #32
 8004da4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2242      	movs	r2, #66	; 0x42
 8004daa:	2100      	movs	r1, #0
 8004dac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2240      	movs	r2, #64	; 0x40
 8004db2:	2100      	movs	r1, #0
 8004db4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e007      	b.n	8004dca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d1c8      	bne.n	8004d5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	0018      	movs	r0, r3
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b004      	add	sp, #16
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004de0:	e06b      	b.n	8004eba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	68b9      	ldr	r1, [r7, #8]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	0018      	movs	r0, r3
 8004dea:	f000 f875 	bl	8004ed8 <I2C_IsErrorOccurred>
 8004dee:	1e03      	subs	r3, r0, #0
 8004df0:	d001      	beq.n	8004df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e069      	b.n	8004eca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	4013      	ands	r3, r2
 8004e00:	2b20      	cmp	r3, #32
 8004e02:	d138      	bne.n	8004e76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	2204      	movs	r2, #4
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d105      	bne.n	8004e1e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e055      	b.n	8004eca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	2210      	movs	r2, #16
 8004e26:	4013      	ands	r3, r2
 8004e28:	2b10      	cmp	r3, #16
 8004e2a:	d107      	bne.n	8004e3c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2210      	movs	r2, #16
 8004e32:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2204      	movs	r2, #4
 8004e38:	645a      	str	r2, [r3, #68]	; 0x44
 8004e3a:	e002      	b.n	8004e42 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2220      	movs	r2, #32
 8004e48:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	491f      	ldr	r1, [pc, #124]	; (8004ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004e56:	400a      	ands	r2, r1
 8004e58:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2241      	movs	r2, #65	; 0x41
 8004e5e:	2120      	movs	r1, #32
 8004e60:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2242      	movs	r2, #66	; 0x42
 8004e66:	2100      	movs	r1, #0
 8004e68:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2240      	movs	r2, #64	; 0x40
 8004e6e:	2100      	movs	r1, #0
 8004e70:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e029      	b.n	8004eca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e76:	f7ff fb03 	bl	8004480 <HAL_GetTick>
 8004e7a:	0002      	movs	r2, r0
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d302      	bcc.n	8004e8c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d116      	bne.n	8004eba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	2204      	movs	r2, #4
 8004e94:	4013      	ands	r3, r2
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d00f      	beq.n	8004eba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2241      	movs	r2, #65	; 0x41
 8004eaa:	2120      	movs	r1, #32
 8004eac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2240      	movs	r2, #64	; 0x40
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e007      	b.n	8004eca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	2204      	movs	r2, #4
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d18c      	bne.n	8004de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	0018      	movs	r0, r3
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	b004      	add	sp, #16
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	46c0      	nop			; (mov r8, r8)
 8004ed4:	fe00e800 	.word	0xfe00e800

08004ed8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed8:	b590      	push	{r4, r7, lr}
 8004eda:	b08b      	sub	sp, #44	; 0x2c
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee4:	2327      	movs	r3, #39	; 0x27
 8004ee6:	18fb      	adds	r3, r7, r3
 8004ee8:	2200      	movs	r2, #0
 8004eea:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	2210      	movs	r2, #16
 8004f00:	4013      	ands	r3, r2
 8004f02:	d100      	bne.n	8004f06 <I2C_IsErrorOccurred+0x2e>
 8004f04:	e082      	b.n	800500c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2210      	movs	r2, #16
 8004f0c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f0e:	e060      	b.n	8004fd2 <I2C_IsErrorOccurred+0xfa>
 8004f10:	2427      	movs	r4, #39	; 0x27
 8004f12:	193b      	adds	r3, r7, r4
 8004f14:	193a      	adds	r2, r7, r4
 8004f16:	7812      	ldrb	r2, [r2, #0]
 8004f18:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	d058      	beq.n	8004fd2 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f20:	f7ff faae 	bl	8004480 <HAL_GetTick>
 8004f24:	0002      	movs	r2, r0
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d306      	bcc.n	8004f3e <I2C_IsErrorOccurred+0x66>
 8004f30:	193b      	adds	r3, r7, r4
 8004f32:	193a      	adds	r2, r7, r4
 8004f34:	7812      	ldrb	r2, [r2, #0]
 8004f36:	701a      	strb	r2, [r3, #0]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d149      	bne.n	8004fd2 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	2380      	movs	r3, #128	; 0x80
 8004f46:	01db      	lsls	r3, r3, #7
 8004f48:	4013      	ands	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004f4c:	2013      	movs	r0, #19
 8004f4e:	183b      	adds	r3, r7, r0
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	2142      	movs	r1, #66	; 0x42
 8004f54:	5c52      	ldrb	r2, [r2, r1]
 8004f56:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	699a      	ldr	r2, [r3, #24]
 8004f5e:	2380      	movs	r3, #128	; 0x80
 8004f60:	021b      	lsls	r3, r3, #8
 8004f62:	401a      	ands	r2, r3
 8004f64:	2380      	movs	r3, #128	; 0x80
 8004f66:	021b      	lsls	r3, r3, #8
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d126      	bne.n	8004fba <I2C_IsErrorOccurred+0xe2>
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	2380      	movs	r3, #128	; 0x80
 8004f70:	01db      	lsls	r3, r3, #7
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d021      	beq.n	8004fba <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8004f76:	183b      	adds	r3, r7, r0
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d01d      	beq.n	8004fba <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2180      	movs	r1, #128	; 0x80
 8004f8a:	01c9      	lsls	r1, r1, #7
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f90:	f7ff fa76 	bl	8004480 <HAL_GetTick>
 8004f94:	0003      	movs	r3, r0
 8004f96:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f98:	e00f      	b.n	8004fba <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f9a:	f7ff fa71 	bl	8004480 <HAL_GetTick>
 8004f9e:	0002      	movs	r2, r0
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b19      	cmp	r3, #25
 8004fa6:	d908      	bls.n	8004fba <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	2220      	movs	r2, #32
 8004fac:	4313      	orrs	r3, r2
 8004fae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004fb0:	2327      	movs	r3, #39	; 0x27
 8004fb2:	18fb      	adds	r3, r7, r3
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	701a      	strb	r2, [r3, #0]

              break;
 8004fb8:	e00b      	b.n	8004fd2 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	2127      	movs	r1, #39	; 0x27
 8004fc6:	187a      	adds	r2, r7, r1
 8004fc8:	1879      	adds	r1, r7, r1
 8004fca:	7809      	ldrb	r1, [r1, #0]
 8004fcc:	7011      	strb	r1, [r2, #0]
 8004fce:	2b20      	cmp	r3, #32
 8004fd0:	d1e3      	bne.n	8004f9a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	4013      	ands	r3, r2
 8004fdc:	2b20      	cmp	r3, #32
 8004fde:	d004      	beq.n	8004fea <I2C_IsErrorOccurred+0x112>
 8004fe0:	2327      	movs	r3, #39	; 0x27
 8004fe2:	18fb      	adds	r3, r7, r3
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d092      	beq.n	8004f10 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004fea:	2327      	movs	r3, #39	; 0x27
 8004fec:	18fb      	adds	r3, r7, r3
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d103      	bne.n	8004ffc <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	2204      	movs	r2, #4
 8005000:	4313      	orrs	r3, r2
 8005002:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005004:	2327      	movs	r3, #39	; 0x27
 8005006:	18fb      	adds	r3, r7, r3
 8005008:	2201      	movs	r2, #1
 800500a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	2380      	movs	r3, #128	; 0x80
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	4013      	ands	r3, r2
 800501c:	d00c      	beq.n	8005038 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	2201      	movs	r2, #1
 8005022:	4313      	orrs	r3, r2
 8005024:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2280      	movs	r2, #128	; 0x80
 800502c:	0052      	lsls	r2, r2, #1
 800502e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005030:	2327      	movs	r3, #39	; 0x27
 8005032:	18fb      	adds	r3, r7, r3
 8005034:	2201      	movs	r2, #1
 8005036:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	2380      	movs	r3, #128	; 0x80
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	4013      	ands	r3, r2
 8005040:	d00c      	beq.n	800505c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005042:	6a3b      	ldr	r3, [r7, #32]
 8005044:	2208      	movs	r2, #8
 8005046:	4313      	orrs	r3, r2
 8005048:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2280      	movs	r2, #128	; 0x80
 8005050:	00d2      	lsls	r2, r2, #3
 8005052:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005054:	2327      	movs	r3, #39	; 0x27
 8005056:	18fb      	adds	r3, r7, r3
 8005058:	2201      	movs	r2, #1
 800505a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	2380      	movs	r3, #128	; 0x80
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4013      	ands	r3, r2
 8005064:	d00c      	beq.n	8005080 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	2202      	movs	r2, #2
 800506a:	4313      	orrs	r3, r2
 800506c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2280      	movs	r2, #128	; 0x80
 8005074:	0092      	lsls	r2, r2, #2
 8005076:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005078:	2327      	movs	r3, #39	; 0x27
 800507a:	18fb      	adds	r3, r7, r3
 800507c:	2201      	movs	r2, #1
 800507e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005080:	2327      	movs	r3, #39	; 0x27
 8005082:	18fb      	adds	r3, r7, r3
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d01d      	beq.n	80050c6 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	0018      	movs	r0, r3
 800508e:	f7ff fded 	bl	8004c6c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	490d      	ldr	r1, [pc, #52]	; (80050d4 <I2C_IsErrorOccurred+0x1fc>)
 800509e:	400a      	ands	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	431a      	orrs	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2241      	movs	r2, #65	; 0x41
 80050b2:	2120      	movs	r1, #32
 80050b4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2242      	movs	r2, #66	; 0x42
 80050ba:	2100      	movs	r1, #0
 80050bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2240      	movs	r2, #64	; 0x40
 80050c2:	2100      	movs	r1, #0
 80050c4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80050c6:	2327      	movs	r3, #39	; 0x27
 80050c8:	18fb      	adds	r3, r7, r3
 80050ca:	781b      	ldrb	r3, [r3, #0]
}
 80050cc:	0018      	movs	r0, r3
 80050ce:	46bd      	mov	sp, r7
 80050d0:	b00b      	add	sp, #44	; 0x2c
 80050d2:	bd90      	pop	{r4, r7, pc}
 80050d4:	fe00e800 	.word	0xfe00e800

080050d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80050d8:	b590      	push	{r4, r7, lr}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	0008      	movs	r0, r1
 80050e2:	0011      	movs	r1, r2
 80050e4:	607b      	str	r3, [r7, #4]
 80050e6:	240a      	movs	r4, #10
 80050e8:	193b      	adds	r3, r7, r4
 80050ea:	1c02      	adds	r2, r0, #0
 80050ec:	801a      	strh	r2, [r3, #0]
 80050ee:	2009      	movs	r0, #9
 80050f0:	183b      	adds	r3, r7, r0
 80050f2:	1c0a      	adds	r2, r1, #0
 80050f4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050f6:	193b      	adds	r3, r7, r4
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	059b      	lsls	r3, r3, #22
 80050fc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80050fe:	183b      	adds	r3, r7, r0
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	0419      	lsls	r1, r3, #16
 8005104:	23ff      	movs	r3, #255	; 0xff
 8005106:	041b      	lsls	r3, r3, #16
 8005108:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800510a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005112:	4313      	orrs	r3, r2
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	085b      	lsrs	r3, r3, #1
 8005118:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005122:	0d51      	lsrs	r1, r2, #21
 8005124:	2280      	movs	r2, #128	; 0x80
 8005126:	00d2      	lsls	r2, r2, #3
 8005128:	400a      	ands	r2, r1
 800512a:	4907      	ldr	r1, [pc, #28]	; (8005148 <I2C_TransferConfig+0x70>)
 800512c:	430a      	orrs	r2, r1
 800512e:	43d2      	mvns	r2, r2
 8005130:	401a      	ands	r2, r3
 8005132:	0011      	movs	r1, r2
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	430a      	orrs	r2, r1
 800513c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	46bd      	mov	sp, r7
 8005142:	b007      	add	sp, #28
 8005144:	bd90      	pop	{r4, r7, pc}
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	03ff63ff 	.word	0x03ff63ff

0800514c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2241      	movs	r2, #65	; 0x41
 800515a:	5c9b      	ldrb	r3, [r3, r2]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b20      	cmp	r3, #32
 8005160:	d138      	bne.n	80051d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2240      	movs	r2, #64	; 0x40
 8005166:	5c9b      	ldrb	r3, [r3, r2]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800516c:	2302      	movs	r3, #2
 800516e:	e032      	b.n	80051d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2240      	movs	r2, #64	; 0x40
 8005174:	2101      	movs	r1, #1
 8005176:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2241      	movs	r2, #65	; 0x41
 800517c:	2124      	movs	r1, #36	; 0x24
 800517e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2101      	movs	r1, #1
 800518c:	438a      	bics	r2, r1
 800518e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4911      	ldr	r1, [pc, #68]	; (80051e0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800519c:	400a      	ands	r2, r1
 800519e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6819      	ldr	r1, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2101      	movs	r1, #1
 80051bc:	430a      	orrs	r2, r1
 80051be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2241      	movs	r2, #65	; 0x41
 80051c4:	2120      	movs	r1, #32
 80051c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2240      	movs	r2, #64	; 0x40
 80051cc:	2100      	movs	r1, #0
 80051ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	e000      	b.n	80051d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051d4:	2302      	movs	r3, #2
  }
}
 80051d6:	0018      	movs	r0, r3
 80051d8:	46bd      	mov	sp, r7
 80051da:	b002      	add	sp, #8
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	ffffefff 	.word	0xffffefff

080051e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2241      	movs	r2, #65	; 0x41
 80051f2:	5c9b      	ldrb	r3, [r3, r2]
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b20      	cmp	r3, #32
 80051f8:	d139      	bne.n	800526e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2240      	movs	r2, #64	; 0x40
 80051fe:	5c9b      	ldrb	r3, [r3, r2]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d101      	bne.n	8005208 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005204:	2302      	movs	r3, #2
 8005206:	e033      	b.n	8005270 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2240      	movs	r2, #64	; 0x40
 800520c:	2101      	movs	r1, #1
 800520e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2241      	movs	r2, #65	; 0x41
 8005214:	2124      	movs	r1, #36	; 0x24
 8005216:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2101      	movs	r1, #1
 8005224:	438a      	bics	r2, r1
 8005226:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4a11      	ldr	r2, [pc, #68]	; (8005278 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005234:	4013      	ands	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	021b      	lsls	r3, r3, #8
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2101      	movs	r1, #1
 8005256:	430a      	orrs	r2, r1
 8005258:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2241      	movs	r2, #65	; 0x41
 800525e:	2120      	movs	r1, #32
 8005260:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2240      	movs	r2, #64	; 0x40
 8005266:	2100      	movs	r1, #0
 8005268:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800526a:	2300      	movs	r3, #0
 800526c:	e000      	b.n	8005270 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800526e:	2302      	movs	r3, #2
  }
}
 8005270:	0018      	movs	r0, r3
 8005272:	46bd      	mov	sp, r7
 8005274:	b004      	add	sp, #16
 8005276:	bd80      	pop	{r7, pc}
 8005278:	fffff0ff 	.word	0xfffff0ff

0800527c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800527c:	b5b0      	push	{r4, r5, r7, lr}
 800527e:	b08a      	sub	sp, #40	; 0x28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d102      	bne.n	8005290 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	f000 fbaf 	bl	80059ee <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005290:	4bcf      	ldr	r3, [pc, #828]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	220c      	movs	r2, #12
 8005296:	4013      	ands	r3, r2
 8005298:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800529a:	4bcd      	ldr	r3, [pc, #820]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	2380      	movs	r3, #128	; 0x80
 80052a0:	025b      	lsls	r3, r3, #9
 80052a2:	4013      	ands	r3, r2
 80052a4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2201      	movs	r2, #1
 80052ac:	4013      	ands	r3, r2
 80052ae:	d100      	bne.n	80052b2 <HAL_RCC_OscConfig+0x36>
 80052b0:	e07e      	b.n	80053b0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d007      	beq.n	80052c8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	2b0c      	cmp	r3, #12
 80052bc:	d112      	bne.n	80052e4 <HAL_RCC_OscConfig+0x68>
 80052be:	69fa      	ldr	r2, [r7, #28]
 80052c0:	2380      	movs	r3, #128	; 0x80
 80052c2:	025b      	lsls	r3, r3, #9
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d10d      	bne.n	80052e4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052c8:	4bc1      	ldr	r3, [pc, #772]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	2380      	movs	r3, #128	; 0x80
 80052ce:	029b      	lsls	r3, r3, #10
 80052d0:	4013      	ands	r3, r2
 80052d2:	d100      	bne.n	80052d6 <HAL_RCC_OscConfig+0x5a>
 80052d4:	e06b      	b.n	80053ae <HAL_RCC_OscConfig+0x132>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d167      	bne.n	80053ae <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	f000 fb85 	bl	80059ee <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	2380      	movs	r3, #128	; 0x80
 80052ea:	025b      	lsls	r3, r3, #9
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d107      	bne.n	8005300 <HAL_RCC_OscConfig+0x84>
 80052f0:	4bb7      	ldr	r3, [pc, #732]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	4bb6      	ldr	r3, [pc, #728]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 80052f6:	2180      	movs	r1, #128	; 0x80
 80052f8:	0249      	lsls	r1, r1, #9
 80052fa:	430a      	orrs	r2, r1
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	e027      	b.n	8005350 <HAL_RCC_OscConfig+0xd4>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	23a0      	movs	r3, #160	; 0xa0
 8005306:	02db      	lsls	r3, r3, #11
 8005308:	429a      	cmp	r2, r3
 800530a:	d10e      	bne.n	800532a <HAL_RCC_OscConfig+0xae>
 800530c:	4bb0      	ldr	r3, [pc, #704]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	4baf      	ldr	r3, [pc, #700]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 8005312:	2180      	movs	r1, #128	; 0x80
 8005314:	02c9      	lsls	r1, r1, #11
 8005316:	430a      	orrs	r2, r1
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	4bad      	ldr	r3, [pc, #692]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	4bac      	ldr	r3, [pc, #688]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 8005320:	2180      	movs	r1, #128	; 0x80
 8005322:	0249      	lsls	r1, r1, #9
 8005324:	430a      	orrs	r2, r1
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	e012      	b.n	8005350 <HAL_RCC_OscConfig+0xd4>
 800532a:	4ba9      	ldr	r3, [pc, #676]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	4ba8      	ldr	r3, [pc, #672]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 8005330:	49a8      	ldr	r1, [pc, #672]	; (80055d4 <HAL_RCC_OscConfig+0x358>)
 8005332:	400a      	ands	r2, r1
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	4ba6      	ldr	r3, [pc, #664]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	2380      	movs	r3, #128	; 0x80
 800533c:	025b      	lsls	r3, r3, #9
 800533e:	4013      	ands	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4ba2      	ldr	r3, [pc, #648]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	4ba1      	ldr	r3, [pc, #644]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 800534a:	49a3      	ldr	r1, [pc, #652]	; (80055d8 <HAL_RCC_OscConfig+0x35c>)
 800534c:	400a      	ands	r2, r1
 800534e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d015      	beq.n	8005384 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005358:	f7ff f892 	bl	8004480 <HAL_GetTick>
 800535c:	0003      	movs	r3, r0
 800535e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005360:	e009      	b.n	8005376 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005362:	f7ff f88d 	bl	8004480 <HAL_GetTick>
 8005366:	0002      	movs	r2, r0
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b64      	cmp	r3, #100	; 0x64
 800536e:	d902      	bls.n	8005376 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	f000 fb3c 	bl	80059ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005376:	4b96      	ldr	r3, [pc, #600]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	2380      	movs	r3, #128	; 0x80
 800537c:	029b      	lsls	r3, r3, #10
 800537e:	4013      	ands	r3, r2
 8005380:	d0ef      	beq.n	8005362 <HAL_RCC_OscConfig+0xe6>
 8005382:	e015      	b.n	80053b0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005384:	f7ff f87c 	bl	8004480 <HAL_GetTick>
 8005388:	0003      	movs	r3, r0
 800538a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800538c:	e008      	b.n	80053a0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800538e:	f7ff f877 	bl	8004480 <HAL_GetTick>
 8005392:	0002      	movs	r2, r0
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b64      	cmp	r3, #100	; 0x64
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e326      	b.n	80059ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053a0:	4b8b      	ldr	r3, [pc, #556]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	2380      	movs	r3, #128	; 0x80
 80053a6:	029b      	lsls	r3, r3, #10
 80053a8:	4013      	ands	r3, r2
 80053aa:	d1f0      	bne.n	800538e <HAL_RCC_OscConfig+0x112>
 80053ac:	e000      	b.n	80053b0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2202      	movs	r2, #2
 80053b6:	4013      	ands	r3, r2
 80053b8:	d100      	bne.n	80053bc <HAL_RCC_OscConfig+0x140>
 80053ba:	e08b      	b.n	80054d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	d005      	beq.n	80053d4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	2b0c      	cmp	r3, #12
 80053cc:	d13e      	bne.n	800544c <HAL_RCC_OscConfig+0x1d0>
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d13b      	bne.n	800544c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80053d4:	4b7e      	ldr	r3, [pc, #504]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2204      	movs	r2, #4
 80053da:	4013      	ands	r3, r2
 80053dc:	d004      	beq.n	80053e8 <HAL_RCC_OscConfig+0x16c>
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e302      	b.n	80059ee <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e8:	4b79      	ldr	r3, [pc, #484]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	4a7b      	ldr	r2, [pc, #492]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	0019      	movs	r1, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	021a      	lsls	r2, r3, #8
 80053f8:	4b75      	ldr	r3, [pc, #468]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 80053fa:	430a      	orrs	r2, r1
 80053fc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80053fe:	4b74      	ldr	r3, [pc, #464]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2209      	movs	r2, #9
 8005404:	4393      	bics	r3, r2
 8005406:	0019      	movs	r1, r3
 8005408:	4b71      	ldr	r3, [pc, #452]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	430a      	orrs	r2, r1
 800540e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005410:	f000 fc40 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8005414:	0001      	movs	r1, r0
 8005416:	4b6e      	ldr	r3, [pc, #440]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	091b      	lsrs	r3, r3, #4
 800541c:	220f      	movs	r2, #15
 800541e:	4013      	ands	r3, r2
 8005420:	4a6f      	ldr	r2, [pc, #444]	; (80055e0 <HAL_RCC_OscConfig+0x364>)
 8005422:	5cd3      	ldrb	r3, [r2, r3]
 8005424:	000a      	movs	r2, r1
 8005426:	40da      	lsrs	r2, r3
 8005428:	4b6e      	ldr	r3, [pc, #440]	; (80055e4 <HAL_RCC_OscConfig+0x368>)
 800542a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800542c:	4b6e      	ldr	r3, [pc, #440]	; (80055e8 <HAL_RCC_OscConfig+0x36c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2513      	movs	r5, #19
 8005432:	197c      	adds	r4, r7, r5
 8005434:	0018      	movs	r0, r3
 8005436:	f7fe ffdd 	bl	80043f4 <HAL_InitTick>
 800543a:	0003      	movs	r3, r0
 800543c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800543e:	197b      	adds	r3, r7, r5
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d046      	beq.n	80054d4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8005446:	197b      	adds	r3, r7, r5
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	e2d0      	b.n	80059ee <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d027      	beq.n	80054a2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005452:	4b5f      	ldr	r3, [pc, #380]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2209      	movs	r2, #9
 8005458:	4393      	bics	r3, r2
 800545a:	0019      	movs	r1, r3
 800545c:	4b5c      	ldr	r3, [pc, #368]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	430a      	orrs	r2, r1
 8005462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005464:	f7ff f80c 	bl	8004480 <HAL_GetTick>
 8005468:	0003      	movs	r3, r0
 800546a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800546c:	e008      	b.n	8005480 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800546e:	f7ff f807 	bl	8004480 <HAL_GetTick>
 8005472:	0002      	movs	r2, r0
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e2b6      	b.n	80059ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005480:	4b53      	ldr	r3, [pc, #332]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2204      	movs	r2, #4
 8005486:	4013      	ands	r3, r2
 8005488:	d0f1      	beq.n	800546e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800548a:	4b51      	ldr	r3, [pc, #324]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	4a53      	ldr	r2, [pc, #332]	; (80055dc <HAL_RCC_OscConfig+0x360>)
 8005490:	4013      	ands	r3, r2
 8005492:	0019      	movs	r1, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	021a      	lsls	r2, r3, #8
 800549a:	4b4d      	ldr	r3, [pc, #308]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 800549c:	430a      	orrs	r2, r1
 800549e:	605a      	str	r2, [r3, #4]
 80054a0:	e018      	b.n	80054d4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054a2:	4b4b      	ldr	r3, [pc, #300]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	4b4a      	ldr	r3, [pc, #296]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 80054a8:	2101      	movs	r1, #1
 80054aa:	438a      	bics	r2, r1
 80054ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ae:	f7fe ffe7 	bl	8004480 <HAL_GetTick>
 80054b2:	0003      	movs	r3, r0
 80054b4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054b8:	f7fe ffe2 	bl	8004480 <HAL_GetTick>
 80054bc:	0002      	movs	r2, r0
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e291      	b.n	80059ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054ca:	4b41      	ldr	r3, [pc, #260]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2204      	movs	r2, #4
 80054d0:	4013      	ands	r3, r2
 80054d2:	d1f1      	bne.n	80054b8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2210      	movs	r2, #16
 80054da:	4013      	ands	r3, r2
 80054dc:	d100      	bne.n	80054e0 <HAL_RCC_OscConfig+0x264>
 80054de:	e0a1      	b.n	8005624 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d140      	bne.n	8005568 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054e6:	4b3a      	ldr	r3, [pc, #232]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	2380      	movs	r3, #128	; 0x80
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4013      	ands	r3, r2
 80054f0:	d005      	beq.n	80054fe <HAL_RCC_OscConfig+0x282>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e277      	b.n	80059ee <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054fe:	4b34      	ldr	r3, [pc, #208]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	4a3a      	ldr	r2, [pc, #232]	; (80055ec <HAL_RCC_OscConfig+0x370>)
 8005504:	4013      	ands	r3, r2
 8005506:	0019      	movs	r1, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800550c:	4b30      	ldr	r3, [pc, #192]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 800550e:	430a      	orrs	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005512:	4b2f      	ldr	r3, [pc, #188]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	021b      	lsls	r3, r3, #8
 8005518:	0a19      	lsrs	r1, r3, #8
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	061a      	lsls	r2, r3, #24
 8005520:	4b2b      	ldr	r3, [pc, #172]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 8005522:	430a      	orrs	r2, r1
 8005524:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	0b5b      	lsrs	r3, r3, #13
 800552c:	3301      	adds	r3, #1
 800552e:	2280      	movs	r2, #128	; 0x80
 8005530:	0212      	lsls	r2, r2, #8
 8005532:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005534:	4b26      	ldr	r3, [pc, #152]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	091b      	lsrs	r3, r3, #4
 800553a:	210f      	movs	r1, #15
 800553c:	400b      	ands	r3, r1
 800553e:	4928      	ldr	r1, [pc, #160]	; (80055e0 <HAL_RCC_OscConfig+0x364>)
 8005540:	5ccb      	ldrb	r3, [r1, r3]
 8005542:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005544:	4b27      	ldr	r3, [pc, #156]	; (80055e4 <HAL_RCC_OscConfig+0x368>)
 8005546:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005548:	4b27      	ldr	r3, [pc, #156]	; (80055e8 <HAL_RCC_OscConfig+0x36c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2513      	movs	r5, #19
 800554e:	197c      	adds	r4, r7, r5
 8005550:	0018      	movs	r0, r3
 8005552:	f7fe ff4f 	bl	80043f4 <HAL_InitTick>
 8005556:	0003      	movs	r3, r0
 8005558:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800555a:	197b      	adds	r3, r7, r5
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d060      	beq.n	8005624 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8005562:	197b      	adds	r3, r7, r5
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	e242      	b.n	80059ee <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	69db      	ldr	r3, [r3, #28]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d03f      	beq.n	80055f0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005570:	4b17      	ldr	r3, [pc, #92]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	4b16      	ldr	r3, [pc, #88]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 8005576:	2180      	movs	r1, #128	; 0x80
 8005578:	0049      	lsls	r1, r1, #1
 800557a:	430a      	orrs	r2, r1
 800557c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800557e:	f7fe ff7f 	bl	8004480 <HAL_GetTick>
 8005582:	0003      	movs	r3, r0
 8005584:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005588:	f7fe ff7a 	bl	8004480 <HAL_GetTick>
 800558c:	0002      	movs	r2, r0
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e229      	b.n	80059ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800559a:	4b0d      	ldr	r3, [pc, #52]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	2380      	movs	r3, #128	; 0x80
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4013      	ands	r3, r2
 80055a4:	d0f0      	beq.n	8005588 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055a6:	4b0a      	ldr	r3, [pc, #40]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	4a10      	ldr	r2, [pc, #64]	; (80055ec <HAL_RCC_OscConfig+0x370>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	0019      	movs	r1, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055b4:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 80055b6:	430a      	orrs	r2, r1
 80055b8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055ba:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	0a19      	lsrs	r1, r3, #8
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	061a      	lsls	r2, r3, #24
 80055c8:	4b01      	ldr	r3, [pc, #4]	; (80055d0 <HAL_RCC_OscConfig+0x354>)
 80055ca:	430a      	orrs	r2, r1
 80055cc:	605a      	str	r2, [r3, #4]
 80055ce:	e029      	b.n	8005624 <HAL_RCC_OscConfig+0x3a8>
 80055d0:	40021000 	.word	0x40021000
 80055d4:	fffeffff 	.word	0xfffeffff
 80055d8:	fffbffff 	.word	0xfffbffff
 80055dc:	ffffe0ff 	.word	0xffffe0ff
 80055e0:	08009ccc 	.word	0x08009ccc
 80055e4:	20000000 	.word	0x20000000
 80055e8:	20000004 	.word	0x20000004
 80055ec:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80055f0:	4bbd      	ldr	r3, [pc, #756]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	4bbc      	ldr	r3, [pc, #752]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 80055f6:	49bd      	ldr	r1, [pc, #756]	; (80058ec <HAL_RCC_OscConfig+0x670>)
 80055f8:	400a      	ands	r2, r1
 80055fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055fc:	f7fe ff40 	bl	8004480 <HAL_GetTick>
 8005600:	0003      	movs	r3, r0
 8005602:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005606:	f7fe ff3b 	bl	8004480 <HAL_GetTick>
 800560a:	0002      	movs	r2, r0
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e1ea      	b.n	80059ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005618:	4bb3      	ldr	r3, [pc, #716]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	2380      	movs	r3, #128	; 0x80
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4013      	ands	r3, r2
 8005622:	d1f0      	bne.n	8005606 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2208      	movs	r2, #8
 800562a:	4013      	ands	r3, r2
 800562c:	d036      	beq.n	800569c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d019      	beq.n	800566a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005636:	4bac      	ldr	r3, [pc, #688]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 8005638:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800563a:	4bab      	ldr	r3, [pc, #684]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 800563c:	2101      	movs	r1, #1
 800563e:	430a      	orrs	r2, r1
 8005640:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005642:	f7fe ff1d 	bl	8004480 <HAL_GetTick>
 8005646:	0003      	movs	r3, r0
 8005648:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800564c:	f7fe ff18 	bl	8004480 <HAL_GetTick>
 8005650:	0002      	movs	r2, r0
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e1c7      	b.n	80059ee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800565e:	4ba2      	ldr	r3, [pc, #648]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 8005660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005662:	2202      	movs	r2, #2
 8005664:	4013      	ands	r3, r2
 8005666:	d0f1      	beq.n	800564c <HAL_RCC_OscConfig+0x3d0>
 8005668:	e018      	b.n	800569c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800566a:	4b9f      	ldr	r3, [pc, #636]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 800566c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800566e:	4b9e      	ldr	r3, [pc, #632]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 8005670:	2101      	movs	r1, #1
 8005672:	438a      	bics	r2, r1
 8005674:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005676:	f7fe ff03 	bl	8004480 <HAL_GetTick>
 800567a:	0003      	movs	r3, r0
 800567c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005680:	f7fe fefe 	bl	8004480 <HAL_GetTick>
 8005684:	0002      	movs	r2, r0
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e1ad      	b.n	80059ee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005692:	4b95      	ldr	r3, [pc, #596]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 8005694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005696:	2202      	movs	r2, #2
 8005698:	4013      	ands	r3, r2
 800569a:	d1f1      	bne.n	8005680 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2204      	movs	r2, #4
 80056a2:	4013      	ands	r3, r2
 80056a4:	d100      	bne.n	80056a8 <HAL_RCC_OscConfig+0x42c>
 80056a6:	e0ae      	b.n	8005806 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056a8:	2027      	movs	r0, #39	; 0x27
 80056aa:	183b      	adds	r3, r7, r0
 80056ac:	2200      	movs	r2, #0
 80056ae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056b0:	4b8d      	ldr	r3, [pc, #564]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 80056b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b4:	2380      	movs	r3, #128	; 0x80
 80056b6:	055b      	lsls	r3, r3, #21
 80056b8:	4013      	ands	r3, r2
 80056ba:	d109      	bne.n	80056d0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056bc:	4b8a      	ldr	r3, [pc, #552]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 80056be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056c0:	4b89      	ldr	r3, [pc, #548]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 80056c2:	2180      	movs	r1, #128	; 0x80
 80056c4:	0549      	lsls	r1, r1, #21
 80056c6:	430a      	orrs	r2, r1
 80056c8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80056ca:	183b      	adds	r3, r7, r0
 80056cc:	2201      	movs	r2, #1
 80056ce:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d0:	4b87      	ldr	r3, [pc, #540]	; (80058f0 <HAL_RCC_OscConfig+0x674>)
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	2380      	movs	r3, #128	; 0x80
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	4013      	ands	r3, r2
 80056da:	d11a      	bne.n	8005712 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056dc:	4b84      	ldr	r3, [pc, #528]	; (80058f0 <HAL_RCC_OscConfig+0x674>)
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	4b83      	ldr	r3, [pc, #524]	; (80058f0 <HAL_RCC_OscConfig+0x674>)
 80056e2:	2180      	movs	r1, #128	; 0x80
 80056e4:	0049      	lsls	r1, r1, #1
 80056e6:	430a      	orrs	r2, r1
 80056e8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ea:	f7fe fec9 	bl	8004480 <HAL_GetTick>
 80056ee:	0003      	movs	r3, r0
 80056f0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056f4:	f7fe fec4 	bl	8004480 <HAL_GetTick>
 80056f8:	0002      	movs	r2, r0
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b64      	cmp	r3, #100	; 0x64
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e173      	b.n	80059ee <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005706:	4b7a      	ldr	r3, [pc, #488]	; (80058f0 <HAL_RCC_OscConfig+0x674>)
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	2380      	movs	r3, #128	; 0x80
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	4013      	ands	r3, r2
 8005710:	d0f0      	beq.n	80056f4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	2380      	movs	r3, #128	; 0x80
 8005718:	005b      	lsls	r3, r3, #1
 800571a:	429a      	cmp	r2, r3
 800571c:	d107      	bne.n	800572e <HAL_RCC_OscConfig+0x4b2>
 800571e:	4b72      	ldr	r3, [pc, #456]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 8005720:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005722:	4b71      	ldr	r3, [pc, #452]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 8005724:	2180      	movs	r1, #128	; 0x80
 8005726:	0049      	lsls	r1, r1, #1
 8005728:	430a      	orrs	r2, r1
 800572a:	651a      	str	r2, [r3, #80]	; 0x50
 800572c:	e031      	b.n	8005792 <HAL_RCC_OscConfig+0x516>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10c      	bne.n	8005750 <HAL_RCC_OscConfig+0x4d4>
 8005736:	4b6c      	ldr	r3, [pc, #432]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 8005738:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800573a:	4b6b      	ldr	r3, [pc, #428]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 800573c:	496b      	ldr	r1, [pc, #428]	; (80058ec <HAL_RCC_OscConfig+0x670>)
 800573e:	400a      	ands	r2, r1
 8005740:	651a      	str	r2, [r3, #80]	; 0x50
 8005742:	4b69      	ldr	r3, [pc, #420]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 8005744:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005746:	4b68      	ldr	r3, [pc, #416]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 8005748:	496a      	ldr	r1, [pc, #424]	; (80058f4 <HAL_RCC_OscConfig+0x678>)
 800574a:	400a      	ands	r2, r1
 800574c:	651a      	str	r2, [r3, #80]	; 0x50
 800574e:	e020      	b.n	8005792 <HAL_RCC_OscConfig+0x516>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	23a0      	movs	r3, #160	; 0xa0
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	429a      	cmp	r2, r3
 800575a:	d10e      	bne.n	800577a <HAL_RCC_OscConfig+0x4fe>
 800575c:	4b62      	ldr	r3, [pc, #392]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 800575e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005760:	4b61      	ldr	r3, [pc, #388]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 8005762:	2180      	movs	r1, #128	; 0x80
 8005764:	00c9      	lsls	r1, r1, #3
 8005766:	430a      	orrs	r2, r1
 8005768:	651a      	str	r2, [r3, #80]	; 0x50
 800576a:	4b5f      	ldr	r3, [pc, #380]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 800576c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800576e:	4b5e      	ldr	r3, [pc, #376]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 8005770:	2180      	movs	r1, #128	; 0x80
 8005772:	0049      	lsls	r1, r1, #1
 8005774:	430a      	orrs	r2, r1
 8005776:	651a      	str	r2, [r3, #80]	; 0x50
 8005778:	e00b      	b.n	8005792 <HAL_RCC_OscConfig+0x516>
 800577a:	4b5b      	ldr	r3, [pc, #364]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 800577c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800577e:	4b5a      	ldr	r3, [pc, #360]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 8005780:	495a      	ldr	r1, [pc, #360]	; (80058ec <HAL_RCC_OscConfig+0x670>)
 8005782:	400a      	ands	r2, r1
 8005784:	651a      	str	r2, [r3, #80]	; 0x50
 8005786:	4b58      	ldr	r3, [pc, #352]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 8005788:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800578a:	4b57      	ldr	r3, [pc, #348]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 800578c:	4959      	ldr	r1, [pc, #356]	; (80058f4 <HAL_RCC_OscConfig+0x678>)
 800578e:	400a      	ands	r2, r1
 8005790:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d015      	beq.n	80057c6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800579a:	f7fe fe71 	bl	8004480 <HAL_GetTick>
 800579e:	0003      	movs	r3, r0
 80057a0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057a2:	e009      	b.n	80057b8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057a4:	f7fe fe6c 	bl	8004480 <HAL_GetTick>
 80057a8:	0002      	movs	r2, r0
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	4a52      	ldr	r2, [pc, #328]	; (80058f8 <HAL_RCC_OscConfig+0x67c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e11a      	b.n	80059ee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057b8:	4b4b      	ldr	r3, [pc, #300]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 80057ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057bc:	2380      	movs	r3, #128	; 0x80
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4013      	ands	r3, r2
 80057c2:	d0ef      	beq.n	80057a4 <HAL_RCC_OscConfig+0x528>
 80057c4:	e014      	b.n	80057f0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057c6:	f7fe fe5b 	bl	8004480 <HAL_GetTick>
 80057ca:	0003      	movs	r3, r0
 80057cc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057ce:	e009      	b.n	80057e4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057d0:	f7fe fe56 	bl	8004480 <HAL_GetTick>
 80057d4:	0002      	movs	r2, r0
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	4a47      	ldr	r2, [pc, #284]	; (80058f8 <HAL_RCC_OscConfig+0x67c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d901      	bls.n	80057e4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e104      	b.n	80059ee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057e4:	4b40      	ldr	r3, [pc, #256]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 80057e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4013      	ands	r3, r2
 80057ee:	d1ef      	bne.n	80057d0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80057f0:	2327      	movs	r3, #39	; 0x27
 80057f2:	18fb      	adds	r3, r7, r3
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d105      	bne.n	8005806 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057fa:	4b3b      	ldr	r3, [pc, #236]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 80057fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057fe:	4b3a      	ldr	r3, [pc, #232]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 8005800:	493e      	ldr	r1, [pc, #248]	; (80058fc <HAL_RCC_OscConfig+0x680>)
 8005802:	400a      	ands	r2, r1
 8005804:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2220      	movs	r2, #32
 800580c:	4013      	ands	r3, r2
 800580e:	d049      	beq.n	80058a4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d026      	beq.n	8005866 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005818:	4b33      	ldr	r3, [pc, #204]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	4b32      	ldr	r3, [pc, #200]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 800581e:	2101      	movs	r1, #1
 8005820:	430a      	orrs	r2, r1
 8005822:	609a      	str	r2, [r3, #8]
 8005824:	4b30      	ldr	r3, [pc, #192]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 8005826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005828:	4b2f      	ldr	r3, [pc, #188]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 800582a:	2101      	movs	r1, #1
 800582c:	430a      	orrs	r2, r1
 800582e:	635a      	str	r2, [r3, #52]	; 0x34
 8005830:	4b33      	ldr	r3, [pc, #204]	; (8005900 <HAL_RCC_OscConfig+0x684>)
 8005832:	6a1a      	ldr	r2, [r3, #32]
 8005834:	4b32      	ldr	r3, [pc, #200]	; (8005900 <HAL_RCC_OscConfig+0x684>)
 8005836:	2180      	movs	r1, #128	; 0x80
 8005838:	0189      	lsls	r1, r1, #6
 800583a:	430a      	orrs	r2, r1
 800583c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800583e:	f7fe fe1f 	bl	8004480 <HAL_GetTick>
 8005842:	0003      	movs	r3, r0
 8005844:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005848:	f7fe fe1a 	bl	8004480 <HAL_GetTick>
 800584c:	0002      	movs	r2, r0
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e0c9      	b.n	80059ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800585a:	4b23      	ldr	r3, [pc, #140]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2202      	movs	r2, #2
 8005860:	4013      	ands	r3, r2
 8005862:	d0f1      	beq.n	8005848 <HAL_RCC_OscConfig+0x5cc>
 8005864:	e01e      	b.n	80058a4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005866:	4b20      	ldr	r3, [pc, #128]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	4b1f      	ldr	r3, [pc, #124]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 800586c:	2101      	movs	r1, #1
 800586e:	438a      	bics	r2, r1
 8005870:	609a      	str	r2, [r3, #8]
 8005872:	4b23      	ldr	r3, [pc, #140]	; (8005900 <HAL_RCC_OscConfig+0x684>)
 8005874:	6a1a      	ldr	r2, [r3, #32]
 8005876:	4b22      	ldr	r3, [pc, #136]	; (8005900 <HAL_RCC_OscConfig+0x684>)
 8005878:	4922      	ldr	r1, [pc, #136]	; (8005904 <HAL_RCC_OscConfig+0x688>)
 800587a:	400a      	ands	r2, r1
 800587c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800587e:	f7fe fdff 	bl	8004480 <HAL_GetTick>
 8005882:	0003      	movs	r3, r0
 8005884:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005888:	f7fe fdfa 	bl	8004480 <HAL_GetTick>
 800588c:	0002      	movs	r2, r0
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e0a9      	b.n	80059ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800589a:	4b13      	ldr	r3, [pc, #76]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	2202      	movs	r2, #2
 80058a0:	4013      	ands	r3, r2
 80058a2:	d1f1      	bne.n	8005888 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d100      	bne.n	80058ae <HAL_RCC_OscConfig+0x632>
 80058ac:	e09e      	b.n	80059ec <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	2b0c      	cmp	r3, #12
 80058b2:	d100      	bne.n	80058b6 <HAL_RCC_OscConfig+0x63a>
 80058b4:	e077      	b.n	80059a6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d158      	bne.n	8005970 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058be:	4b0a      	ldr	r3, [pc, #40]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	4b09      	ldr	r3, [pc, #36]	; (80058e8 <HAL_RCC_OscConfig+0x66c>)
 80058c4:	4910      	ldr	r1, [pc, #64]	; (8005908 <HAL_RCC_OscConfig+0x68c>)
 80058c6:	400a      	ands	r2, r1
 80058c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ca:	f7fe fdd9 	bl	8004480 <HAL_GetTick>
 80058ce:	0003      	movs	r3, r0
 80058d0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80058d2:	e01b      	b.n	800590c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d4:	f7fe fdd4 	bl	8004480 <HAL_GetTick>
 80058d8:	0002      	movs	r2, r0
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d914      	bls.n	800590c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e083      	b.n	80059ee <HAL_RCC_OscConfig+0x772>
 80058e6:	46c0      	nop			; (mov r8, r8)
 80058e8:	40021000 	.word	0x40021000
 80058ec:	fffffeff 	.word	0xfffffeff
 80058f0:	40007000 	.word	0x40007000
 80058f4:	fffffbff 	.word	0xfffffbff
 80058f8:	00001388 	.word	0x00001388
 80058fc:	efffffff 	.word	0xefffffff
 8005900:	40010000 	.word	0x40010000
 8005904:	ffffdfff 	.word	0xffffdfff
 8005908:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800590c:	4b3a      	ldr	r3, [pc, #232]	; (80059f8 <HAL_RCC_OscConfig+0x77c>)
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	2380      	movs	r3, #128	; 0x80
 8005912:	049b      	lsls	r3, r3, #18
 8005914:	4013      	ands	r3, r2
 8005916:	d1dd      	bne.n	80058d4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005918:	4b37      	ldr	r3, [pc, #220]	; (80059f8 <HAL_RCC_OscConfig+0x77c>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	4a37      	ldr	r2, [pc, #220]	; (80059fc <HAL_RCC_OscConfig+0x780>)
 800591e:	4013      	ands	r3, r2
 8005920:	0019      	movs	r1, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005930:	431a      	orrs	r2, r3
 8005932:	4b31      	ldr	r3, [pc, #196]	; (80059f8 <HAL_RCC_OscConfig+0x77c>)
 8005934:	430a      	orrs	r2, r1
 8005936:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005938:	4b2f      	ldr	r3, [pc, #188]	; (80059f8 <HAL_RCC_OscConfig+0x77c>)
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	4b2e      	ldr	r3, [pc, #184]	; (80059f8 <HAL_RCC_OscConfig+0x77c>)
 800593e:	2180      	movs	r1, #128	; 0x80
 8005940:	0449      	lsls	r1, r1, #17
 8005942:	430a      	orrs	r2, r1
 8005944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005946:	f7fe fd9b 	bl	8004480 <HAL_GetTick>
 800594a:	0003      	movs	r3, r0
 800594c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800594e:	e008      	b.n	8005962 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005950:	f7fe fd96 	bl	8004480 <HAL_GetTick>
 8005954:	0002      	movs	r2, r0
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e045      	b.n	80059ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005962:	4b25      	ldr	r3, [pc, #148]	; (80059f8 <HAL_RCC_OscConfig+0x77c>)
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	2380      	movs	r3, #128	; 0x80
 8005968:	049b      	lsls	r3, r3, #18
 800596a:	4013      	ands	r3, r2
 800596c:	d0f0      	beq.n	8005950 <HAL_RCC_OscConfig+0x6d4>
 800596e:	e03d      	b.n	80059ec <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005970:	4b21      	ldr	r3, [pc, #132]	; (80059f8 <HAL_RCC_OscConfig+0x77c>)
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	4b20      	ldr	r3, [pc, #128]	; (80059f8 <HAL_RCC_OscConfig+0x77c>)
 8005976:	4922      	ldr	r1, [pc, #136]	; (8005a00 <HAL_RCC_OscConfig+0x784>)
 8005978:	400a      	ands	r2, r1
 800597a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800597c:	f7fe fd80 	bl	8004480 <HAL_GetTick>
 8005980:	0003      	movs	r3, r0
 8005982:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005984:	e008      	b.n	8005998 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005986:	f7fe fd7b 	bl	8004480 <HAL_GetTick>
 800598a:	0002      	movs	r2, r0
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e02a      	b.n	80059ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005998:	4b17      	ldr	r3, [pc, #92]	; (80059f8 <HAL_RCC_OscConfig+0x77c>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	2380      	movs	r3, #128	; 0x80
 800599e:	049b      	lsls	r3, r3, #18
 80059a0:	4013      	ands	r3, r2
 80059a2:	d1f0      	bne.n	8005986 <HAL_RCC_OscConfig+0x70a>
 80059a4:	e022      	b.n	80059ec <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e01d      	b.n	80059ee <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80059b2:	4b11      	ldr	r3, [pc, #68]	; (80059f8 <HAL_RCC_OscConfig+0x77c>)
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059b8:	69fa      	ldr	r2, [r7, #28]
 80059ba:	2380      	movs	r3, #128	; 0x80
 80059bc:	025b      	lsls	r3, r3, #9
 80059be:	401a      	ands	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d10f      	bne.n	80059e8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80059c8:	69fa      	ldr	r2, [r7, #28]
 80059ca:	23f0      	movs	r3, #240	; 0xf0
 80059cc:	039b      	lsls	r3, r3, #14
 80059ce:	401a      	ands	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d107      	bne.n	80059e8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80059d8:	69fa      	ldr	r2, [r7, #28]
 80059da:	23c0      	movs	r3, #192	; 0xc0
 80059dc:	041b      	lsls	r3, r3, #16
 80059de:	401a      	ands	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d001      	beq.n	80059ec <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e000      	b.n	80059ee <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	0018      	movs	r0, r3
 80059f0:	46bd      	mov	sp, r7
 80059f2:	b00a      	add	sp, #40	; 0x28
 80059f4:	bdb0      	pop	{r4, r5, r7, pc}
 80059f6:	46c0      	nop			; (mov r8, r8)
 80059f8:	40021000 	.word	0x40021000
 80059fc:	ff02ffff 	.word	0xff02ffff
 8005a00:	feffffff 	.word	0xfeffffff

08005a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a04:	b5b0      	push	{r4, r5, r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e128      	b.n	8005c6a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a18:	4b96      	ldr	r3, [pc, #600]	; (8005c74 <HAL_RCC_ClockConfig+0x270>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	4013      	ands	r3, r2
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d91e      	bls.n	8005a64 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a26:	4b93      	ldr	r3, [pc, #588]	; (8005c74 <HAL_RCC_ClockConfig+0x270>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	4393      	bics	r3, r2
 8005a2e:	0019      	movs	r1, r3
 8005a30:	4b90      	ldr	r3, [pc, #576]	; (8005c74 <HAL_RCC_ClockConfig+0x270>)
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a38:	f7fe fd22 	bl	8004480 <HAL_GetTick>
 8005a3c:	0003      	movs	r3, r0
 8005a3e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a40:	e009      	b.n	8005a56 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a42:	f7fe fd1d 	bl	8004480 <HAL_GetTick>
 8005a46:	0002      	movs	r2, r0
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	4a8a      	ldr	r2, [pc, #552]	; (8005c78 <HAL_RCC_ClockConfig+0x274>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e109      	b.n	8005c6a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a56:	4b87      	ldr	r3, [pc, #540]	; (8005c74 <HAL_RCC_ClockConfig+0x270>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d1ee      	bne.n	8005a42 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2202      	movs	r2, #2
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	d009      	beq.n	8005a82 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a6e:	4b83      	ldr	r3, [pc, #524]	; (8005c7c <HAL_RCC_ClockConfig+0x278>)
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	22f0      	movs	r2, #240	; 0xf0
 8005a74:	4393      	bics	r3, r2
 8005a76:	0019      	movs	r1, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	4b7f      	ldr	r3, [pc, #508]	; (8005c7c <HAL_RCC_ClockConfig+0x278>)
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2201      	movs	r2, #1
 8005a88:	4013      	ands	r3, r2
 8005a8a:	d100      	bne.n	8005a8e <HAL_RCC_ClockConfig+0x8a>
 8005a8c:	e089      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d107      	bne.n	8005aa6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a96:	4b79      	ldr	r3, [pc, #484]	; (8005c7c <HAL_RCC_ClockConfig+0x278>)
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	2380      	movs	r3, #128	; 0x80
 8005a9c:	029b      	lsls	r3, r3, #10
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	d120      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e0e1      	b.n	8005c6a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d107      	bne.n	8005abe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005aae:	4b73      	ldr	r3, [pc, #460]	; (8005c7c <HAL_RCC_ClockConfig+0x278>)
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	2380      	movs	r3, #128	; 0x80
 8005ab4:	049b      	lsls	r3, r3, #18
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	d114      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e0d5      	b.n	8005c6a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d106      	bne.n	8005ad4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ac6:	4b6d      	ldr	r3, [pc, #436]	; (8005c7c <HAL_RCC_ClockConfig+0x278>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2204      	movs	r2, #4
 8005acc:	4013      	ands	r3, r2
 8005ace:	d109      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e0ca      	b.n	8005c6a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005ad4:	4b69      	ldr	r3, [pc, #420]	; (8005c7c <HAL_RCC_ClockConfig+0x278>)
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	2380      	movs	r3, #128	; 0x80
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4013      	ands	r3, r2
 8005ade:	d101      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e0c2      	b.n	8005c6a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ae4:	4b65      	ldr	r3, [pc, #404]	; (8005c7c <HAL_RCC_ClockConfig+0x278>)
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	2203      	movs	r2, #3
 8005aea:	4393      	bics	r3, r2
 8005aec:	0019      	movs	r1, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	4b62      	ldr	r3, [pc, #392]	; (8005c7c <HAL_RCC_ClockConfig+0x278>)
 8005af4:	430a      	orrs	r2, r1
 8005af6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005af8:	f7fe fcc2 	bl	8004480 <HAL_GetTick>
 8005afc:	0003      	movs	r3, r0
 8005afe:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d111      	bne.n	8005b2c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b08:	e009      	b.n	8005b1e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b0a:	f7fe fcb9 	bl	8004480 <HAL_GetTick>
 8005b0e:	0002      	movs	r2, r0
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	4a58      	ldr	r2, [pc, #352]	; (8005c78 <HAL_RCC_ClockConfig+0x274>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e0a5      	b.n	8005c6a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b1e:	4b57      	ldr	r3, [pc, #348]	; (8005c7c <HAL_RCC_ClockConfig+0x278>)
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	220c      	movs	r2, #12
 8005b24:	4013      	ands	r3, r2
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d1ef      	bne.n	8005b0a <HAL_RCC_ClockConfig+0x106>
 8005b2a:	e03a      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	2b03      	cmp	r3, #3
 8005b32:	d111      	bne.n	8005b58 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b34:	e009      	b.n	8005b4a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b36:	f7fe fca3 	bl	8004480 <HAL_GetTick>
 8005b3a:	0002      	movs	r2, r0
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	4a4d      	ldr	r2, [pc, #308]	; (8005c78 <HAL_RCC_ClockConfig+0x274>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e08f      	b.n	8005c6a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b4a:	4b4c      	ldr	r3, [pc, #304]	; (8005c7c <HAL_RCC_ClockConfig+0x278>)
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	220c      	movs	r2, #12
 8005b50:	4013      	ands	r3, r2
 8005b52:	2b0c      	cmp	r3, #12
 8005b54:	d1ef      	bne.n	8005b36 <HAL_RCC_ClockConfig+0x132>
 8005b56:	e024      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d11b      	bne.n	8005b98 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b60:	e009      	b.n	8005b76 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b62:	f7fe fc8d 	bl	8004480 <HAL_GetTick>
 8005b66:	0002      	movs	r2, r0
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	4a42      	ldr	r2, [pc, #264]	; (8005c78 <HAL_RCC_ClockConfig+0x274>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e079      	b.n	8005c6a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b76:	4b41      	ldr	r3, [pc, #260]	; (8005c7c <HAL_RCC_ClockConfig+0x278>)
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	220c      	movs	r2, #12
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d1ef      	bne.n	8005b62 <HAL_RCC_ClockConfig+0x15e>
 8005b82:	e00e      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b84:	f7fe fc7c 	bl	8004480 <HAL_GetTick>
 8005b88:	0002      	movs	r2, r0
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	4a3a      	ldr	r2, [pc, #232]	; (8005c78 <HAL_RCC_ClockConfig+0x274>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e068      	b.n	8005c6a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b98:	4b38      	ldr	r3, [pc, #224]	; (8005c7c <HAL_RCC_ClockConfig+0x278>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	220c      	movs	r2, #12
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	d1f0      	bne.n	8005b84 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ba2:	4b34      	ldr	r3, [pc, #208]	; (8005c74 <HAL_RCC_ClockConfig+0x270>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	4013      	ands	r3, r2
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d21e      	bcs.n	8005bee <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bb0:	4b30      	ldr	r3, [pc, #192]	; (8005c74 <HAL_RCC_ClockConfig+0x270>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	4393      	bics	r3, r2
 8005bb8:	0019      	movs	r1, r3
 8005bba:	4b2e      	ldr	r3, [pc, #184]	; (8005c74 <HAL_RCC_ClockConfig+0x270>)
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005bc2:	f7fe fc5d 	bl	8004480 <HAL_GetTick>
 8005bc6:	0003      	movs	r3, r0
 8005bc8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bca:	e009      	b.n	8005be0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bcc:	f7fe fc58 	bl	8004480 <HAL_GetTick>
 8005bd0:	0002      	movs	r2, r0
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	4a28      	ldr	r2, [pc, #160]	; (8005c78 <HAL_RCC_ClockConfig+0x274>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e044      	b.n	8005c6a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005be0:	4b24      	ldr	r3, [pc, #144]	; (8005c74 <HAL_RCC_ClockConfig+0x270>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2201      	movs	r2, #1
 8005be6:	4013      	ands	r3, r2
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d1ee      	bne.n	8005bcc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2204      	movs	r2, #4
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	d009      	beq.n	8005c0c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bf8:	4b20      	ldr	r3, [pc, #128]	; (8005c7c <HAL_RCC_ClockConfig+0x278>)
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	4a20      	ldr	r2, [pc, #128]	; (8005c80 <HAL_RCC_ClockConfig+0x27c>)
 8005bfe:	4013      	ands	r3, r2
 8005c00:	0019      	movs	r1, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	4b1d      	ldr	r3, [pc, #116]	; (8005c7c <HAL_RCC_ClockConfig+0x278>)
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2208      	movs	r2, #8
 8005c12:	4013      	ands	r3, r2
 8005c14:	d00a      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c16:	4b19      	ldr	r3, [pc, #100]	; (8005c7c <HAL_RCC_ClockConfig+0x278>)
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	4a1a      	ldr	r2, [pc, #104]	; (8005c84 <HAL_RCC_ClockConfig+0x280>)
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	0019      	movs	r1, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	00da      	lsls	r2, r3, #3
 8005c26:	4b15      	ldr	r3, [pc, #84]	; (8005c7c <HAL_RCC_ClockConfig+0x278>)
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c2c:	f000 f832 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8005c30:	0001      	movs	r1, r0
 8005c32:	4b12      	ldr	r3, [pc, #72]	; (8005c7c <HAL_RCC_ClockConfig+0x278>)
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	091b      	lsrs	r3, r3, #4
 8005c38:	220f      	movs	r2, #15
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	4a12      	ldr	r2, [pc, #72]	; (8005c88 <HAL_RCC_ClockConfig+0x284>)
 8005c3e:	5cd3      	ldrb	r3, [r2, r3]
 8005c40:	000a      	movs	r2, r1
 8005c42:	40da      	lsrs	r2, r3
 8005c44:	4b11      	ldr	r3, [pc, #68]	; (8005c8c <HAL_RCC_ClockConfig+0x288>)
 8005c46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c48:	4b11      	ldr	r3, [pc, #68]	; (8005c90 <HAL_RCC_ClockConfig+0x28c>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	250b      	movs	r5, #11
 8005c4e:	197c      	adds	r4, r7, r5
 8005c50:	0018      	movs	r0, r3
 8005c52:	f7fe fbcf 	bl	80043f4 <HAL_InitTick>
 8005c56:	0003      	movs	r3, r0
 8005c58:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005c5a:	197b      	adds	r3, r7, r5
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005c62:	197b      	adds	r3, r7, r5
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	e000      	b.n	8005c6a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	b004      	add	sp, #16
 8005c70:	bdb0      	pop	{r4, r5, r7, pc}
 8005c72:	46c0      	nop			; (mov r8, r8)
 8005c74:	40022000 	.word	0x40022000
 8005c78:	00001388 	.word	0x00001388
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	fffff8ff 	.word	0xfffff8ff
 8005c84:	ffffc7ff 	.word	0xffffc7ff
 8005c88:	08009ccc 	.word	0x08009ccc
 8005c8c:	20000000 	.word	0x20000000
 8005c90:	20000004 	.word	0x20000004

08005c94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c94:	b5b0      	push	{r4, r5, r7, lr}
 8005c96:	b08e      	sub	sp, #56	; 0x38
 8005c98:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005c9a:	4b4c      	ldr	r3, [pc, #304]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x138>)
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ca2:	230c      	movs	r3, #12
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	2b0c      	cmp	r3, #12
 8005ca8:	d014      	beq.n	8005cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8005caa:	d900      	bls.n	8005cae <HAL_RCC_GetSysClockFreq+0x1a>
 8005cac:	e07b      	b.n	8005da6 <HAL_RCC_GetSysClockFreq+0x112>
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d002      	beq.n	8005cb8 <HAL_RCC_GetSysClockFreq+0x24>
 8005cb2:	2b08      	cmp	r3, #8
 8005cb4:	d00b      	beq.n	8005cce <HAL_RCC_GetSysClockFreq+0x3a>
 8005cb6:	e076      	b.n	8005da6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005cb8:	4b44      	ldr	r3, [pc, #272]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x138>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2210      	movs	r2, #16
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	d002      	beq.n	8005cc8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005cc2:	4b43      	ldr	r3, [pc, #268]	; (8005dd0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005cc4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005cc6:	e07c      	b.n	8005dc2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005cc8:	4b42      	ldr	r3, [pc, #264]	; (8005dd4 <HAL_RCC_GetSysClockFreq+0x140>)
 8005cca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005ccc:	e079      	b.n	8005dc2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005cce:	4b42      	ldr	r3, [pc, #264]	; (8005dd8 <HAL_RCC_GetSysClockFreq+0x144>)
 8005cd0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005cd2:	e076      	b.n	8005dc2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd6:	0c9a      	lsrs	r2, r3, #18
 8005cd8:	230f      	movs	r3, #15
 8005cda:	401a      	ands	r2, r3
 8005cdc:	4b3f      	ldr	r3, [pc, #252]	; (8005ddc <HAL_RCC_GetSysClockFreq+0x148>)
 8005cde:	5c9b      	ldrb	r3, [r3, r2]
 8005ce0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce4:	0d9a      	lsrs	r2, r3, #22
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	4013      	ands	r3, r2
 8005cea:	3301      	adds	r3, #1
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cee:	4b37      	ldr	r3, [pc, #220]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x138>)
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	2380      	movs	r3, #128	; 0x80
 8005cf4:	025b      	lsls	r3, r3, #9
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	d01a      	beq.n	8005d30 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfc:	61bb      	str	r3, [r7, #24]
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61fb      	str	r3, [r7, #28]
 8005d02:	4a35      	ldr	r2, [pc, #212]	; (8005dd8 <HAL_RCC_GetSysClockFreq+0x144>)
 8005d04:	2300      	movs	r3, #0
 8005d06:	69b8      	ldr	r0, [r7, #24]
 8005d08:	69f9      	ldr	r1, [r7, #28]
 8005d0a:	f7fa fbed 	bl	80004e8 <__aeabi_lmul>
 8005d0e:	0002      	movs	r2, r0
 8005d10:	000b      	movs	r3, r1
 8005d12:	0010      	movs	r0, r2
 8005d14:	0019      	movs	r1, r3
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	613b      	str	r3, [r7, #16]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	617b      	str	r3, [r7, #20]
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f7fa fbc1 	bl	80004a8 <__aeabi_uldivmod>
 8005d26:	0002      	movs	r2, r0
 8005d28:	000b      	movs	r3, r1
 8005d2a:	0013      	movs	r3, r2
 8005d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d2e:	e037      	b.n	8005da0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005d30:	4b26      	ldr	r3, [pc, #152]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x138>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2210      	movs	r2, #16
 8005d36:	4013      	ands	r3, r2
 8005d38:	d01a      	beq.n	8005d70 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3c:	60bb      	str	r3, [r7, #8]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	4a23      	ldr	r2, [pc, #140]	; (8005dd0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005d44:	2300      	movs	r3, #0
 8005d46:	68b8      	ldr	r0, [r7, #8]
 8005d48:	68f9      	ldr	r1, [r7, #12]
 8005d4a:	f7fa fbcd 	bl	80004e8 <__aeabi_lmul>
 8005d4e:	0002      	movs	r2, r0
 8005d50:	000b      	movs	r3, r1
 8005d52:	0010      	movs	r0, r2
 8005d54:	0019      	movs	r1, r3
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	603b      	str	r3, [r7, #0]
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	607b      	str	r3, [r7, #4]
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f7fa fba1 	bl	80004a8 <__aeabi_uldivmod>
 8005d66:	0002      	movs	r2, r0
 8005d68:	000b      	movs	r3, r1
 8005d6a:	0013      	movs	r3, r2
 8005d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d6e:	e017      	b.n	8005da0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d72:	0018      	movs	r0, r3
 8005d74:	2300      	movs	r3, #0
 8005d76:	0019      	movs	r1, r3
 8005d78:	4a16      	ldr	r2, [pc, #88]	; (8005dd4 <HAL_RCC_GetSysClockFreq+0x140>)
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	f7fa fbb4 	bl	80004e8 <__aeabi_lmul>
 8005d80:	0002      	movs	r2, r0
 8005d82:	000b      	movs	r3, r1
 8005d84:	0010      	movs	r0, r2
 8005d86:	0019      	movs	r1, r3
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	001c      	movs	r4, r3
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	001d      	movs	r5, r3
 8005d90:	0022      	movs	r2, r4
 8005d92:	002b      	movs	r3, r5
 8005d94:	f7fa fb88 	bl	80004a8 <__aeabi_uldivmod>
 8005d98:	0002      	movs	r2, r0
 8005d9a:	000b      	movs	r3, r1
 8005d9c:	0013      	movs	r3, r2
 8005d9e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005da4:	e00d      	b.n	8005dc2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005da6:	4b09      	ldr	r3, [pc, #36]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x138>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	0b5b      	lsrs	r3, r3, #13
 8005dac:	2207      	movs	r2, #7
 8005dae:	4013      	ands	r3, r2
 8005db0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	3301      	adds	r3, #1
 8005db6:	2280      	movs	r2, #128	; 0x80
 8005db8:	0212      	lsls	r2, r2, #8
 8005dba:	409a      	lsls	r2, r3
 8005dbc:	0013      	movs	r3, r2
 8005dbe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005dc0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	b00e      	add	sp, #56	; 0x38
 8005dca:	bdb0      	pop	{r4, r5, r7, pc}
 8005dcc:	40021000 	.word	0x40021000
 8005dd0:	003d0900 	.word	0x003d0900
 8005dd4:	00f42400 	.word	0x00f42400
 8005dd8:	007a1200 	.word	0x007a1200
 8005ddc:	08009ce4 	.word	0x08009ce4

08005de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005de4:	4b02      	ldr	r3, [pc, #8]	; (8005df0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005de6:	681b      	ldr	r3, [r3, #0]
}
 8005de8:	0018      	movs	r0, r3
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	46c0      	nop			; (mov r8, r8)
 8005df0:	20000000 	.word	0x20000000

08005df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005df8:	f7ff fff2 	bl	8005de0 <HAL_RCC_GetHCLKFreq>
 8005dfc:	0001      	movs	r1, r0
 8005dfe:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	0a1b      	lsrs	r3, r3, #8
 8005e04:	2207      	movs	r2, #7
 8005e06:	4013      	ands	r3, r2
 8005e08:	4a04      	ldr	r2, [pc, #16]	; (8005e1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e0a:	5cd3      	ldrb	r3, [r2, r3]
 8005e0c:	40d9      	lsrs	r1, r3
 8005e0e:	000b      	movs	r3, r1
}
 8005e10:	0018      	movs	r0, r3
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	46c0      	nop			; (mov r8, r8)
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	08009cdc 	.word	0x08009cdc

08005e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e24:	f7ff ffdc 	bl	8005de0 <HAL_RCC_GetHCLKFreq>
 8005e28:	0001      	movs	r1, r0
 8005e2a:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	0adb      	lsrs	r3, r3, #11
 8005e30:	2207      	movs	r2, #7
 8005e32:	4013      	ands	r3, r2
 8005e34:	4a04      	ldr	r2, [pc, #16]	; (8005e48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e36:	5cd3      	ldrb	r3, [r2, r3]
 8005e38:	40d9      	lsrs	r1, r3
 8005e3a:	000b      	movs	r3, r1
}
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	46c0      	nop			; (mov r8, r8)
 8005e44:	40021000 	.word	0x40021000
 8005e48:	08009cdc 	.word	0x08009cdc

08005e4c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005e54:	2317      	movs	r3, #23
 8005e56:	18fb      	adds	r3, r7, r3
 8005e58:	2200      	movs	r2, #0
 8005e5a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2220      	movs	r2, #32
 8005e62:	4013      	ands	r3, r2
 8005e64:	d106      	bne.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	2380      	movs	r3, #128	; 0x80
 8005e6c:	011b      	lsls	r3, r3, #4
 8005e6e:	4013      	ands	r3, r2
 8005e70:	d100      	bne.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005e72:	e104      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e74:	4bb1      	ldr	r3, [pc, #708]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e78:	2380      	movs	r3, #128	; 0x80
 8005e7a:	055b      	lsls	r3, r3, #21
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	d10a      	bne.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e80:	4bae      	ldr	r3, [pc, #696]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e84:	4bad      	ldr	r3, [pc, #692]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e86:	2180      	movs	r1, #128	; 0x80
 8005e88:	0549      	lsls	r1, r1, #21
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005e8e:	2317      	movs	r3, #23
 8005e90:	18fb      	adds	r3, r7, r3
 8005e92:	2201      	movs	r2, #1
 8005e94:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e96:	4baa      	ldr	r3, [pc, #680]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	2380      	movs	r3, #128	; 0x80
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d11a      	bne.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ea2:	4ba7      	ldr	r3, [pc, #668]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	4ba6      	ldr	r3, [pc, #664]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ea8:	2180      	movs	r1, #128	; 0x80
 8005eaa:	0049      	lsls	r1, r1, #1
 8005eac:	430a      	orrs	r2, r1
 8005eae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eb0:	f7fe fae6 	bl	8004480 <HAL_GetTick>
 8005eb4:	0003      	movs	r3, r0
 8005eb6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eb8:	e008      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eba:	f7fe fae1 	bl	8004480 <HAL_GetTick>
 8005ebe:	0002      	movs	r2, r0
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b64      	cmp	r3, #100	; 0x64
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e133      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ecc:	4b9c      	ldr	r3, [pc, #624]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	2380      	movs	r3, #128	; 0x80
 8005ed2:	005b      	lsls	r3, r3, #1
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	d0f0      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005ed8:	4b98      	ldr	r3, [pc, #608]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	23c0      	movs	r3, #192	; 0xc0
 8005ede:	039b      	lsls	r3, r3, #14
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	23c0      	movs	r3, #192	; 0xc0
 8005eea:	039b      	lsls	r3, r3, #14
 8005eec:	4013      	ands	r3, r2
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d107      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	23c0      	movs	r3, #192	; 0xc0
 8005efa:	039b      	lsls	r3, r3, #14
 8005efc:	4013      	ands	r3, r2
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d013      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	23c0      	movs	r3, #192	; 0xc0
 8005f0a:	029b      	lsls	r3, r3, #10
 8005f0c:	401a      	ands	r2, r3
 8005f0e:	23c0      	movs	r3, #192	; 0xc0
 8005f10:	029b      	lsls	r3, r3, #10
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d10a      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f16:	4b89      	ldr	r3, [pc, #548]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	2380      	movs	r3, #128	; 0x80
 8005f1c:	029b      	lsls	r3, r3, #10
 8005f1e:	401a      	ands	r2, r3
 8005f20:	2380      	movs	r3, #128	; 0x80
 8005f22:	029b      	lsls	r3, r3, #10
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d101      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e103      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005f2c:	4b83      	ldr	r3, [pc, #524]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f30:	23c0      	movs	r3, #192	; 0xc0
 8005f32:	029b      	lsls	r3, r3, #10
 8005f34:	4013      	ands	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d049      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	23c0      	movs	r3, #192	; 0xc0
 8005f44:	029b      	lsls	r3, r3, #10
 8005f46:	4013      	ands	r3, r2
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d004      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2220      	movs	r2, #32
 8005f54:	4013      	ands	r3, r2
 8005f56:	d10d      	bne.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	23c0      	movs	r3, #192	; 0xc0
 8005f5e:	029b      	lsls	r3, r3, #10
 8005f60:	4013      	ands	r3, r2
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d034      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	2380      	movs	r3, #128	; 0x80
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	4013      	ands	r3, r2
 8005f72:	d02e      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005f74:	4b71      	ldr	r3, [pc, #452]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f78:	4a72      	ldr	r2, [pc, #456]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f7e:	4b6f      	ldr	r3, [pc, #444]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f82:	4b6e      	ldr	r3, [pc, #440]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f84:	2180      	movs	r1, #128	; 0x80
 8005f86:	0309      	lsls	r1, r1, #12
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f8c:	4b6b      	ldr	r3, [pc, #428]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f90:	4b6a      	ldr	r3, [pc, #424]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f92:	496d      	ldr	r1, [pc, #436]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005f94:	400a      	ands	r2, r1
 8005f96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005f98:	4b68      	ldr	r3, [pc, #416]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	2380      	movs	r3, #128	; 0x80
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	d014      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa8:	f7fe fa6a 	bl	8004480 <HAL_GetTick>
 8005fac:	0003      	movs	r3, r0
 8005fae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fb0:	e009      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fb2:	f7fe fa65 	bl	8004480 <HAL_GetTick>
 8005fb6:	0002      	movs	r2, r0
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	4a63      	ldr	r2, [pc, #396]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e0b6      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fc6:	4b5d      	ldr	r3, [pc, #372]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005fc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fca:	2380      	movs	r3, #128	; 0x80
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4013      	ands	r3, r2
 8005fd0:	d0ef      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	2380      	movs	r3, #128	; 0x80
 8005fd8:	011b      	lsls	r3, r3, #4
 8005fda:	4013      	ands	r3, r2
 8005fdc:	d01f      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689a      	ldr	r2, [r3, #8]
 8005fe2:	23c0      	movs	r3, #192	; 0xc0
 8005fe4:	029b      	lsls	r3, r3, #10
 8005fe6:	401a      	ands	r2, r3
 8005fe8:	23c0      	movs	r3, #192	; 0xc0
 8005fea:	029b      	lsls	r3, r3, #10
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d10c      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005ff0:	4b52      	ldr	r3, [pc, #328]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a56      	ldr	r2, [pc, #344]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	0019      	movs	r1, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	23c0      	movs	r3, #192	; 0xc0
 8006000:	039b      	lsls	r3, r3, #14
 8006002:	401a      	ands	r2, r3
 8006004:	4b4d      	ldr	r3, [pc, #308]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006006:	430a      	orrs	r2, r1
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	4b4c      	ldr	r3, [pc, #304]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800600c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689a      	ldr	r2, [r3, #8]
 8006012:	23c0      	movs	r3, #192	; 0xc0
 8006014:	029b      	lsls	r3, r3, #10
 8006016:	401a      	ands	r2, r3
 8006018:	4b48      	ldr	r3, [pc, #288]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800601a:	430a      	orrs	r2, r1
 800601c:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2220      	movs	r2, #32
 8006024:	4013      	ands	r3, r2
 8006026:	d01f      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	23c0      	movs	r3, #192	; 0xc0
 800602e:	029b      	lsls	r3, r3, #10
 8006030:	401a      	ands	r2, r3
 8006032:	23c0      	movs	r3, #192	; 0xc0
 8006034:	029b      	lsls	r3, r3, #10
 8006036:	429a      	cmp	r2, r3
 8006038:	d10c      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800603a:	4b40      	ldr	r3, [pc, #256]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a44      	ldr	r2, [pc, #272]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006040:	4013      	ands	r3, r2
 8006042:	0019      	movs	r1, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	23c0      	movs	r3, #192	; 0xc0
 800604a:	039b      	lsls	r3, r3, #14
 800604c:	401a      	ands	r2, r3
 800604e:	4b3b      	ldr	r3, [pc, #236]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006050:	430a      	orrs	r2, r1
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	4b39      	ldr	r3, [pc, #228]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006056:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	23c0      	movs	r3, #192	; 0xc0
 800605e:	029b      	lsls	r3, r3, #10
 8006060:	401a      	ands	r2, r3
 8006062:	4b36      	ldr	r3, [pc, #216]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006064:	430a      	orrs	r2, r1
 8006066:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006068:	2317      	movs	r3, #23
 800606a:	18fb      	adds	r3, r7, r3
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d105      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006072:	4b32      	ldr	r3, [pc, #200]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006076:	4b31      	ldr	r3, [pc, #196]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006078:	4936      	ldr	r1, [pc, #216]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800607a:	400a      	ands	r2, r1
 800607c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2201      	movs	r2, #1
 8006084:	4013      	ands	r3, r2
 8006086:	d009      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006088:	4b2c      	ldr	r3, [pc, #176]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800608a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608c:	2203      	movs	r2, #3
 800608e:	4393      	bics	r3, r2
 8006090:	0019      	movs	r1, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	4b29      	ldr	r3, [pc, #164]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006098:	430a      	orrs	r2, r1
 800609a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2202      	movs	r2, #2
 80060a2:	4013      	ands	r3, r2
 80060a4:	d009      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060a6:	4b25      	ldr	r3, [pc, #148]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060aa:	220c      	movs	r2, #12
 80060ac:	4393      	bics	r3, r2
 80060ae:	0019      	movs	r1, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691a      	ldr	r2, [r3, #16]
 80060b4:	4b21      	ldr	r3, [pc, #132]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060b6:	430a      	orrs	r2, r1
 80060b8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2204      	movs	r2, #4
 80060c0:	4013      	ands	r3, r2
 80060c2:	d009      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060c4:	4b1d      	ldr	r3, [pc, #116]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060c8:	4a23      	ldr	r2, [pc, #140]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80060ca:	4013      	ands	r3, r2
 80060cc:	0019      	movs	r1, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	695a      	ldr	r2, [r3, #20]
 80060d2:	4b1a      	ldr	r3, [pc, #104]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060d4:	430a      	orrs	r2, r1
 80060d6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2208      	movs	r2, #8
 80060de:	4013      	ands	r3, r2
 80060e0:	d009      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060e2:	4b16      	ldr	r3, [pc, #88]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060e6:	4a1d      	ldr	r2, [pc, #116]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80060e8:	4013      	ands	r3, r2
 80060ea:	0019      	movs	r1, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	699a      	ldr	r2, [r3, #24]
 80060f0:	4b12      	ldr	r3, [pc, #72]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060f2:	430a      	orrs	r2, r1
 80060f4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2240      	movs	r2, #64	; 0x40
 80060fc:	4013      	ands	r3, r2
 80060fe:	d009      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006100:	4b0e      	ldr	r3, [pc, #56]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006104:	4a16      	ldr	r2, [pc, #88]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006106:	4013      	ands	r3, r2
 8006108:	0019      	movs	r1, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1a      	ldr	r2, [r3, #32]
 800610e:	4b0b      	ldr	r3, [pc, #44]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006110:	430a      	orrs	r2, r1
 8006112:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2280      	movs	r2, #128	; 0x80
 800611a:	4013      	ands	r3, r2
 800611c:	d009      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800611e:	4b07      	ldr	r3, [pc, #28]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006122:	4a10      	ldr	r2, [pc, #64]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006124:	4013      	ands	r3, r2
 8006126:	0019      	movs	r1, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	69da      	ldr	r2, [r3, #28]
 800612c:	4b03      	ldr	r3, [pc, #12]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800612e:	430a      	orrs	r2, r1
 8006130:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	0018      	movs	r0, r3
 8006136:	46bd      	mov	sp, r7
 8006138:	b006      	add	sp, #24
 800613a:	bd80      	pop	{r7, pc}
 800613c:	40021000 	.word	0x40021000
 8006140:	40007000 	.word	0x40007000
 8006144:	fffcffff 	.word	0xfffcffff
 8006148:	fff7ffff 	.word	0xfff7ffff
 800614c:	00001388 	.word	0x00001388
 8006150:	ffcfffff 	.word	0xffcfffff
 8006154:	efffffff 	.word	0xefffffff
 8006158:	fffff3ff 	.word	0xfffff3ff
 800615c:	ffffcfff 	.word	0xffffcfff
 8006160:	fbffffff 	.word	0xfbffffff
 8006164:	fff3ffff 	.word	0xfff3ffff

08006168 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e044      	b.n	8006204 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800617e:	2b00      	cmp	r3, #0
 8006180:	d107      	bne.n	8006192 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2278      	movs	r2, #120	; 0x78
 8006186:	2100      	movs	r1, #0
 8006188:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	0018      	movs	r0, r3
 800618e:	f7fd fb5f 	bl	8003850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2224      	movs	r2, #36	; 0x24
 8006196:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2101      	movs	r1, #1
 80061a4:	438a      	bics	r2, r1
 80061a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	0018      	movs	r0, r3
 80061ac:	f000 f830 	bl	8006210 <UART_SetConfig>
 80061b0:	0003      	movs	r3, r0
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e024      	b.n	8006204 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	0018      	movs	r0, r3
 80061c6:	f000 faa7 	bl	8006718 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	490d      	ldr	r1, [pc, #52]	; (800620c <HAL_UART_Init+0xa4>)
 80061d6:	400a      	ands	r2, r1
 80061d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689a      	ldr	r2, [r3, #8]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	212a      	movs	r1, #42	; 0x2a
 80061e6:	438a      	bics	r2, r1
 80061e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2101      	movs	r1, #1
 80061f6:	430a      	orrs	r2, r1
 80061f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	0018      	movs	r0, r3
 80061fe:	f000 fb3f 	bl	8006880 <UART_CheckIdleState>
 8006202:	0003      	movs	r3, r0
}
 8006204:	0018      	movs	r0, r3
 8006206:	46bd      	mov	sp, r7
 8006208:	b002      	add	sp, #8
 800620a:	bd80      	pop	{r7, pc}
 800620c:	ffffb7ff 	.word	0xffffb7ff

08006210 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006210:	b5b0      	push	{r4, r5, r7, lr}
 8006212:	b08e      	sub	sp, #56	; 0x38
 8006214:	af00      	add	r7, sp, #0
 8006216:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006218:	231a      	movs	r3, #26
 800621a:	2218      	movs	r2, #24
 800621c:	189b      	adds	r3, r3, r2
 800621e:	19db      	adds	r3, r3, r7
 8006220:	2200      	movs	r2, #0
 8006222:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	431a      	orrs	r2, r3
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	431a      	orrs	r2, r3
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	4313      	orrs	r3, r2
 800623a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4ac6      	ldr	r2, [pc, #792]	; (800655c <UART_SetConfig+0x34c>)
 8006244:	4013      	ands	r3, r2
 8006246:	0019      	movs	r1, r3
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800624e:	430a      	orrs	r2, r1
 8006250:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	4ac1      	ldr	r2, [pc, #772]	; (8006560 <UART_SetConfig+0x350>)
 800625a:	4013      	ands	r3, r2
 800625c:	0019      	movs	r1, r3
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	68da      	ldr	r2, [r3, #12]
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4abb      	ldr	r2, [pc, #748]	; (8006564 <UART_SetConfig+0x354>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d004      	beq.n	8006284 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006280:	4313      	orrs	r3, r2
 8006282:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	4ab7      	ldr	r2, [pc, #732]	; (8006568 <UART_SetConfig+0x358>)
 800628c:	4013      	ands	r3, r2
 800628e:	0019      	movs	r1, r3
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006296:	430a      	orrs	r2, r1
 8006298:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4ab3      	ldr	r2, [pc, #716]	; (800656c <UART_SetConfig+0x35c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d131      	bne.n	8006308 <UART_SetConfig+0xf8>
 80062a4:	4bb2      	ldr	r3, [pc, #712]	; (8006570 <UART_SetConfig+0x360>)
 80062a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062a8:	2203      	movs	r2, #3
 80062aa:	4013      	ands	r3, r2
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d01d      	beq.n	80062ec <UART_SetConfig+0xdc>
 80062b0:	d823      	bhi.n	80062fa <UART_SetConfig+0xea>
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d00c      	beq.n	80062d0 <UART_SetConfig+0xc0>
 80062b6:	d820      	bhi.n	80062fa <UART_SetConfig+0xea>
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <UART_SetConfig+0xb2>
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d00e      	beq.n	80062de <UART_SetConfig+0xce>
 80062c0:	e01b      	b.n	80062fa <UART_SetConfig+0xea>
 80062c2:	231b      	movs	r3, #27
 80062c4:	2218      	movs	r2, #24
 80062c6:	189b      	adds	r3, r3, r2
 80062c8:	19db      	adds	r3, r3, r7
 80062ca:	2201      	movs	r2, #1
 80062cc:	701a      	strb	r2, [r3, #0]
 80062ce:	e09c      	b.n	800640a <UART_SetConfig+0x1fa>
 80062d0:	231b      	movs	r3, #27
 80062d2:	2218      	movs	r2, #24
 80062d4:	189b      	adds	r3, r3, r2
 80062d6:	19db      	adds	r3, r3, r7
 80062d8:	2202      	movs	r2, #2
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	e095      	b.n	800640a <UART_SetConfig+0x1fa>
 80062de:	231b      	movs	r3, #27
 80062e0:	2218      	movs	r2, #24
 80062e2:	189b      	adds	r3, r3, r2
 80062e4:	19db      	adds	r3, r3, r7
 80062e6:	2204      	movs	r2, #4
 80062e8:	701a      	strb	r2, [r3, #0]
 80062ea:	e08e      	b.n	800640a <UART_SetConfig+0x1fa>
 80062ec:	231b      	movs	r3, #27
 80062ee:	2218      	movs	r2, #24
 80062f0:	189b      	adds	r3, r3, r2
 80062f2:	19db      	adds	r3, r3, r7
 80062f4:	2208      	movs	r2, #8
 80062f6:	701a      	strb	r2, [r3, #0]
 80062f8:	e087      	b.n	800640a <UART_SetConfig+0x1fa>
 80062fa:	231b      	movs	r3, #27
 80062fc:	2218      	movs	r2, #24
 80062fe:	189b      	adds	r3, r3, r2
 8006300:	19db      	adds	r3, r3, r7
 8006302:	2210      	movs	r2, #16
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	e080      	b.n	800640a <UART_SetConfig+0x1fa>
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a99      	ldr	r2, [pc, #612]	; (8006574 <UART_SetConfig+0x364>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d131      	bne.n	8006376 <UART_SetConfig+0x166>
 8006312:	4b97      	ldr	r3, [pc, #604]	; (8006570 <UART_SetConfig+0x360>)
 8006314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006316:	220c      	movs	r2, #12
 8006318:	4013      	ands	r3, r2
 800631a:	2b0c      	cmp	r3, #12
 800631c:	d01d      	beq.n	800635a <UART_SetConfig+0x14a>
 800631e:	d823      	bhi.n	8006368 <UART_SetConfig+0x158>
 8006320:	2b08      	cmp	r3, #8
 8006322:	d00c      	beq.n	800633e <UART_SetConfig+0x12e>
 8006324:	d820      	bhi.n	8006368 <UART_SetConfig+0x158>
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <UART_SetConfig+0x120>
 800632a:	2b04      	cmp	r3, #4
 800632c:	d00e      	beq.n	800634c <UART_SetConfig+0x13c>
 800632e:	e01b      	b.n	8006368 <UART_SetConfig+0x158>
 8006330:	231b      	movs	r3, #27
 8006332:	2218      	movs	r2, #24
 8006334:	189b      	adds	r3, r3, r2
 8006336:	19db      	adds	r3, r3, r7
 8006338:	2200      	movs	r2, #0
 800633a:	701a      	strb	r2, [r3, #0]
 800633c:	e065      	b.n	800640a <UART_SetConfig+0x1fa>
 800633e:	231b      	movs	r3, #27
 8006340:	2218      	movs	r2, #24
 8006342:	189b      	adds	r3, r3, r2
 8006344:	19db      	adds	r3, r3, r7
 8006346:	2202      	movs	r2, #2
 8006348:	701a      	strb	r2, [r3, #0]
 800634a:	e05e      	b.n	800640a <UART_SetConfig+0x1fa>
 800634c:	231b      	movs	r3, #27
 800634e:	2218      	movs	r2, #24
 8006350:	189b      	adds	r3, r3, r2
 8006352:	19db      	adds	r3, r3, r7
 8006354:	2204      	movs	r2, #4
 8006356:	701a      	strb	r2, [r3, #0]
 8006358:	e057      	b.n	800640a <UART_SetConfig+0x1fa>
 800635a:	231b      	movs	r3, #27
 800635c:	2218      	movs	r2, #24
 800635e:	189b      	adds	r3, r3, r2
 8006360:	19db      	adds	r3, r3, r7
 8006362:	2208      	movs	r2, #8
 8006364:	701a      	strb	r2, [r3, #0]
 8006366:	e050      	b.n	800640a <UART_SetConfig+0x1fa>
 8006368:	231b      	movs	r3, #27
 800636a:	2218      	movs	r2, #24
 800636c:	189b      	adds	r3, r3, r2
 800636e:	19db      	adds	r3, r3, r7
 8006370:	2210      	movs	r2, #16
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	e049      	b.n	800640a <UART_SetConfig+0x1fa>
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a7a      	ldr	r2, [pc, #488]	; (8006564 <UART_SetConfig+0x354>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d13e      	bne.n	80063fe <UART_SetConfig+0x1ee>
 8006380:	4b7b      	ldr	r3, [pc, #492]	; (8006570 <UART_SetConfig+0x360>)
 8006382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006384:	23c0      	movs	r3, #192	; 0xc0
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	4013      	ands	r3, r2
 800638a:	22c0      	movs	r2, #192	; 0xc0
 800638c:	0112      	lsls	r2, r2, #4
 800638e:	4293      	cmp	r3, r2
 8006390:	d027      	beq.n	80063e2 <UART_SetConfig+0x1d2>
 8006392:	22c0      	movs	r2, #192	; 0xc0
 8006394:	0112      	lsls	r2, r2, #4
 8006396:	4293      	cmp	r3, r2
 8006398:	d82a      	bhi.n	80063f0 <UART_SetConfig+0x1e0>
 800639a:	2280      	movs	r2, #128	; 0x80
 800639c:	0112      	lsls	r2, r2, #4
 800639e:	4293      	cmp	r3, r2
 80063a0:	d011      	beq.n	80063c6 <UART_SetConfig+0x1b6>
 80063a2:	2280      	movs	r2, #128	; 0x80
 80063a4:	0112      	lsls	r2, r2, #4
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d822      	bhi.n	80063f0 <UART_SetConfig+0x1e0>
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d004      	beq.n	80063b8 <UART_SetConfig+0x1a8>
 80063ae:	2280      	movs	r2, #128	; 0x80
 80063b0:	00d2      	lsls	r2, r2, #3
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00e      	beq.n	80063d4 <UART_SetConfig+0x1c4>
 80063b6:	e01b      	b.n	80063f0 <UART_SetConfig+0x1e0>
 80063b8:	231b      	movs	r3, #27
 80063ba:	2218      	movs	r2, #24
 80063bc:	189b      	adds	r3, r3, r2
 80063be:	19db      	adds	r3, r3, r7
 80063c0:	2200      	movs	r2, #0
 80063c2:	701a      	strb	r2, [r3, #0]
 80063c4:	e021      	b.n	800640a <UART_SetConfig+0x1fa>
 80063c6:	231b      	movs	r3, #27
 80063c8:	2218      	movs	r2, #24
 80063ca:	189b      	adds	r3, r3, r2
 80063cc:	19db      	adds	r3, r3, r7
 80063ce:	2202      	movs	r2, #2
 80063d0:	701a      	strb	r2, [r3, #0]
 80063d2:	e01a      	b.n	800640a <UART_SetConfig+0x1fa>
 80063d4:	231b      	movs	r3, #27
 80063d6:	2218      	movs	r2, #24
 80063d8:	189b      	adds	r3, r3, r2
 80063da:	19db      	adds	r3, r3, r7
 80063dc:	2204      	movs	r2, #4
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	e013      	b.n	800640a <UART_SetConfig+0x1fa>
 80063e2:	231b      	movs	r3, #27
 80063e4:	2218      	movs	r2, #24
 80063e6:	189b      	adds	r3, r3, r2
 80063e8:	19db      	adds	r3, r3, r7
 80063ea:	2208      	movs	r2, #8
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	e00c      	b.n	800640a <UART_SetConfig+0x1fa>
 80063f0:	231b      	movs	r3, #27
 80063f2:	2218      	movs	r2, #24
 80063f4:	189b      	adds	r3, r3, r2
 80063f6:	19db      	adds	r3, r3, r7
 80063f8:	2210      	movs	r2, #16
 80063fa:	701a      	strb	r2, [r3, #0]
 80063fc:	e005      	b.n	800640a <UART_SetConfig+0x1fa>
 80063fe:	231b      	movs	r3, #27
 8006400:	2218      	movs	r2, #24
 8006402:	189b      	adds	r3, r3, r2
 8006404:	19db      	adds	r3, r3, r7
 8006406:	2210      	movs	r2, #16
 8006408:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a55      	ldr	r2, [pc, #340]	; (8006564 <UART_SetConfig+0x354>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d000      	beq.n	8006416 <UART_SetConfig+0x206>
 8006414:	e084      	b.n	8006520 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006416:	231b      	movs	r3, #27
 8006418:	2218      	movs	r2, #24
 800641a:	189b      	adds	r3, r3, r2
 800641c:	19db      	adds	r3, r3, r7
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2b08      	cmp	r3, #8
 8006422:	d01d      	beq.n	8006460 <UART_SetConfig+0x250>
 8006424:	dc20      	bgt.n	8006468 <UART_SetConfig+0x258>
 8006426:	2b04      	cmp	r3, #4
 8006428:	d015      	beq.n	8006456 <UART_SetConfig+0x246>
 800642a:	dc1d      	bgt.n	8006468 <UART_SetConfig+0x258>
 800642c:	2b00      	cmp	r3, #0
 800642e:	d002      	beq.n	8006436 <UART_SetConfig+0x226>
 8006430:	2b02      	cmp	r3, #2
 8006432:	d005      	beq.n	8006440 <UART_SetConfig+0x230>
 8006434:	e018      	b.n	8006468 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006436:	f7ff fcdd 	bl	8005df4 <HAL_RCC_GetPCLK1Freq>
 800643a:	0003      	movs	r3, r0
 800643c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800643e:	e01c      	b.n	800647a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006440:	4b4b      	ldr	r3, [pc, #300]	; (8006570 <UART_SetConfig+0x360>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2210      	movs	r2, #16
 8006446:	4013      	ands	r3, r2
 8006448:	d002      	beq.n	8006450 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800644a:	4b4b      	ldr	r3, [pc, #300]	; (8006578 <UART_SetConfig+0x368>)
 800644c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800644e:	e014      	b.n	800647a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8006450:	4b4a      	ldr	r3, [pc, #296]	; (800657c <UART_SetConfig+0x36c>)
 8006452:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006454:	e011      	b.n	800647a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006456:	f7ff fc1d 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 800645a:	0003      	movs	r3, r0
 800645c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800645e:	e00c      	b.n	800647a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006460:	2380      	movs	r3, #128	; 0x80
 8006462:	021b      	lsls	r3, r3, #8
 8006464:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006466:	e008      	b.n	800647a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800646c:	231a      	movs	r3, #26
 800646e:	2218      	movs	r2, #24
 8006470:	189b      	adds	r3, r3, r2
 8006472:	19db      	adds	r3, r3, r7
 8006474:	2201      	movs	r2, #1
 8006476:	701a      	strb	r2, [r3, #0]
        break;
 8006478:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800647a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647c:	2b00      	cmp	r3, #0
 800647e:	d100      	bne.n	8006482 <UART_SetConfig+0x272>
 8006480:	e132      	b.n	80066e8 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	0013      	movs	r3, r2
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	189b      	adds	r3, r3, r2
 800648c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800648e:	429a      	cmp	r2, r3
 8006490:	d305      	bcc.n	800649e <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800649a:	429a      	cmp	r2, r3
 800649c:	d906      	bls.n	80064ac <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800649e:	231a      	movs	r3, #26
 80064a0:	2218      	movs	r2, #24
 80064a2:	189b      	adds	r3, r3, r2
 80064a4:	19db      	adds	r3, r3, r7
 80064a6:	2201      	movs	r2, #1
 80064a8:	701a      	strb	r2, [r3, #0]
 80064aa:	e11d      	b.n	80066e8 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80064ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ae:	613b      	str	r3, [r7, #16]
 80064b0:	2300      	movs	r3, #0
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	6939      	ldr	r1, [r7, #16]
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	000b      	movs	r3, r1
 80064ba:	0e1b      	lsrs	r3, r3, #24
 80064bc:	0010      	movs	r0, r2
 80064be:	0205      	lsls	r5, r0, #8
 80064c0:	431d      	orrs	r5, r3
 80064c2:	000b      	movs	r3, r1
 80064c4:	021c      	lsls	r4, r3, #8
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	085b      	lsrs	r3, r3, #1
 80064cc:	60bb      	str	r3, [r7, #8]
 80064ce:	2300      	movs	r3, #0
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	68b8      	ldr	r0, [r7, #8]
 80064d4:	68f9      	ldr	r1, [r7, #12]
 80064d6:	1900      	adds	r0, r0, r4
 80064d8:	4169      	adcs	r1, r5
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	603b      	str	r3, [r7, #0]
 80064e0:	2300      	movs	r3, #0
 80064e2:	607b      	str	r3, [r7, #4]
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f7f9 ffde 	bl	80004a8 <__aeabi_uldivmod>
 80064ec:	0002      	movs	r2, r0
 80064ee:	000b      	movs	r3, r1
 80064f0:	0013      	movs	r3, r2
 80064f2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064f6:	23c0      	movs	r3, #192	; 0xc0
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d309      	bcc.n	8006512 <UART_SetConfig+0x302>
 80064fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006500:	2380      	movs	r3, #128	; 0x80
 8006502:	035b      	lsls	r3, r3, #13
 8006504:	429a      	cmp	r2, r3
 8006506:	d204      	bcs.n	8006512 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800650e:	60da      	str	r2, [r3, #12]
 8006510:	e0ea      	b.n	80066e8 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8006512:	231a      	movs	r3, #26
 8006514:	2218      	movs	r2, #24
 8006516:	189b      	adds	r3, r3, r2
 8006518:	19db      	adds	r3, r3, r7
 800651a:	2201      	movs	r2, #1
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	e0e3      	b.n	80066e8 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	69da      	ldr	r2, [r3, #28]
 8006524:	2380      	movs	r3, #128	; 0x80
 8006526:	021b      	lsls	r3, r3, #8
 8006528:	429a      	cmp	r2, r3
 800652a:	d000      	beq.n	800652e <UART_SetConfig+0x31e>
 800652c:	e085      	b.n	800663a <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800652e:	231b      	movs	r3, #27
 8006530:	2218      	movs	r2, #24
 8006532:	189b      	adds	r3, r3, r2
 8006534:	19db      	adds	r3, r3, r7
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	2b08      	cmp	r3, #8
 800653a:	d837      	bhi.n	80065ac <UART_SetConfig+0x39c>
 800653c:	009a      	lsls	r2, r3, #2
 800653e:	4b10      	ldr	r3, [pc, #64]	; (8006580 <UART_SetConfig+0x370>)
 8006540:	18d3      	adds	r3, r2, r3
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006546:	f7ff fc55 	bl	8005df4 <HAL_RCC_GetPCLK1Freq>
 800654a:	0003      	movs	r3, r0
 800654c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800654e:	e036      	b.n	80065be <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006550:	f7ff fc66 	bl	8005e20 <HAL_RCC_GetPCLK2Freq>
 8006554:	0003      	movs	r3, r0
 8006556:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006558:	e031      	b.n	80065be <UART_SetConfig+0x3ae>
 800655a:	46c0      	nop			; (mov r8, r8)
 800655c:	efff69f3 	.word	0xefff69f3
 8006560:	ffffcfff 	.word	0xffffcfff
 8006564:	40004800 	.word	0x40004800
 8006568:	fffff4ff 	.word	0xfffff4ff
 800656c:	40013800 	.word	0x40013800
 8006570:	40021000 	.word	0x40021000
 8006574:	40004400 	.word	0x40004400
 8006578:	003d0900 	.word	0x003d0900
 800657c:	00f42400 	.word	0x00f42400
 8006580:	08009cf0 	.word	0x08009cf0
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006584:	4b60      	ldr	r3, [pc, #384]	; (8006708 <UART_SetConfig+0x4f8>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2210      	movs	r2, #16
 800658a:	4013      	ands	r3, r2
 800658c:	d002      	beq.n	8006594 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800658e:	4b5f      	ldr	r3, [pc, #380]	; (800670c <UART_SetConfig+0x4fc>)
 8006590:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006592:	e014      	b.n	80065be <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8006594:	4b5e      	ldr	r3, [pc, #376]	; (8006710 <UART_SetConfig+0x500>)
 8006596:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006598:	e011      	b.n	80065be <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800659a:	f7ff fb7b 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 800659e:	0003      	movs	r3, r0
 80065a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065a2:	e00c      	b.n	80065be <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a4:	2380      	movs	r3, #128	; 0x80
 80065a6:	021b      	lsls	r3, r3, #8
 80065a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065aa:	e008      	b.n	80065be <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80065b0:	231a      	movs	r3, #26
 80065b2:	2218      	movs	r2, #24
 80065b4:	189b      	adds	r3, r3, r2
 80065b6:	19db      	adds	r3, r3, r7
 80065b8:	2201      	movs	r2, #1
 80065ba:	701a      	strb	r2, [r3, #0]
        break;
 80065bc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d100      	bne.n	80065c6 <UART_SetConfig+0x3b6>
 80065c4:	e090      	b.n	80066e8 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c8:	005a      	lsls	r2, r3, #1
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	085b      	lsrs	r3, r3, #1
 80065d0:	18d2      	adds	r2, r2, r3
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	0019      	movs	r1, r3
 80065d8:	0010      	movs	r0, r2
 80065da:	f7f9 fdb1 	bl	8000140 <__udivsi3>
 80065de:	0003      	movs	r3, r0
 80065e0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	2b0f      	cmp	r3, #15
 80065e6:	d921      	bls.n	800662c <UART_SetConfig+0x41c>
 80065e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065ea:	2380      	movs	r3, #128	; 0x80
 80065ec:	025b      	lsls	r3, r3, #9
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d21c      	bcs.n	800662c <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	200e      	movs	r0, #14
 80065f8:	2418      	movs	r4, #24
 80065fa:	1903      	adds	r3, r0, r4
 80065fc:	19db      	adds	r3, r3, r7
 80065fe:	210f      	movs	r1, #15
 8006600:	438a      	bics	r2, r1
 8006602:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006606:	085b      	lsrs	r3, r3, #1
 8006608:	b29b      	uxth	r3, r3
 800660a:	2207      	movs	r2, #7
 800660c:	4013      	ands	r3, r2
 800660e:	b299      	uxth	r1, r3
 8006610:	1903      	adds	r3, r0, r4
 8006612:	19db      	adds	r3, r3, r7
 8006614:	1902      	adds	r2, r0, r4
 8006616:	19d2      	adds	r2, r2, r7
 8006618:	8812      	ldrh	r2, [r2, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	1902      	adds	r2, r0, r4
 8006624:	19d2      	adds	r2, r2, r7
 8006626:	8812      	ldrh	r2, [r2, #0]
 8006628:	60da      	str	r2, [r3, #12]
 800662a:	e05d      	b.n	80066e8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800662c:	231a      	movs	r3, #26
 800662e:	2218      	movs	r2, #24
 8006630:	189b      	adds	r3, r3, r2
 8006632:	19db      	adds	r3, r3, r7
 8006634:	2201      	movs	r2, #1
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	e056      	b.n	80066e8 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800663a:	231b      	movs	r3, #27
 800663c:	2218      	movs	r2, #24
 800663e:	189b      	adds	r3, r3, r2
 8006640:	19db      	adds	r3, r3, r7
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b08      	cmp	r3, #8
 8006646:	d822      	bhi.n	800668e <UART_SetConfig+0x47e>
 8006648:	009a      	lsls	r2, r3, #2
 800664a:	4b32      	ldr	r3, [pc, #200]	; (8006714 <UART_SetConfig+0x504>)
 800664c:	18d3      	adds	r3, r2, r3
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006652:	f7ff fbcf 	bl	8005df4 <HAL_RCC_GetPCLK1Freq>
 8006656:	0003      	movs	r3, r0
 8006658:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800665a:	e021      	b.n	80066a0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800665c:	f7ff fbe0 	bl	8005e20 <HAL_RCC_GetPCLK2Freq>
 8006660:	0003      	movs	r3, r0
 8006662:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006664:	e01c      	b.n	80066a0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006666:	4b28      	ldr	r3, [pc, #160]	; (8006708 <UART_SetConfig+0x4f8>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2210      	movs	r2, #16
 800666c:	4013      	ands	r3, r2
 800666e:	d002      	beq.n	8006676 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006670:	4b26      	ldr	r3, [pc, #152]	; (800670c <UART_SetConfig+0x4fc>)
 8006672:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006674:	e014      	b.n	80066a0 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8006676:	4b26      	ldr	r3, [pc, #152]	; (8006710 <UART_SetConfig+0x500>)
 8006678:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800667a:	e011      	b.n	80066a0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800667c:	f7ff fb0a 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8006680:	0003      	movs	r3, r0
 8006682:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006684:	e00c      	b.n	80066a0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006686:	2380      	movs	r3, #128	; 0x80
 8006688:	021b      	lsls	r3, r3, #8
 800668a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800668c:	e008      	b.n	80066a0 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006692:	231a      	movs	r3, #26
 8006694:	2218      	movs	r2, #24
 8006696:	189b      	adds	r3, r3, r2
 8006698:	19db      	adds	r3, r3, r7
 800669a:	2201      	movs	r2, #1
 800669c:	701a      	strb	r2, [r3, #0]
        break;
 800669e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80066a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d020      	beq.n	80066e8 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	085a      	lsrs	r2, r3, #1
 80066ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ae:	18d2      	adds	r2, r2, r3
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	0019      	movs	r1, r3
 80066b6:	0010      	movs	r0, r2
 80066b8:	f7f9 fd42 	bl	8000140 <__udivsi3>
 80066bc:	0003      	movs	r3, r0
 80066be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	2b0f      	cmp	r3, #15
 80066c4:	d90a      	bls.n	80066dc <UART_SetConfig+0x4cc>
 80066c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066c8:	2380      	movs	r3, #128	; 0x80
 80066ca:	025b      	lsls	r3, r3, #9
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d205      	bcs.n	80066dc <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	60da      	str	r2, [r3, #12]
 80066da:	e005      	b.n	80066e8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80066dc:	231a      	movs	r3, #26
 80066de:	2218      	movs	r2, #24
 80066e0:	189b      	adds	r3, r3, r2
 80066e2:	19db      	adds	r3, r3, r7
 80066e4:	2201      	movs	r2, #1
 80066e6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	2200      	movs	r2, #0
 80066ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	2200      	movs	r2, #0
 80066f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80066f4:	231a      	movs	r3, #26
 80066f6:	2218      	movs	r2, #24
 80066f8:	189b      	adds	r3, r3, r2
 80066fa:	19db      	adds	r3, r3, r7
 80066fc:	781b      	ldrb	r3, [r3, #0]
}
 80066fe:	0018      	movs	r0, r3
 8006700:	46bd      	mov	sp, r7
 8006702:	b00e      	add	sp, #56	; 0x38
 8006704:	bdb0      	pop	{r4, r5, r7, pc}
 8006706:	46c0      	nop			; (mov r8, r8)
 8006708:	40021000 	.word	0x40021000
 800670c:	003d0900 	.word	0x003d0900
 8006710:	00f42400 	.word	0x00f42400
 8006714:	08009d14 	.word	0x08009d14

08006718 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006724:	2201      	movs	r2, #1
 8006726:	4013      	ands	r3, r2
 8006728:	d00b      	beq.n	8006742 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	4a4a      	ldr	r2, [pc, #296]	; (800685c <UART_AdvFeatureConfig+0x144>)
 8006732:	4013      	ands	r3, r2
 8006734:	0019      	movs	r1, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	2202      	movs	r2, #2
 8006748:	4013      	ands	r3, r2
 800674a:	d00b      	beq.n	8006764 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	4a43      	ldr	r2, [pc, #268]	; (8006860 <UART_AdvFeatureConfig+0x148>)
 8006754:	4013      	ands	r3, r2
 8006756:	0019      	movs	r1, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	2204      	movs	r2, #4
 800676a:	4013      	ands	r3, r2
 800676c:	d00b      	beq.n	8006786 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	4a3b      	ldr	r2, [pc, #236]	; (8006864 <UART_AdvFeatureConfig+0x14c>)
 8006776:	4013      	ands	r3, r2
 8006778:	0019      	movs	r1, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	2208      	movs	r2, #8
 800678c:	4013      	ands	r3, r2
 800678e:	d00b      	beq.n	80067a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	4a34      	ldr	r2, [pc, #208]	; (8006868 <UART_AdvFeatureConfig+0x150>)
 8006798:	4013      	ands	r3, r2
 800679a:	0019      	movs	r1, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ac:	2210      	movs	r2, #16
 80067ae:	4013      	ands	r3, r2
 80067b0:	d00b      	beq.n	80067ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	4a2c      	ldr	r2, [pc, #176]	; (800686c <UART_AdvFeatureConfig+0x154>)
 80067ba:	4013      	ands	r3, r2
 80067bc:	0019      	movs	r1, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	2220      	movs	r2, #32
 80067d0:	4013      	ands	r3, r2
 80067d2:	d00b      	beq.n	80067ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	4a25      	ldr	r2, [pc, #148]	; (8006870 <UART_AdvFeatureConfig+0x158>)
 80067dc:	4013      	ands	r3, r2
 80067de:	0019      	movs	r1, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	2240      	movs	r2, #64	; 0x40
 80067f2:	4013      	ands	r3, r2
 80067f4:	d01d      	beq.n	8006832 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	4a1d      	ldr	r2, [pc, #116]	; (8006874 <UART_AdvFeatureConfig+0x15c>)
 80067fe:	4013      	ands	r3, r2
 8006800:	0019      	movs	r1, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006812:	2380      	movs	r3, #128	; 0x80
 8006814:	035b      	lsls	r3, r3, #13
 8006816:	429a      	cmp	r2, r3
 8006818:	d10b      	bne.n	8006832 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	4a15      	ldr	r2, [pc, #84]	; (8006878 <UART_AdvFeatureConfig+0x160>)
 8006822:	4013      	ands	r3, r2
 8006824:	0019      	movs	r1, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	430a      	orrs	r2, r1
 8006830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	2280      	movs	r2, #128	; 0x80
 8006838:	4013      	ands	r3, r2
 800683a:	d00b      	beq.n	8006854 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	4a0e      	ldr	r2, [pc, #56]	; (800687c <UART_AdvFeatureConfig+0x164>)
 8006844:	4013      	ands	r3, r2
 8006846:	0019      	movs	r1, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	430a      	orrs	r2, r1
 8006852:	605a      	str	r2, [r3, #4]
  }
}
 8006854:	46c0      	nop			; (mov r8, r8)
 8006856:	46bd      	mov	sp, r7
 8006858:	b002      	add	sp, #8
 800685a:	bd80      	pop	{r7, pc}
 800685c:	fffdffff 	.word	0xfffdffff
 8006860:	fffeffff 	.word	0xfffeffff
 8006864:	fffbffff 	.word	0xfffbffff
 8006868:	ffff7fff 	.word	0xffff7fff
 800686c:	ffffefff 	.word	0xffffefff
 8006870:	ffffdfff 	.word	0xffffdfff
 8006874:	ffefffff 	.word	0xffefffff
 8006878:	ff9fffff 	.word	0xff9fffff
 800687c:	fff7ffff 	.word	0xfff7ffff

08006880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b092      	sub	sp, #72	; 0x48
 8006884:	af02      	add	r7, sp, #8
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2284      	movs	r2, #132	; 0x84
 800688c:	2100      	movs	r1, #0
 800688e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006890:	f7fd fdf6 	bl	8004480 <HAL_GetTick>
 8006894:	0003      	movs	r3, r0
 8006896:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2208      	movs	r2, #8
 80068a0:	4013      	ands	r3, r2
 80068a2:	2b08      	cmp	r3, #8
 80068a4:	d12c      	bne.n	8006900 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a8:	2280      	movs	r2, #128	; 0x80
 80068aa:	0391      	lsls	r1, r2, #14
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	4a46      	ldr	r2, [pc, #280]	; (80069c8 <UART_CheckIdleState+0x148>)
 80068b0:	9200      	str	r2, [sp, #0]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f000 f88c 	bl	80069d0 <UART_WaitOnFlagUntilTimeout>
 80068b8:	1e03      	subs	r3, r0, #0
 80068ba:	d021      	beq.n	8006900 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068bc:	f3ef 8310 	mrs	r3, PRIMASK
 80068c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80068c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80068c6:	2301      	movs	r3, #1
 80068c8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068cc:	f383 8810 	msr	PRIMASK, r3
}
 80068d0:	46c0      	nop			; (mov r8, r8)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2180      	movs	r1, #128	; 0x80
 80068de:	438a      	bics	r2, r1
 80068e0:	601a      	str	r2, [r3, #0]
 80068e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e8:	f383 8810 	msr	PRIMASK, r3
}
 80068ec:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2220      	movs	r2, #32
 80068f2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2278      	movs	r2, #120	; 0x78
 80068f8:	2100      	movs	r1, #0
 80068fa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e05f      	b.n	80069c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2204      	movs	r2, #4
 8006908:	4013      	ands	r3, r2
 800690a:	2b04      	cmp	r3, #4
 800690c:	d146      	bne.n	800699c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800690e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006910:	2280      	movs	r2, #128	; 0x80
 8006912:	03d1      	lsls	r1, r2, #15
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	4a2c      	ldr	r2, [pc, #176]	; (80069c8 <UART_CheckIdleState+0x148>)
 8006918:	9200      	str	r2, [sp, #0]
 800691a:	2200      	movs	r2, #0
 800691c:	f000 f858 	bl	80069d0 <UART_WaitOnFlagUntilTimeout>
 8006920:	1e03      	subs	r3, r0, #0
 8006922:	d03b      	beq.n	800699c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006924:	f3ef 8310 	mrs	r3, PRIMASK
 8006928:	60fb      	str	r3, [r7, #12]
  return(result);
 800692a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800692c:	637b      	str	r3, [r7, #52]	; 0x34
 800692e:	2301      	movs	r3, #1
 8006930:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f383 8810 	msr	PRIMASK, r3
}
 8006938:	46c0      	nop			; (mov r8, r8)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4921      	ldr	r1, [pc, #132]	; (80069cc <UART_CheckIdleState+0x14c>)
 8006946:	400a      	ands	r2, r1
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800694c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f383 8810 	msr	PRIMASK, r3
}
 8006954:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006956:	f3ef 8310 	mrs	r3, PRIMASK
 800695a:	61bb      	str	r3, [r7, #24]
  return(result);
 800695c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800695e:	633b      	str	r3, [r7, #48]	; 0x30
 8006960:	2301      	movs	r3, #1
 8006962:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	f383 8810 	msr	PRIMASK, r3
}
 800696a:	46c0      	nop			; (mov r8, r8)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689a      	ldr	r2, [r3, #8]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2101      	movs	r1, #1
 8006978:	438a      	bics	r2, r1
 800697a:	609a      	str	r2, [r3, #8]
 800697c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	f383 8810 	msr	PRIMASK, r3
}
 8006986:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2280      	movs	r2, #128	; 0x80
 800698c:	2120      	movs	r1, #32
 800698e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2278      	movs	r2, #120	; 0x78
 8006994:	2100      	movs	r1, #0
 8006996:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e011      	b.n	80069c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2280      	movs	r2, #128	; 0x80
 80069a6:	2120      	movs	r1, #32
 80069a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2278      	movs	r2, #120	; 0x78
 80069ba:	2100      	movs	r1, #0
 80069bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	0018      	movs	r0, r3
 80069c2:	46bd      	mov	sp, r7
 80069c4:	b010      	add	sp, #64	; 0x40
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	01ffffff 	.word	0x01ffffff
 80069cc:	fffffedf 	.word	0xfffffedf

080069d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	603b      	str	r3, [r7, #0]
 80069dc:	1dfb      	adds	r3, r7, #7
 80069de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069e0:	e04b      	b.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	3301      	adds	r3, #1
 80069e6:	d048      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e8:	f7fd fd4a 	bl	8004480 <HAL_GetTick>
 80069ec:	0002      	movs	r2, r0
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d302      	bcc.n	80069fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e04b      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2204      	movs	r2, #4
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	d035      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	2208      	movs	r2, #8
 8006a16:	4013      	ands	r3, r2
 8006a18:	2b08      	cmp	r3, #8
 8006a1a:	d111      	bne.n	8006a40 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2208      	movs	r2, #8
 8006a22:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	0018      	movs	r0, r3
 8006a28:	f000 f83c 	bl	8006aa4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2284      	movs	r2, #132	; 0x84
 8006a30:	2108      	movs	r1, #8
 8006a32:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2278      	movs	r2, #120	; 0x78
 8006a38:	2100      	movs	r1, #0
 8006a3a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e02c      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	69da      	ldr	r2, [r3, #28]
 8006a46:	2380      	movs	r3, #128	; 0x80
 8006a48:	011b      	lsls	r3, r3, #4
 8006a4a:	401a      	ands	r2, r3
 8006a4c:	2380      	movs	r3, #128	; 0x80
 8006a4e:	011b      	lsls	r3, r3, #4
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d112      	bne.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2280      	movs	r2, #128	; 0x80
 8006a5a:	0112      	lsls	r2, r2, #4
 8006a5c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	0018      	movs	r0, r3
 8006a62:	f000 f81f 	bl	8006aa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2284      	movs	r2, #132	; 0x84
 8006a6a:	2120      	movs	r1, #32
 8006a6c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2278      	movs	r2, #120	; 0x78
 8006a72:	2100      	movs	r1, #0
 8006a74:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e00f      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69db      	ldr	r3, [r3, #28]
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	4013      	ands	r3, r2
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	425a      	negs	r2, r3
 8006a8a:	4153      	adcs	r3, r2
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	001a      	movs	r2, r3
 8006a90:	1dfb      	adds	r3, r7, #7
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d0a4      	beq.n	80069e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	b004      	add	sp, #16
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08e      	sub	sp, #56	; 0x38
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aac:	f3ef 8310 	mrs	r3, PRIMASK
 8006ab0:	617b      	str	r3, [r7, #20]
  return(result);
 8006ab2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	f383 8810 	msr	PRIMASK, r3
}
 8006ac0:	46c0      	nop			; (mov r8, r8)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4926      	ldr	r1, [pc, #152]	; (8006b68 <UART_EndRxTransfer+0xc4>)
 8006ace:	400a      	ands	r2, r1
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	f383 8810 	msr	PRIMASK, r3
}
 8006adc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ade:	f3ef 8310 	mrs	r3, PRIMASK
 8006ae2:	623b      	str	r3, [r7, #32]
  return(result);
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ae8:	2301      	movs	r3, #1
 8006aea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	f383 8810 	msr	PRIMASK, r3
}
 8006af2:	46c0      	nop			; (mov r8, r8)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2101      	movs	r1, #1
 8006b00:	438a      	bics	r2, r1
 8006b02:	609a      	str	r2, [r3, #8]
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	f383 8810 	msr	PRIMASK, r3
}
 8006b0e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d118      	bne.n	8006b4a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b18:	f3ef 8310 	mrs	r3, PRIMASK
 8006b1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b1e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b22:	2301      	movs	r3, #1
 8006b24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f383 8810 	msr	PRIMASK, r3
}
 8006b2c:	46c0      	nop			; (mov r8, r8)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2110      	movs	r1, #16
 8006b3a:	438a      	bics	r2, r1
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	f383 8810 	msr	PRIMASK, r3
}
 8006b48:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2280      	movs	r2, #128	; 0x80
 8006b4e:	2120      	movs	r1, #32
 8006b50:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006b5e:	46c0      	nop			; (mov r8, r8)
 8006b60:	46bd      	mov	sp, r7
 8006b62:	b00e      	add	sp, #56	; 0x38
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	46c0      	nop			; (mov r8, r8)
 8006b68:	fffffedf 	.word	0xfffffedf

08006b6c <__errno>:
 8006b6c:	4b01      	ldr	r3, [pc, #4]	; (8006b74 <__errno+0x8>)
 8006b6e:	6818      	ldr	r0, [r3, #0]
 8006b70:	4770      	bx	lr
 8006b72:	46c0      	nop			; (mov r8, r8)
 8006b74:	2000000c 	.word	0x2000000c

08006b78 <__libc_init_array>:
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	2600      	movs	r6, #0
 8006b7c:	4d0c      	ldr	r5, [pc, #48]	; (8006bb0 <__libc_init_array+0x38>)
 8006b7e:	4c0d      	ldr	r4, [pc, #52]	; (8006bb4 <__libc_init_array+0x3c>)
 8006b80:	1b64      	subs	r4, r4, r5
 8006b82:	10a4      	asrs	r4, r4, #2
 8006b84:	42a6      	cmp	r6, r4
 8006b86:	d109      	bne.n	8006b9c <__libc_init_array+0x24>
 8006b88:	2600      	movs	r6, #0
 8006b8a:	f002 ffbb 	bl	8009b04 <_init>
 8006b8e:	4d0a      	ldr	r5, [pc, #40]	; (8006bb8 <__libc_init_array+0x40>)
 8006b90:	4c0a      	ldr	r4, [pc, #40]	; (8006bbc <__libc_init_array+0x44>)
 8006b92:	1b64      	subs	r4, r4, r5
 8006b94:	10a4      	asrs	r4, r4, #2
 8006b96:	42a6      	cmp	r6, r4
 8006b98:	d105      	bne.n	8006ba6 <__libc_init_array+0x2e>
 8006b9a:	bd70      	pop	{r4, r5, r6, pc}
 8006b9c:	00b3      	lsls	r3, r6, #2
 8006b9e:	58eb      	ldr	r3, [r5, r3]
 8006ba0:	4798      	blx	r3
 8006ba2:	3601      	adds	r6, #1
 8006ba4:	e7ee      	b.n	8006b84 <__libc_init_array+0xc>
 8006ba6:	00b3      	lsls	r3, r6, #2
 8006ba8:	58eb      	ldr	r3, [r5, r3]
 8006baa:	4798      	blx	r3
 8006bac:	3601      	adds	r6, #1
 8006bae:	e7f2      	b.n	8006b96 <__libc_init_array+0x1e>
 8006bb0:	0800a11c 	.word	0x0800a11c
 8006bb4:	0800a11c 	.word	0x0800a11c
 8006bb8:	0800a11c 	.word	0x0800a11c
 8006bbc:	0800a120 	.word	0x0800a120

08006bc0 <memset>:
 8006bc0:	0003      	movs	r3, r0
 8006bc2:	1882      	adds	r2, r0, r2
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d100      	bne.n	8006bca <memset+0xa>
 8006bc8:	4770      	bx	lr
 8006bca:	7019      	strb	r1, [r3, #0]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	e7f9      	b.n	8006bc4 <memset+0x4>

08006bd0 <__cvt>:
 8006bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bd2:	001e      	movs	r6, r3
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	0014      	movs	r4, r2
 8006bd8:	b08b      	sub	sp, #44	; 0x2c
 8006bda:	429e      	cmp	r6, r3
 8006bdc:	da04      	bge.n	8006be8 <__cvt+0x18>
 8006bde:	2180      	movs	r1, #128	; 0x80
 8006be0:	0609      	lsls	r1, r1, #24
 8006be2:	1873      	adds	r3, r6, r1
 8006be4:	001e      	movs	r6, r3
 8006be6:	232d      	movs	r3, #45	; 0x2d
 8006be8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006bea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006bec:	7013      	strb	r3, [r2, #0]
 8006bee:	2320      	movs	r3, #32
 8006bf0:	2203      	movs	r2, #3
 8006bf2:	439f      	bics	r7, r3
 8006bf4:	2f46      	cmp	r7, #70	; 0x46
 8006bf6:	d007      	beq.n	8006c08 <__cvt+0x38>
 8006bf8:	003b      	movs	r3, r7
 8006bfa:	3b45      	subs	r3, #69	; 0x45
 8006bfc:	4259      	negs	r1, r3
 8006bfe:	414b      	adcs	r3, r1
 8006c00:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006c02:	3a01      	subs	r2, #1
 8006c04:	18cb      	adds	r3, r1, r3
 8006c06:	9310      	str	r3, [sp, #64]	; 0x40
 8006c08:	ab09      	add	r3, sp, #36	; 0x24
 8006c0a:	9304      	str	r3, [sp, #16]
 8006c0c:	ab08      	add	r3, sp, #32
 8006c0e:	9303      	str	r3, [sp, #12]
 8006c10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c12:	9200      	str	r2, [sp, #0]
 8006c14:	9302      	str	r3, [sp, #8]
 8006c16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c18:	0022      	movs	r2, r4
 8006c1a:	9301      	str	r3, [sp, #4]
 8006c1c:	0033      	movs	r3, r6
 8006c1e:	f000 fcf1 	bl	8007604 <_dtoa_r>
 8006c22:	0005      	movs	r5, r0
 8006c24:	2f47      	cmp	r7, #71	; 0x47
 8006c26:	d102      	bne.n	8006c2e <__cvt+0x5e>
 8006c28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c2a:	07db      	lsls	r3, r3, #31
 8006c2c:	d528      	bpl.n	8006c80 <__cvt+0xb0>
 8006c2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c30:	18eb      	adds	r3, r5, r3
 8006c32:	9307      	str	r3, [sp, #28]
 8006c34:	2f46      	cmp	r7, #70	; 0x46
 8006c36:	d114      	bne.n	8006c62 <__cvt+0x92>
 8006c38:	782b      	ldrb	r3, [r5, #0]
 8006c3a:	2b30      	cmp	r3, #48	; 0x30
 8006c3c:	d10c      	bne.n	8006c58 <__cvt+0x88>
 8006c3e:	2200      	movs	r2, #0
 8006c40:	2300      	movs	r3, #0
 8006c42:	0020      	movs	r0, r4
 8006c44:	0031      	movs	r1, r6
 8006c46:	f7f9 fc01 	bl	800044c <__aeabi_dcmpeq>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d104      	bne.n	8006c58 <__cvt+0x88>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c52:	1a9b      	subs	r3, r3, r2
 8006c54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c5a:	9a07      	ldr	r2, [sp, #28]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	18d3      	adds	r3, r2, r3
 8006c60:	9307      	str	r3, [sp, #28]
 8006c62:	2200      	movs	r2, #0
 8006c64:	2300      	movs	r3, #0
 8006c66:	0020      	movs	r0, r4
 8006c68:	0031      	movs	r1, r6
 8006c6a:	f7f9 fbef 	bl	800044c <__aeabi_dcmpeq>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d001      	beq.n	8006c76 <__cvt+0xa6>
 8006c72:	9b07      	ldr	r3, [sp, #28]
 8006c74:	9309      	str	r3, [sp, #36]	; 0x24
 8006c76:	2230      	movs	r2, #48	; 0x30
 8006c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c7a:	9907      	ldr	r1, [sp, #28]
 8006c7c:	428b      	cmp	r3, r1
 8006c7e:	d306      	bcc.n	8006c8e <__cvt+0xbe>
 8006c80:	0028      	movs	r0, r5
 8006c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c84:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006c86:	1b5b      	subs	r3, r3, r5
 8006c88:	6013      	str	r3, [r2, #0]
 8006c8a:	b00b      	add	sp, #44	; 0x2c
 8006c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c8e:	1c59      	adds	r1, r3, #1
 8006c90:	9109      	str	r1, [sp, #36]	; 0x24
 8006c92:	701a      	strb	r2, [r3, #0]
 8006c94:	e7f0      	b.n	8006c78 <__cvt+0xa8>

08006c96 <__exponent>:
 8006c96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c98:	1c83      	adds	r3, r0, #2
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	9303      	str	r3, [sp, #12]
 8006c9e:	0005      	movs	r5, r0
 8006ca0:	000c      	movs	r4, r1
 8006ca2:	232b      	movs	r3, #43	; 0x2b
 8006ca4:	7002      	strb	r2, [r0, #0]
 8006ca6:	2900      	cmp	r1, #0
 8006ca8:	da01      	bge.n	8006cae <__exponent+0x18>
 8006caa:	424c      	negs	r4, r1
 8006cac:	3302      	adds	r3, #2
 8006cae:	706b      	strb	r3, [r5, #1]
 8006cb0:	2c09      	cmp	r4, #9
 8006cb2:	dd31      	ble.n	8006d18 <__exponent+0x82>
 8006cb4:	270a      	movs	r7, #10
 8006cb6:	ab04      	add	r3, sp, #16
 8006cb8:	1dde      	adds	r6, r3, #7
 8006cba:	0020      	movs	r0, r4
 8006cbc:	0039      	movs	r1, r7
 8006cbe:	9601      	str	r6, [sp, #4]
 8006cc0:	f7f9 fbae 	bl	8000420 <__aeabi_idivmod>
 8006cc4:	3e01      	subs	r6, #1
 8006cc6:	3130      	adds	r1, #48	; 0x30
 8006cc8:	0020      	movs	r0, r4
 8006cca:	7031      	strb	r1, [r6, #0]
 8006ccc:	0039      	movs	r1, r7
 8006cce:	9402      	str	r4, [sp, #8]
 8006cd0:	f7f9 fac0 	bl	8000254 <__divsi3>
 8006cd4:	9b02      	ldr	r3, [sp, #8]
 8006cd6:	0004      	movs	r4, r0
 8006cd8:	2b63      	cmp	r3, #99	; 0x63
 8006cda:	dcee      	bgt.n	8006cba <__exponent+0x24>
 8006cdc:	9b01      	ldr	r3, [sp, #4]
 8006cde:	3430      	adds	r4, #48	; 0x30
 8006ce0:	1e9a      	subs	r2, r3, #2
 8006ce2:	0013      	movs	r3, r2
 8006ce4:	9903      	ldr	r1, [sp, #12]
 8006ce6:	7014      	strb	r4, [r2, #0]
 8006ce8:	a804      	add	r0, sp, #16
 8006cea:	3007      	adds	r0, #7
 8006cec:	4298      	cmp	r0, r3
 8006cee:	d80e      	bhi.n	8006d0e <__exponent+0x78>
 8006cf0:	ab04      	add	r3, sp, #16
 8006cf2:	3307      	adds	r3, #7
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d804      	bhi.n	8006d04 <__exponent+0x6e>
 8006cfa:	ab04      	add	r3, sp, #16
 8006cfc:	3009      	adds	r0, #9
 8006cfe:	18c0      	adds	r0, r0, r3
 8006d00:	9b01      	ldr	r3, [sp, #4]
 8006d02:	1ac0      	subs	r0, r0, r3
 8006d04:	9b03      	ldr	r3, [sp, #12]
 8006d06:	1818      	adds	r0, r3, r0
 8006d08:	1b40      	subs	r0, r0, r5
 8006d0a:	b007      	add	sp, #28
 8006d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d0e:	7818      	ldrb	r0, [r3, #0]
 8006d10:	3301      	adds	r3, #1
 8006d12:	7008      	strb	r0, [r1, #0]
 8006d14:	3101      	adds	r1, #1
 8006d16:	e7e7      	b.n	8006ce8 <__exponent+0x52>
 8006d18:	2330      	movs	r3, #48	; 0x30
 8006d1a:	18e4      	adds	r4, r4, r3
 8006d1c:	70ab      	strb	r3, [r5, #2]
 8006d1e:	1d28      	adds	r0, r5, #4
 8006d20:	70ec      	strb	r4, [r5, #3]
 8006d22:	e7f1      	b.n	8006d08 <__exponent+0x72>

08006d24 <_printf_float>:
 8006d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d26:	b095      	sub	sp, #84	; 0x54
 8006d28:	000c      	movs	r4, r1
 8006d2a:	9209      	str	r2, [sp, #36]	; 0x24
 8006d2c:	001e      	movs	r6, r3
 8006d2e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006d30:	0007      	movs	r7, r0
 8006d32:	f001 fa81 	bl	8008238 <_localeconv_r>
 8006d36:	6803      	ldr	r3, [r0, #0]
 8006d38:	0018      	movs	r0, r3
 8006d3a:	930c      	str	r3, [sp, #48]	; 0x30
 8006d3c:	f7f9 f9e4 	bl	8000108 <strlen>
 8006d40:	2300      	movs	r3, #0
 8006d42:	9312      	str	r3, [sp, #72]	; 0x48
 8006d44:	7e23      	ldrb	r3, [r4, #24]
 8006d46:	2207      	movs	r2, #7
 8006d48:	930a      	str	r3, [sp, #40]	; 0x28
 8006d4a:	6823      	ldr	r3, [r4, #0]
 8006d4c:	900e      	str	r0, [sp, #56]	; 0x38
 8006d4e:	930d      	str	r3, [sp, #52]	; 0x34
 8006d50:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006d52:	682b      	ldr	r3, [r5, #0]
 8006d54:	05c9      	lsls	r1, r1, #23
 8006d56:	d547      	bpl.n	8006de8 <_printf_float+0xc4>
 8006d58:	189b      	adds	r3, r3, r2
 8006d5a:	4393      	bics	r3, r2
 8006d5c:	001a      	movs	r2, r3
 8006d5e:	3208      	adds	r2, #8
 8006d60:	602a      	str	r2, [r5, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	64a2      	str	r2, [r4, #72]	; 0x48
 8006d68:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006d6e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006d70:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d72:	006b      	lsls	r3, r5, #1
 8006d74:	085b      	lsrs	r3, r3, #1
 8006d76:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006d7a:	4ba7      	ldr	r3, [pc, #668]	; (8007018 <_printf_float+0x2f4>)
 8006d7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006d7e:	4252      	negs	r2, r2
 8006d80:	f7fb fff8 	bl	8002d74 <__aeabi_dcmpun>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d131      	bne.n	8006dec <_printf_float+0xc8>
 8006d88:	2201      	movs	r2, #1
 8006d8a:	4ba3      	ldr	r3, [pc, #652]	; (8007018 <_printf_float+0x2f4>)
 8006d8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006d8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006d90:	4252      	negs	r2, r2
 8006d92:	f7f9 fb6b 	bl	800046c <__aeabi_dcmple>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d128      	bne.n	8006dec <_printf_float+0xc8>
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	0029      	movs	r1, r5
 8006da0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006da2:	f7f9 fb59 	bl	8000458 <__aeabi_dcmplt>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d003      	beq.n	8006db2 <_printf_float+0x8e>
 8006daa:	0023      	movs	r3, r4
 8006dac:	222d      	movs	r2, #45	; 0x2d
 8006dae:	3343      	adds	r3, #67	; 0x43
 8006db0:	701a      	strb	r2, [r3, #0]
 8006db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006db4:	4d99      	ldr	r5, [pc, #612]	; (800701c <_printf_float+0x2f8>)
 8006db6:	2b47      	cmp	r3, #71	; 0x47
 8006db8:	d900      	bls.n	8006dbc <_printf_float+0x98>
 8006dba:	4d99      	ldr	r5, [pc, #612]	; (8007020 <_printf_float+0x2fc>)
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006dc0:	6123      	str	r3, [r4, #16]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	439a      	bics	r2, r3
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	6022      	str	r2, [r4, #0]
 8006dca:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dce:	0021      	movs	r1, r4
 8006dd0:	0038      	movs	r0, r7
 8006dd2:	9600      	str	r6, [sp, #0]
 8006dd4:	aa13      	add	r2, sp, #76	; 0x4c
 8006dd6:	f000 f9e7 	bl	80071a8 <_printf_common>
 8006dda:	1c43      	adds	r3, r0, #1
 8006ddc:	d000      	beq.n	8006de0 <_printf_float+0xbc>
 8006dde:	e0a2      	b.n	8006f26 <_printf_float+0x202>
 8006de0:	2001      	movs	r0, #1
 8006de2:	4240      	negs	r0, r0
 8006de4:	b015      	add	sp, #84	; 0x54
 8006de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006de8:	3307      	adds	r3, #7
 8006dea:	e7b6      	b.n	8006d5a <_printf_float+0x36>
 8006dec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006dee:	002b      	movs	r3, r5
 8006df0:	0010      	movs	r0, r2
 8006df2:	0029      	movs	r1, r5
 8006df4:	f7fb ffbe 	bl	8002d74 <__aeabi_dcmpun>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d00b      	beq.n	8006e14 <_printf_float+0xf0>
 8006dfc:	2d00      	cmp	r5, #0
 8006dfe:	da03      	bge.n	8006e08 <_printf_float+0xe4>
 8006e00:	0023      	movs	r3, r4
 8006e02:	222d      	movs	r2, #45	; 0x2d
 8006e04:	3343      	adds	r3, #67	; 0x43
 8006e06:	701a      	strb	r2, [r3, #0]
 8006e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e0a:	4d86      	ldr	r5, [pc, #536]	; (8007024 <_printf_float+0x300>)
 8006e0c:	2b47      	cmp	r3, #71	; 0x47
 8006e0e:	d9d5      	bls.n	8006dbc <_printf_float+0x98>
 8006e10:	4d85      	ldr	r5, [pc, #532]	; (8007028 <_printf_float+0x304>)
 8006e12:	e7d3      	b.n	8006dbc <_printf_float+0x98>
 8006e14:	2220      	movs	r2, #32
 8006e16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e18:	6863      	ldr	r3, [r4, #4]
 8006e1a:	4391      	bics	r1, r2
 8006e1c:	910f      	str	r1, [sp, #60]	; 0x3c
 8006e1e:	1c5a      	adds	r2, r3, #1
 8006e20:	d149      	bne.n	8006eb6 <_printf_float+0x192>
 8006e22:	3307      	adds	r3, #7
 8006e24:	6063      	str	r3, [r4, #4]
 8006e26:	2380      	movs	r3, #128	; 0x80
 8006e28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e2a:	00db      	lsls	r3, r3, #3
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	2200      	movs	r2, #0
 8006e30:	9206      	str	r2, [sp, #24]
 8006e32:	aa12      	add	r2, sp, #72	; 0x48
 8006e34:	9205      	str	r2, [sp, #20]
 8006e36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e38:	a908      	add	r1, sp, #32
 8006e3a:	9204      	str	r2, [sp, #16]
 8006e3c:	aa11      	add	r2, sp, #68	; 0x44
 8006e3e:	9203      	str	r2, [sp, #12]
 8006e40:	2223      	movs	r2, #35	; 0x23
 8006e42:	6023      	str	r3, [r4, #0]
 8006e44:	9301      	str	r3, [sp, #4]
 8006e46:	6863      	ldr	r3, [r4, #4]
 8006e48:	1852      	adds	r2, r2, r1
 8006e4a:	9202      	str	r2, [sp, #8]
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	0038      	movs	r0, r7
 8006e50:	002b      	movs	r3, r5
 8006e52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e54:	f7ff febc 	bl	8006bd0 <__cvt>
 8006e58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e5a:	0005      	movs	r5, r0
 8006e5c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006e5e:	2b47      	cmp	r3, #71	; 0x47
 8006e60:	d108      	bne.n	8006e74 <_printf_float+0x150>
 8006e62:	1ccb      	adds	r3, r1, #3
 8006e64:	db02      	blt.n	8006e6c <_printf_float+0x148>
 8006e66:	6863      	ldr	r3, [r4, #4]
 8006e68:	4299      	cmp	r1, r3
 8006e6a:	dd48      	ble.n	8006efe <_printf_float+0x1da>
 8006e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e6e:	3b02      	subs	r3, #2
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	930a      	str	r3, [sp, #40]	; 0x28
 8006e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e76:	2b65      	cmp	r3, #101	; 0x65
 8006e78:	d824      	bhi.n	8006ec4 <_printf_float+0x1a0>
 8006e7a:	0020      	movs	r0, r4
 8006e7c:	001a      	movs	r2, r3
 8006e7e:	3901      	subs	r1, #1
 8006e80:	3050      	adds	r0, #80	; 0x50
 8006e82:	9111      	str	r1, [sp, #68]	; 0x44
 8006e84:	f7ff ff07 	bl	8006c96 <__exponent>
 8006e88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e8a:	900b      	str	r0, [sp, #44]	; 0x2c
 8006e8c:	1813      	adds	r3, r2, r0
 8006e8e:	6123      	str	r3, [r4, #16]
 8006e90:	2a01      	cmp	r2, #1
 8006e92:	dc02      	bgt.n	8006e9a <_printf_float+0x176>
 8006e94:	6822      	ldr	r2, [r4, #0]
 8006e96:	07d2      	lsls	r2, r2, #31
 8006e98:	d501      	bpl.n	8006e9e <_printf_float+0x17a>
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	6123      	str	r3, [r4, #16]
 8006e9e:	2323      	movs	r3, #35	; 0x23
 8006ea0:	aa08      	add	r2, sp, #32
 8006ea2:	189b      	adds	r3, r3, r2
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d100      	bne.n	8006eac <_printf_float+0x188>
 8006eaa:	e78f      	b.n	8006dcc <_printf_float+0xa8>
 8006eac:	0023      	movs	r3, r4
 8006eae:	222d      	movs	r2, #45	; 0x2d
 8006eb0:	3343      	adds	r3, #67	; 0x43
 8006eb2:	701a      	strb	r2, [r3, #0]
 8006eb4:	e78a      	b.n	8006dcc <_printf_float+0xa8>
 8006eb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006eb8:	2a47      	cmp	r2, #71	; 0x47
 8006eba:	d1b4      	bne.n	8006e26 <_printf_float+0x102>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1b2      	bne.n	8006e26 <_printf_float+0x102>
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	e7af      	b.n	8006e24 <_printf_float+0x100>
 8006ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ec6:	2b66      	cmp	r3, #102	; 0x66
 8006ec8:	d11b      	bne.n	8006f02 <_printf_float+0x1de>
 8006eca:	6863      	ldr	r3, [r4, #4]
 8006ecc:	2900      	cmp	r1, #0
 8006ece:	dd0d      	ble.n	8006eec <_printf_float+0x1c8>
 8006ed0:	6121      	str	r1, [r4, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d102      	bne.n	8006edc <_printf_float+0x1b8>
 8006ed6:	6822      	ldr	r2, [r4, #0]
 8006ed8:	07d2      	lsls	r2, r2, #31
 8006eda:	d502      	bpl.n	8006ee2 <_printf_float+0x1be>
 8006edc:	3301      	adds	r3, #1
 8006ede:	1859      	adds	r1, r3, r1
 8006ee0:	6121      	str	r1, [r4, #16]
 8006ee2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ee4:	65a3      	str	r3, [r4, #88]	; 0x58
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eea:	e7d8      	b.n	8006e9e <_printf_float+0x17a>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d103      	bne.n	8006ef8 <_printf_float+0x1d4>
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	6821      	ldr	r1, [r4, #0]
 8006ef4:	4211      	tst	r1, r2
 8006ef6:	d000      	beq.n	8006efa <_printf_float+0x1d6>
 8006ef8:	1c9a      	adds	r2, r3, #2
 8006efa:	6122      	str	r2, [r4, #16]
 8006efc:	e7f1      	b.n	8006ee2 <_printf_float+0x1be>
 8006efe:	2367      	movs	r3, #103	; 0x67
 8006f00:	930a      	str	r3, [sp, #40]	; 0x28
 8006f02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f06:	4293      	cmp	r3, r2
 8006f08:	db06      	blt.n	8006f18 <_printf_float+0x1f4>
 8006f0a:	6822      	ldr	r2, [r4, #0]
 8006f0c:	6123      	str	r3, [r4, #16]
 8006f0e:	07d2      	lsls	r2, r2, #31
 8006f10:	d5e7      	bpl.n	8006ee2 <_printf_float+0x1be>
 8006f12:	3301      	adds	r3, #1
 8006f14:	6123      	str	r3, [r4, #16]
 8006f16:	e7e4      	b.n	8006ee2 <_printf_float+0x1be>
 8006f18:	2101      	movs	r1, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	dc01      	bgt.n	8006f22 <_printf_float+0x1fe>
 8006f1e:	1849      	adds	r1, r1, r1
 8006f20:	1ac9      	subs	r1, r1, r3
 8006f22:	1852      	adds	r2, r2, r1
 8006f24:	e7e9      	b.n	8006efa <_printf_float+0x1d6>
 8006f26:	6822      	ldr	r2, [r4, #0]
 8006f28:	0553      	lsls	r3, r2, #21
 8006f2a:	d407      	bmi.n	8006f3c <_printf_float+0x218>
 8006f2c:	6923      	ldr	r3, [r4, #16]
 8006f2e:	002a      	movs	r2, r5
 8006f30:	0038      	movs	r0, r7
 8006f32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f34:	47b0      	blx	r6
 8006f36:	1c43      	adds	r3, r0, #1
 8006f38:	d128      	bne.n	8006f8c <_printf_float+0x268>
 8006f3a:	e751      	b.n	8006de0 <_printf_float+0xbc>
 8006f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f3e:	2b65      	cmp	r3, #101	; 0x65
 8006f40:	d800      	bhi.n	8006f44 <_printf_float+0x220>
 8006f42:	e0e1      	b.n	8007108 <_printf_float+0x3e4>
 8006f44:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006f46:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	f7f9 fa7e 	bl	800044c <__aeabi_dcmpeq>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	d031      	beq.n	8006fb8 <_printf_float+0x294>
 8006f54:	2301      	movs	r3, #1
 8006f56:	0038      	movs	r0, r7
 8006f58:	4a34      	ldr	r2, [pc, #208]	; (800702c <_printf_float+0x308>)
 8006f5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f5c:	47b0      	blx	r6
 8006f5e:	1c43      	adds	r3, r0, #1
 8006f60:	d100      	bne.n	8006f64 <_printf_float+0x240>
 8006f62:	e73d      	b.n	8006de0 <_printf_float+0xbc>
 8006f64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	db02      	blt.n	8006f72 <_printf_float+0x24e>
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	07db      	lsls	r3, r3, #31
 8006f70:	d50c      	bpl.n	8006f8c <_printf_float+0x268>
 8006f72:	0038      	movs	r0, r7
 8006f74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f7a:	47b0      	blx	r6
 8006f7c:	2500      	movs	r5, #0
 8006f7e:	1c43      	adds	r3, r0, #1
 8006f80:	d100      	bne.n	8006f84 <_printf_float+0x260>
 8006f82:	e72d      	b.n	8006de0 <_printf_float+0xbc>
 8006f84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f86:	3b01      	subs	r3, #1
 8006f88:	42ab      	cmp	r3, r5
 8006f8a:	dc0a      	bgt.n	8006fa2 <_printf_float+0x27e>
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	079b      	lsls	r3, r3, #30
 8006f90:	d500      	bpl.n	8006f94 <_printf_float+0x270>
 8006f92:	e106      	b.n	80071a2 <_printf_float+0x47e>
 8006f94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f96:	68e0      	ldr	r0, [r4, #12]
 8006f98:	4298      	cmp	r0, r3
 8006f9a:	db00      	blt.n	8006f9e <_printf_float+0x27a>
 8006f9c:	e722      	b.n	8006de4 <_printf_float+0xc0>
 8006f9e:	0018      	movs	r0, r3
 8006fa0:	e720      	b.n	8006de4 <_printf_float+0xc0>
 8006fa2:	0022      	movs	r2, r4
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	0038      	movs	r0, r7
 8006fa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006faa:	321a      	adds	r2, #26
 8006fac:	47b0      	blx	r6
 8006fae:	1c43      	adds	r3, r0, #1
 8006fb0:	d100      	bne.n	8006fb4 <_printf_float+0x290>
 8006fb2:	e715      	b.n	8006de0 <_printf_float+0xbc>
 8006fb4:	3501      	adds	r5, #1
 8006fb6:	e7e5      	b.n	8006f84 <_printf_float+0x260>
 8006fb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	dc38      	bgt.n	8007030 <_printf_float+0x30c>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	0038      	movs	r0, r7
 8006fc2:	4a1a      	ldr	r2, [pc, #104]	; (800702c <_printf_float+0x308>)
 8006fc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fc6:	47b0      	blx	r6
 8006fc8:	1c43      	adds	r3, r0, #1
 8006fca:	d100      	bne.n	8006fce <_printf_float+0x2aa>
 8006fcc:	e708      	b.n	8006de0 <_printf_float+0xbc>
 8006fce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	d102      	bne.n	8006fdc <_printf_float+0x2b8>
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	07db      	lsls	r3, r3, #31
 8006fda:	d5d7      	bpl.n	8006f8c <_printf_float+0x268>
 8006fdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fde:	0038      	movs	r0, r7
 8006fe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fe2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fe4:	47b0      	blx	r6
 8006fe6:	1c43      	adds	r3, r0, #1
 8006fe8:	d100      	bne.n	8006fec <_printf_float+0x2c8>
 8006fea:	e6f9      	b.n	8006de0 <_printf_float+0xbc>
 8006fec:	2300      	movs	r3, #0
 8006fee:	930a      	str	r3, [sp, #40]	; 0x28
 8006ff0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ff4:	425b      	negs	r3, r3
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	dc01      	bgt.n	8006ffe <_printf_float+0x2da>
 8006ffa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ffc:	e797      	b.n	8006f2e <_printf_float+0x20a>
 8006ffe:	0022      	movs	r2, r4
 8007000:	2301      	movs	r3, #1
 8007002:	0038      	movs	r0, r7
 8007004:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007006:	321a      	adds	r2, #26
 8007008:	47b0      	blx	r6
 800700a:	1c43      	adds	r3, r0, #1
 800700c:	d100      	bne.n	8007010 <_printf_float+0x2ec>
 800700e:	e6e7      	b.n	8006de0 <_printf_float+0xbc>
 8007010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007012:	3301      	adds	r3, #1
 8007014:	e7eb      	b.n	8006fee <_printf_float+0x2ca>
 8007016:	46c0      	nop			; (mov r8, r8)
 8007018:	7fefffff 	.word	0x7fefffff
 800701c:	08009d3c 	.word	0x08009d3c
 8007020:	08009d40 	.word	0x08009d40
 8007024:	08009d44 	.word	0x08009d44
 8007028:	08009d48 	.word	0x08009d48
 800702c:	08009d4c 	.word	0x08009d4c
 8007030:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007032:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007034:	920a      	str	r2, [sp, #40]	; 0x28
 8007036:	429a      	cmp	r2, r3
 8007038:	dd00      	ble.n	800703c <_printf_float+0x318>
 800703a:	930a      	str	r3, [sp, #40]	; 0x28
 800703c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800703e:	2b00      	cmp	r3, #0
 8007040:	dc3c      	bgt.n	80070bc <_printf_float+0x398>
 8007042:	2300      	movs	r3, #0
 8007044:	930d      	str	r3, [sp, #52]	; 0x34
 8007046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007048:	43db      	mvns	r3, r3
 800704a:	17db      	asrs	r3, r3, #31
 800704c:	930f      	str	r3, [sp, #60]	; 0x3c
 800704e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007050:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007052:	930b      	str	r3, [sp, #44]	; 0x2c
 8007054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007056:	4013      	ands	r3, r2
 8007058:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800705e:	4293      	cmp	r3, r2
 8007060:	dc34      	bgt.n	80070cc <_printf_float+0x3a8>
 8007062:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007064:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007066:	4293      	cmp	r3, r2
 8007068:	db3d      	blt.n	80070e6 <_printf_float+0x3c2>
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	07db      	lsls	r3, r3, #31
 800706e:	d43a      	bmi.n	80070e6 <_printf_float+0x3c2>
 8007070:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007074:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	1a52      	subs	r2, r2, r1
 800707a:	920a      	str	r2, [sp, #40]	; 0x28
 800707c:	429a      	cmp	r2, r3
 800707e:	dd00      	ble.n	8007082 <_printf_float+0x35e>
 8007080:	930a      	str	r3, [sp, #40]	; 0x28
 8007082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007084:	2b00      	cmp	r3, #0
 8007086:	dc36      	bgt.n	80070f6 <_printf_float+0x3d2>
 8007088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800708a:	2500      	movs	r5, #0
 800708c:	43db      	mvns	r3, r3
 800708e:	17db      	asrs	r3, r3, #31
 8007090:	930b      	str	r3, [sp, #44]	; 0x2c
 8007092:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007094:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007096:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007098:	1a9b      	subs	r3, r3, r2
 800709a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800709c:	400a      	ands	r2, r1
 800709e:	1a9b      	subs	r3, r3, r2
 80070a0:	42ab      	cmp	r3, r5
 80070a2:	dc00      	bgt.n	80070a6 <_printf_float+0x382>
 80070a4:	e772      	b.n	8006f8c <_printf_float+0x268>
 80070a6:	0022      	movs	r2, r4
 80070a8:	2301      	movs	r3, #1
 80070aa:	0038      	movs	r0, r7
 80070ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070ae:	321a      	adds	r2, #26
 80070b0:	47b0      	blx	r6
 80070b2:	1c43      	adds	r3, r0, #1
 80070b4:	d100      	bne.n	80070b8 <_printf_float+0x394>
 80070b6:	e693      	b.n	8006de0 <_printf_float+0xbc>
 80070b8:	3501      	adds	r5, #1
 80070ba:	e7ea      	b.n	8007092 <_printf_float+0x36e>
 80070bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070be:	002a      	movs	r2, r5
 80070c0:	0038      	movs	r0, r7
 80070c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070c4:	47b0      	blx	r6
 80070c6:	1c43      	adds	r3, r0, #1
 80070c8:	d1bb      	bne.n	8007042 <_printf_float+0x31e>
 80070ca:	e689      	b.n	8006de0 <_printf_float+0xbc>
 80070cc:	0022      	movs	r2, r4
 80070ce:	2301      	movs	r3, #1
 80070d0:	0038      	movs	r0, r7
 80070d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070d4:	321a      	adds	r2, #26
 80070d6:	47b0      	blx	r6
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	d100      	bne.n	80070de <_printf_float+0x3ba>
 80070dc:	e680      	b.n	8006de0 <_printf_float+0xbc>
 80070de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070e0:	3301      	adds	r3, #1
 80070e2:	930d      	str	r3, [sp, #52]	; 0x34
 80070e4:	e7b3      	b.n	800704e <_printf_float+0x32a>
 80070e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070e8:	0038      	movs	r0, r7
 80070ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070ee:	47b0      	blx	r6
 80070f0:	1c43      	adds	r3, r0, #1
 80070f2:	d1bd      	bne.n	8007070 <_printf_float+0x34c>
 80070f4:	e674      	b.n	8006de0 <_printf_float+0xbc>
 80070f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070f8:	0038      	movs	r0, r7
 80070fa:	18ea      	adds	r2, r5, r3
 80070fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007100:	47b0      	blx	r6
 8007102:	1c43      	adds	r3, r0, #1
 8007104:	d1c0      	bne.n	8007088 <_printf_float+0x364>
 8007106:	e66b      	b.n	8006de0 <_printf_float+0xbc>
 8007108:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800710a:	2b01      	cmp	r3, #1
 800710c:	dc02      	bgt.n	8007114 <_printf_float+0x3f0>
 800710e:	2301      	movs	r3, #1
 8007110:	421a      	tst	r2, r3
 8007112:	d034      	beq.n	800717e <_printf_float+0x45a>
 8007114:	2301      	movs	r3, #1
 8007116:	002a      	movs	r2, r5
 8007118:	0038      	movs	r0, r7
 800711a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800711c:	47b0      	blx	r6
 800711e:	1c43      	adds	r3, r0, #1
 8007120:	d100      	bne.n	8007124 <_printf_float+0x400>
 8007122:	e65d      	b.n	8006de0 <_printf_float+0xbc>
 8007124:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007126:	0038      	movs	r0, r7
 8007128:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800712a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800712c:	47b0      	blx	r6
 800712e:	1c43      	adds	r3, r0, #1
 8007130:	d100      	bne.n	8007134 <_printf_float+0x410>
 8007132:	e655      	b.n	8006de0 <_printf_float+0xbc>
 8007134:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007136:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007138:	2200      	movs	r2, #0
 800713a:	2300      	movs	r3, #0
 800713c:	f7f9 f986 	bl	800044c <__aeabi_dcmpeq>
 8007140:	2800      	cmp	r0, #0
 8007142:	d11a      	bne.n	800717a <_printf_float+0x456>
 8007144:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007146:	1c6a      	adds	r2, r5, #1
 8007148:	3b01      	subs	r3, #1
 800714a:	0038      	movs	r0, r7
 800714c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800714e:	47b0      	blx	r6
 8007150:	1c43      	adds	r3, r0, #1
 8007152:	d10e      	bne.n	8007172 <_printf_float+0x44e>
 8007154:	e644      	b.n	8006de0 <_printf_float+0xbc>
 8007156:	0022      	movs	r2, r4
 8007158:	2301      	movs	r3, #1
 800715a:	0038      	movs	r0, r7
 800715c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800715e:	321a      	adds	r2, #26
 8007160:	47b0      	blx	r6
 8007162:	1c43      	adds	r3, r0, #1
 8007164:	d100      	bne.n	8007168 <_printf_float+0x444>
 8007166:	e63b      	b.n	8006de0 <_printf_float+0xbc>
 8007168:	3501      	adds	r5, #1
 800716a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800716c:	3b01      	subs	r3, #1
 800716e:	42ab      	cmp	r3, r5
 8007170:	dcf1      	bgt.n	8007156 <_printf_float+0x432>
 8007172:	0022      	movs	r2, r4
 8007174:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007176:	3250      	adds	r2, #80	; 0x50
 8007178:	e6da      	b.n	8006f30 <_printf_float+0x20c>
 800717a:	2500      	movs	r5, #0
 800717c:	e7f5      	b.n	800716a <_printf_float+0x446>
 800717e:	002a      	movs	r2, r5
 8007180:	e7e3      	b.n	800714a <_printf_float+0x426>
 8007182:	0022      	movs	r2, r4
 8007184:	2301      	movs	r3, #1
 8007186:	0038      	movs	r0, r7
 8007188:	9909      	ldr	r1, [sp, #36]	; 0x24
 800718a:	3219      	adds	r2, #25
 800718c:	47b0      	blx	r6
 800718e:	1c43      	adds	r3, r0, #1
 8007190:	d100      	bne.n	8007194 <_printf_float+0x470>
 8007192:	e625      	b.n	8006de0 <_printf_float+0xbc>
 8007194:	3501      	adds	r5, #1
 8007196:	68e3      	ldr	r3, [r4, #12]
 8007198:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800719a:	1a9b      	subs	r3, r3, r2
 800719c:	42ab      	cmp	r3, r5
 800719e:	dcf0      	bgt.n	8007182 <_printf_float+0x45e>
 80071a0:	e6f8      	b.n	8006f94 <_printf_float+0x270>
 80071a2:	2500      	movs	r5, #0
 80071a4:	e7f7      	b.n	8007196 <_printf_float+0x472>
 80071a6:	46c0      	nop			; (mov r8, r8)

080071a8 <_printf_common>:
 80071a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071aa:	0015      	movs	r5, r2
 80071ac:	9301      	str	r3, [sp, #4]
 80071ae:	688a      	ldr	r2, [r1, #8]
 80071b0:	690b      	ldr	r3, [r1, #16]
 80071b2:	000c      	movs	r4, r1
 80071b4:	9000      	str	r0, [sp, #0]
 80071b6:	4293      	cmp	r3, r2
 80071b8:	da00      	bge.n	80071bc <_printf_common+0x14>
 80071ba:	0013      	movs	r3, r2
 80071bc:	0022      	movs	r2, r4
 80071be:	602b      	str	r3, [r5, #0]
 80071c0:	3243      	adds	r2, #67	; 0x43
 80071c2:	7812      	ldrb	r2, [r2, #0]
 80071c4:	2a00      	cmp	r2, #0
 80071c6:	d001      	beq.n	80071cc <_printf_common+0x24>
 80071c8:	3301      	adds	r3, #1
 80071ca:	602b      	str	r3, [r5, #0]
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	069b      	lsls	r3, r3, #26
 80071d0:	d502      	bpl.n	80071d8 <_printf_common+0x30>
 80071d2:	682b      	ldr	r3, [r5, #0]
 80071d4:	3302      	adds	r3, #2
 80071d6:	602b      	str	r3, [r5, #0]
 80071d8:	6822      	ldr	r2, [r4, #0]
 80071da:	2306      	movs	r3, #6
 80071dc:	0017      	movs	r7, r2
 80071de:	401f      	ands	r7, r3
 80071e0:	421a      	tst	r2, r3
 80071e2:	d027      	beq.n	8007234 <_printf_common+0x8c>
 80071e4:	0023      	movs	r3, r4
 80071e6:	3343      	adds	r3, #67	; 0x43
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	1e5a      	subs	r2, r3, #1
 80071ec:	4193      	sbcs	r3, r2
 80071ee:	6822      	ldr	r2, [r4, #0]
 80071f0:	0692      	lsls	r2, r2, #26
 80071f2:	d430      	bmi.n	8007256 <_printf_common+0xae>
 80071f4:	0022      	movs	r2, r4
 80071f6:	9901      	ldr	r1, [sp, #4]
 80071f8:	9800      	ldr	r0, [sp, #0]
 80071fa:	9e08      	ldr	r6, [sp, #32]
 80071fc:	3243      	adds	r2, #67	; 0x43
 80071fe:	47b0      	blx	r6
 8007200:	1c43      	adds	r3, r0, #1
 8007202:	d025      	beq.n	8007250 <_printf_common+0xa8>
 8007204:	2306      	movs	r3, #6
 8007206:	6820      	ldr	r0, [r4, #0]
 8007208:	682a      	ldr	r2, [r5, #0]
 800720a:	68e1      	ldr	r1, [r4, #12]
 800720c:	2500      	movs	r5, #0
 800720e:	4003      	ands	r3, r0
 8007210:	2b04      	cmp	r3, #4
 8007212:	d103      	bne.n	800721c <_printf_common+0x74>
 8007214:	1a8d      	subs	r5, r1, r2
 8007216:	43eb      	mvns	r3, r5
 8007218:	17db      	asrs	r3, r3, #31
 800721a:	401d      	ands	r5, r3
 800721c:	68a3      	ldr	r3, [r4, #8]
 800721e:	6922      	ldr	r2, [r4, #16]
 8007220:	4293      	cmp	r3, r2
 8007222:	dd01      	ble.n	8007228 <_printf_common+0x80>
 8007224:	1a9b      	subs	r3, r3, r2
 8007226:	18ed      	adds	r5, r5, r3
 8007228:	2700      	movs	r7, #0
 800722a:	42bd      	cmp	r5, r7
 800722c:	d120      	bne.n	8007270 <_printf_common+0xc8>
 800722e:	2000      	movs	r0, #0
 8007230:	e010      	b.n	8007254 <_printf_common+0xac>
 8007232:	3701      	adds	r7, #1
 8007234:	68e3      	ldr	r3, [r4, #12]
 8007236:	682a      	ldr	r2, [r5, #0]
 8007238:	1a9b      	subs	r3, r3, r2
 800723a:	42bb      	cmp	r3, r7
 800723c:	ddd2      	ble.n	80071e4 <_printf_common+0x3c>
 800723e:	0022      	movs	r2, r4
 8007240:	2301      	movs	r3, #1
 8007242:	9901      	ldr	r1, [sp, #4]
 8007244:	9800      	ldr	r0, [sp, #0]
 8007246:	9e08      	ldr	r6, [sp, #32]
 8007248:	3219      	adds	r2, #25
 800724a:	47b0      	blx	r6
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	d1f0      	bne.n	8007232 <_printf_common+0x8a>
 8007250:	2001      	movs	r0, #1
 8007252:	4240      	negs	r0, r0
 8007254:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007256:	2030      	movs	r0, #48	; 0x30
 8007258:	18e1      	adds	r1, r4, r3
 800725a:	3143      	adds	r1, #67	; 0x43
 800725c:	7008      	strb	r0, [r1, #0]
 800725e:	0021      	movs	r1, r4
 8007260:	1c5a      	adds	r2, r3, #1
 8007262:	3145      	adds	r1, #69	; 0x45
 8007264:	7809      	ldrb	r1, [r1, #0]
 8007266:	18a2      	adds	r2, r4, r2
 8007268:	3243      	adds	r2, #67	; 0x43
 800726a:	3302      	adds	r3, #2
 800726c:	7011      	strb	r1, [r2, #0]
 800726e:	e7c1      	b.n	80071f4 <_printf_common+0x4c>
 8007270:	0022      	movs	r2, r4
 8007272:	2301      	movs	r3, #1
 8007274:	9901      	ldr	r1, [sp, #4]
 8007276:	9800      	ldr	r0, [sp, #0]
 8007278:	9e08      	ldr	r6, [sp, #32]
 800727a:	321a      	adds	r2, #26
 800727c:	47b0      	blx	r6
 800727e:	1c43      	adds	r3, r0, #1
 8007280:	d0e6      	beq.n	8007250 <_printf_common+0xa8>
 8007282:	3701      	adds	r7, #1
 8007284:	e7d1      	b.n	800722a <_printf_common+0x82>
	...

08007288 <_printf_i>:
 8007288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800728a:	b08b      	sub	sp, #44	; 0x2c
 800728c:	9206      	str	r2, [sp, #24]
 800728e:	000a      	movs	r2, r1
 8007290:	3243      	adds	r2, #67	; 0x43
 8007292:	9307      	str	r3, [sp, #28]
 8007294:	9005      	str	r0, [sp, #20]
 8007296:	9204      	str	r2, [sp, #16]
 8007298:	7e0a      	ldrb	r2, [r1, #24]
 800729a:	000c      	movs	r4, r1
 800729c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800729e:	2a78      	cmp	r2, #120	; 0x78
 80072a0:	d807      	bhi.n	80072b2 <_printf_i+0x2a>
 80072a2:	2a62      	cmp	r2, #98	; 0x62
 80072a4:	d809      	bhi.n	80072ba <_printf_i+0x32>
 80072a6:	2a00      	cmp	r2, #0
 80072a8:	d100      	bne.n	80072ac <_printf_i+0x24>
 80072aa:	e0c1      	b.n	8007430 <_printf_i+0x1a8>
 80072ac:	2a58      	cmp	r2, #88	; 0x58
 80072ae:	d100      	bne.n	80072b2 <_printf_i+0x2a>
 80072b0:	e08c      	b.n	80073cc <_printf_i+0x144>
 80072b2:	0026      	movs	r6, r4
 80072b4:	3642      	adds	r6, #66	; 0x42
 80072b6:	7032      	strb	r2, [r6, #0]
 80072b8:	e022      	b.n	8007300 <_printf_i+0x78>
 80072ba:	0010      	movs	r0, r2
 80072bc:	3863      	subs	r0, #99	; 0x63
 80072be:	2815      	cmp	r0, #21
 80072c0:	d8f7      	bhi.n	80072b2 <_printf_i+0x2a>
 80072c2:	f7f8 ff33 	bl	800012c <__gnu_thumb1_case_shi>
 80072c6:	0016      	.short	0x0016
 80072c8:	fff6001f 	.word	0xfff6001f
 80072cc:	fff6fff6 	.word	0xfff6fff6
 80072d0:	001ffff6 	.word	0x001ffff6
 80072d4:	fff6fff6 	.word	0xfff6fff6
 80072d8:	fff6fff6 	.word	0xfff6fff6
 80072dc:	003600a8 	.word	0x003600a8
 80072e0:	fff6009a 	.word	0xfff6009a
 80072e4:	00b9fff6 	.word	0x00b9fff6
 80072e8:	0036fff6 	.word	0x0036fff6
 80072ec:	fff6fff6 	.word	0xfff6fff6
 80072f0:	009e      	.short	0x009e
 80072f2:	0026      	movs	r6, r4
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	3642      	adds	r6, #66	; 0x42
 80072f8:	1d11      	adds	r1, r2, #4
 80072fa:	6019      	str	r1, [r3, #0]
 80072fc:	6813      	ldr	r3, [r2, #0]
 80072fe:	7033      	strb	r3, [r6, #0]
 8007300:	2301      	movs	r3, #1
 8007302:	e0a7      	b.n	8007454 <_printf_i+0x1cc>
 8007304:	6808      	ldr	r0, [r1, #0]
 8007306:	6819      	ldr	r1, [r3, #0]
 8007308:	1d0a      	adds	r2, r1, #4
 800730a:	0605      	lsls	r5, r0, #24
 800730c:	d50b      	bpl.n	8007326 <_printf_i+0x9e>
 800730e:	680d      	ldr	r5, [r1, #0]
 8007310:	601a      	str	r2, [r3, #0]
 8007312:	2d00      	cmp	r5, #0
 8007314:	da03      	bge.n	800731e <_printf_i+0x96>
 8007316:	232d      	movs	r3, #45	; 0x2d
 8007318:	9a04      	ldr	r2, [sp, #16]
 800731a:	426d      	negs	r5, r5
 800731c:	7013      	strb	r3, [r2, #0]
 800731e:	4b61      	ldr	r3, [pc, #388]	; (80074a4 <_printf_i+0x21c>)
 8007320:	270a      	movs	r7, #10
 8007322:	9303      	str	r3, [sp, #12]
 8007324:	e01b      	b.n	800735e <_printf_i+0xd6>
 8007326:	680d      	ldr	r5, [r1, #0]
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	0641      	lsls	r1, r0, #25
 800732c:	d5f1      	bpl.n	8007312 <_printf_i+0x8a>
 800732e:	b22d      	sxth	r5, r5
 8007330:	e7ef      	b.n	8007312 <_printf_i+0x8a>
 8007332:	680d      	ldr	r5, [r1, #0]
 8007334:	6819      	ldr	r1, [r3, #0]
 8007336:	1d08      	adds	r0, r1, #4
 8007338:	6018      	str	r0, [r3, #0]
 800733a:	062e      	lsls	r6, r5, #24
 800733c:	d501      	bpl.n	8007342 <_printf_i+0xba>
 800733e:	680d      	ldr	r5, [r1, #0]
 8007340:	e003      	b.n	800734a <_printf_i+0xc2>
 8007342:	066d      	lsls	r5, r5, #25
 8007344:	d5fb      	bpl.n	800733e <_printf_i+0xb6>
 8007346:	680d      	ldr	r5, [r1, #0]
 8007348:	b2ad      	uxth	r5, r5
 800734a:	4b56      	ldr	r3, [pc, #344]	; (80074a4 <_printf_i+0x21c>)
 800734c:	2708      	movs	r7, #8
 800734e:	9303      	str	r3, [sp, #12]
 8007350:	2a6f      	cmp	r2, #111	; 0x6f
 8007352:	d000      	beq.n	8007356 <_printf_i+0xce>
 8007354:	3702      	adds	r7, #2
 8007356:	0023      	movs	r3, r4
 8007358:	2200      	movs	r2, #0
 800735a:	3343      	adds	r3, #67	; 0x43
 800735c:	701a      	strb	r2, [r3, #0]
 800735e:	6863      	ldr	r3, [r4, #4]
 8007360:	60a3      	str	r3, [r4, #8]
 8007362:	2b00      	cmp	r3, #0
 8007364:	db03      	blt.n	800736e <_printf_i+0xe6>
 8007366:	2204      	movs	r2, #4
 8007368:	6821      	ldr	r1, [r4, #0]
 800736a:	4391      	bics	r1, r2
 800736c:	6021      	str	r1, [r4, #0]
 800736e:	2d00      	cmp	r5, #0
 8007370:	d102      	bne.n	8007378 <_printf_i+0xf0>
 8007372:	9e04      	ldr	r6, [sp, #16]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00c      	beq.n	8007392 <_printf_i+0x10a>
 8007378:	9e04      	ldr	r6, [sp, #16]
 800737a:	0028      	movs	r0, r5
 800737c:	0039      	movs	r1, r7
 800737e:	f7f8 ff65 	bl	800024c <__aeabi_uidivmod>
 8007382:	9b03      	ldr	r3, [sp, #12]
 8007384:	3e01      	subs	r6, #1
 8007386:	5c5b      	ldrb	r3, [r3, r1]
 8007388:	7033      	strb	r3, [r6, #0]
 800738a:	002b      	movs	r3, r5
 800738c:	0005      	movs	r5, r0
 800738e:	429f      	cmp	r7, r3
 8007390:	d9f3      	bls.n	800737a <_printf_i+0xf2>
 8007392:	2f08      	cmp	r7, #8
 8007394:	d109      	bne.n	80073aa <_printf_i+0x122>
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	07db      	lsls	r3, r3, #31
 800739a:	d506      	bpl.n	80073aa <_printf_i+0x122>
 800739c:	6863      	ldr	r3, [r4, #4]
 800739e:	6922      	ldr	r2, [r4, #16]
 80073a0:	4293      	cmp	r3, r2
 80073a2:	dc02      	bgt.n	80073aa <_printf_i+0x122>
 80073a4:	2330      	movs	r3, #48	; 0x30
 80073a6:	3e01      	subs	r6, #1
 80073a8:	7033      	strb	r3, [r6, #0]
 80073aa:	9b04      	ldr	r3, [sp, #16]
 80073ac:	1b9b      	subs	r3, r3, r6
 80073ae:	6123      	str	r3, [r4, #16]
 80073b0:	9b07      	ldr	r3, [sp, #28]
 80073b2:	0021      	movs	r1, r4
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	9805      	ldr	r0, [sp, #20]
 80073b8:	9b06      	ldr	r3, [sp, #24]
 80073ba:	aa09      	add	r2, sp, #36	; 0x24
 80073bc:	f7ff fef4 	bl	80071a8 <_printf_common>
 80073c0:	1c43      	adds	r3, r0, #1
 80073c2:	d14c      	bne.n	800745e <_printf_i+0x1d6>
 80073c4:	2001      	movs	r0, #1
 80073c6:	4240      	negs	r0, r0
 80073c8:	b00b      	add	sp, #44	; 0x2c
 80073ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073cc:	3145      	adds	r1, #69	; 0x45
 80073ce:	700a      	strb	r2, [r1, #0]
 80073d0:	4a34      	ldr	r2, [pc, #208]	; (80074a4 <_printf_i+0x21c>)
 80073d2:	9203      	str	r2, [sp, #12]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	6821      	ldr	r1, [r4, #0]
 80073d8:	ca20      	ldmia	r2!, {r5}
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	0608      	lsls	r0, r1, #24
 80073de:	d516      	bpl.n	800740e <_printf_i+0x186>
 80073e0:	07cb      	lsls	r3, r1, #31
 80073e2:	d502      	bpl.n	80073ea <_printf_i+0x162>
 80073e4:	2320      	movs	r3, #32
 80073e6:	4319      	orrs	r1, r3
 80073e8:	6021      	str	r1, [r4, #0]
 80073ea:	2710      	movs	r7, #16
 80073ec:	2d00      	cmp	r5, #0
 80073ee:	d1b2      	bne.n	8007356 <_printf_i+0xce>
 80073f0:	2320      	movs	r3, #32
 80073f2:	6822      	ldr	r2, [r4, #0]
 80073f4:	439a      	bics	r2, r3
 80073f6:	6022      	str	r2, [r4, #0]
 80073f8:	e7ad      	b.n	8007356 <_printf_i+0xce>
 80073fa:	2220      	movs	r2, #32
 80073fc:	6809      	ldr	r1, [r1, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	6022      	str	r2, [r4, #0]
 8007402:	0022      	movs	r2, r4
 8007404:	2178      	movs	r1, #120	; 0x78
 8007406:	3245      	adds	r2, #69	; 0x45
 8007408:	7011      	strb	r1, [r2, #0]
 800740a:	4a27      	ldr	r2, [pc, #156]	; (80074a8 <_printf_i+0x220>)
 800740c:	e7e1      	b.n	80073d2 <_printf_i+0x14a>
 800740e:	0648      	lsls	r0, r1, #25
 8007410:	d5e6      	bpl.n	80073e0 <_printf_i+0x158>
 8007412:	b2ad      	uxth	r5, r5
 8007414:	e7e4      	b.n	80073e0 <_printf_i+0x158>
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	680d      	ldr	r5, [r1, #0]
 800741a:	1d10      	adds	r0, r2, #4
 800741c:	6949      	ldr	r1, [r1, #20]
 800741e:	6018      	str	r0, [r3, #0]
 8007420:	6813      	ldr	r3, [r2, #0]
 8007422:	062e      	lsls	r6, r5, #24
 8007424:	d501      	bpl.n	800742a <_printf_i+0x1a2>
 8007426:	6019      	str	r1, [r3, #0]
 8007428:	e002      	b.n	8007430 <_printf_i+0x1a8>
 800742a:	066d      	lsls	r5, r5, #25
 800742c:	d5fb      	bpl.n	8007426 <_printf_i+0x19e>
 800742e:	8019      	strh	r1, [r3, #0]
 8007430:	2300      	movs	r3, #0
 8007432:	9e04      	ldr	r6, [sp, #16]
 8007434:	6123      	str	r3, [r4, #16]
 8007436:	e7bb      	b.n	80073b0 <_printf_i+0x128>
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	1d11      	adds	r1, r2, #4
 800743c:	6019      	str	r1, [r3, #0]
 800743e:	6816      	ldr	r6, [r2, #0]
 8007440:	2100      	movs	r1, #0
 8007442:	0030      	movs	r0, r6
 8007444:	6862      	ldr	r2, [r4, #4]
 8007446:	f000 ff05 	bl	8008254 <memchr>
 800744a:	2800      	cmp	r0, #0
 800744c:	d001      	beq.n	8007452 <_printf_i+0x1ca>
 800744e:	1b80      	subs	r0, r0, r6
 8007450:	6060      	str	r0, [r4, #4]
 8007452:	6863      	ldr	r3, [r4, #4]
 8007454:	6123      	str	r3, [r4, #16]
 8007456:	2300      	movs	r3, #0
 8007458:	9a04      	ldr	r2, [sp, #16]
 800745a:	7013      	strb	r3, [r2, #0]
 800745c:	e7a8      	b.n	80073b0 <_printf_i+0x128>
 800745e:	6923      	ldr	r3, [r4, #16]
 8007460:	0032      	movs	r2, r6
 8007462:	9906      	ldr	r1, [sp, #24]
 8007464:	9805      	ldr	r0, [sp, #20]
 8007466:	9d07      	ldr	r5, [sp, #28]
 8007468:	47a8      	blx	r5
 800746a:	1c43      	adds	r3, r0, #1
 800746c:	d0aa      	beq.n	80073c4 <_printf_i+0x13c>
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	079b      	lsls	r3, r3, #30
 8007472:	d415      	bmi.n	80074a0 <_printf_i+0x218>
 8007474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007476:	68e0      	ldr	r0, [r4, #12]
 8007478:	4298      	cmp	r0, r3
 800747a:	daa5      	bge.n	80073c8 <_printf_i+0x140>
 800747c:	0018      	movs	r0, r3
 800747e:	e7a3      	b.n	80073c8 <_printf_i+0x140>
 8007480:	0022      	movs	r2, r4
 8007482:	2301      	movs	r3, #1
 8007484:	9906      	ldr	r1, [sp, #24]
 8007486:	9805      	ldr	r0, [sp, #20]
 8007488:	9e07      	ldr	r6, [sp, #28]
 800748a:	3219      	adds	r2, #25
 800748c:	47b0      	blx	r6
 800748e:	1c43      	adds	r3, r0, #1
 8007490:	d098      	beq.n	80073c4 <_printf_i+0x13c>
 8007492:	3501      	adds	r5, #1
 8007494:	68e3      	ldr	r3, [r4, #12]
 8007496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007498:	1a9b      	subs	r3, r3, r2
 800749a:	42ab      	cmp	r3, r5
 800749c:	dcf0      	bgt.n	8007480 <_printf_i+0x1f8>
 800749e:	e7e9      	b.n	8007474 <_printf_i+0x1ec>
 80074a0:	2500      	movs	r5, #0
 80074a2:	e7f7      	b.n	8007494 <_printf_i+0x20c>
 80074a4:	08009d4e 	.word	0x08009d4e
 80074a8:	08009d5f 	.word	0x08009d5f

080074ac <siprintf>:
 80074ac:	b40e      	push	{r1, r2, r3}
 80074ae:	b500      	push	{lr}
 80074b0:	490b      	ldr	r1, [pc, #44]	; (80074e0 <siprintf+0x34>)
 80074b2:	b09c      	sub	sp, #112	; 0x70
 80074b4:	ab1d      	add	r3, sp, #116	; 0x74
 80074b6:	9002      	str	r0, [sp, #8]
 80074b8:	9006      	str	r0, [sp, #24]
 80074ba:	9107      	str	r1, [sp, #28]
 80074bc:	9104      	str	r1, [sp, #16]
 80074be:	4809      	ldr	r0, [pc, #36]	; (80074e4 <siprintf+0x38>)
 80074c0:	4909      	ldr	r1, [pc, #36]	; (80074e8 <siprintf+0x3c>)
 80074c2:	cb04      	ldmia	r3!, {r2}
 80074c4:	9105      	str	r1, [sp, #20]
 80074c6:	6800      	ldr	r0, [r0, #0]
 80074c8:	a902      	add	r1, sp, #8
 80074ca:	9301      	str	r3, [sp, #4]
 80074cc:	f001 fbe2 	bl	8008c94 <_svfiprintf_r>
 80074d0:	2300      	movs	r3, #0
 80074d2:	9a02      	ldr	r2, [sp, #8]
 80074d4:	7013      	strb	r3, [r2, #0]
 80074d6:	b01c      	add	sp, #112	; 0x70
 80074d8:	bc08      	pop	{r3}
 80074da:	b003      	add	sp, #12
 80074dc:	4718      	bx	r3
 80074de:	46c0      	nop			; (mov r8, r8)
 80074e0:	7fffffff 	.word	0x7fffffff
 80074e4:	2000000c 	.word	0x2000000c
 80074e8:	ffff0208 	.word	0xffff0208

080074ec <quorem>:
 80074ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ee:	0006      	movs	r6, r0
 80074f0:	690b      	ldr	r3, [r1, #16]
 80074f2:	6932      	ldr	r2, [r6, #16]
 80074f4:	b087      	sub	sp, #28
 80074f6:	2000      	movs	r0, #0
 80074f8:	9103      	str	r1, [sp, #12]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	db65      	blt.n	80075ca <quorem+0xde>
 80074fe:	3b01      	subs	r3, #1
 8007500:	009c      	lsls	r4, r3, #2
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	000b      	movs	r3, r1
 8007506:	3314      	adds	r3, #20
 8007508:	9305      	str	r3, [sp, #20]
 800750a:	191b      	adds	r3, r3, r4
 800750c:	9304      	str	r3, [sp, #16]
 800750e:	0033      	movs	r3, r6
 8007510:	3314      	adds	r3, #20
 8007512:	9302      	str	r3, [sp, #8]
 8007514:	191c      	adds	r4, r3, r4
 8007516:	9b04      	ldr	r3, [sp, #16]
 8007518:	6827      	ldr	r7, [r4, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	0038      	movs	r0, r7
 800751e:	1c5d      	adds	r5, r3, #1
 8007520:	0029      	movs	r1, r5
 8007522:	9301      	str	r3, [sp, #4]
 8007524:	f7f8 fe0c 	bl	8000140 <__udivsi3>
 8007528:	9001      	str	r0, [sp, #4]
 800752a:	42af      	cmp	r7, r5
 800752c:	d324      	bcc.n	8007578 <quorem+0x8c>
 800752e:	2500      	movs	r5, #0
 8007530:	46ac      	mov	ip, r5
 8007532:	9802      	ldr	r0, [sp, #8]
 8007534:	9f05      	ldr	r7, [sp, #20]
 8007536:	cf08      	ldmia	r7!, {r3}
 8007538:	9a01      	ldr	r2, [sp, #4]
 800753a:	b299      	uxth	r1, r3
 800753c:	4351      	muls	r1, r2
 800753e:	0c1b      	lsrs	r3, r3, #16
 8007540:	4353      	muls	r3, r2
 8007542:	1949      	adds	r1, r1, r5
 8007544:	0c0a      	lsrs	r2, r1, #16
 8007546:	189b      	adds	r3, r3, r2
 8007548:	6802      	ldr	r2, [r0, #0]
 800754a:	b289      	uxth	r1, r1
 800754c:	b292      	uxth	r2, r2
 800754e:	4462      	add	r2, ip
 8007550:	1a52      	subs	r2, r2, r1
 8007552:	6801      	ldr	r1, [r0, #0]
 8007554:	0c1d      	lsrs	r5, r3, #16
 8007556:	0c09      	lsrs	r1, r1, #16
 8007558:	b29b      	uxth	r3, r3
 800755a:	1acb      	subs	r3, r1, r3
 800755c:	1411      	asrs	r1, r2, #16
 800755e:	185b      	adds	r3, r3, r1
 8007560:	1419      	asrs	r1, r3, #16
 8007562:	b292      	uxth	r2, r2
 8007564:	041b      	lsls	r3, r3, #16
 8007566:	431a      	orrs	r2, r3
 8007568:	9b04      	ldr	r3, [sp, #16]
 800756a:	468c      	mov	ip, r1
 800756c:	c004      	stmia	r0!, {r2}
 800756e:	42bb      	cmp	r3, r7
 8007570:	d2e1      	bcs.n	8007536 <quorem+0x4a>
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d030      	beq.n	80075da <quorem+0xee>
 8007578:	0030      	movs	r0, r6
 800757a:	9903      	ldr	r1, [sp, #12]
 800757c:	f001 f902 	bl	8008784 <__mcmp>
 8007580:	2800      	cmp	r0, #0
 8007582:	db21      	blt.n	80075c8 <quorem+0xdc>
 8007584:	0030      	movs	r0, r6
 8007586:	2400      	movs	r4, #0
 8007588:	9b01      	ldr	r3, [sp, #4]
 800758a:	9903      	ldr	r1, [sp, #12]
 800758c:	3301      	adds	r3, #1
 800758e:	9301      	str	r3, [sp, #4]
 8007590:	3014      	adds	r0, #20
 8007592:	3114      	adds	r1, #20
 8007594:	6803      	ldr	r3, [r0, #0]
 8007596:	c920      	ldmia	r1!, {r5}
 8007598:	b29a      	uxth	r2, r3
 800759a:	1914      	adds	r4, r2, r4
 800759c:	b2aa      	uxth	r2, r5
 800759e:	1aa2      	subs	r2, r4, r2
 80075a0:	0c1b      	lsrs	r3, r3, #16
 80075a2:	0c2d      	lsrs	r5, r5, #16
 80075a4:	1414      	asrs	r4, r2, #16
 80075a6:	1b5b      	subs	r3, r3, r5
 80075a8:	191b      	adds	r3, r3, r4
 80075aa:	141c      	asrs	r4, r3, #16
 80075ac:	b292      	uxth	r2, r2
 80075ae:	041b      	lsls	r3, r3, #16
 80075b0:	4313      	orrs	r3, r2
 80075b2:	c008      	stmia	r0!, {r3}
 80075b4:	9b04      	ldr	r3, [sp, #16]
 80075b6:	428b      	cmp	r3, r1
 80075b8:	d2ec      	bcs.n	8007594 <quorem+0xa8>
 80075ba:	9b00      	ldr	r3, [sp, #0]
 80075bc:	9a02      	ldr	r2, [sp, #8]
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	18d3      	adds	r3, r2, r3
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	2a00      	cmp	r2, #0
 80075c6:	d015      	beq.n	80075f4 <quorem+0x108>
 80075c8:	9801      	ldr	r0, [sp, #4]
 80075ca:	b007      	add	sp, #28
 80075cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d106      	bne.n	80075e2 <quorem+0xf6>
 80075d4:	9b00      	ldr	r3, [sp, #0]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	9b02      	ldr	r3, [sp, #8]
 80075dc:	3c04      	subs	r4, #4
 80075de:	42a3      	cmp	r3, r4
 80075e0:	d3f5      	bcc.n	80075ce <quorem+0xe2>
 80075e2:	9b00      	ldr	r3, [sp, #0]
 80075e4:	6133      	str	r3, [r6, #16]
 80075e6:	e7c7      	b.n	8007578 <quorem+0x8c>
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	2a00      	cmp	r2, #0
 80075ec:	d106      	bne.n	80075fc <quorem+0x110>
 80075ee:	9a00      	ldr	r2, [sp, #0]
 80075f0:	3a01      	subs	r2, #1
 80075f2:	9200      	str	r2, [sp, #0]
 80075f4:	9a02      	ldr	r2, [sp, #8]
 80075f6:	3b04      	subs	r3, #4
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d3f5      	bcc.n	80075e8 <quorem+0xfc>
 80075fc:	9b00      	ldr	r3, [sp, #0]
 80075fe:	6133      	str	r3, [r6, #16]
 8007600:	e7e2      	b.n	80075c8 <quorem+0xdc>
	...

08007604 <_dtoa_r>:
 8007604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007606:	b09d      	sub	sp, #116	; 0x74
 8007608:	9202      	str	r2, [sp, #8]
 800760a:	9303      	str	r3, [sp, #12]
 800760c:	9b02      	ldr	r3, [sp, #8]
 800760e:	9c03      	ldr	r4, [sp, #12]
 8007610:	9308      	str	r3, [sp, #32]
 8007612:	9409      	str	r4, [sp, #36]	; 0x24
 8007614:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007616:	0007      	movs	r7, r0
 8007618:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800761a:	2c00      	cmp	r4, #0
 800761c:	d10e      	bne.n	800763c <_dtoa_r+0x38>
 800761e:	2010      	movs	r0, #16
 8007620:	f000 fe0e 	bl	8008240 <malloc>
 8007624:	1e02      	subs	r2, r0, #0
 8007626:	6278      	str	r0, [r7, #36]	; 0x24
 8007628:	d104      	bne.n	8007634 <_dtoa_r+0x30>
 800762a:	21ea      	movs	r1, #234	; 0xea
 800762c:	4bc7      	ldr	r3, [pc, #796]	; (800794c <_dtoa_r+0x348>)
 800762e:	48c8      	ldr	r0, [pc, #800]	; (8007950 <_dtoa_r+0x34c>)
 8007630:	f001 fc42 	bl	8008eb8 <__assert_func>
 8007634:	6044      	str	r4, [r0, #4]
 8007636:	6084      	str	r4, [r0, #8]
 8007638:	6004      	str	r4, [r0, #0]
 800763a:	60c4      	str	r4, [r0, #12]
 800763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763e:	6819      	ldr	r1, [r3, #0]
 8007640:	2900      	cmp	r1, #0
 8007642:	d00a      	beq.n	800765a <_dtoa_r+0x56>
 8007644:	685a      	ldr	r2, [r3, #4]
 8007646:	2301      	movs	r3, #1
 8007648:	4093      	lsls	r3, r2
 800764a:	604a      	str	r2, [r1, #4]
 800764c:	608b      	str	r3, [r1, #8]
 800764e:	0038      	movs	r0, r7
 8007650:	f000 fe58 	bl	8008304 <_Bfree>
 8007654:	2200      	movs	r2, #0
 8007656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007658:	601a      	str	r2, [r3, #0]
 800765a:	9b03      	ldr	r3, [sp, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	da20      	bge.n	80076a2 <_dtoa_r+0x9e>
 8007660:	2301      	movs	r3, #1
 8007662:	602b      	str	r3, [r5, #0]
 8007664:	9b03      	ldr	r3, [sp, #12]
 8007666:	005b      	lsls	r3, r3, #1
 8007668:	085b      	lsrs	r3, r3, #1
 800766a:	9309      	str	r3, [sp, #36]	; 0x24
 800766c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800766e:	4bb9      	ldr	r3, [pc, #740]	; (8007954 <_dtoa_r+0x350>)
 8007670:	4ab8      	ldr	r2, [pc, #736]	; (8007954 <_dtoa_r+0x350>)
 8007672:	402b      	ands	r3, r5
 8007674:	4293      	cmp	r3, r2
 8007676:	d117      	bne.n	80076a8 <_dtoa_r+0xa4>
 8007678:	4bb7      	ldr	r3, [pc, #732]	; (8007958 <_dtoa_r+0x354>)
 800767a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800767c:	0328      	lsls	r0, r5, #12
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	9b02      	ldr	r3, [sp, #8]
 8007682:	0b00      	lsrs	r0, r0, #12
 8007684:	4318      	orrs	r0, r3
 8007686:	d101      	bne.n	800768c <_dtoa_r+0x88>
 8007688:	f000 fdbf 	bl	800820a <_dtoa_r+0xc06>
 800768c:	48b3      	ldr	r0, [pc, #716]	; (800795c <_dtoa_r+0x358>)
 800768e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007690:	9006      	str	r0, [sp, #24]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d002      	beq.n	800769c <_dtoa_r+0x98>
 8007696:	4bb2      	ldr	r3, [pc, #712]	; (8007960 <_dtoa_r+0x35c>)
 8007698:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800769a:	6013      	str	r3, [r2, #0]
 800769c:	9806      	ldr	r0, [sp, #24]
 800769e:	b01d      	add	sp, #116	; 0x74
 80076a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076a2:	2300      	movs	r3, #0
 80076a4:	602b      	str	r3, [r5, #0]
 80076a6:	e7e1      	b.n	800766c <_dtoa_r+0x68>
 80076a8:	9b08      	ldr	r3, [sp, #32]
 80076aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80076ac:	9312      	str	r3, [sp, #72]	; 0x48
 80076ae:	9413      	str	r4, [sp, #76]	; 0x4c
 80076b0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80076b2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80076b4:	2200      	movs	r2, #0
 80076b6:	2300      	movs	r3, #0
 80076b8:	f7f8 fec8 	bl	800044c <__aeabi_dcmpeq>
 80076bc:	1e04      	subs	r4, r0, #0
 80076be:	d009      	beq.n	80076d4 <_dtoa_r+0xd0>
 80076c0:	2301      	movs	r3, #1
 80076c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80076c4:	6013      	str	r3, [r2, #0]
 80076c6:	4ba7      	ldr	r3, [pc, #668]	; (8007964 <_dtoa_r+0x360>)
 80076c8:	9306      	str	r3, [sp, #24]
 80076ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d0e5      	beq.n	800769c <_dtoa_r+0x98>
 80076d0:	4ba5      	ldr	r3, [pc, #660]	; (8007968 <_dtoa_r+0x364>)
 80076d2:	e7e1      	b.n	8007698 <_dtoa_r+0x94>
 80076d4:	ab1a      	add	r3, sp, #104	; 0x68
 80076d6:	9301      	str	r3, [sp, #4]
 80076d8:	ab1b      	add	r3, sp, #108	; 0x6c
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	0038      	movs	r0, r7
 80076de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076e2:	f001 f903 	bl	80088ec <__d2b>
 80076e6:	006e      	lsls	r6, r5, #1
 80076e8:	9005      	str	r0, [sp, #20]
 80076ea:	0d76      	lsrs	r6, r6, #21
 80076ec:	d100      	bne.n	80076f0 <_dtoa_r+0xec>
 80076ee:	e07c      	b.n	80077ea <_dtoa_r+0x1e6>
 80076f0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80076f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80076f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076f6:	4a9d      	ldr	r2, [pc, #628]	; (800796c <_dtoa_r+0x368>)
 80076f8:	031b      	lsls	r3, r3, #12
 80076fa:	0b1b      	lsrs	r3, r3, #12
 80076fc:	431a      	orrs	r2, r3
 80076fe:	0011      	movs	r1, r2
 8007700:	4b9b      	ldr	r3, [pc, #620]	; (8007970 <_dtoa_r+0x36c>)
 8007702:	9418      	str	r4, [sp, #96]	; 0x60
 8007704:	18f6      	adds	r6, r6, r3
 8007706:	2200      	movs	r2, #0
 8007708:	4b9a      	ldr	r3, [pc, #616]	; (8007974 <_dtoa_r+0x370>)
 800770a:	f7fa ffa1 	bl	8002650 <__aeabi_dsub>
 800770e:	4a9a      	ldr	r2, [pc, #616]	; (8007978 <_dtoa_r+0x374>)
 8007710:	4b9a      	ldr	r3, [pc, #616]	; (800797c <_dtoa_r+0x378>)
 8007712:	f7fa fd31 	bl	8002178 <__aeabi_dmul>
 8007716:	4a9a      	ldr	r2, [pc, #616]	; (8007980 <_dtoa_r+0x37c>)
 8007718:	4b9a      	ldr	r3, [pc, #616]	; (8007984 <_dtoa_r+0x380>)
 800771a:	f7f9 fdef 	bl	80012fc <__aeabi_dadd>
 800771e:	0004      	movs	r4, r0
 8007720:	0030      	movs	r0, r6
 8007722:	000d      	movs	r5, r1
 8007724:	f7fb fb7a 	bl	8002e1c <__aeabi_i2d>
 8007728:	4a97      	ldr	r2, [pc, #604]	; (8007988 <_dtoa_r+0x384>)
 800772a:	4b98      	ldr	r3, [pc, #608]	; (800798c <_dtoa_r+0x388>)
 800772c:	f7fa fd24 	bl	8002178 <__aeabi_dmul>
 8007730:	0002      	movs	r2, r0
 8007732:	000b      	movs	r3, r1
 8007734:	0020      	movs	r0, r4
 8007736:	0029      	movs	r1, r5
 8007738:	f7f9 fde0 	bl	80012fc <__aeabi_dadd>
 800773c:	0004      	movs	r4, r0
 800773e:	000d      	movs	r5, r1
 8007740:	f7fb fb36 	bl	8002db0 <__aeabi_d2iz>
 8007744:	2200      	movs	r2, #0
 8007746:	9002      	str	r0, [sp, #8]
 8007748:	2300      	movs	r3, #0
 800774a:	0020      	movs	r0, r4
 800774c:	0029      	movs	r1, r5
 800774e:	f7f8 fe83 	bl	8000458 <__aeabi_dcmplt>
 8007752:	2800      	cmp	r0, #0
 8007754:	d00b      	beq.n	800776e <_dtoa_r+0x16a>
 8007756:	9802      	ldr	r0, [sp, #8]
 8007758:	f7fb fb60 	bl	8002e1c <__aeabi_i2d>
 800775c:	002b      	movs	r3, r5
 800775e:	0022      	movs	r2, r4
 8007760:	f7f8 fe74 	bl	800044c <__aeabi_dcmpeq>
 8007764:	4243      	negs	r3, r0
 8007766:	4158      	adcs	r0, r3
 8007768:	9b02      	ldr	r3, [sp, #8]
 800776a:	1a1b      	subs	r3, r3, r0
 800776c:	9302      	str	r3, [sp, #8]
 800776e:	2301      	movs	r3, #1
 8007770:	9316      	str	r3, [sp, #88]	; 0x58
 8007772:	9b02      	ldr	r3, [sp, #8]
 8007774:	2b16      	cmp	r3, #22
 8007776:	d80f      	bhi.n	8007798 <_dtoa_r+0x194>
 8007778:	9812      	ldr	r0, [sp, #72]	; 0x48
 800777a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800777c:	00da      	lsls	r2, r3, #3
 800777e:	4b84      	ldr	r3, [pc, #528]	; (8007990 <_dtoa_r+0x38c>)
 8007780:	189b      	adds	r3, r3, r2
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f7f8 fe67 	bl	8000458 <__aeabi_dcmplt>
 800778a:	2800      	cmp	r0, #0
 800778c:	d049      	beq.n	8007822 <_dtoa_r+0x21e>
 800778e:	9b02      	ldr	r3, [sp, #8]
 8007790:	3b01      	subs	r3, #1
 8007792:	9302      	str	r3, [sp, #8]
 8007794:	2300      	movs	r3, #0
 8007796:	9316      	str	r3, [sp, #88]	; 0x58
 8007798:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800779a:	1b9e      	subs	r6, r3, r6
 800779c:	2300      	movs	r3, #0
 800779e:	930a      	str	r3, [sp, #40]	; 0x28
 80077a0:	0033      	movs	r3, r6
 80077a2:	3b01      	subs	r3, #1
 80077a4:	930d      	str	r3, [sp, #52]	; 0x34
 80077a6:	d504      	bpl.n	80077b2 <_dtoa_r+0x1ae>
 80077a8:	2301      	movs	r3, #1
 80077aa:	1b9b      	subs	r3, r3, r6
 80077ac:	930a      	str	r3, [sp, #40]	; 0x28
 80077ae:	2300      	movs	r3, #0
 80077b0:	930d      	str	r3, [sp, #52]	; 0x34
 80077b2:	9b02      	ldr	r3, [sp, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	db36      	blt.n	8007826 <_dtoa_r+0x222>
 80077b8:	9a02      	ldr	r2, [sp, #8]
 80077ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077bc:	4694      	mov	ip, r2
 80077be:	4463      	add	r3, ip
 80077c0:	930d      	str	r3, [sp, #52]	; 0x34
 80077c2:	2300      	movs	r3, #0
 80077c4:	9215      	str	r2, [sp, #84]	; 0x54
 80077c6:	930e      	str	r3, [sp, #56]	; 0x38
 80077c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077ca:	2401      	movs	r4, #1
 80077cc:	2b09      	cmp	r3, #9
 80077ce:	d864      	bhi.n	800789a <_dtoa_r+0x296>
 80077d0:	2b05      	cmp	r3, #5
 80077d2:	dd02      	ble.n	80077da <_dtoa_r+0x1d6>
 80077d4:	2400      	movs	r4, #0
 80077d6:	3b04      	subs	r3, #4
 80077d8:	9322      	str	r3, [sp, #136]	; 0x88
 80077da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077dc:	1e98      	subs	r0, r3, #2
 80077de:	2803      	cmp	r0, #3
 80077e0:	d864      	bhi.n	80078ac <_dtoa_r+0x2a8>
 80077e2:	f7f8 fc99 	bl	8000118 <__gnu_thumb1_case_uqi>
 80077e6:	3829      	.short	0x3829
 80077e8:	5836      	.short	0x5836
 80077ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80077ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80077ee:	189e      	adds	r6, r3, r2
 80077f0:	4b68      	ldr	r3, [pc, #416]	; (8007994 <_dtoa_r+0x390>)
 80077f2:	18f2      	adds	r2, r6, r3
 80077f4:	2a20      	cmp	r2, #32
 80077f6:	dd0f      	ble.n	8007818 <_dtoa_r+0x214>
 80077f8:	2340      	movs	r3, #64	; 0x40
 80077fa:	1a9b      	subs	r3, r3, r2
 80077fc:	409d      	lsls	r5, r3
 80077fe:	4b66      	ldr	r3, [pc, #408]	; (8007998 <_dtoa_r+0x394>)
 8007800:	9802      	ldr	r0, [sp, #8]
 8007802:	18f3      	adds	r3, r6, r3
 8007804:	40d8      	lsrs	r0, r3
 8007806:	4328      	orrs	r0, r5
 8007808:	f7fb fb38 	bl	8002e7c <__aeabi_ui2d>
 800780c:	2301      	movs	r3, #1
 800780e:	4c63      	ldr	r4, [pc, #396]	; (800799c <_dtoa_r+0x398>)
 8007810:	3e01      	subs	r6, #1
 8007812:	1909      	adds	r1, r1, r4
 8007814:	9318      	str	r3, [sp, #96]	; 0x60
 8007816:	e776      	b.n	8007706 <_dtoa_r+0x102>
 8007818:	2320      	movs	r3, #32
 800781a:	9802      	ldr	r0, [sp, #8]
 800781c:	1a9b      	subs	r3, r3, r2
 800781e:	4098      	lsls	r0, r3
 8007820:	e7f2      	b.n	8007808 <_dtoa_r+0x204>
 8007822:	9016      	str	r0, [sp, #88]	; 0x58
 8007824:	e7b8      	b.n	8007798 <_dtoa_r+0x194>
 8007826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007828:	9a02      	ldr	r2, [sp, #8]
 800782a:	1a9b      	subs	r3, r3, r2
 800782c:	930a      	str	r3, [sp, #40]	; 0x28
 800782e:	4253      	negs	r3, r2
 8007830:	930e      	str	r3, [sp, #56]	; 0x38
 8007832:	2300      	movs	r3, #0
 8007834:	9315      	str	r3, [sp, #84]	; 0x54
 8007836:	e7c7      	b.n	80077c8 <_dtoa_r+0x1c4>
 8007838:	2300      	movs	r3, #0
 800783a:	930f      	str	r3, [sp, #60]	; 0x3c
 800783c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800783e:	930c      	str	r3, [sp, #48]	; 0x30
 8007840:	9307      	str	r3, [sp, #28]
 8007842:	2b00      	cmp	r3, #0
 8007844:	dc13      	bgt.n	800786e <_dtoa_r+0x26a>
 8007846:	2301      	movs	r3, #1
 8007848:	001a      	movs	r2, r3
 800784a:	930c      	str	r3, [sp, #48]	; 0x30
 800784c:	9307      	str	r3, [sp, #28]
 800784e:	9223      	str	r2, [sp, #140]	; 0x8c
 8007850:	e00d      	b.n	800786e <_dtoa_r+0x26a>
 8007852:	2301      	movs	r3, #1
 8007854:	e7f1      	b.n	800783a <_dtoa_r+0x236>
 8007856:	2300      	movs	r3, #0
 8007858:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800785a:	930f      	str	r3, [sp, #60]	; 0x3c
 800785c:	4694      	mov	ip, r2
 800785e:	9b02      	ldr	r3, [sp, #8]
 8007860:	4463      	add	r3, ip
 8007862:	930c      	str	r3, [sp, #48]	; 0x30
 8007864:	3301      	adds	r3, #1
 8007866:	9307      	str	r3, [sp, #28]
 8007868:	2b00      	cmp	r3, #0
 800786a:	dc00      	bgt.n	800786e <_dtoa_r+0x26a>
 800786c:	2301      	movs	r3, #1
 800786e:	2200      	movs	r2, #0
 8007870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007872:	6042      	str	r2, [r0, #4]
 8007874:	3204      	adds	r2, #4
 8007876:	0015      	movs	r5, r2
 8007878:	3514      	adds	r5, #20
 800787a:	6841      	ldr	r1, [r0, #4]
 800787c:	429d      	cmp	r5, r3
 800787e:	d919      	bls.n	80078b4 <_dtoa_r+0x2b0>
 8007880:	0038      	movs	r0, r7
 8007882:	f000 fcfb 	bl	800827c <_Balloc>
 8007886:	9006      	str	r0, [sp, #24]
 8007888:	2800      	cmp	r0, #0
 800788a:	d117      	bne.n	80078bc <_dtoa_r+0x2b8>
 800788c:	21d5      	movs	r1, #213	; 0xd5
 800788e:	0002      	movs	r2, r0
 8007890:	4b43      	ldr	r3, [pc, #268]	; (80079a0 <_dtoa_r+0x39c>)
 8007892:	0049      	lsls	r1, r1, #1
 8007894:	e6cb      	b.n	800762e <_dtoa_r+0x2a>
 8007896:	2301      	movs	r3, #1
 8007898:	e7de      	b.n	8007858 <_dtoa_r+0x254>
 800789a:	2300      	movs	r3, #0
 800789c:	940f      	str	r4, [sp, #60]	; 0x3c
 800789e:	9322      	str	r3, [sp, #136]	; 0x88
 80078a0:	3b01      	subs	r3, #1
 80078a2:	930c      	str	r3, [sp, #48]	; 0x30
 80078a4:	9307      	str	r3, [sp, #28]
 80078a6:	2200      	movs	r2, #0
 80078a8:	3313      	adds	r3, #19
 80078aa:	e7d0      	b.n	800784e <_dtoa_r+0x24a>
 80078ac:	2301      	movs	r3, #1
 80078ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80078b0:	3b02      	subs	r3, #2
 80078b2:	e7f6      	b.n	80078a2 <_dtoa_r+0x29e>
 80078b4:	3101      	adds	r1, #1
 80078b6:	6041      	str	r1, [r0, #4]
 80078b8:	0052      	lsls	r2, r2, #1
 80078ba:	e7dc      	b.n	8007876 <_dtoa_r+0x272>
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	9a06      	ldr	r2, [sp, #24]
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	9b07      	ldr	r3, [sp, #28]
 80078c4:	2b0e      	cmp	r3, #14
 80078c6:	d900      	bls.n	80078ca <_dtoa_r+0x2c6>
 80078c8:	e0eb      	b.n	8007aa2 <_dtoa_r+0x49e>
 80078ca:	2c00      	cmp	r4, #0
 80078cc:	d100      	bne.n	80078d0 <_dtoa_r+0x2cc>
 80078ce:	e0e8      	b.n	8007aa2 <_dtoa_r+0x49e>
 80078d0:	9b02      	ldr	r3, [sp, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	dd68      	ble.n	80079a8 <_dtoa_r+0x3a4>
 80078d6:	001a      	movs	r2, r3
 80078d8:	210f      	movs	r1, #15
 80078da:	4b2d      	ldr	r3, [pc, #180]	; (8007990 <_dtoa_r+0x38c>)
 80078dc:	400a      	ands	r2, r1
 80078de:	00d2      	lsls	r2, r2, #3
 80078e0:	189b      	adds	r3, r3, r2
 80078e2:	681d      	ldr	r5, [r3, #0]
 80078e4:	685e      	ldr	r6, [r3, #4]
 80078e6:	9b02      	ldr	r3, [sp, #8]
 80078e8:	111c      	asrs	r4, r3, #4
 80078ea:	2302      	movs	r3, #2
 80078ec:	9310      	str	r3, [sp, #64]	; 0x40
 80078ee:	9b02      	ldr	r3, [sp, #8]
 80078f0:	05db      	lsls	r3, r3, #23
 80078f2:	d50b      	bpl.n	800790c <_dtoa_r+0x308>
 80078f4:	4b2b      	ldr	r3, [pc, #172]	; (80079a4 <_dtoa_r+0x3a0>)
 80078f6:	400c      	ands	r4, r1
 80078f8:	6a1a      	ldr	r2, [r3, #32]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80078fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007900:	f7fa f838 	bl	8001974 <__aeabi_ddiv>
 8007904:	2303      	movs	r3, #3
 8007906:	9008      	str	r0, [sp, #32]
 8007908:	9109      	str	r1, [sp, #36]	; 0x24
 800790a:	9310      	str	r3, [sp, #64]	; 0x40
 800790c:	4b25      	ldr	r3, [pc, #148]	; (80079a4 <_dtoa_r+0x3a0>)
 800790e:	9314      	str	r3, [sp, #80]	; 0x50
 8007910:	2c00      	cmp	r4, #0
 8007912:	d108      	bne.n	8007926 <_dtoa_r+0x322>
 8007914:	9808      	ldr	r0, [sp, #32]
 8007916:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007918:	002a      	movs	r2, r5
 800791a:	0033      	movs	r3, r6
 800791c:	f7fa f82a 	bl	8001974 <__aeabi_ddiv>
 8007920:	9008      	str	r0, [sp, #32]
 8007922:	9109      	str	r1, [sp, #36]	; 0x24
 8007924:	e05c      	b.n	80079e0 <_dtoa_r+0x3dc>
 8007926:	2301      	movs	r3, #1
 8007928:	421c      	tst	r4, r3
 800792a:	d00b      	beq.n	8007944 <_dtoa_r+0x340>
 800792c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800792e:	0028      	movs	r0, r5
 8007930:	3301      	adds	r3, #1
 8007932:	9310      	str	r3, [sp, #64]	; 0x40
 8007934:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007936:	0031      	movs	r1, r6
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	f7fa fc1c 	bl	8002178 <__aeabi_dmul>
 8007940:	0005      	movs	r5, r0
 8007942:	000e      	movs	r6, r1
 8007944:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007946:	1064      	asrs	r4, r4, #1
 8007948:	3308      	adds	r3, #8
 800794a:	e7e0      	b.n	800790e <_dtoa_r+0x30a>
 800794c:	08009d7d 	.word	0x08009d7d
 8007950:	08009d94 	.word	0x08009d94
 8007954:	7ff00000 	.word	0x7ff00000
 8007958:	0000270f 	.word	0x0000270f
 800795c:	08009d79 	.word	0x08009d79
 8007960:	08009d7c 	.word	0x08009d7c
 8007964:	08009d4c 	.word	0x08009d4c
 8007968:	08009d4d 	.word	0x08009d4d
 800796c:	3ff00000 	.word	0x3ff00000
 8007970:	fffffc01 	.word	0xfffffc01
 8007974:	3ff80000 	.word	0x3ff80000
 8007978:	636f4361 	.word	0x636f4361
 800797c:	3fd287a7 	.word	0x3fd287a7
 8007980:	8b60c8b3 	.word	0x8b60c8b3
 8007984:	3fc68a28 	.word	0x3fc68a28
 8007988:	509f79fb 	.word	0x509f79fb
 800798c:	3fd34413 	.word	0x3fd34413
 8007990:	08009e88 	.word	0x08009e88
 8007994:	00000432 	.word	0x00000432
 8007998:	00000412 	.word	0x00000412
 800799c:	fe100000 	.word	0xfe100000
 80079a0:	08009def 	.word	0x08009def
 80079a4:	08009e60 	.word	0x08009e60
 80079a8:	2302      	movs	r3, #2
 80079aa:	9310      	str	r3, [sp, #64]	; 0x40
 80079ac:	9b02      	ldr	r3, [sp, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d016      	beq.n	80079e0 <_dtoa_r+0x3dc>
 80079b2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80079b4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80079b6:	425c      	negs	r4, r3
 80079b8:	230f      	movs	r3, #15
 80079ba:	4ab6      	ldr	r2, [pc, #728]	; (8007c94 <_dtoa_r+0x690>)
 80079bc:	4023      	ands	r3, r4
 80079be:	00db      	lsls	r3, r3, #3
 80079c0:	18d3      	adds	r3, r2, r3
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f7fa fbd7 	bl	8002178 <__aeabi_dmul>
 80079ca:	2601      	movs	r6, #1
 80079cc:	2300      	movs	r3, #0
 80079ce:	9008      	str	r0, [sp, #32]
 80079d0:	9109      	str	r1, [sp, #36]	; 0x24
 80079d2:	4db1      	ldr	r5, [pc, #708]	; (8007c98 <_dtoa_r+0x694>)
 80079d4:	1124      	asrs	r4, r4, #4
 80079d6:	2c00      	cmp	r4, #0
 80079d8:	d000      	beq.n	80079dc <_dtoa_r+0x3d8>
 80079da:	e094      	b.n	8007b06 <_dtoa_r+0x502>
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d19f      	bne.n	8007920 <_dtoa_r+0x31c>
 80079e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d100      	bne.n	80079e8 <_dtoa_r+0x3e4>
 80079e6:	e09b      	b.n	8007b20 <_dtoa_r+0x51c>
 80079e8:	9c08      	ldr	r4, [sp, #32]
 80079ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80079ec:	2200      	movs	r2, #0
 80079ee:	0020      	movs	r0, r4
 80079f0:	0029      	movs	r1, r5
 80079f2:	4baa      	ldr	r3, [pc, #680]	; (8007c9c <_dtoa_r+0x698>)
 80079f4:	f7f8 fd30 	bl	8000458 <__aeabi_dcmplt>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d100      	bne.n	80079fe <_dtoa_r+0x3fa>
 80079fc:	e090      	b.n	8007b20 <_dtoa_r+0x51c>
 80079fe:	9b07      	ldr	r3, [sp, #28]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d100      	bne.n	8007a06 <_dtoa_r+0x402>
 8007a04:	e08c      	b.n	8007b20 <_dtoa_r+0x51c>
 8007a06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	dd46      	ble.n	8007a9a <_dtoa_r+0x496>
 8007a0c:	9b02      	ldr	r3, [sp, #8]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	0020      	movs	r0, r4
 8007a12:	0029      	movs	r1, r5
 8007a14:	1e5e      	subs	r6, r3, #1
 8007a16:	4ba2      	ldr	r3, [pc, #648]	; (8007ca0 <_dtoa_r+0x69c>)
 8007a18:	f7fa fbae 	bl	8002178 <__aeabi_dmul>
 8007a1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a1e:	9008      	str	r0, [sp, #32]
 8007a20:	9109      	str	r1, [sp, #36]	; 0x24
 8007a22:	3301      	adds	r3, #1
 8007a24:	9310      	str	r3, [sp, #64]	; 0x40
 8007a26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a28:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007a2a:	9c08      	ldr	r4, [sp, #32]
 8007a2c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007a2e:	9314      	str	r3, [sp, #80]	; 0x50
 8007a30:	f7fb f9f4 	bl	8002e1c <__aeabi_i2d>
 8007a34:	0022      	movs	r2, r4
 8007a36:	002b      	movs	r3, r5
 8007a38:	f7fa fb9e 	bl	8002178 <__aeabi_dmul>
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	4b99      	ldr	r3, [pc, #612]	; (8007ca4 <_dtoa_r+0x6a0>)
 8007a40:	f7f9 fc5c 	bl	80012fc <__aeabi_dadd>
 8007a44:	9010      	str	r0, [sp, #64]	; 0x40
 8007a46:	9111      	str	r1, [sp, #68]	; 0x44
 8007a48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a4c:	9208      	str	r2, [sp, #32]
 8007a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a50:	4a95      	ldr	r2, [pc, #596]	; (8007ca8 <_dtoa_r+0x6a4>)
 8007a52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a54:	4694      	mov	ip, r2
 8007a56:	4463      	add	r3, ip
 8007a58:	9317      	str	r3, [sp, #92]	; 0x5c
 8007a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d161      	bne.n	8007b26 <_dtoa_r+0x522>
 8007a62:	2200      	movs	r2, #0
 8007a64:	0020      	movs	r0, r4
 8007a66:	0029      	movs	r1, r5
 8007a68:	4b90      	ldr	r3, [pc, #576]	; (8007cac <_dtoa_r+0x6a8>)
 8007a6a:	f7fa fdf1 	bl	8002650 <__aeabi_dsub>
 8007a6e:	9a08      	ldr	r2, [sp, #32]
 8007a70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a72:	0004      	movs	r4, r0
 8007a74:	000d      	movs	r5, r1
 8007a76:	f7f8 fd03 	bl	8000480 <__aeabi_dcmpgt>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	d000      	beq.n	8007a80 <_dtoa_r+0x47c>
 8007a7e:	e2af      	b.n	8007fe0 <_dtoa_r+0x9dc>
 8007a80:	488b      	ldr	r0, [pc, #556]	; (8007cb0 <_dtoa_r+0x6ac>)
 8007a82:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007a84:	4684      	mov	ip, r0
 8007a86:	4461      	add	r1, ip
 8007a88:	000b      	movs	r3, r1
 8007a8a:	0020      	movs	r0, r4
 8007a8c:	0029      	movs	r1, r5
 8007a8e:	9a08      	ldr	r2, [sp, #32]
 8007a90:	f7f8 fce2 	bl	8000458 <__aeabi_dcmplt>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	d000      	beq.n	8007a9a <_dtoa_r+0x496>
 8007a98:	e29f      	b.n	8007fda <_dtoa_r+0x9d6>
 8007a9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a9c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007a9e:	9308      	str	r3, [sp, #32]
 8007aa0:	9409      	str	r4, [sp, #36]	; 0x24
 8007aa2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	da00      	bge.n	8007aaa <_dtoa_r+0x4a6>
 8007aa8:	e172      	b.n	8007d90 <_dtoa_r+0x78c>
 8007aaa:	9a02      	ldr	r2, [sp, #8]
 8007aac:	2a0e      	cmp	r2, #14
 8007aae:	dd00      	ble.n	8007ab2 <_dtoa_r+0x4ae>
 8007ab0:	e16e      	b.n	8007d90 <_dtoa_r+0x78c>
 8007ab2:	4b78      	ldr	r3, [pc, #480]	; (8007c94 <_dtoa_r+0x690>)
 8007ab4:	00d2      	lsls	r2, r2, #3
 8007ab6:	189b      	adds	r3, r3, r2
 8007ab8:	685c      	ldr	r4, [r3, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	930a      	str	r3, [sp, #40]	; 0x28
 8007abe:	940b      	str	r4, [sp, #44]	; 0x2c
 8007ac0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	db00      	blt.n	8007ac8 <_dtoa_r+0x4c4>
 8007ac6:	e0f7      	b.n	8007cb8 <_dtoa_r+0x6b4>
 8007ac8:	9b07      	ldr	r3, [sp, #28]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	dd00      	ble.n	8007ad0 <_dtoa_r+0x4cc>
 8007ace:	e0f3      	b.n	8007cb8 <_dtoa_r+0x6b4>
 8007ad0:	d000      	beq.n	8007ad4 <_dtoa_r+0x4d0>
 8007ad2:	e282      	b.n	8007fda <_dtoa_r+0x9d6>
 8007ad4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007ad6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ad8:	2200      	movs	r2, #0
 8007ada:	4b74      	ldr	r3, [pc, #464]	; (8007cac <_dtoa_r+0x6a8>)
 8007adc:	f7fa fb4c 	bl	8002178 <__aeabi_dmul>
 8007ae0:	9a08      	ldr	r2, [sp, #32]
 8007ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ae4:	f7f8 fcd6 	bl	8000494 <__aeabi_dcmpge>
 8007ae8:	9e07      	ldr	r6, [sp, #28]
 8007aea:	0035      	movs	r5, r6
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d000      	beq.n	8007af2 <_dtoa_r+0x4ee>
 8007af0:	e259      	b.n	8007fa6 <_dtoa_r+0x9a2>
 8007af2:	9b06      	ldr	r3, [sp, #24]
 8007af4:	9a06      	ldr	r2, [sp, #24]
 8007af6:	3301      	adds	r3, #1
 8007af8:	9308      	str	r3, [sp, #32]
 8007afa:	2331      	movs	r3, #49	; 0x31
 8007afc:	7013      	strb	r3, [r2, #0]
 8007afe:	9b02      	ldr	r3, [sp, #8]
 8007b00:	3301      	adds	r3, #1
 8007b02:	9302      	str	r3, [sp, #8]
 8007b04:	e254      	b.n	8007fb0 <_dtoa_r+0x9ac>
 8007b06:	4234      	tst	r4, r6
 8007b08:	d007      	beq.n	8007b1a <_dtoa_r+0x516>
 8007b0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	9310      	str	r3, [sp, #64]	; 0x40
 8007b10:	682a      	ldr	r2, [r5, #0]
 8007b12:	686b      	ldr	r3, [r5, #4]
 8007b14:	f7fa fb30 	bl	8002178 <__aeabi_dmul>
 8007b18:	0033      	movs	r3, r6
 8007b1a:	1064      	asrs	r4, r4, #1
 8007b1c:	3508      	adds	r5, #8
 8007b1e:	e75a      	b.n	80079d6 <_dtoa_r+0x3d2>
 8007b20:	9e02      	ldr	r6, [sp, #8]
 8007b22:	9b07      	ldr	r3, [sp, #28]
 8007b24:	e780      	b.n	8007a28 <_dtoa_r+0x424>
 8007b26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b28:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007b2a:	1e5a      	subs	r2, r3, #1
 8007b2c:	4b59      	ldr	r3, [pc, #356]	; (8007c94 <_dtoa_r+0x690>)
 8007b2e:	00d2      	lsls	r2, r2, #3
 8007b30:	189b      	adds	r3, r3, r2
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2900      	cmp	r1, #0
 8007b38:	d051      	beq.n	8007bde <_dtoa_r+0x5da>
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	495d      	ldr	r1, [pc, #372]	; (8007cb4 <_dtoa_r+0x6b0>)
 8007b3e:	f7f9 ff19 	bl	8001974 <__aeabi_ddiv>
 8007b42:	9a08      	ldr	r2, [sp, #32]
 8007b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b46:	f7fa fd83 	bl	8002650 <__aeabi_dsub>
 8007b4a:	9a06      	ldr	r2, [sp, #24]
 8007b4c:	9b06      	ldr	r3, [sp, #24]
 8007b4e:	4694      	mov	ip, r2
 8007b50:	9317      	str	r3, [sp, #92]	; 0x5c
 8007b52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b54:	9010      	str	r0, [sp, #64]	; 0x40
 8007b56:	9111      	str	r1, [sp, #68]	; 0x44
 8007b58:	4463      	add	r3, ip
 8007b5a:	9319      	str	r3, [sp, #100]	; 0x64
 8007b5c:	0029      	movs	r1, r5
 8007b5e:	0020      	movs	r0, r4
 8007b60:	f7fb f926 	bl	8002db0 <__aeabi_d2iz>
 8007b64:	9014      	str	r0, [sp, #80]	; 0x50
 8007b66:	f7fb f959 	bl	8002e1c <__aeabi_i2d>
 8007b6a:	0002      	movs	r2, r0
 8007b6c:	000b      	movs	r3, r1
 8007b6e:	0020      	movs	r0, r4
 8007b70:	0029      	movs	r1, r5
 8007b72:	f7fa fd6d 	bl	8002650 <__aeabi_dsub>
 8007b76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	9308      	str	r3, [sp, #32]
 8007b7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b80:	0004      	movs	r4, r0
 8007b82:	3330      	adds	r3, #48	; 0x30
 8007b84:	7013      	strb	r3, [r2, #0]
 8007b86:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b8a:	000d      	movs	r5, r1
 8007b8c:	f7f8 fc64 	bl	8000458 <__aeabi_dcmplt>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d175      	bne.n	8007c80 <_dtoa_r+0x67c>
 8007b94:	0022      	movs	r2, r4
 8007b96:	002b      	movs	r3, r5
 8007b98:	2000      	movs	r0, #0
 8007b9a:	4940      	ldr	r1, [pc, #256]	; (8007c9c <_dtoa_r+0x698>)
 8007b9c:	f7fa fd58 	bl	8002650 <__aeabi_dsub>
 8007ba0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ba2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ba4:	f7f8 fc58 	bl	8000458 <__aeabi_dcmplt>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d000      	beq.n	8007bae <_dtoa_r+0x5aa>
 8007bac:	e0d2      	b.n	8007d54 <_dtoa_r+0x750>
 8007bae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bb0:	9a08      	ldr	r2, [sp, #32]
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d100      	bne.n	8007bb8 <_dtoa_r+0x5b4>
 8007bb6:	e770      	b.n	8007a9a <_dtoa_r+0x496>
 8007bb8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007bba:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	4b38      	ldr	r3, [pc, #224]	; (8007ca0 <_dtoa_r+0x69c>)
 8007bc0:	f7fa fada 	bl	8002178 <__aeabi_dmul>
 8007bc4:	4b36      	ldr	r3, [pc, #216]	; (8007ca0 <_dtoa_r+0x69c>)
 8007bc6:	9010      	str	r0, [sp, #64]	; 0x40
 8007bc8:	9111      	str	r1, [sp, #68]	; 0x44
 8007bca:	2200      	movs	r2, #0
 8007bcc:	0020      	movs	r0, r4
 8007bce:	0029      	movs	r1, r5
 8007bd0:	f7fa fad2 	bl	8002178 <__aeabi_dmul>
 8007bd4:	9b08      	ldr	r3, [sp, #32]
 8007bd6:	0004      	movs	r4, r0
 8007bd8:	000d      	movs	r5, r1
 8007bda:	9317      	str	r3, [sp, #92]	; 0x5c
 8007bdc:	e7be      	b.n	8007b5c <_dtoa_r+0x558>
 8007bde:	9808      	ldr	r0, [sp, #32]
 8007be0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007be2:	f7fa fac9 	bl	8002178 <__aeabi_dmul>
 8007be6:	9a06      	ldr	r2, [sp, #24]
 8007be8:	9b06      	ldr	r3, [sp, #24]
 8007bea:	4694      	mov	ip, r2
 8007bec:	9308      	str	r3, [sp, #32]
 8007bee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007bf0:	9010      	str	r0, [sp, #64]	; 0x40
 8007bf2:	9111      	str	r1, [sp, #68]	; 0x44
 8007bf4:	4463      	add	r3, ip
 8007bf6:	9319      	str	r3, [sp, #100]	; 0x64
 8007bf8:	0029      	movs	r1, r5
 8007bfa:	0020      	movs	r0, r4
 8007bfc:	f7fb f8d8 	bl	8002db0 <__aeabi_d2iz>
 8007c00:	9017      	str	r0, [sp, #92]	; 0x5c
 8007c02:	f7fb f90b 	bl	8002e1c <__aeabi_i2d>
 8007c06:	0002      	movs	r2, r0
 8007c08:	000b      	movs	r3, r1
 8007c0a:	0020      	movs	r0, r4
 8007c0c:	0029      	movs	r1, r5
 8007c0e:	f7fa fd1f 	bl	8002650 <__aeabi_dsub>
 8007c12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c14:	9a08      	ldr	r2, [sp, #32]
 8007c16:	3330      	adds	r3, #48	; 0x30
 8007c18:	7013      	strb	r3, [r2, #0]
 8007c1a:	0013      	movs	r3, r2
 8007c1c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c1e:	3301      	adds	r3, #1
 8007c20:	0004      	movs	r4, r0
 8007c22:	000d      	movs	r5, r1
 8007c24:	9308      	str	r3, [sp, #32]
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d12c      	bne.n	8007c84 <_dtoa_r+0x680>
 8007c2a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007c2c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007c2e:	9a06      	ldr	r2, [sp, #24]
 8007c30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c32:	4694      	mov	ip, r2
 8007c34:	4463      	add	r3, ip
 8007c36:	2200      	movs	r2, #0
 8007c38:	9308      	str	r3, [sp, #32]
 8007c3a:	4b1e      	ldr	r3, [pc, #120]	; (8007cb4 <_dtoa_r+0x6b0>)
 8007c3c:	f7f9 fb5e 	bl	80012fc <__aeabi_dadd>
 8007c40:	0002      	movs	r2, r0
 8007c42:	000b      	movs	r3, r1
 8007c44:	0020      	movs	r0, r4
 8007c46:	0029      	movs	r1, r5
 8007c48:	f7f8 fc1a 	bl	8000480 <__aeabi_dcmpgt>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d000      	beq.n	8007c52 <_dtoa_r+0x64e>
 8007c50:	e080      	b.n	8007d54 <_dtoa_r+0x750>
 8007c52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c56:	2000      	movs	r0, #0
 8007c58:	4916      	ldr	r1, [pc, #88]	; (8007cb4 <_dtoa_r+0x6b0>)
 8007c5a:	f7fa fcf9 	bl	8002650 <__aeabi_dsub>
 8007c5e:	0002      	movs	r2, r0
 8007c60:	000b      	movs	r3, r1
 8007c62:	0020      	movs	r0, r4
 8007c64:	0029      	movs	r1, r5
 8007c66:	f7f8 fbf7 	bl	8000458 <__aeabi_dcmplt>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	d100      	bne.n	8007c70 <_dtoa_r+0x66c>
 8007c6e:	e714      	b.n	8007a9a <_dtoa_r+0x496>
 8007c70:	9b08      	ldr	r3, [sp, #32]
 8007c72:	001a      	movs	r2, r3
 8007c74:	3a01      	subs	r2, #1
 8007c76:	9208      	str	r2, [sp, #32]
 8007c78:	7812      	ldrb	r2, [r2, #0]
 8007c7a:	2a30      	cmp	r2, #48	; 0x30
 8007c7c:	d0f8      	beq.n	8007c70 <_dtoa_r+0x66c>
 8007c7e:	9308      	str	r3, [sp, #32]
 8007c80:	9602      	str	r6, [sp, #8]
 8007c82:	e055      	b.n	8007d30 <_dtoa_r+0x72c>
 8007c84:	2200      	movs	r2, #0
 8007c86:	4b06      	ldr	r3, [pc, #24]	; (8007ca0 <_dtoa_r+0x69c>)
 8007c88:	f7fa fa76 	bl	8002178 <__aeabi_dmul>
 8007c8c:	0004      	movs	r4, r0
 8007c8e:	000d      	movs	r5, r1
 8007c90:	e7b2      	b.n	8007bf8 <_dtoa_r+0x5f4>
 8007c92:	46c0      	nop			; (mov r8, r8)
 8007c94:	08009e88 	.word	0x08009e88
 8007c98:	08009e60 	.word	0x08009e60
 8007c9c:	3ff00000 	.word	0x3ff00000
 8007ca0:	40240000 	.word	0x40240000
 8007ca4:	401c0000 	.word	0x401c0000
 8007ca8:	fcc00000 	.word	0xfcc00000
 8007cac:	40140000 	.word	0x40140000
 8007cb0:	7cc00000 	.word	0x7cc00000
 8007cb4:	3fe00000 	.word	0x3fe00000
 8007cb8:	9b07      	ldr	r3, [sp, #28]
 8007cba:	9e06      	ldr	r6, [sp, #24]
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	199b      	adds	r3, r3, r6
 8007cc0:	930c      	str	r3, [sp, #48]	; 0x30
 8007cc2:	9c08      	ldr	r4, [sp, #32]
 8007cc4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007cc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cca:	0020      	movs	r0, r4
 8007ccc:	0029      	movs	r1, r5
 8007cce:	f7f9 fe51 	bl	8001974 <__aeabi_ddiv>
 8007cd2:	f7fb f86d 	bl	8002db0 <__aeabi_d2iz>
 8007cd6:	9007      	str	r0, [sp, #28]
 8007cd8:	f7fb f8a0 	bl	8002e1c <__aeabi_i2d>
 8007cdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ce0:	f7fa fa4a 	bl	8002178 <__aeabi_dmul>
 8007ce4:	0002      	movs	r2, r0
 8007ce6:	000b      	movs	r3, r1
 8007ce8:	0020      	movs	r0, r4
 8007cea:	0029      	movs	r1, r5
 8007cec:	f7fa fcb0 	bl	8002650 <__aeabi_dsub>
 8007cf0:	0033      	movs	r3, r6
 8007cf2:	9a07      	ldr	r2, [sp, #28]
 8007cf4:	3601      	adds	r6, #1
 8007cf6:	3230      	adds	r2, #48	; 0x30
 8007cf8:	701a      	strb	r2, [r3, #0]
 8007cfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cfc:	9608      	str	r6, [sp, #32]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d139      	bne.n	8007d76 <_dtoa_r+0x772>
 8007d02:	0002      	movs	r2, r0
 8007d04:	000b      	movs	r3, r1
 8007d06:	f7f9 faf9 	bl	80012fc <__aeabi_dadd>
 8007d0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d0e:	0004      	movs	r4, r0
 8007d10:	000d      	movs	r5, r1
 8007d12:	f7f8 fbb5 	bl	8000480 <__aeabi_dcmpgt>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	d11b      	bne.n	8007d52 <_dtoa_r+0x74e>
 8007d1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d1e:	0020      	movs	r0, r4
 8007d20:	0029      	movs	r1, r5
 8007d22:	f7f8 fb93 	bl	800044c <__aeabi_dcmpeq>
 8007d26:	2800      	cmp	r0, #0
 8007d28:	d002      	beq.n	8007d30 <_dtoa_r+0x72c>
 8007d2a:	9b07      	ldr	r3, [sp, #28]
 8007d2c:	07db      	lsls	r3, r3, #31
 8007d2e:	d410      	bmi.n	8007d52 <_dtoa_r+0x74e>
 8007d30:	0038      	movs	r0, r7
 8007d32:	9905      	ldr	r1, [sp, #20]
 8007d34:	f000 fae6 	bl	8008304 <_Bfree>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	9a08      	ldr	r2, [sp, #32]
 8007d3c:	9802      	ldr	r0, [sp, #8]
 8007d3e:	7013      	strb	r3, [r2, #0]
 8007d40:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007d42:	3001      	adds	r0, #1
 8007d44:	6018      	str	r0, [r3, #0]
 8007d46:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d100      	bne.n	8007d4e <_dtoa_r+0x74a>
 8007d4c:	e4a6      	b.n	800769c <_dtoa_r+0x98>
 8007d4e:	601a      	str	r2, [r3, #0]
 8007d50:	e4a4      	b.n	800769c <_dtoa_r+0x98>
 8007d52:	9e02      	ldr	r6, [sp, #8]
 8007d54:	9b08      	ldr	r3, [sp, #32]
 8007d56:	9308      	str	r3, [sp, #32]
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	781a      	ldrb	r2, [r3, #0]
 8007d5c:	2a39      	cmp	r2, #57	; 0x39
 8007d5e:	d106      	bne.n	8007d6e <_dtoa_r+0x76a>
 8007d60:	9a06      	ldr	r2, [sp, #24]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d1f7      	bne.n	8007d56 <_dtoa_r+0x752>
 8007d66:	2230      	movs	r2, #48	; 0x30
 8007d68:	9906      	ldr	r1, [sp, #24]
 8007d6a:	3601      	adds	r6, #1
 8007d6c:	700a      	strb	r2, [r1, #0]
 8007d6e:	781a      	ldrb	r2, [r3, #0]
 8007d70:	3201      	adds	r2, #1
 8007d72:	701a      	strb	r2, [r3, #0]
 8007d74:	e784      	b.n	8007c80 <_dtoa_r+0x67c>
 8007d76:	2200      	movs	r2, #0
 8007d78:	4baa      	ldr	r3, [pc, #680]	; (8008024 <_dtoa_r+0xa20>)
 8007d7a:	f7fa f9fd 	bl	8002178 <__aeabi_dmul>
 8007d7e:	2200      	movs	r2, #0
 8007d80:	2300      	movs	r3, #0
 8007d82:	0004      	movs	r4, r0
 8007d84:	000d      	movs	r5, r1
 8007d86:	f7f8 fb61 	bl	800044c <__aeabi_dcmpeq>
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	d09b      	beq.n	8007cc6 <_dtoa_r+0x6c2>
 8007d8e:	e7cf      	b.n	8007d30 <_dtoa_r+0x72c>
 8007d90:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d92:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007d94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d96:	2d00      	cmp	r5, #0
 8007d98:	d012      	beq.n	8007dc0 <_dtoa_r+0x7bc>
 8007d9a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007d9c:	2a01      	cmp	r2, #1
 8007d9e:	dc66      	bgt.n	8007e6e <_dtoa_r+0x86a>
 8007da0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007da2:	2a00      	cmp	r2, #0
 8007da4:	d05d      	beq.n	8007e62 <_dtoa_r+0x85e>
 8007da6:	4aa0      	ldr	r2, [pc, #640]	; (8008028 <_dtoa_r+0xa24>)
 8007da8:	189b      	adds	r3, r3, r2
 8007daa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dac:	2101      	movs	r1, #1
 8007dae:	18d2      	adds	r2, r2, r3
 8007db0:	920a      	str	r2, [sp, #40]	; 0x28
 8007db2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007db4:	0038      	movs	r0, r7
 8007db6:	18d3      	adds	r3, r2, r3
 8007db8:	930d      	str	r3, [sp, #52]	; 0x34
 8007dba:	f000 fb53 	bl	8008464 <__i2b>
 8007dbe:	0005      	movs	r5, r0
 8007dc0:	2c00      	cmp	r4, #0
 8007dc2:	dd0e      	ble.n	8007de2 <_dtoa_r+0x7de>
 8007dc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	dd0b      	ble.n	8007de2 <_dtoa_r+0x7de>
 8007dca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dcc:	0023      	movs	r3, r4
 8007dce:	4294      	cmp	r4, r2
 8007dd0:	dd00      	ble.n	8007dd4 <_dtoa_r+0x7d0>
 8007dd2:	0013      	movs	r3, r2
 8007dd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dd6:	1ae4      	subs	r4, r4, r3
 8007dd8:	1ad2      	subs	r2, r2, r3
 8007dda:	920a      	str	r2, [sp, #40]	; 0x28
 8007ddc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	930d      	str	r3, [sp, #52]	; 0x34
 8007de2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d01f      	beq.n	8007e28 <_dtoa_r+0x824>
 8007de8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d054      	beq.n	8007e98 <_dtoa_r+0x894>
 8007dee:	2e00      	cmp	r6, #0
 8007df0:	dd11      	ble.n	8007e16 <_dtoa_r+0x812>
 8007df2:	0029      	movs	r1, r5
 8007df4:	0032      	movs	r2, r6
 8007df6:	0038      	movs	r0, r7
 8007df8:	f000 fbfa 	bl	80085f0 <__pow5mult>
 8007dfc:	9a05      	ldr	r2, [sp, #20]
 8007dfe:	0001      	movs	r1, r0
 8007e00:	0005      	movs	r5, r0
 8007e02:	0038      	movs	r0, r7
 8007e04:	f000 fb44 	bl	8008490 <__multiply>
 8007e08:	9905      	ldr	r1, [sp, #20]
 8007e0a:	9014      	str	r0, [sp, #80]	; 0x50
 8007e0c:	0038      	movs	r0, r7
 8007e0e:	f000 fa79 	bl	8008304 <_Bfree>
 8007e12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e14:	9305      	str	r3, [sp, #20]
 8007e16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e18:	1b9a      	subs	r2, r3, r6
 8007e1a:	42b3      	cmp	r3, r6
 8007e1c:	d004      	beq.n	8007e28 <_dtoa_r+0x824>
 8007e1e:	0038      	movs	r0, r7
 8007e20:	9905      	ldr	r1, [sp, #20]
 8007e22:	f000 fbe5 	bl	80085f0 <__pow5mult>
 8007e26:	9005      	str	r0, [sp, #20]
 8007e28:	2101      	movs	r1, #1
 8007e2a:	0038      	movs	r0, r7
 8007e2c:	f000 fb1a 	bl	8008464 <__i2b>
 8007e30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e32:	0006      	movs	r6, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	dd31      	ble.n	8007e9c <_dtoa_r+0x898>
 8007e38:	001a      	movs	r2, r3
 8007e3a:	0001      	movs	r1, r0
 8007e3c:	0038      	movs	r0, r7
 8007e3e:	f000 fbd7 	bl	80085f0 <__pow5mult>
 8007e42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e44:	0006      	movs	r6, r0
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	dd2d      	ble.n	8007ea6 <_dtoa_r+0x8a2>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	930e      	str	r3, [sp, #56]	; 0x38
 8007e4e:	6933      	ldr	r3, [r6, #16]
 8007e50:	3303      	adds	r3, #3
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	18f3      	adds	r3, r6, r3
 8007e56:	6858      	ldr	r0, [r3, #4]
 8007e58:	f000 fabc 	bl	80083d4 <__hi0bits>
 8007e5c:	2320      	movs	r3, #32
 8007e5e:	1a18      	subs	r0, r3, r0
 8007e60:	e039      	b.n	8007ed6 <_dtoa_r+0x8d2>
 8007e62:	2336      	movs	r3, #54	; 0x36
 8007e64:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007e66:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007e68:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007e6a:	1a9b      	subs	r3, r3, r2
 8007e6c:	e79d      	b.n	8007daa <_dtoa_r+0x7a6>
 8007e6e:	9b07      	ldr	r3, [sp, #28]
 8007e70:	1e5e      	subs	r6, r3, #1
 8007e72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e74:	42b3      	cmp	r3, r6
 8007e76:	db07      	blt.n	8007e88 <_dtoa_r+0x884>
 8007e78:	1b9e      	subs	r6, r3, r6
 8007e7a:	9b07      	ldr	r3, [sp, #28]
 8007e7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	da93      	bge.n	8007daa <_dtoa_r+0x7a6>
 8007e82:	1ae4      	subs	r4, r4, r3
 8007e84:	2300      	movs	r3, #0
 8007e86:	e790      	b.n	8007daa <_dtoa_r+0x7a6>
 8007e88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007e8c:	1af3      	subs	r3, r6, r3
 8007e8e:	18d3      	adds	r3, r2, r3
 8007e90:	960e      	str	r6, [sp, #56]	; 0x38
 8007e92:	9315      	str	r3, [sp, #84]	; 0x54
 8007e94:	2600      	movs	r6, #0
 8007e96:	e7f0      	b.n	8007e7a <_dtoa_r+0x876>
 8007e98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e9a:	e7c0      	b.n	8007e1e <_dtoa_r+0x81a>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	930e      	str	r3, [sp, #56]	; 0x38
 8007ea0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	dc13      	bgt.n	8007ece <_dtoa_r+0x8ca>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	930e      	str	r3, [sp, #56]	; 0x38
 8007eaa:	9b08      	ldr	r3, [sp, #32]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10e      	bne.n	8007ece <_dtoa_r+0x8ca>
 8007eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eb2:	031b      	lsls	r3, r3, #12
 8007eb4:	d10b      	bne.n	8007ece <_dtoa_r+0x8ca>
 8007eb6:	4b5d      	ldr	r3, [pc, #372]	; (800802c <_dtoa_r+0xa28>)
 8007eb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eba:	4213      	tst	r3, r2
 8007ebc:	d007      	beq.n	8007ece <_dtoa_r+0x8ca>
 8007ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	930d      	str	r3, [sp, #52]	; 0x34
 8007eca:	2301      	movs	r3, #1
 8007ecc:	930e      	str	r3, [sp, #56]	; 0x38
 8007ece:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ed0:	2001      	movs	r0, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1bb      	bne.n	8007e4e <_dtoa_r+0x84a>
 8007ed6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ed8:	221f      	movs	r2, #31
 8007eda:	1818      	adds	r0, r3, r0
 8007edc:	0003      	movs	r3, r0
 8007ede:	4013      	ands	r3, r2
 8007ee0:	4210      	tst	r0, r2
 8007ee2:	d046      	beq.n	8007f72 <_dtoa_r+0x96e>
 8007ee4:	3201      	adds	r2, #1
 8007ee6:	1ad2      	subs	r2, r2, r3
 8007ee8:	2a04      	cmp	r2, #4
 8007eea:	dd3f      	ble.n	8007f6c <_dtoa_r+0x968>
 8007eec:	221c      	movs	r2, #28
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ef2:	18e4      	adds	r4, r4, r3
 8007ef4:	18d2      	adds	r2, r2, r3
 8007ef6:	920a      	str	r2, [sp, #40]	; 0x28
 8007ef8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007efa:	18d3      	adds	r3, r2, r3
 8007efc:	930d      	str	r3, [sp, #52]	; 0x34
 8007efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	dd05      	ble.n	8007f10 <_dtoa_r+0x90c>
 8007f04:	001a      	movs	r2, r3
 8007f06:	0038      	movs	r0, r7
 8007f08:	9905      	ldr	r1, [sp, #20]
 8007f0a:	f000 fbcd 	bl	80086a8 <__lshift>
 8007f0e:	9005      	str	r0, [sp, #20]
 8007f10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	dd05      	ble.n	8007f22 <_dtoa_r+0x91e>
 8007f16:	0031      	movs	r1, r6
 8007f18:	001a      	movs	r2, r3
 8007f1a:	0038      	movs	r0, r7
 8007f1c:	f000 fbc4 	bl	80086a8 <__lshift>
 8007f20:	0006      	movs	r6, r0
 8007f22:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d026      	beq.n	8007f76 <_dtoa_r+0x972>
 8007f28:	0031      	movs	r1, r6
 8007f2a:	9805      	ldr	r0, [sp, #20]
 8007f2c:	f000 fc2a 	bl	8008784 <__mcmp>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	da20      	bge.n	8007f76 <_dtoa_r+0x972>
 8007f34:	9b02      	ldr	r3, [sp, #8]
 8007f36:	220a      	movs	r2, #10
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	9302      	str	r3, [sp, #8]
 8007f3c:	0038      	movs	r0, r7
 8007f3e:	2300      	movs	r3, #0
 8007f40:	9905      	ldr	r1, [sp, #20]
 8007f42:	f000 fa03 	bl	800834c <__multadd>
 8007f46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f48:	9005      	str	r0, [sp, #20]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d100      	bne.n	8007f50 <_dtoa_r+0x94c>
 8007f4e:	e166      	b.n	800821e <_dtoa_r+0xc1a>
 8007f50:	2300      	movs	r3, #0
 8007f52:	0029      	movs	r1, r5
 8007f54:	220a      	movs	r2, #10
 8007f56:	0038      	movs	r0, r7
 8007f58:	f000 f9f8 	bl	800834c <__multadd>
 8007f5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f5e:	0005      	movs	r5, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	dc47      	bgt.n	8007ff4 <_dtoa_r+0x9f0>
 8007f64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	dc0d      	bgt.n	8007f86 <_dtoa_r+0x982>
 8007f6a:	e043      	b.n	8007ff4 <_dtoa_r+0x9f0>
 8007f6c:	2a04      	cmp	r2, #4
 8007f6e:	d0c6      	beq.n	8007efe <_dtoa_r+0x8fa>
 8007f70:	0013      	movs	r3, r2
 8007f72:	331c      	adds	r3, #28
 8007f74:	e7bc      	b.n	8007ef0 <_dtoa_r+0x8ec>
 8007f76:	9b07      	ldr	r3, [sp, #28]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	dc35      	bgt.n	8007fe8 <_dtoa_r+0x9e4>
 8007f7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	dd32      	ble.n	8007fe8 <_dtoa_r+0x9e4>
 8007f82:	9b07      	ldr	r3, [sp, #28]
 8007f84:	930c      	str	r3, [sp, #48]	; 0x30
 8007f86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10c      	bne.n	8007fa6 <_dtoa_r+0x9a2>
 8007f8c:	0031      	movs	r1, r6
 8007f8e:	2205      	movs	r2, #5
 8007f90:	0038      	movs	r0, r7
 8007f92:	f000 f9db 	bl	800834c <__multadd>
 8007f96:	0006      	movs	r6, r0
 8007f98:	0001      	movs	r1, r0
 8007f9a:	9805      	ldr	r0, [sp, #20]
 8007f9c:	f000 fbf2 	bl	8008784 <__mcmp>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	dd00      	ble.n	8007fa6 <_dtoa_r+0x9a2>
 8007fa4:	e5a5      	b.n	8007af2 <_dtoa_r+0x4ee>
 8007fa6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007fa8:	43db      	mvns	r3, r3
 8007faa:	9302      	str	r3, [sp, #8]
 8007fac:	9b06      	ldr	r3, [sp, #24]
 8007fae:	9308      	str	r3, [sp, #32]
 8007fb0:	2400      	movs	r4, #0
 8007fb2:	0031      	movs	r1, r6
 8007fb4:	0038      	movs	r0, r7
 8007fb6:	f000 f9a5 	bl	8008304 <_Bfree>
 8007fba:	2d00      	cmp	r5, #0
 8007fbc:	d100      	bne.n	8007fc0 <_dtoa_r+0x9bc>
 8007fbe:	e6b7      	b.n	8007d30 <_dtoa_r+0x72c>
 8007fc0:	2c00      	cmp	r4, #0
 8007fc2:	d005      	beq.n	8007fd0 <_dtoa_r+0x9cc>
 8007fc4:	42ac      	cmp	r4, r5
 8007fc6:	d003      	beq.n	8007fd0 <_dtoa_r+0x9cc>
 8007fc8:	0021      	movs	r1, r4
 8007fca:	0038      	movs	r0, r7
 8007fcc:	f000 f99a 	bl	8008304 <_Bfree>
 8007fd0:	0029      	movs	r1, r5
 8007fd2:	0038      	movs	r0, r7
 8007fd4:	f000 f996 	bl	8008304 <_Bfree>
 8007fd8:	e6aa      	b.n	8007d30 <_dtoa_r+0x72c>
 8007fda:	2600      	movs	r6, #0
 8007fdc:	0035      	movs	r5, r6
 8007fde:	e7e2      	b.n	8007fa6 <_dtoa_r+0x9a2>
 8007fe0:	9602      	str	r6, [sp, #8]
 8007fe2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007fe4:	0035      	movs	r5, r6
 8007fe6:	e584      	b.n	8007af2 <_dtoa_r+0x4ee>
 8007fe8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d100      	bne.n	8007ff0 <_dtoa_r+0x9ec>
 8007fee:	e0ce      	b.n	800818e <_dtoa_r+0xb8a>
 8007ff0:	9b07      	ldr	r3, [sp, #28]
 8007ff2:	930c      	str	r3, [sp, #48]	; 0x30
 8007ff4:	2c00      	cmp	r4, #0
 8007ff6:	dd05      	ble.n	8008004 <_dtoa_r+0xa00>
 8007ff8:	0029      	movs	r1, r5
 8007ffa:	0022      	movs	r2, r4
 8007ffc:	0038      	movs	r0, r7
 8007ffe:	f000 fb53 	bl	80086a8 <__lshift>
 8008002:	0005      	movs	r5, r0
 8008004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008006:	0028      	movs	r0, r5
 8008008:	2b00      	cmp	r3, #0
 800800a:	d022      	beq.n	8008052 <_dtoa_r+0xa4e>
 800800c:	0038      	movs	r0, r7
 800800e:	6869      	ldr	r1, [r5, #4]
 8008010:	f000 f934 	bl	800827c <_Balloc>
 8008014:	1e04      	subs	r4, r0, #0
 8008016:	d10f      	bne.n	8008038 <_dtoa_r+0xa34>
 8008018:	0002      	movs	r2, r0
 800801a:	4b05      	ldr	r3, [pc, #20]	; (8008030 <_dtoa_r+0xa2c>)
 800801c:	4905      	ldr	r1, [pc, #20]	; (8008034 <_dtoa_r+0xa30>)
 800801e:	f7ff fb06 	bl	800762e <_dtoa_r+0x2a>
 8008022:	46c0      	nop			; (mov r8, r8)
 8008024:	40240000 	.word	0x40240000
 8008028:	00000433 	.word	0x00000433
 800802c:	7ff00000 	.word	0x7ff00000
 8008030:	08009def 	.word	0x08009def
 8008034:	000002ea 	.word	0x000002ea
 8008038:	0029      	movs	r1, r5
 800803a:	692b      	ldr	r3, [r5, #16]
 800803c:	310c      	adds	r1, #12
 800803e:	1c9a      	adds	r2, r3, #2
 8008040:	0092      	lsls	r2, r2, #2
 8008042:	300c      	adds	r0, #12
 8008044:	f000 f911 	bl	800826a <memcpy>
 8008048:	2201      	movs	r2, #1
 800804a:	0021      	movs	r1, r4
 800804c:	0038      	movs	r0, r7
 800804e:	f000 fb2b 	bl	80086a8 <__lshift>
 8008052:	9b06      	ldr	r3, [sp, #24]
 8008054:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008056:	930a      	str	r3, [sp, #40]	; 0x28
 8008058:	3b01      	subs	r3, #1
 800805a:	189b      	adds	r3, r3, r2
 800805c:	2201      	movs	r2, #1
 800805e:	002c      	movs	r4, r5
 8008060:	0005      	movs	r5, r0
 8008062:	9314      	str	r3, [sp, #80]	; 0x50
 8008064:	9b08      	ldr	r3, [sp, #32]
 8008066:	4013      	ands	r3, r2
 8008068:	930f      	str	r3, [sp, #60]	; 0x3c
 800806a:	0031      	movs	r1, r6
 800806c:	9805      	ldr	r0, [sp, #20]
 800806e:	f7ff fa3d 	bl	80074ec <quorem>
 8008072:	0003      	movs	r3, r0
 8008074:	0021      	movs	r1, r4
 8008076:	3330      	adds	r3, #48	; 0x30
 8008078:	900d      	str	r0, [sp, #52]	; 0x34
 800807a:	9805      	ldr	r0, [sp, #20]
 800807c:	9307      	str	r3, [sp, #28]
 800807e:	f000 fb81 	bl	8008784 <__mcmp>
 8008082:	002a      	movs	r2, r5
 8008084:	900e      	str	r0, [sp, #56]	; 0x38
 8008086:	0031      	movs	r1, r6
 8008088:	0038      	movs	r0, r7
 800808a:	f000 fb97 	bl	80087bc <__mdiff>
 800808e:	68c3      	ldr	r3, [r0, #12]
 8008090:	9008      	str	r0, [sp, #32]
 8008092:	9310      	str	r3, [sp, #64]	; 0x40
 8008094:	2301      	movs	r3, #1
 8008096:	930c      	str	r3, [sp, #48]	; 0x30
 8008098:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800809a:	2b00      	cmp	r3, #0
 800809c:	d104      	bne.n	80080a8 <_dtoa_r+0xaa4>
 800809e:	0001      	movs	r1, r0
 80080a0:	9805      	ldr	r0, [sp, #20]
 80080a2:	f000 fb6f 	bl	8008784 <__mcmp>
 80080a6:	900c      	str	r0, [sp, #48]	; 0x30
 80080a8:	0038      	movs	r0, r7
 80080aa:	9908      	ldr	r1, [sp, #32]
 80080ac:	f000 f92a 	bl	8008304 <_Bfree>
 80080b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080b4:	3301      	adds	r3, #1
 80080b6:	9308      	str	r3, [sp, #32]
 80080b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080ba:	4313      	orrs	r3, r2
 80080bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080be:	4313      	orrs	r3, r2
 80080c0:	d10c      	bne.n	80080dc <_dtoa_r+0xad8>
 80080c2:	9b07      	ldr	r3, [sp, #28]
 80080c4:	2b39      	cmp	r3, #57	; 0x39
 80080c6:	d026      	beq.n	8008116 <_dtoa_r+0xb12>
 80080c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	dd02      	ble.n	80080d4 <_dtoa_r+0xad0>
 80080ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080d0:	3331      	adds	r3, #49	; 0x31
 80080d2:	9307      	str	r3, [sp, #28]
 80080d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080d6:	9a07      	ldr	r2, [sp, #28]
 80080d8:	701a      	strb	r2, [r3, #0]
 80080da:	e76a      	b.n	8007fb2 <_dtoa_r+0x9ae>
 80080dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080de:	2b00      	cmp	r3, #0
 80080e0:	db04      	blt.n	80080ec <_dtoa_r+0xae8>
 80080e2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80080e4:	4313      	orrs	r3, r2
 80080e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080e8:	4313      	orrs	r3, r2
 80080ea:	d11f      	bne.n	800812c <_dtoa_r+0xb28>
 80080ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	ddf0      	ble.n	80080d4 <_dtoa_r+0xad0>
 80080f2:	9905      	ldr	r1, [sp, #20]
 80080f4:	2201      	movs	r2, #1
 80080f6:	0038      	movs	r0, r7
 80080f8:	f000 fad6 	bl	80086a8 <__lshift>
 80080fc:	0031      	movs	r1, r6
 80080fe:	9005      	str	r0, [sp, #20]
 8008100:	f000 fb40 	bl	8008784 <__mcmp>
 8008104:	2800      	cmp	r0, #0
 8008106:	dc03      	bgt.n	8008110 <_dtoa_r+0xb0c>
 8008108:	d1e4      	bne.n	80080d4 <_dtoa_r+0xad0>
 800810a:	9b07      	ldr	r3, [sp, #28]
 800810c:	07db      	lsls	r3, r3, #31
 800810e:	d5e1      	bpl.n	80080d4 <_dtoa_r+0xad0>
 8008110:	9b07      	ldr	r3, [sp, #28]
 8008112:	2b39      	cmp	r3, #57	; 0x39
 8008114:	d1db      	bne.n	80080ce <_dtoa_r+0xaca>
 8008116:	2339      	movs	r3, #57	; 0x39
 8008118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800811a:	7013      	strb	r3, [r2, #0]
 800811c:	9b08      	ldr	r3, [sp, #32]
 800811e:	9308      	str	r3, [sp, #32]
 8008120:	3b01      	subs	r3, #1
 8008122:	781a      	ldrb	r2, [r3, #0]
 8008124:	2a39      	cmp	r2, #57	; 0x39
 8008126:	d068      	beq.n	80081fa <_dtoa_r+0xbf6>
 8008128:	3201      	adds	r2, #1
 800812a:	e7d5      	b.n	80080d8 <_dtoa_r+0xad4>
 800812c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800812e:	2b00      	cmp	r3, #0
 8008130:	dd07      	ble.n	8008142 <_dtoa_r+0xb3e>
 8008132:	9b07      	ldr	r3, [sp, #28]
 8008134:	2b39      	cmp	r3, #57	; 0x39
 8008136:	d0ee      	beq.n	8008116 <_dtoa_r+0xb12>
 8008138:	9b07      	ldr	r3, [sp, #28]
 800813a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800813c:	3301      	adds	r3, #1
 800813e:	7013      	strb	r3, [r2, #0]
 8008140:	e737      	b.n	8007fb2 <_dtoa_r+0x9ae>
 8008142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008144:	9a07      	ldr	r2, [sp, #28]
 8008146:	701a      	strb	r2, [r3, #0]
 8008148:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800814a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800814c:	4293      	cmp	r3, r2
 800814e:	d03e      	beq.n	80081ce <_dtoa_r+0xbca>
 8008150:	2300      	movs	r3, #0
 8008152:	220a      	movs	r2, #10
 8008154:	9905      	ldr	r1, [sp, #20]
 8008156:	0038      	movs	r0, r7
 8008158:	f000 f8f8 	bl	800834c <__multadd>
 800815c:	2300      	movs	r3, #0
 800815e:	9005      	str	r0, [sp, #20]
 8008160:	220a      	movs	r2, #10
 8008162:	0021      	movs	r1, r4
 8008164:	0038      	movs	r0, r7
 8008166:	42ac      	cmp	r4, r5
 8008168:	d106      	bne.n	8008178 <_dtoa_r+0xb74>
 800816a:	f000 f8ef 	bl	800834c <__multadd>
 800816e:	0004      	movs	r4, r0
 8008170:	0005      	movs	r5, r0
 8008172:	9b08      	ldr	r3, [sp, #32]
 8008174:	930a      	str	r3, [sp, #40]	; 0x28
 8008176:	e778      	b.n	800806a <_dtoa_r+0xa66>
 8008178:	f000 f8e8 	bl	800834c <__multadd>
 800817c:	0029      	movs	r1, r5
 800817e:	0004      	movs	r4, r0
 8008180:	2300      	movs	r3, #0
 8008182:	220a      	movs	r2, #10
 8008184:	0038      	movs	r0, r7
 8008186:	f000 f8e1 	bl	800834c <__multadd>
 800818a:	0005      	movs	r5, r0
 800818c:	e7f1      	b.n	8008172 <_dtoa_r+0xb6e>
 800818e:	9b07      	ldr	r3, [sp, #28]
 8008190:	930c      	str	r3, [sp, #48]	; 0x30
 8008192:	2400      	movs	r4, #0
 8008194:	0031      	movs	r1, r6
 8008196:	9805      	ldr	r0, [sp, #20]
 8008198:	f7ff f9a8 	bl	80074ec <quorem>
 800819c:	9b06      	ldr	r3, [sp, #24]
 800819e:	3030      	adds	r0, #48	; 0x30
 80081a0:	5518      	strb	r0, [r3, r4]
 80081a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081a4:	3401      	adds	r4, #1
 80081a6:	9007      	str	r0, [sp, #28]
 80081a8:	42a3      	cmp	r3, r4
 80081aa:	dd07      	ble.n	80081bc <_dtoa_r+0xbb8>
 80081ac:	2300      	movs	r3, #0
 80081ae:	220a      	movs	r2, #10
 80081b0:	0038      	movs	r0, r7
 80081b2:	9905      	ldr	r1, [sp, #20]
 80081b4:	f000 f8ca 	bl	800834c <__multadd>
 80081b8:	9005      	str	r0, [sp, #20]
 80081ba:	e7eb      	b.n	8008194 <_dtoa_r+0xb90>
 80081bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081be:	2001      	movs	r0, #1
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	dd00      	ble.n	80081c6 <_dtoa_r+0xbc2>
 80081c4:	0018      	movs	r0, r3
 80081c6:	2400      	movs	r4, #0
 80081c8:	9b06      	ldr	r3, [sp, #24]
 80081ca:	181b      	adds	r3, r3, r0
 80081cc:	9308      	str	r3, [sp, #32]
 80081ce:	9905      	ldr	r1, [sp, #20]
 80081d0:	2201      	movs	r2, #1
 80081d2:	0038      	movs	r0, r7
 80081d4:	f000 fa68 	bl	80086a8 <__lshift>
 80081d8:	0031      	movs	r1, r6
 80081da:	9005      	str	r0, [sp, #20]
 80081dc:	f000 fad2 	bl	8008784 <__mcmp>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	dc9b      	bgt.n	800811c <_dtoa_r+0xb18>
 80081e4:	d102      	bne.n	80081ec <_dtoa_r+0xbe8>
 80081e6:	9b07      	ldr	r3, [sp, #28]
 80081e8:	07db      	lsls	r3, r3, #31
 80081ea:	d497      	bmi.n	800811c <_dtoa_r+0xb18>
 80081ec:	9b08      	ldr	r3, [sp, #32]
 80081ee:	9308      	str	r3, [sp, #32]
 80081f0:	3b01      	subs	r3, #1
 80081f2:	781a      	ldrb	r2, [r3, #0]
 80081f4:	2a30      	cmp	r2, #48	; 0x30
 80081f6:	d0fa      	beq.n	80081ee <_dtoa_r+0xbea>
 80081f8:	e6db      	b.n	8007fb2 <_dtoa_r+0x9ae>
 80081fa:	9a06      	ldr	r2, [sp, #24]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d18e      	bne.n	800811e <_dtoa_r+0xb1a>
 8008200:	9b02      	ldr	r3, [sp, #8]
 8008202:	3301      	adds	r3, #1
 8008204:	9302      	str	r3, [sp, #8]
 8008206:	2331      	movs	r3, #49	; 0x31
 8008208:	e799      	b.n	800813e <_dtoa_r+0xb3a>
 800820a:	4b09      	ldr	r3, [pc, #36]	; (8008230 <_dtoa_r+0xc2c>)
 800820c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800820e:	9306      	str	r3, [sp, #24]
 8008210:	4b08      	ldr	r3, [pc, #32]	; (8008234 <_dtoa_r+0xc30>)
 8008212:	2a00      	cmp	r2, #0
 8008214:	d001      	beq.n	800821a <_dtoa_r+0xc16>
 8008216:	f7ff fa3f 	bl	8007698 <_dtoa_r+0x94>
 800821a:	f7ff fa3f 	bl	800769c <_dtoa_r+0x98>
 800821e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008220:	2b00      	cmp	r3, #0
 8008222:	dcb6      	bgt.n	8008192 <_dtoa_r+0xb8e>
 8008224:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008226:	2b02      	cmp	r3, #2
 8008228:	dd00      	ble.n	800822c <_dtoa_r+0xc28>
 800822a:	e6ac      	b.n	8007f86 <_dtoa_r+0x982>
 800822c:	e7b1      	b.n	8008192 <_dtoa_r+0xb8e>
 800822e:	46c0      	nop			; (mov r8, r8)
 8008230:	08009d70 	.word	0x08009d70
 8008234:	08009d78 	.word	0x08009d78

08008238 <_localeconv_r>:
 8008238:	4800      	ldr	r0, [pc, #0]	; (800823c <_localeconv_r+0x4>)
 800823a:	4770      	bx	lr
 800823c:	20000160 	.word	0x20000160

08008240 <malloc>:
 8008240:	b510      	push	{r4, lr}
 8008242:	4b03      	ldr	r3, [pc, #12]	; (8008250 <malloc+0x10>)
 8008244:	0001      	movs	r1, r0
 8008246:	6818      	ldr	r0, [r3, #0]
 8008248:	f000 fc4c 	bl	8008ae4 <_malloc_r>
 800824c:	bd10      	pop	{r4, pc}
 800824e:	46c0      	nop			; (mov r8, r8)
 8008250:	2000000c 	.word	0x2000000c

08008254 <memchr>:
 8008254:	b2c9      	uxtb	r1, r1
 8008256:	1882      	adds	r2, r0, r2
 8008258:	4290      	cmp	r0, r2
 800825a:	d101      	bne.n	8008260 <memchr+0xc>
 800825c:	2000      	movs	r0, #0
 800825e:	4770      	bx	lr
 8008260:	7803      	ldrb	r3, [r0, #0]
 8008262:	428b      	cmp	r3, r1
 8008264:	d0fb      	beq.n	800825e <memchr+0xa>
 8008266:	3001      	adds	r0, #1
 8008268:	e7f6      	b.n	8008258 <memchr+0x4>

0800826a <memcpy>:
 800826a:	2300      	movs	r3, #0
 800826c:	b510      	push	{r4, lr}
 800826e:	429a      	cmp	r2, r3
 8008270:	d100      	bne.n	8008274 <memcpy+0xa>
 8008272:	bd10      	pop	{r4, pc}
 8008274:	5ccc      	ldrb	r4, [r1, r3]
 8008276:	54c4      	strb	r4, [r0, r3]
 8008278:	3301      	adds	r3, #1
 800827a:	e7f8      	b.n	800826e <memcpy+0x4>

0800827c <_Balloc>:
 800827c:	b570      	push	{r4, r5, r6, lr}
 800827e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008280:	0006      	movs	r6, r0
 8008282:	000c      	movs	r4, r1
 8008284:	2d00      	cmp	r5, #0
 8008286:	d10e      	bne.n	80082a6 <_Balloc+0x2a>
 8008288:	2010      	movs	r0, #16
 800828a:	f7ff ffd9 	bl	8008240 <malloc>
 800828e:	1e02      	subs	r2, r0, #0
 8008290:	6270      	str	r0, [r6, #36]	; 0x24
 8008292:	d104      	bne.n	800829e <_Balloc+0x22>
 8008294:	2166      	movs	r1, #102	; 0x66
 8008296:	4b19      	ldr	r3, [pc, #100]	; (80082fc <_Balloc+0x80>)
 8008298:	4819      	ldr	r0, [pc, #100]	; (8008300 <_Balloc+0x84>)
 800829a:	f000 fe0d 	bl	8008eb8 <__assert_func>
 800829e:	6045      	str	r5, [r0, #4]
 80082a0:	6085      	str	r5, [r0, #8]
 80082a2:	6005      	str	r5, [r0, #0]
 80082a4:	60c5      	str	r5, [r0, #12]
 80082a6:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80082a8:	68eb      	ldr	r3, [r5, #12]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d013      	beq.n	80082d6 <_Balloc+0x5a>
 80082ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80082b0:	00a2      	lsls	r2, r4, #2
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	189b      	adds	r3, r3, r2
 80082b6:	6818      	ldr	r0, [r3, #0]
 80082b8:	2800      	cmp	r0, #0
 80082ba:	d118      	bne.n	80082ee <_Balloc+0x72>
 80082bc:	2101      	movs	r1, #1
 80082be:	000d      	movs	r5, r1
 80082c0:	40a5      	lsls	r5, r4
 80082c2:	1d6a      	adds	r2, r5, #5
 80082c4:	0030      	movs	r0, r6
 80082c6:	0092      	lsls	r2, r2, #2
 80082c8:	f000 fb74 	bl	80089b4 <_calloc_r>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d00c      	beq.n	80082ea <_Balloc+0x6e>
 80082d0:	6044      	str	r4, [r0, #4]
 80082d2:	6085      	str	r5, [r0, #8]
 80082d4:	e00d      	b.n	80082f2 <_Balloc+0x76>
 80082d6:	2221      	movs	r2, #33	; 0x21
 80082d8:	2104      	movs	r1, #4
 80082da:	0030      	movs	r0, r6
 80082dc:	f000 fb6a 	bl	80089b4 <_calloc_r>
 80082e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80082e2:	60e8      	str	r0, [r5, #12]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e1      	bne.n	80082ae <_Balloc+0x32>
 80082ea:	2000      	movs	r0, #0
 80082ec:	bd70      	pop	{r4, r5, r6, pc}
 80082ee:	6802      	ldr	r2, [r0, #0]
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	2300      	movs	r3, #0
 80082f4:	6103      	str	r3, [r0, #16]
 80082f6:	60c3      	str	r3, [r0, #12]
 80082f8:	e7f8      	b.n	80082ec <_Balloc+0x70>
 80082fa:	46c0      	nop			; (mov r8, r8)
 80082fc:	08009d7d 	.word	0x08009d7d
 8008300:	08009e00 	.word	0x08009e00

08008304 <_Bfree>:
 8008304:	b570      	push	{r4, r5, r6, lr}
 8008306:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008308:	0005      	movs	r5, r0
 800830a:	000c      	movs	r4, r1
 800830c:	2e00      	cmp	r6, #0
 800830e:	d10e      	bne.n	800832e <_Bfree+0x2a>
 8008310:	2010      	movs	r0, #16
 8008312:	f7ff ff95 	bl	8008240 <malloc>
 8008316:	1e02      	subs	r2, r0, #0
 8008318:	6268      	str	r0, [r5, #36]	; 0x24
 800831a:	d104      	bne.n	8008326 <_Bfree+0x22>
 800831c:	218a      	movs	r1, #138	; 0x8a
 800831e:	4b09      	ldr	r3, [pc, #36]	; (8008344 <_Bfree+0x40>)
 8008320:	4809      	ldr	r0, [pc, #36]	; (8008348 <_Bfree+0x44>)
 8008322:	f000 fdc9 	bl	8008eb8 <__assert_func>
 8008326:	6046      	str	r6, [r0, #4]
 8008328:	6086      	str	r6, [r0, #8]
 800832a:	6006      	str	r6, [r0, #0]
 800832c:	60c6      	str	r6, [r0, #12]
 800832e:	2c00      	cmp	r4, #0
 8008330:	d007      	beq.n	8008342 <_Bfree+0x3e>
 8008332:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008334:	6862      	ldr	r2, [r4, #4]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	0092      	lsls	r2, r2, #2
 800833a:	189b      	adds	r3, r3, r2
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	6022      	str	r2, [r4, #0]
 8008340:	601c      	str	r4, [r3, #0]
 8008342:	bd70      	pop	{r4, r5, r6, pc}
 8008344:	08009d7d 	.word	0x08009d7d
 8008348:	08009e00 	.word	0x08009e00

0800834c <__multadd>:
 800834c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800834e:	000e      	movs	r6, r1
 8008350:	9001      	str	r0, [sp, #4]
 8008352:	000c      	movs	r4, r1
 8008354:	001d      	movs	r5, r3
 8008356:	2000      	movs	r0, #0
 8008358:	690f      	ldr	r7, [r1, #16]
 800835a:	3614      	adds	r6, #20
 800835c:	6833      	ldr	r3, [r6, #0]
 800835e:	3001      	adds	r0, #1
 8008360:	b299      	uxth	r1, r3
 8008362:	4351      	muls	r1, r2
 8008364:	0c1b      	lsrs	r3, r3, #16
 8008366:	4353      	muls	r3, r2
 8008368:	1949      	adds	r1, r1, r5
 800836a:	0c0d      	lsrs	r5, r1, #16
 800836c:	195b      	adds	r3, r3, r5
 800836e:	0c1d      	lsrs	r5, r3, #16
 8008370:	b289      	uxth	r1, r1
 8008372:	041b      	lsls	r3, r3, #16
 8008374:	185b      	adds	r3, r3, r1
 8008376:	c608      	stmia	r6!, {r3}
 8008378:	4287      	cmp	r7, r0
 800837a:	dcef      	bgt.n	800835c <__multadd+0x10>
 800837c:	2d00      	cmp	r5, #0
 800837e:	d022      	beq.n	80083c6 <__multadd+0x7a>
 8008380:	68a3      	ldr	r3, [r4, #8]
 8008382:	42bb      	cmp	r3, r7
 8008384:	dc19      	bgt.n	80083ba <__multadd+0x6e>
 8008386:	6863      	ldr	r3, [r4, #4]
 8008388:	9801      	ldr	r0, [sp, #4]
 800838a:	1c59      	adds	r1, r3, #1
 800838c:	f7ff ff76 	bl	800827c <_Balloc>
 8008390:	1e06      	subs	r6, r0, #0
 8008392:	d105      	bne.n	80083a0 <__multadd+0x54>
 8008394:	0002      	movs	r2, r0
 8008396:	21b5      	movs	r1, #181	; 0xb5
 8008398:	4b0c      	ldr	r3, [pc, #48]	; (80083cc <__multadd+0x80>)
 800839a:	480d      	ldr	r0, [pc, #52]	; (80083d0 <__multadd+0x84>)
 800839c:	f000 fd8c 	bl	8008eb8 <__assert_func>
 80083a0:	0021      	movs	r1, r4
 80083a2:	6923      	ldr	r3, [r4, #16]
 80083a4:	310c      	adds	r1, #12
 80083a6:	1c9a      	adds	r2, r3, #2
 80083a8:	0092      	lsls	r2, r2, #2
 80083aa:	300c      	adds	r0, #12
 80083ac:	f7ff ff5d 	bl	800826a <memcpy>
 80083b0:	0021      	movs	r1, r4
 80083b2:	9801      	ldr	r0, [sp, #4]
 80083b4:	f7ff ffa6 	bl	8008304 <_Bfree>
 80083b8:	0034      	movs	r4, r6
 80083ba:	1d3b      	adds	r3, r7, #4
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	18e3      	adds	r3, r4, r3
 80083c0:	605d      	str	r5, [r3, #4]
 80083c2:	1c7b      	adds	r3, r7, #1
 80083c4:	6123      	str	r3, [r4, #16]
 80083c6:	0020      	movs	r0, r4
 80083c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80083ca:	46c0      	nop			; (mov r8, r8)
 80083cc:	08009def 	.word	0x08009def
 80083d0:	08009e00 	.word	0x08009e00

080083d4 <__hi0bits>:
 80083d4:	0003      	movs	r3, r0
 80083d6:	0c02      	lsrs	r2, r0, #16
 80083d8:	2000      	movs	r0, #0
 80083da:	4282      	cmp	r2, r0
 80083dc:	d101      	bne.n	80083e2 <__hi0bits+0xe>
 80083de:	041b      	lsls	r3, r3, #16
 80083e0:	3010      	adds	r0, #16
 80083e2:	0e1a      	lsrs	r2, r3, #24
 80083e4:	d101      	bne.n	80083ea <__hi0bits+0x16>
 80083e6:	3008      	adds	r0, #8
 80083e8:	021b      	lsls	r3, r3, #8
 80083ea:	0f1a      	lsrs	r2, r3, #28
 80083ec:	d101      	bne.n	80083f2 <__hi0bits+0x1e>
 80083ee:	3004      	adds	r0, #4
 80083f0:	011b      	lsls	r3, r3, #4
 80083f2:	0f9a      	lsrs	r2, r3, #30
 80083f4:	d101      	bne.n	80083fa <__hi0bits+0x26>
 80083f6:	3002      	adds	r0, #2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	db03      	blt.n	8008406 <__hi0bits+0x32>
 80083fe:	3001      	adds	r0, #1
 8008400:	005b      	lsls	r3, r3, #1
 8008402:	d400      	bmi.n	8008406 <__hi0bits+0x32>
 8008404:	2020      	movs	r0, #32
 8008406:	4770      	bx	lr

08008408 <__lo0bits>:
 8008408:	6803      	ldr	r3, [r0, #0]
 800840a:	0002      	movs	r2, r0
 800840c:	2107      	movs	r1, #7
 800840e:	0018      	movs	r0, r3
 8008410:	4008      	ands	r0, r1
 8008412:	420b      	tst	r3, r1
 8008414:	d00d      	beq.n	8008432 <__lo0bits+0x2a>
 8008416:	3906      	subs	r1, #6
 8008418:	2000      	movs	r0, #0
 800841a:	420b      	tst	r3, r1
 800841c:	d105      	bne.n	800842a <__lo0bits+0x22>
 800841e:	3002      	adds	r0, #2
 8008420:	4203      	tst	r3, r0
 8008422:	d003      	beq.n	800842c <__lo0bits+0x24>
 8008424:	40cb      	lsrs	r3, r1
 8008426:	0008      	movs	r0, r1
 8008428:	6013      	str	r3, [r2, #0]
 800842a:	4770      	bx	lr
 800842c:	089b      	lsrs	r3, r3, #2
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	e7fb      	b.n	800842a <__lo0bits+0x22>
 8008432:	b299      	uxth	r1, r3
 8008434:	2900      	cmp	r1, #0
 8008436:	d101      	bne.n	800843c <__lo0bits+0x34>
 8008438:	2010      	movs	r0, #16
 800843a:	0c1b      	lsrs	r3, r3, #16
 800843c:	b2d9      	uxtb	r1, r3
 800843e:	2900      	cmp	r1, #0
 8008440:	d101      	bne.n	8008446 <__lo0bits+0x3e>
 8008442:	3008      	adds	r0, #8
 8008444:	0a1b      	lsrs	r3, r3, #8
 8008446:	0719      	lsls	r1, r3, #28
 8008448:	d101      	bne.n	800844e <__lo0bits+0x46>
 800844a:	3004      	adds	r0, #4
 800844c:	091b      	lsrs	r3, r3, #4
 800844e:	0799      	lsls	r1, r3, #30
 8008450:	d101      	bne.n	8008456 <__lo0bits+0x4e>
 8008452:	3002      	adds	r0, #2
 8008454:	089b      	lsrs	r3, r3, #2
 8008456:	07d9      	lsls	r1, r3, #31
 8008458:	d4e9      	bmi.n	800842e <__lo0bits+0x26>
 800845a:	3001      	adds	r0, #1
 800845c:	085b      	lsrs	r3, r3, #1
 800845e:	d1e6      	bne.n	800842e <__lo0bits+0x26>
 8008460:	2020      	movs	r0, #32
 8008462:	e7e2      	b.n	800842a <__lo0bits+0x22>

08008464 <__i2b>:
 8008464:	b510      	push	{r4, lr}
 8008466:	000c      	movs	r4, r1
 8008468:	2101      	movs	r1, #1
 800846a:	f7ff ff07 	bl	800827c <_Balloc>
 800846e:	2800      	cmp	r0, #0
 8008470:	d106      	bne.n	8008480 <__i2b+0x1c>
 8008472:	21a0      	movs	r1, #160	; 0xa0
 8008474:	0002      	movs	r2, r0
 8008476:	4b04      	ldr	r3, [pc, #16]	; (8008488 <__i2b+0x24>)
 8008478:	4804      	ldr	r0, [pc, #16]	; (800848c <__i2b+0x28>)
 800847a:	0049      	lsls	r1, r1, #1
 800847c:	f000 fd1c 	bl	8008eb8 <__assert_func>
 8008480:	2301      	movs	r3, #1
 8008482:	6144      	str	r4, [r0, #20]
 8008484:	6103      	str	r3, [r0, #16]
 8008486:	bd10      	pop	{r4, pc}
 8008488:	08009def 	.word	0x08009def
 800848c:	08009e00 	.word	0x08009e00

08008490 <__multiply>:
 8008490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008492:	690b      	ldr	r3, [r1, #16]
 8008494:	0014      	movs	r4, r2
 8008496:	6912      	ldr	r2, [r2, #16]
 8008498:	000d      	movs	r5, r1
 800849a:	b089      	sub	sp, #36	; 0x24
 800849c:	4293      	cmp	r3, r2
 800849e:	da01      	bge.n	80084a4 <__multiply+0x14>
 80084a0:	0025      	movs	r5, r4
 80084a2:	000c      	movs	r4, r1
 80084a4:	692f      	ldr	r7, [r5, #16]
 80084a6:	6926      	ldr	r6, [r4, #16]
 80084a8:	6869      	ldr	r1, [r5, #4]
 80084aa:	19bb      	adds	r3, r7, r6
 80084ac:	9302      	str	r3, [sp, #8]
 80084ae:	68ab      	ldr	r3, [r5, #8]
 80084b0:	19ba      	adds	r2, r7, r6
 80084b2:	4293      	cmp	r3, r2
 80084b4:	da00      	bge.n	80084b8 <__multiply+0x28>
 80084b6:	3101      	adds	r1, #1
 80084b8:	f7ff fee0 	bl	800827c <_Balloc>
 80084bc:	9001      	str	r0, [sp, #4]
 80084be:	2800      	cmp	r0, #0
 80084c0:	d106      	bne.n	80084d0 <__multiply+0x40>
 80084c2:	215e      	movs	r1, #94	; 0x5e
 80084c4:	0002      	movs	r2, r0
 80084c6:	4b48      	ldr	r3, [pc, #288]	; (80085e8 <__multiply+0x158>)
 80084c8:	4848      	ldr	r0, [pc, #288]	; (80085ec <__multiply+0x15c>)
 80084ca:	31ff      	adds	r1, #255	; 0xff
 80084cc:	f000 fcf4 	bl	8008eb8 <__assert_func>
 80084d0:	9b01      	ldr	r3, [sp, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	3314      	adds	r3, #20
 80084d6:	469c      	mov	ip, r3
 80084d8:	19bb      	adds	r3, r7, r6
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4463      	add	r3, ip
 80084de:	9303      	str	r3, [sp, #12]
 80084e0:	4663      	mov	r3, ip
 80084e2:	9903      	ldr	r1, [sp, #12]
 80084e4:	428b      	cmp	r3, r1
 80084e6:	d32c      	bcc.n	8008542 <__multiply+0xb2>
 80084e8:	002b      	movs	r3, r5
 80084ea:	0022      	movs	r2, r4
 80084ec:	3314      	adds	r3, #20
 80084ee:	00bf      	lsls	r7, r7, #2
 80084f0:	3214      	adds	r2, #20
 80084f2:	9306      	str	r3, [sp, #24]
 80084f4:	00b6      	lsls	r6, r6, #2
 80084f6:	19db      	adds	r3, r3, r7
 80084f8:	9304      	str	r3, [sp, #16]
 80084fa:	1993      	adds	r3, r2, r6
 80084fc:	9307      	str	r3, [sp, #28]
 80084fe:	2304      	movs	r3, #4
 8008500:	9305      	str	r3, [sp, #20]
 8008502:	002b      	movs	r3, r5
 8008504:	9904      	ldr	r1, [sp, #16]
 8008506:	3315      	adds	r3, #21
 8008508:	9200      	str	r2, [sp, #0]
 800850a:	4299      	cmp	r1, r3
 800850c:	d305      	bcc.n	800851a <__multiply+0x8a>
 800850e:	1b4b      	subs	r3, r1, r5
 8008510:	3b15      	subs	r3, #21
 8008512:	089b      	lsrs	r3, r3, #2
 8008514:	3301      	adds	r3, #1
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	9305      	str	r3, [sp, #20]
 800851a:	9b07      	ldr	r3, [sp, #28]
 800851c:	9a00      	ldr	r2, [sp, #0]
 800851e:	429a      	cmp	r2, r3
 8008520:	d311      	bcc.n	8008546 <__multiply+0xb6>
 8008522:	9b02      	ldr	r3, [sp, #8]
 8008524:	2b00      	cmp	r3, #0
 8008526:	dd06      	ble.n	8008536 <__multiply+0xa6>
 8008528:	9b03      	ldr	r3, [sp, #12]
 800852a:	3b04      	subs	r3, #4
 800852c:	9303      	str	r3, [sp, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d053      	beq.n	80085de <__multiply+0x14e>
 8008536:	9b01      	ldr	r3, [sp, #4]
 8008538:	9a02      	ldr	r2, [sp, #8]
 800853a:	0018      	movs	r0, r3
 800853c:	611a      	str	r2, [r3, #16]
 800853e:	b009      	add	sp, #36	; 0x24
 8008540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008542:	c304      	stmia	r3!, {r2}
 8008544:	e7cd      	b.n	80084e2 <__multiply+0x52>
 8008546:	9b00      	ldr	r3, [sp, #0]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	b298      	uxth	r0, r3
 800854c:	2800      	cmp	r0, #0
 800854e:	d01b      	beq.n	8008588 <__multiply+0xf8>
 8008550:	4667      	mov	r7, ip
 8008552:	2400      	movs	r4, #0
 8008554:	9e06      	ldr	r6, [sp, #24]
 8008556:	ce02      	ldmia	r6!, {r1}
 8008558:	683a      	ldr	r2, [r7, #0]
 800855a:	b28b      	uxth	r3, r1
 800855c:	4343      	muls	r3, r0
 800855e:	b292      	uxth	r2, r2
 8008560:	189b      	adds	r3, r3, r2
 8008562:	191b      	adds	r3, r3, r4
 8008564:	0c0c      	lsrs	r4, r1, #16
 8008566:	4344      	muls	r4, r0
 8008568:	683a      	ldr	r2, [r7, #0]
 800856a:	0c11      	lsrs	r1, r2, #16
 800856c:	1861      	adds	r1, r4, r1
 800856e:	0c1c      	lsrs	r4, r3, #16
 8008570:	1909      	adds	r1, r1, r4
 8008572:	0c0c      	lsrs	r4, r1, #16
 8008574:	b29b      	uxth	r3, r3
 8008576:	0409      	lsls	r1, r1, #16
 8008578:	430b      	orrs	r3, r1
 800857a:	c708      	stmia	r7!, {r3}
 800857c:	9b04      	ldr	r3, [sp, #16]
 800857e:	42b3      	cmp	r3, r6
 8008580:	d8e9      	bhi.n	8008556 <__multiply+0xc6>
 8008582:	4663      	mov	r3, ip
 8008584:	9a05      	ldr	r2, [sp, #20]
 8008586:	509c      	str	r4, [r3, r2]
 8008588:	9b00      	ldr	r3, [sp, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	0c1e      	lsrs	r6, r3, #16
 800858e:	d020      	beq.n	80085d2 <__multiply+0x142>
 8008590:	4663      	mov	r3, ip
 8008592:	002c      	movs	r4, r5
 8008594:	4660      	mov	r0, ip
 8008596:	2700      	movs	r7, #0
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3414      	adds	r4, #20
 800859c:	6822      	ldr	r2, [r4, #0]
 800859e:	b29b      	uxth	r3, r3
 80085a0:	b291      	uxth	r1, r2
 80085a2:	4371      	muls	r1, r6
 80085a4:	6802      	ldr	r2, [r0, #0]
 80085a6:	0c12      	lsrs	r2, r2, #16
 80085a8:	1889      	adds	r1, r1, r2
 80085aa:	19cf      	adds	r7, r1, r7
 80085ac:	0439      	lsls	r1, r7, #16
 80085ae:	430b      	orrs	r3, r1
 80085b0:	6003      	str	r3, [r0, #0]
 80085b2:	cc02      	ldmia	r4!, {r1}
 80085b4:	6843      	ldr	r3, [r0, #4]
 80085b6:	0c09      	lsrs	r1, r1, #16
 80085b8:	4371      	muls	r1, r6
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	0c3f      	lsrs	r7, r7, #16
 80085be:	18cb      	adds	r3, r1, r3
 80085c0:	9a04      	ldr	r2, [sp, #16]
 80085c2:	19db      	adds	r3, r3, r7
 80085c4:	0c1f      	lsrs	r7, r3, #16
 80085c6:	3004      	adds	r0, #4
 80085c8:	42a2      	cmp	r2, r4
 80085ca:	d8e7      	bhi.n	800859c <__multiply+0x10c>
 80085cc:	4662      	mov	r2, ip
 80085ce:	9905      	ldr	r1, [sp, #20]
 80085d0:	5053      	str	r3, [r2, r1]
 80085d2:	9b00      	ldr	r3, [sp, #0]
 80085d4:	3304      	adds	r3, #4
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	2304      	movs	r3, #4
 80085da:	449c      	add	ip, r3
 80085dc:	e79d      	b.n	800851a <__multiply+0x8a>
 80085de:	9b02      	ldr	r3, [sp, #8]
 80085e0:	3b01      	subs	r3, #1
 80085e2:	9302      	str	r3, [sp, #8]
 80085e4:	e79d      	b.n	8008522 <__multiply+0x92>
 80085e6:	46c0      	nop			; (mov r8, r8)
 80085e8:	08009def 	.word	0x08009def
 80085ec:	08009e00 	.word	0x08009e00

080085f0 <__pow5mult>:
 80085f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085f2:	2303      	movs	r3, #3
 80085f4:	0015      	movs	r5, r2
 80085f6:	0007      	movs	r7, r0
 80085f8:	000e      	movs	r6, r1
 80085fa:	401a      	ands	r2, r3
 80085fc:	421d      	tst	r5, r3
 80085fe:	d008      	beq.n	8008612 <__pow5mult+0x22>
 8008600:	4925      	ldr	r1, [pc, #148]	; (8008698 <__pow5mult+0xa8>)
 8008602:	3a01      	subs	r2, #1
 8008604:	0092      	lsls	r2, r2, #2
 8008606:	5852      	ldr	r2, [r2, r1]
 8008608:	2300      	movs	r3, #0
 800860a:	0031      	movs	r1, r6
 800860c:	f7ff fe9e 	bl	800834c <__multadd>
 8008610:	0006      	movs	r6, r0
 8008612:	10ad      	asrs	r5, r5, #2
 8008614:	d03d      	beq.n	8008692 <__pow5mult+0xa2>
 8008616:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008618:	2c00      	cmp	r4, #0
 800861a:	d10f      	bne.n	800863c <__pow5mult+0x4c>
 800861c:	2010      	movs	r0, #16
 800861e:	f7ff fe0f 	bl	8008240 <malloc>
 8008622:	1e02      	subs	r2, r0, #0
 8008624:	6278      	str	r0, [r7, #36]	; 0x24
 8008626:	d105      	bne.n	8008634 <__pow5mult+0x44>
 8008628:	21d7      	movs	r1, #215	; 0xd7
 800862a:	4b1c      	ldr	r3, [pc, #112]	; (800869c <__pow5mult+0xac>)
 800862c:	481c      	ldr	r0, [pc, #112]	; (80086a0 <__pow5mult+0xb0>)
 800862e:	0049      	lsls	r1, r1, #1
 8008630:	f000 fc42 	bl	8008eb8 <__assert_func>
 8008634:	6044      	str	r4, [r0, #4]
 8008636:	6084      	str	r4, [r0, #8]
 8008638:	6004      	str	r4, [r0, #0]
 800863a:	60c4      	str	r4, [r0, #12]
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	689c      	ldr	r4, [r3, #8]
 8008640:	9301      	str	r3, [sp, #4]
 8008642:	2c00      	cmp	r4, #0
 8008644:	d108      	bne.n	8008658 <__pow5mult+0x68>
 8008646:	0038      	movs	r0, r7
 8008648:	4916      	ldr	r1, [pc, #88]	; (80086a4 <__pow5mult+0xb4>)
 800864a:	f7ff ff0b 	bl	8008464 <__i2b>
 800864e:	9b01      	ldr	r3, [sp, #4]
 8008650:	0004      	movs	r4, r0
 8008652:	6098      	str	r0, [r3, #8]
 8008654:	2300      	movs	r3, #0
 8008656:	6003      	str	r3, [r0, #0]
 8008658:	2301      	movs	r3, #1
 800865a:	421d      	tst	r5, r3
 800865c:	d00a      	beq.n	8008674 <__pow5mult+0x84>
 800865e:	0031      	movs	r1, r6
 8008660:	0022      	movs	r2, r4
 8008662:	0038      	movs	r0, r7
 8008664:	f7ff ff14 	bl	8008490 <__multiply>
 8008668:	0031      	movs	r1, r6
 800866a:	9001      	str	r0, [sp, #4]
 800866c:	0038      	movs	r0, r7
 800866e:	f7ff fe49 	bl	8008304 <_Bfree>
 8008672:	9e01      	ldr	r6, [sp, #4]
 8008674:	106d      	asrs	r5, r5, #1
 8008676:	d00c      	beq.n	8008692 <__pow5mult+0xa2>
 8008678:	6820      	ldr	r0, [r4, #0]
 800867a:	2800      	cmp	r0, #0
 800867c:	d107      	bne.n	800868e <__pow5mult+0x9e>
 800867e:	0022      	movs	r2, r4
 8008680:	0021      	movs	r1, r4
 8008682:	0038      	movs	r0, r7
 8008684:	f7ff ff04 	bl	8008490 <__multiply>
 8008688:	2300      	movs	r3, #0
 800868a:	6020      	str	r0, [r4, #0]
 800868c:	6003      	str	r3, [r0, #0]
 800868e:	0004      	movs	r4, r0
 8008690:	e7e2      	b.n	8008658 <__pow5mult+0x68>
 8008692:	0030      	movs	r0, r6
 8008694:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008696:	46c0      	nop			; (mov r8, r8)
 8008698:	08009f50 	.word	0x08009f50
 800869c:	08009d7d 	.word	0x08009d7d
 80086a0:	08009e00 	.word	0x08009e00
 80086a4:	00000271 	.word	0x00000271

080086a8 <__lshift>:
 80086a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086aa:	000c      	movs	r4, r1
 80086ac:	0017      	movs	r7, r2
 80086ae:	6923      	ldr	r3, [r4, #16]
 80086b0:	1155      	asrs	r5, r2, #5
 80086b2:	b087      	sub	sp, #28
 80086b4:	18eb      	adds	r3, r5, r3
 80086b6:	9302      	str	r3, [sp, #8]
 80086b8:	3301      	adds	r3, #1
 80086ba:	9301      	str	r3, [sp, #4]
 80086bc:	6849      	ldr	r1, [r1, #4]
 80086be:	68a3      	ldr	r3, [r4, #8]
 80086c0:	9004      	str	r0, [sp, #16]
 80086c2:	9a01      	ldr	r2, [sp, #4]
 80086c4:	4293      	cmp	r3, r2
 80086c6:	db10      	blt.n	80086ea <__lshift+0x42>
 80086c8:	9804      	ldr	r0, [sp, #16]
 80086ca:	f7ff fdd7 	bl	800827c <_Balloc>
 80086ce:	2300      	movs	r3, #0
 80086d0:	0002      	movs	r2, r0
 80086d2:	0006      	movs	r6, r0
 80086d4:	0019      	movs	r1, r3
 80086d6:	3214      	adds	r2, #20
 80086d8:	4298      	cmp	r0, r3
 80086da:	d10c      	bne.n	80086f6 <__lshift+0x4e>
 80086dc:	21da      	movs	r1, #218	; 0xda
 80086de:	0002      	movs	r2, r0
 80086e0:	4b26      	ldr	r3, [pc, #152]	; (800877c <__lshift+0xd4>)
 80086e2:	4827      	ldr	r0, [pc, #156]	; (8008780 <__lshift+0xd8>)
 80086e4:	31ff      	adds	r1, #255	; 0xff
 80086e6:	f000 fbe7 	bl	8008eb8 <__assert_func>
 80086ea:	3101      	adds	r1, #1
 80086ec:	005b      	lsls	r3, r3, #1
 80086ee:	e7e8      	b.n	80086c2 <__lshift+0x1a>
 80086f0:	0098      	lsls	r0, r3, #2
 80086f2:	5011      	str	r1, [r2, r0]
 80086f4:	3301      	adds	r3, #1
 80086f6:	42ab      	cmp	r3, r5
 80086f8:	dbfa      	blt.n	80086f0 <__lshift+0x48>
 80086fa:	43eb      	mvns	r3, r5
 80086fc:	17db      	asrs	r3, r3, #31
 80086fe:	401d      	ands	r5, r3
 8008700:	211f      	movs	r1, #31
 8008702:	0023      	movs	r3, r4
 8008704:	0038      	movs	r0, r7
 8008706:	00ad      	lsls	r5, r5, #2
 8008708:	1955      	adds	r5, r2, r5
 800870a:	6922      	ldr	r2, [r4, #16]
 800870c:	3314      	adds	r3, #20
 800870e:	0092      	lsls	r2, r2, #2
 8008710:	4008      	ands	r0, r1
 8008712:	4684      	mov	ip, r0
 8008714:	189a      	adds	r2, r3, r2
 8008716:	420f      	tst	r7, r1
 8008718:	d02a      	beq.n	8008770 <__lshift+0xc8>
 800871a:	3101      	adds	r1, #1
 800871c:	1a09      	subs	r1, r1, r0
 800871e:	9105      	str	r1, [sp, #20]
 8008720:	2100      	movs	r1, #0
 8008722:	9503      	str	r5, [sp, #12]
 8008724:	4667      	mov	r7, ip
 8008726:	6818      	ldr	r0, [r3, #0]
 8008728:	40b8      	lsls	r0, r7
 800872a:	4301      	orrs	r1, r0
 800872c:	9803      	ldr	r0, [sp, #12]
 800872e:	c002      	stmia	r0!, {r1}
 8008730:	cb02      	ldmia	r3!, {r1}
 8008732:	9003      	str	r0, [sp, #12]
 8008734:	9805      	ldr	r0, [sp, #20]
 8008736:	40c1      	lsrs	r1, r0
 8008738:	429a      	cmp	r2, r3
 800873a:	d8f3      	bhi.n	8008724 <__lshift+0x7c>
 800873c:	0020      	movs	r0, r4
 800873e:	3015      	adds	r0, #21
 8008740:	2304      	movs	r3, #4
 8008742:	4282      	cmp	r2, r0
 8008744:	d304      	bcc.n	8008750 <__lshift+0xa8>
 8008746:	1b13      	subs	r3, r2, r4
 8008748:	3b15      	subs	r3, #21
 800874a:	089b      	lsrs	r3, r3, #2
 800874c:	3301      	adds	r3, #1
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	50e9      	str	r1, [r5, r3]
 8008752:	2900      	cmp	r1, #0
 8008754:	d002      	beq.n	800875c <__lshift+0xb4>
 8008756:	9b02      	ldr	r3, [sp, #8]
 8008758:	3302      	adds	r3, #2
 800875a:	9301      	str	r3, [sp, #4]
 800875c:	9b01      	ldr	r3, [sp, #4]
 800875e:	9804      	ldr	r0, [sp, #16]
 8008760:	3b01      	subs	r3, #1
 8008762:	0021      	movs	r1, r4
 8008764:	6133      	str	r3, [r6, #16]
 8008766:	f7ff fdcd 	bl	8008304 <_Bfree>
 800876a:	0030      	movs	r0, r6
 800876c:	b007      	add	sp, #28
 800876e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008770:	cb02      	ldmia	r3!, {r1}
 8008772:	c502      	stmia	r5!, {r1}
 8008774:	429a      	cmp	r2, r3
 8008776:	d8fb      	bhi.n	8008770 <__lshift+0xc8>
 8008778:	e7f0      	b.n	800875c <__lshift+0xb4>
 800877a:	46c0      	nop			; (mov r8, r8)
 800877c:	08009def 	.word	0x08009def
 8008780:	08009e00 	.word	0x08009e00

08008784 <__mcmp>:
 8008784:	6902      	ldr	r2, [r0, #16]
 8008786:	690b      	ldr	r3, [r1, #16]
 8008788:	b530      	push	{r4, r5, lr}
 800878a:	0004      	movs	r4, r0
 800878c:	1ad0      	subs	r0, r2, r3
 800878e:	429a      	cmp	r2, r3
 8008790:	d10d      	bne.n	80087ae <__mcmp+0x2a>
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	3414      	adds	r4, #20
 8008796:	3114      	adds	r1, #20
 8008798:	18e2      	adds	r2, r4, r3
 800879a:	18c9      	adds	r1, r1, r3
 800879c:	3a04      	subs	r2, #4
 800879e:	3904      	subs	r1, #4
 80087a0:	6815      	ldr	r5, [r2, #0]
 80087a2:	680b      	ldr	r3, [r1, #0]
 80087a4:	429d      	cmp	r5, r3
 80087a6:	d003      	beq.n	80087b0 <__mcmp+0x2c>
 80087a8:	2001      	movs	r0, #1
 80087aa:	429d      	cmp	r5, r3
 80087ac:	d303      	bcc.n	80087b6 <__mcmp+0x32>
 80087ae:	bd30      	pop	{r4, r5, pc}
 80087b0:	4294      	cmp	r4, r2
 80087b2:	d3f3      	bcc.n	800879c <__mcmp+0x18>
 80087b4:	e7fb      	b.n	80087ae <__mcmp+0x2a>
 80087b6:	4240      	negs	r0, r0
 80087b8:	e7f9      	b.n	80087ae <__mcmp+0x2a>
	...

080087bc <__mdiff>:
 80087bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087be:	000e      	movs	r6, r1
 80087c0:	0007      	movs	r7, r0
 80087c2:	0011      	movs	r1, r2
 80087c4:	0030      	movs	r0, r6
 80087c6:	b087      	sub	sp, #28
 80087c8:	0014      	movs	r4, r2
 80087ca:	f7ff ffdb 	bl	8008784 <__mcmp>
 80087ce:	1e05      	subs	r5, r0, #0
 80087d0:	d110      	bne.n	80087f4 <__mdiff+0x38>
 80087d2:	0001      	movs	r1, r0
 80087d4:	0038      	movs	r0, r7
 80087d6:	f7ff fd51 	bl	800827c <_Balloc>
 80087da:	1e02      	subs	r2, r0, #0
 80087dc:	d104      	bne.n	80087e8 <__mdiff+0x2c>
 80087de:	4b40      	ldr	r3, [pc, #256]	; (80088e0 <__mdiff+0x124>)
 80087e0:	4940      	ldr	r1, [pc, #256]	; (80088e4 <__mdiff+0x128>)
 80087e2:	4841      	ldr	r0, [pc, #260]	; (80088e8 <__mdiff+0x12c>)
 80087e4:	f000 fb68 	bl	8008eb8 <__assert_func>
 80087e8:	2301      	movs	r3, #1
 80087ea:	6145      	str	r5, [r0, #20]
 80087ec:	6103      	str	r3, [r0, #16]
 80087ee:	0010      	movs	r0, r2
 80087f0:	b007      	add	sp, #28
 80087f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087f4:	2301      	movs	r3, #1
 80087f6:	9301      	str	r3, [sp, #4]
 80087f8:	2800      	cmp	r0, #0
 80087fa:	db04      	blt.n	8008806 <__mdiff+0x4a>
 80087fc:	0023      	movs	r3, r4
 80087fe:	0034      	movs	r4, r6
 8008800:	001e      	movs	r6, r3
 8008802:	2300      	movs	r3, #0
 8008804:	9301      	str	r3, [sp, #4]
 8008806:	0038      	movs	r0, r7
 8008808:	6861      	ldr	r1, [r4, #4]
 800880a:	f7ff fd37 	bl	800827c <_Balloc>
 800880e:	1e02      	subs	r2, r0, #0
 8008810:	d103      	bne.n	800881a <__mdiff+0x5e>
 8008812:	2190      	movs	r1, #144	; 0x90
 8008814:	4b32      	ldr	r3, [pc, #200]	; (80088e0 <__mdiff+0x124>)
 8008816:	0089      	lsls	r1, r1, #2
 8008818:	e7e3      	b.n	80087e2 <__mdiff+0x26>
 800881a:	9b01      	ldr	r3, [sp, #4]
 800881c:	2700      	movs	r7, #0
 800881e:	60c3      	str	r3, [r0, #12]
 8008820:	6920      	ldr	r0, [r4, #16]
 8008822:	3414      	adds	r4, #20
 8008824:	9401      	str	r4, [sp, #4]
 8008826:	9b01      	ldr	r3, [sp, #4]
 8008828:	0084      	lsls	r4, r0, #2
 800882a:	191b      	adds	r3, r3, r4
 800882c:	0034      	movs	r4, r6
 800882e:	9302      	str	r3, [sp, #8]
 8008830:	6933      	ldr	r3, [r6, #16]
 8008832:	3414      	adds	r4, #20
 8008834:	0099      	lsls	r1, r3, #2
 8008836:	1863      	adds	r3, r4, r1
 8008838:	9303      	str	r3, [sp, #12]
 800883a:	0013      	movs	r3, r2
 800883c:	3314      	adds	r3, #20
 800883e:	469c      	mov	ip, r3
 8008840:	9305      	str	r3, [sp, #20]
 8008842:	9b01      	ldr	r3, [sp, #4]
 8008844:	9304      	str	r3, [sp, #16]
 8008846:	9b04      	ldr	r3, [sp, #16]
 8008848:	cc02      	ldmia	r4!, {r1}
 800884a:	cb20      	ldmia	r3!, {r5}
 800884c:	9304      	str	r3, [sp, #16]
 800884e:	b2ab      	uxth	r3, r5
 8008850:	19df      	adds	r7, r3, r7
 8008852:	b28b      	uxth	r3, r1
 8008854:	1afb      	subs	r3, r7, r3
 8008856:	0c09      	lsrs	r1, r1, #16
 8008858:	0c2d      	lsrs	r5, r5, #16
 800885a:	1a6d      	subs	r5, r5, r1
 800885c:	1419      	asrs	r1, r3, #16
 800885e:	186d      	adds	r5, r5, r1
 8008860:	4661      	mov	r1, ip
 8008862:	142f      	asrs	r7, r5, #16
 8008864:	b29b      	uxth	r3, r3
 8008866:	042d      	lsls	r5, r5, #16
 8008868:	432b      	orrs	r3, r5
 800886a:	c108      	stmia	r1!, {r3}
 800886c:	9b03      	ldr	r3, [sp, #12]
 800886e:	468c      	mov	ip, r1
 8008870:	42a3      	cmp	r3, r4
 8008872:	d8e8      	bhi.n	8008846 <__mdiff+0x8a>
 8008874:	0031      	movs	r1, r6
 8008876:	9c03      	ldr	r4, [sp, #12]
 8008878:	3115      	adds	r1, #21
 800887a:	2304      	movs	r3, #4
 800887c:	428c      	cmp	r4, r1
 800887e:	d304      	bcc.n	800888a <__mdiff+0xce>
 8008880:	1ba3      	subs	r3, r4, r6
 8008882:	3b15      	subs	r3, #21
 8008884:	089b      	lsrs	r3, r3, #2
 8008886:	3301      	adds	r3, #1
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	9901      	ldr	r1, [sp, #4]
 800888c:	18cc      	adds	r4, r1, r3
 800888e:	9905      	ldr	r1, [sp, #20]
 8008890:	0026      	movs	r6, r4
 8008892:	18cb      	adds	r3, r1, r3
 8008894:	469c      	mov	ip, r3
 8008896:	9902      	ldr	r1, [sp, #8]
 8008898:	428e      	cmp	r6, r1
 800889a:	d310      	bcc.n	80088be <__mdiff+0x102>
 800889c:	9e02      	ldr	r6, [sp, #8]
 800889e:	1ee1      	subs	r1, r4, #3
 80088a0:	2500      	movs	r5, #0
 80088a2:	428e      	cmp	r6, r1
 80088a4:	d304      	bcc.n	80088b0 <__mdiff+0xf4>
 80088a6:	0031      	movs	r1, r6
 80088a8:	3103      	adds	r1, #3
 80088aa:	1b0c      	subs	r4, r1, r4
 80088ac:	08a4      	lsrs	r4, r4, #2
 80088ae:	00a5      	lsls	r5, r4, #2
 80088b0:	195b      	adds	r3, r3, r5
 80088b2:	3b04      	subs	r3, #4
 80088b4:	6819      	ldr	r1, [r3, #0]
 80088b6:	2900      	cmp	r1, #0
 80088b8:	d00f      	beq.n	80088da <__mdiff+0x11e>
 80088ba:	6110      	str	r0, [r2, #16]
 80088bc:	e797      	b.n	80087ee <__mdiff+0x32>
 80088be:	ce02      	ldmia	r6!, {r1}
 80088c0:	b28d      	uxth	r5, r1
 80088c2:	19ed      	adds	r5, r5, r7
 80088c4:	0c0f      	lsrs	r7, r1, #16
 80088c6:	1429      	asrs	r1, r5, #16
 80088c8:	1879      	adds	r1, r7, r1
 80088ca:	140f      	asrs	r7, r1, #16
 80088cc:	b2ad      	uxth	r5, r5
 80088ce:	0409      	lsls	r1, r1, #16
 80088d0:	430d      	orrs	r5, r1
 80088d2:	4661      	mov	r1, ip
 80088d4:	c120      	stmia	r1!, {r5}
 80088d6:	468c      	mov	ip, r1
 80088d8:	e7dd      	b.n	8008896 <__mdiff+0xda>
 80088da:	3801      	subs	r0, #1
 80088dc:	e7e9      	b.n	80088b2 <__mdiff+0xf6>
 80088de:	46c0      	nop			; (mov r8, r8)
 80088e0:	08009def 	.word	0x08009def
 80088e4:	00000232 	.word	0x00000232
 80088e8:	08009e00 	.word	0x08009e00

080088ec <__d2b>:
 80088ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088ee:	2101      	movs	r1, #1
 80088f0:	0014      	movs	r4, r2
 80088f2:	001e      	movs	r6, r3
 80088f4:	9f08      	ldr	r7, [sp, #32]
 80088f6:	f7ff fcc1 	bl	800827c <_Balloc>
 80088fa:	1e05      	subs	r5, r0, #0
 80088fc:	d105      	bne.n	800890a <__d2b+0x1e>
 80088fe:	0002      	movs	r2, r0
 8008900:	4b26      	ldr	r3, [pc, #152]	; (800899c <__d2b+0xb0>)
 8008902:	4927      	ldr	r1, [pc, #156]	; (80089a0 <__d2b+0xb4>)
 8008904:	4827      	ldr	r0, [pc, #156]	; (80089a4 <__d2b+0xb8>)
 8008906:	f000 fad7 	bl	8008eb8 <__assert_func>
 800890a:	0333      	lsls	r3, r6, #12
 800890c:	0076      	lsls	r6, r6, #1
 800890e:	0b1b      	lsrs	r3, r3, #12
 8008910:	0d76      	lsrs	r6, r6, #21
 8008912:	d124      	bne.n	800895e <__d2b+0x72>
 8008914:	9301      	str	r3, [sp, #4]
 8008916:	2c00      	cmp	r4, #0
 8008918:	d027      	beq.n	800896a <__d2b+0x7e>
 800891a:	4668      	mov	r0, sp
 800891c:	9400      	str	r4, [sp, #0]
 800891e:	f7ff fd73 	bl	8008408 <__lo0bits>
 8008922:	9c00      	ldr	r4, [sp, #0]
 8008924:	2800      	cmp	r0, #0
 8008926:	d01e      	beq.n	8008966 <__d2b+0x7a>
 8008928:	9b01      	ldr	r3, [sp, #4]
 800892a:	2120      	movs	r1, #32
 800892c:	001a      	movs	r2, r3
 800892e:	1a09      	subs	r1, r1, r0
 8008930:	408a      	lsls	r2, r1
 8008932:	40c3      	lsrs	r3, r0
 8008934:	4322      	orrs	r2, r4
 8008936:	616a      	str	r2, [r5, #20]
 8008938:	9301      	str	r3, [sp, #4]
 800893a:	9c01      	ldr	r4, [sp, #4]
 800893c:	61ac      	str	r4, [r5, #24]
 800893e:	1e63      	subs	r3, r4, #1
 8008940:	419c      	sbcs	r4, r3
 8008942:	3401      	adds	r4, #1
 8008944:	612c      	str	r4, [r5, #16]
 8008946:	2e00      	cmp	r6, #0
 8008948:	d018      	beq.n	800897c <__d2b+0x90>
 800894a:	4b17      	ldr	r3, [pc, #92]	; (80089a8 <__d2b+0xbc>)
 800894c:	18f6      	adds	r6, r6, r3
 800894e:	2335      	movs	r3, #53	; 0x35
 8008950:	1836      	adds	r6, r6, r0
 8008952:	1a18      	subs	r0, r3, r0
 8008954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008956:	603e      	str	r6, [r7, #0]
 8008958:	6018      	str	r0, [r3, #0]
 800895a:	0028      	movs	r0, r5
 800895c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800895e:	2280      	movs	r2, #128	; 0x80
 8008960:	0352      	lsls	r2, r2, #13
 8008962:	4313      	orrs	r3, r2
 8008964:	e7d6      	b.n	8008914 <__d2b+0x28>
 8008966:	616c      	str	r4, [r5, #20]
 8008968:	e7e7      	b.n	800893a <__d2b+0x4e>
 800896a:	a801      	add	r0, sp, #4
 800896c:	f7ff fd4c 	bl	8008408 <__lo0bits>
 8008970:	2401      	movs	r4, #1
 8008972:	9b01      	ldr	r3, [sp, #4]
 8008974:	612c      	str	r4, [r5, #16]
 8008976:	616b      	str	r3, [r5, #20]
 8008978:	3020      	adds	r0, #32
 800897a:	e7e4      	b.n	8008946 <__d2b+0x5a>
 800897c:	4b0b      	ldr	r3, [pc, #44]	; (80089ac <__d2b+0xc0>)
 800897e:	18c0      	adds	r0, r0, r3
 8008980:	4b0b      	ldr	r3, [pc, #44]	; (80089b0 <__d2b+0xc4>)
 8008982:	6038      	str	r0, [r7, #0]
 8008984:	18e3      	adds	r3, r4, r3
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	18eb      	adds	r3, r5, r3
 800898a:	6958      	ldr	r0, [r3, #20]
 800898c:	f7ff fd22 	bl	80083d4 <__hi0bits>
 8008990:	0164      	lsls	r4, r4, #5
 8008992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008994:	1a24      	subs	r4, r4, r0
 8008996:	601c      	str	r4, [r3, #0]
 8008998:	e7df      	b.n	800895a <__d2b+0x6e>
 800899a:	46c0      	nop			; (mov r8, r8)
 800899c:	08009def 	.word	0x08009def
 80089a0:	0000030a 	.word	0x0000030a
 80089a4:	08009e00 	.word	0x08009e00
 80089a8:	fffffbcd 	.word	0xfffffbcd
 80089ac:	fffffbce 	.word	0xfffffbce
 80089b0:	3fffffff 	.word	0x3fffffff

080089b4 <_calloc_r>:
 80089b4:	b570      	push	{r4, r5, r6, lr}
 80089b6:	0c13      	lsrs	r3, r2, #16
 80089b8:	0c0d      	lsrs	r5, r1, #16
 80089ba:	d11e      	bne.n	80089fa <_calloc_r+0x46>
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d10c      	bne.n	80089da <_calloc_r+0x26>
 80089c0:	b289      	uxth	r1, r1
 80089c2:	b294      	uxth	r4, r2
 80089c4:	434c      	muls	r4, r1
 80089c6:	0021      	movs	r1, r4
 80089c8:	f000 f88c 	bl	8008ae4 <_malloc_r>
 80089cc:	1e05      	subs	r5, r0, #0
 80089ce:	d01b      	beq.n	8008a08 <_calloc_r+0x54>
 80089d0:	0022      	movs	r2, r4
 80089d2:	2100      	movs	r1, #0
 80089d4:	f7fe f8f4 	bl	8006bc0 <memset>
 80089d8:	e016      	b.n	8008a08 <_calloc_r+0x54>
 80089da:	1c1d      	adds	r5, r3, #0
 80089dc:	1c0b      	adds	r3, r1, #0
 80089de:	b292      	uxth	r2, r2
 80089e0:	b289      	uxth	r1, r1
 80089e2:	b29c      	uxth	r4, r3
 80089e4:	4351      	muls	r1, r2
 80089e6:	b2ab      	uxth	r3, r5
 80089e8:	4363      	muls	r3, r4
 80089ea:	0c0c      	lsrs	r4, r1, #16
 80089ec:	191c      	adds	r4, r3, r4
 80089ee:	0c22      	lsrs	r2, r4, #16
 80089f0:	d107      	bne.n	8008a02 <_calloc_r+0x4e>
 80089f2:	0424      	lsls	r4, r4, #16
 80089f4:	b289      	uxth	r1, r1
 80089f6:	430c      	orrs	r4, r1
 80089f8:	e7e5      	b.n	80089c6 <_calloc_r+0x12>
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d101      	bne.n	8008a02 <_calloc_r+0x4e>
 80089fe:	1c13      	adds	r3, r2, #0
 8008a00:	e7ed      	b.n	80089de <_calloc_r+0x2a>
 8008a02:	230c      	movs	r3, #12
 8008a04:	2500      	movs	r5, #0
 8008a06:	6003      	str	r3, [r0, #0]
 8008a08:	0028      	movs	r0, r5
 8008a0a:	bd70      	pop	{r4, r5, r6, pc}

08008a0c <_free_r>:
 8008a0c:	b570      	push	{r4, r5, r6, lr}
 8008a0e:	0005      	movs	r5, r0
 8008a10:	2900      	cmp	r1, #0
 8008a12:	d010      	beq.n	8008a36 <_free_r+0x2a>
 8008a14:	1f0c      	subs	r4, r1, #4
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	da00      	bge.n	8008a1e <_free_r+0x12>
 8008a1c:	18e4      	adds	r4, r4, r3
 8008a1e:	0028      	movs	r0, r5
 8008a20:	f000 fa9e 	bl	8008f60 <__malloc_lock>
 8008a24:	4a1d      	ldr	r2, [pc, #116]	; (8008a9c <_free_r+0x90>)
 8008a26:	6813      	ldr	r3, [r2, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d105      	bne.n	8008a38 <_free_r+0x2c>
 8008a2c:	6063      	str	r3, [r4, #4]
 8008a2e:	6014      	str	r4, [r2, #0]
 8008a30:	0028      	movs	r0, r5
 8008a32:	f000 fa9d 	bl	8008f70 <__malloc_unlock>
 8008a36:	bd70      	pop	{r4, r5, r6, pc}
 8008a38:	42a3      	cmp	r3, r4
 8008a3a:	d908      	bls.n	8008a4e <_free_r+0x42>
 8008a3c:	6821      	ldr	r1, [r4, #0]
 8008a3e:	1860      	adds	r0, r4, r1
 8008a40:	4283      	cmp	r3, r0
 8008a42:	d1f3      	bne.n	8008a2c <_free_r+0x20>
 8008a44:	6818      	ldr	r0, [r3, #0]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	1841      	adds	r1, r0, r1
 8008a4a:	6021      	str	r1, [r4, #0]
 8008a4c:	e7ee      	b.n	8008a2c <_free_r+0x20>
 8008a4e:	001a      	movs	r2, r3
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <_free_r+0x4e>
 8008a56:	42a3      	cmp	r3, r4
 8008a58:	d9f9      	bls.n	8008a4e <_free_r+0x42>
 8008a5a:	6811      	ldr	r1, [r2, #0]
 8008a5c:	1850      	adds	r0, r2, r1
 8008a5e:	42a0      	cmp	r0, r4
 8008a60:	d10b      	bne.n	8008a7a <_free_r+0x6e>
 8008a62:	6820      	ldr	r0, [r4, #0]
 8008a64:	1809      	adds	r1, r1, r0
 8008a66:	1850      	adds	r0, r2, r1
 8008a68:	6011      	str	r1, [r2, #0]
 8008a6a:	4283      	cmp	r3, r0
 8008a6c:	d1e0      	bne.n	8008a30 <_free_r+0x24>
 8008a6e:	6818      	ldr	r0, [r3, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	1841      	adds	r1, r0, r1
 8008a74:	6011      	str	r1, [r2, #0]
 8008a76:	6053      	str	r3, [r2, #4]
 8008a78:	e7da      	b.n	8008a30 <_free_r+0x24>
 8008a7a:	42a0      	cmp	r0, r4
 8008a7c:	d902      	bls.n	8008a84 <_free_r+0x78>
 8008a7e:	230c      	movs	r3, #12
 8008a80:	602b      	str	r3, [r5, #0]
 8008a82:	e7d5      	b.n	8008a30 <_free_r+0x24>
 8008a84:	6821      	ldr	r1, [r4, #0]
 8008a86:	1860      	adds	r0, r4, r1
 8008a88:	4283      	cmp	r3, r0
 8008a8a:	d103      	bne.n	8008a94 <_free_r+0x88>
 8008a8c:	6818      	ldr	r0, [r3, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	1841      	adds	r1, r0, r1
 8008a92:	6021      	str	r1, [r4, #0]
 8008a94:	6063      	str	r3, [r4, #4]
 8008a96:	6054      	str	r4, [r2, #4]
 8008a98:	e7ca      	b.n	8008a30 <_free_r+0x24>
 8008a9a:	46c0      	nop			; (mov r8, r8)
 8008a9c:	20000304 	.word	0x20000304

08008aa0 <sbrk_aligned>:
 8008aa0:	b570      	push	{r4, r5, r6, lr}
 8008aa2:	4e0f      	ldr	r6, [pc, #60]	; (8008ae0 <sbrk_aligned+0x40>)
 8008aa4:	000d      	movs	r5, r1
 8008aa6:	6831      	ldr	r1, [r6, #0]
 8008aa8:	0004      	movs	r4, r0
 8008aaa:	2900      	cmp	r1, #0
 8008aac:	d102      	bne.n	8008ab4 <sbrk_aligned+0x14>
 8008aae:	f000 f9f1 	bl	8008e94 <_sbrk_r>
 8008ab2:	6030      	str	r0, [r6, #0]
 8008ab4:	0029      	movs	r1, r5
 8008ab6:	0020      	movs	r0, r4
 8008ab8:	f000 f9ec 	bl	8008e94 <_sbrk_r>
 8008abc:	1c43      	adds	r3, r0, #1
 8008abe:	d00a      	beq.n	8008ad6 <sbrk_aligned+0x36>
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	1cc5      	adds	r5, r0, #3
 8008ac4:	439d      	bics	r5, r3
 8008ac6:	42a8      	cmp	r0, r5
 8008ac8:	d007      	beq.n	8008ada <sbrk_aligned+0x3a>
 8008aca:	1a29      	subs	r1, r5, r0
 8008acc:	0020      	movs	r0, r4
 8008ace:	f000 f9e1 	bl	8008e94 <_sbrk_r>
 8008ad2:	1c43      	adds	r3, r0, #1
 8008ad4:	d101      	bne.n	8008ada <sbrk_aligned+0x3a>
 8008ad6:	2501      	movs	r5, #1
 8008ad8:	426d      	negs	r5, r5
 8008ada:	0028      	movs	r0, r5
 8008adc:	bd70      	pop	{r4, r5, r6, pc}
 8008ade:	46c0      	nop			; (mov r8, r8)
 8008ae0:	20000308 	.word	0x20000308

08008ae4 <_malloc_r>:
 8008ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ae6:	2203      	movs	r2, #3
 8008ae8:	1ccb      	adds	r3, r1, #3
 8008aea:	4393      	bics	r3, r2
 8008aec:	3308      	adds	r3, #8
 8008aee:	0006      	movs	r6, r0
 8008af0:	001f      	movs	r7, r3
 8008af2:	2b0c      	cmp	r3, #12
 8008af4:	d232      	bcs.n	8008b5c <_malloc_r+0x78>
 8008af6:	270c      	movs	r7, #12
 8008af8:	42b9      	cmp	r1, r7
 8008afa:	d831      	bhi.n	8008b60 <_malloc_r+0x7c>
 8008afc:	0030      	movs	r0, r6
 8008afe:	f000 fa2f 	bl	8008f60 <__malloc_lock>
 8008b02:	4d32      	ldr	r5, [pc, #200]	; (8008bcc <_malloc_r+0xe8>)
 8008b04:	682b      	ldr	r3, [r5, #0]
 8008b06:	001c      	movs	r4, r3
 8008b08:	2c00      	cmp	r4, #0
 8008b0a:	d12e      	bne.n	8008b6a <_malloc_r+0x86>
 8008b0c:	0039      	movs	r1, r7
 8008b0e:	0030      	movs	r0, r6
 8008b10:	f7ff ffc6 	bl	8008aa0 <sbrk_aligned>
 8008b14:	0004      	movs	r4, r0
 8008b16:	1c43      	adds	r3, r0, #1
 8008b18:	d11e      	bne.n	8008b58 <_malloc_r+0x74>
 8008b1a:	682c      	ldr	r4, [r5, #0]
 8008b1c:	0025      	movs	r5, r4
 8008b1e:	2d00      	cmp	r5, #0
 8008b20:	d14a      	bne.n	8008bb8 <_malloc_r+0xd4>
 8008b22:	6823      	ldr	r3, [r4, #0]
 8008b24:	0029      	movs	r1, r5
 8008b26:	18e3      	adds	r3, r4, r3
 8008b28:	0030      	movs	r0, r6
 8008b2a:	9301      	str	r3, [sp, #4]
 8008b2c:	f000 f9b2 	bl	8008e94 <_sbrk_r>
 8008b30:	9b01      	ldr	r3, [sp, #4]
 8008b32:	4283      	cmp	r3, r0
 8008b34:	d143      	bne.n	8008bbe <_malloc_r+0xda>
 8008b36:	6823      	ldr	r3, [r4, #0]
 8008b38:	3703      	adds	r7, #3
 8008b3a:	1aff      	subs	r7, r7, r3
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	439f      	bics	r7, r3
 8008b40:	3708      	adds	r7, #8
 8008b42:	2f0c      	cmp	r7, #12
 8008b44:	d200      	bcs.n	8008b48 <_malloc_r+0x64>
 8008b46:	270c      	movs	r7, #12
 8008b48:	0039      	movs	r1, r7
 8008b4a:	0030      	movs	r0, r6
 8008b4c:	f7ff ffa8 	bl	8008aa0 <sbrk_aligned>
 8008b50:	1c43      	adds	r3, r0, #1
 8008b52:	d034      	beq.n	8008bbe <_malloc_r+0xda>
 8008b54:	6823      	ldr	r3, [r4, #0]
 8008b56:	19df      	adds	r7, r3, r7
 8008b58:	6027      	str	r7, [r4, #0]
 8008b5a:	e013      	b.n	8008b84 <_malloc_r+0xa0>
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	dacb      	bge.n	8008af8 <_malloc_r+0x14>
 8008b60:	230c      	movs	r3, #12
 8008b62:	2500      	movs	r5, #0
 8008b64:	6033      	str	r3, [r6, #0]
 8008b66:	0028      	movs	r0, r5
 8008b68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b6a:	6822      	ldr	r2, [r4, #0]
 8008b6c:	1bd1      	subs	r1, r2, r7
 8008b6e:	d420      	bmi.n	8008bb2 <_malloc_r+0xce>
 8008b70:	290b      	cmp	r1, #11
 8008b72:	d917      	bls.n	8008ba4 <_malloc_r+0xc0>
 8008b74:	19e2      	adds	r2, r4, r7
 8008b76:	6027      	str	r7, [r4, #0]
 8008b78:	42a3      	cmp	r3, r4
 8008b7a:	d111      	bne.n	8008ba0 <_malloc_r+0xbc>
 8008b7c:	602a      	str	r2, [r5, #0]
 8008b7e:	6863      	ldr	r3, [r4, #4]
 8008b80:	6011      	str	r1, [r2, #0]
 8008b82:	6053      	str	r3, [r2, #4]
 8008b84:	0030      	movs	r0, r6
 8008b86:	0025      	movs	r5, r4
 8008b88:	f000 f9f2 	bl	8008f70 <__malloc_unlock>
 8008b8c:	2207      	movs	r2, #7
 8008b8e:	350b      	adds	r5, #11
 8008b90:	1d23      	adds	r3, r4, #4
 8008b92:	4395      	bics	r5, r2
 8008b94:	1aea      	subs	r2, r5, r3
 8008b96:	429d      	cmp	r5, r3
 8008b98:	d0e5      	beq.n	8008b66 <_malloc_r+0x82>
 8008b9a:	1b5b      	subs	r3, r3, r5
 8008b9c:	50a3      	str	r3, [r4, r2]
 8008b9e:	e7e2      	b.n	8008b66 <_malloc_r+0x82>
 8008ba0:	605a      	str	r2, [r3, #4]
 8008ba2:	e7ec      	b.n	8008b7e <_malloc_r+0x9a>
 8008ba4:	6862      	ldr	r2, [r4, #4]
 8008ba6:	42a3      	cmp	r3, r4
 8008ba8:	d101      	bne.n	8008bae <_malloc_r+0xca>
 8008baa:	602a      	str	r2, [r5, #0]
 8008bac:	e7ea      	b.n	8008b84 <_malloc_r+0xa0>
 8008bae:	605a      	str	r2, [r3, #4]
 8008bb0:	e7e8      	b.n	8008b84 <_malloc_r+0xa0>
 8008bb2:	0023      	movs	r3, r4
 8008bb4:	6864      	ldr	r4, [r4, #4]
 8008bb6:	e7a7      	b.n	8008b08 <_malloc_r+0x24>
 8008bb8:	002c      	movs	r4, r5
 8008bba:	686d      	ldr	r5, [r5, #4]
 8008bbc:	e7af      	b.n	8008b1e <_malloc_r+0x3a>
 8008bbe:	230c      	movs	r3, #12
 8008bc0:	0030      	movs	r0, r6
 8008bc2:	6033      	str	r3, [r6, #0]
 8008bc4:	f000 f9d4 	bl	8008f70 <__malloc_unlock>
 8008bc8:	e7cd      	b.n	8008b66 <_malloc_r+0x82>
 8008bca:	46c0      	nop			; (mov r8, r8)
 8008bcc:	20000304 	.word	0x20000304

08008bd0 <__ssputs_r>:
 8008bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bd2:	688e      	ldr	r6, [r1, #8]
 8008bd4:	b085      	sub	sp, #20
 8008bd6:	0007      	movs	r7, r0
 8008bd8:	000c      	movs	r4, r1
 8008bda:	9203      	str	r2, [sp, #12]
 8008bdc:	9301      	str	r3, [sp, #4]
 8008bde:	429e      	cmp	r6, r3
 8008be0:	d83c      	bhi.n	8008c5c <__ssputs_r+0x8c>
 8008be2:	2390      	movs	r3, #144	; 0x90
 8008be4:	898a      	ldrh	r2, [r1, #12]
 8008be6:	00db      	lsls	r3, r3, #3
 8008be8:	421a      	tst	r2, r3
 8008bea:	d034      	beq.n	8008c56 <__ssputs_r+0x86>
 8008bec:	6909      	ldr	r1, [r1, #16]
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	6960      	ldr	r0, [r4, #20]
 8008bf2:	1a5b      	subs	r3, r3, r1
 8008bf4:	9302      	str	r3, [sp, #8]
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	4343      	muls	r3, r0
 8008bfa:	0fdd      	lsrs	r5, r3, #31
 8008bfc:	18ed      	adds	r5, r5, r3
 8008bfe:	9b01      	ldr	r3, [sp, #4]
 8008c00:	9802      	ldr	r0, [sp, #8]
 8008c02:	3301      	adds	r3, #1
 8008c04:	181b      	adds	r3, r3, r0
 8008c06:	106d      	asrs	r5, r5, #1
 8008c08:	42ab      	cmp	r3, r5
 8008c0a:	d900      	bls.n	8008c0e <__ssputs_r+0x3e>
 8008c0c:	001d      	movs	r5, r3
 8008c0e:	0553      	lsls	r3, r2, #21
 8008c10:	d532      	bpl.n	8008c78 <__ssputs_r+0xa8>
 8008c12:	0029      	movs	r1, r5
 8008c14:	0038      	movs	r0, r7
 8008c16:	f7ff ff65 	bl	8008ae4 <_malloc_r>
 8008c1a:	1e06      	subs	r6, r0, #0
 8008c1c:	d109      	bne.n	8008c32 <__ssputs_r+0x62>
 8008c1e:	230c      	movs	r3, #12
 8008c20:	603b      	str	r3, [r7, #0]
 8008c22:	2340      	movs	r3, #64	; 0x40
 8008c24:	2001      	movs	r0, #1
 8008c26:	89a2      	ldrh	r2, [r4, #12]
 8008c28:	4240      	negs	r0, r0
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	81a3      	strh	r3, [r4, #12]
 8008c2e:	b005      	add	sp, #20
 8008c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c32:	9a02      	ldr	r2, [sp, #8]
 8008c34:	6921      	ldr	r1, [r4, #16]
 8008c36:	f7ff fb18 	bl	800826a <memcpy>
 8008c3a:	89a3      	ldrh	r3, [r4, #12]
 8008c3c:	4a14      	ldr	r2, [pc, #80]	; (8008c90 <__ssputs_r+0xc0>)
 8008c3e:	401a      	ands	r2, r3
 8008c40:	2380      	movs	r3, #128	; 0x80
 8008c42:	4313      	orrs	r3, r2
 8008c44:	81a3      	strh	r3, [r4, #12]
 8008c46:	9b02      	ldr	r3, [sp, #8]
 8008c48:	6126      	str	r6, [r4, #16]
 8008c4a:	18f6      	adds	r6, r6, r3
 8008c4c:	6026      	str	r6, [r4, #0]
 8008c4e:	6165      	str	r5, [r4, #20]
 8008c50:	9e01      	ldr	r6, [sp, #4]
 8008c52:	1aed      	subs	r5, r5, r3
 8008c54:	60a5      	str	r5, [r4, #8]
 8008c56:	9b01      	ldr	r3, [sp, #4]
 8008c58:	429e      	cmp	r6, r3
 8008c5a:	d900      	bls.n	8008c5e <__ssputs_r+0x8e>
 8008c5c:	9e01      	ldr	r6, [sp, #4]
 8008c5e:	0032      	movs	r2, r6
 8008c60:	9903      	ldr	r1, [sp, #12]
 8008c62:	6820      	ldr	r0, [r4, #0]
 8008c64:	f000 f968 	bl	8008f38 <memmove>
 8008c68:	68a3      	ldr	r3, [r4, #8]
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	1b9b      	subs	r3, r3, r6
 8008c6e:	60a3      	str	r3, [r4, #8]
 8008c70:	6823      	ldr	r3, [r4, #0]
 8008c72:	199e      	adds	r6, r3, r6
 8008c74:	6026      	str	r6, [r4, #0]
 8008c76:	e7da      	b.n	8008c2e <__ssputs_r+0x5e>
 8008c78:	002a      	movs	r2, r5
 8008c7a:	0038      	movs	r0, r7
 8008c7c:	f000 f980 	bl	8008f80 <_realloc_r>
 8008c80:	1e06      	subs	r6, r0, #0
 8008c82:	d1e0      	bne.n	8008c46 <__ssputs_r+0x76>
 8008c84:	0038      	movs	r0, r7
 8008c86:	6921      	ldr	r1, [r4, #16]
 8008c88:	f7ff fec0 	bl	8008a0c <_free_r>
 8008c8c:	e7c7      	b.n	8008c1e <__ssputs_r+0x4e>
 8008c8e:	46c0      	nop			; (mov r8, r8)
 8008c90:	fffffb7f 	.word	0xfffffb7f

08008c94 <_svfiprintf_r>:
 8008c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c96:	b0a1      	sub	sp, #132	; 0x84
 8008c98:	9003      	str	r0, [sp, #12]
 8008c9a:	001d      	movs	r5, r3
 8008c9c:	898b      	ldrh	r3, [r1, #12]
 8008c9e:	000f      	movs	r7, r1
 8008ca0:	0016      	movs	r6, r2
 8008ca2:	061b      	lsls	r3, r3, #24
 8008ca4:	d511      	bpl.n	8008cca <_svfiprintf_r+0x36>
 8008ca6:	690b      	ldr	r3, [r1, #16]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10e      	bne.n	8008cca <_svfiprintf_r+0x36>
 8008cac:	2140      	movs	r1, #64	; 0x40
 8008cae:	f7ff ff19 	bl	8008ae4 <_malloc_r>
 8008cb2:	6038      	str	r0, [r7, #0]
 8008cb4:	6138      	str	r0, [r7, #16]
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d105      	bne.n	8008cc6 <_svfiprintf_r+0x32>
 8008cba:	230c      	movs	r3, #12
 8008cbc:	9a03      	ldr	r2, [sp, #12]
 8008cbe:	3801      	subs	r0, #1
 8008cc0:	6013      	str	r3, [r2, #0]
 8008cc2:	b021      	add	sp, #132	; 0x84
 8008cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cc6:	2340      	movs	r3, #64	; 0x40
 8008cc8:	617b      	str	r3, [r7, #20]
 8008cca:	2300      	movs	r3, #0
 8008ccc:	ac08      	add	r4, sp, #32
 8008cce:	6163      	str	r3, [r4, #20]
 8008cd0:	3320      	adds	r3, #32
 8008cd2:	7663      	strb	r3, [r4, #25]
 8008cd4:	3310      	adds	r3, #16
 8008cd6:	76a3      	strb	r3, [r4, #26]
 8008cd8:	9507      	str	r5, [sp, #28]
 8008cda:	0035      	movs	r5, r6
 8008cdc:	782b      	ldrb	r3, [r5, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <_svfiprintf_r+0x52>
 8008ce2:	2b25      	cmp	r3, #37	; 0x25
 8008ce4:	d147      	bne.n	8008d76 <_svfiprintf_r+0xe2>
 8008ce6:	1bab      	subs	r3, r5, r6
 8008ce8:	9305      	str	r3, [sp, #20]
 8008cea:	42b5      	cmp	r5, r6
 8008cec:	d00c      	beq.n	8008d08 <_svfiprintf_r+0x74>
 8008cee:	0032      	movs	r2, r6
 8008cf0:	0039      	movs	r1, r7
 8008cf2:	9803      	ldr	r0, [sp, #12]
 8008cf4:	f7ff ff6c 	bl	8008bd0 <__ssputs_r>
 8008cf8:	1c43      	adds	r3, r0, #1
 8008cfa:	d100      	bne.n	8008cfe <_svfiprintf_r+0x6a>
 8008cfc:	e0ae      	b.n	8008e5c <_svfiprintf_r+0x1c8>
 8008cfe:	6962      	ldr	r2, [r4, #20]
 8008d00:	9b05      	ldr	r3, [sp, #20]
 8008d02:	4694      	mov	ip, r2
 8008d04:	4463      	add	r3, ip
 8008d06:	6163      	str	r3, [r4, #20]
 8008d08:	782b      	ldrb	r3, [r5, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d100      	bne.n	8008d10 <_svfiprintf_r+0x7c>
 8008d0e:	e0a5      	b.n	8008e5c <_svfiprintf_r+0x1c8>
 8008d10:	2201      	movs	r2, #1
 8008d12:	2300      	movs	r3, #0
 8008d14:	4252      	negs	r2, r2
 8008d16:	6062      	str	r2, [r4, #4]
 8008d18:	a904      	add	r1, sp, #16
 8008d1a:	3254      	adds	r2, #84	; 0x54
 8008d1c:	1852      	adds	r2, r2, r1
 8008d1e:	1c6e      	adds	r6, r5, #1
 8008d20:	6023      	str	r3, [r4, #0]
 8008d22:	60e3      	str	r3, [r4, #12]
 8008d24:	60a3      	str	r3, [r4, #8]
 8008d26:	7013      	strb	r3, [r2, #0]
 8008d28:	65a3      	str	r3, [r4, #88]	; 0x58
 8008d2a:	2205      	movs	r2, #5
 8008d2c:	7831      	ldrb	r1, [r6, #0]
 8008d2e:	4854      	ldr	r0, [pc, #336]	; (8008e80 <_svfiprintf_r+0x1ec>)
 8008d30:	f7ff fa90 	bl	8008254 <memchr>
 8008d34:	1c75      	adds	r5, r6, #1
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d11f      	bne.n	8008d7a <_svfiprintf_r+0xe6>
 8008d3a:	6822      	ldr	r2, [r4, #0]
 8008d3c:	06d3      	lsls	r3, r2, #27
 8008d3e:	d504      	bpl.n	8008d4a <_svfiprintf_r+0xb6>
 8008d40:	2353      	movs	r3, #83	; 0x53
 8008d42:	a904      	add	r1, sp, #16
 8008d44:	185b      	adds	r3, r3, r1
 8008d46:	2120      	movs	r1, #32
 8008d48:	7019      	strb	r1, [r3, #0]
 8008d4a:	0713      	lsls	r3, r2, #28
 8008d4c:	d504      	bpl.n	8008d58 <_svfiprintf_r+0xc4>
 8008d4e:	2353      	movs	r3, #83	; 0x53
 8008d50:	a904      	add	r1, sp, #16
 8008d52:	185b      	adds	r3, r3, r1
 8008d54:	212b      	movs	r1, #43	; 0x2b
 8008d56:	7019      	strb	r1, [r3, #0]
 8008d58:	7833      	ldrb	r3, [r6, #0]
 8008d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8008d5c:	d016      	beq.n	8008d8c <_svfiprintf_r+0xf8>
 8008d5e:	0035      	movs	r5, r6
 8008d60:	2100      	movs	r1, #0
 8008d62:	200a      	movs	r0, #10
 8008d64:	68e3      	ldr	r3, [r4, #12]
 8008d66:	782a      	ldrb	r2, [r5, #0]
 8008d68:	1c6e      	adds	r6, r5, #1
 8008d6a:	3a30      	subs	r2, #48	; 0x30
 8008d6c:	2a09      	cmp	r2, #9
 8008d6e:	d94e      	bls.n	8008e0e <_svfiprintf_r+0x17a>
 8008d70:	2900      	cmp	r1, #0
 8008d72:	d111      	bne.n	8008d98 <_svfiprintf_r+0x104>
 8008d74:	e017      	b.n	8008da6 <_svfiprintf_r+0x112>
 8008d76:	3501      	adds	r5, #1
 8008d78:	e7b0      	b.n	8008cdc <_svfiprintf_r+0x48>
 8008d7a:	4b41      	ldr	r3, [pc, #260]	; (8008e80 <_svfiprintf_r+0x1ec>)
 8008d7c:	6822      	ldr	r2, [r4, #0]
 8008d7e:	1ac0      	subs	r0, r0, r3
 8008d80:	2301      	movs	r3, #1
 8008d82:	4083      	lsls	r3, r0
 8008d84:	4313      	orrs	r3, r2
 8008d86:	002e      	movs	r6, r5
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	e7ce      	b.n	8008d2a <_svfiprintf_r+0x96>
 8008d8c:	9b07      	ldr	r3, [sp, #28]
 8008d8e:	1d19      	adds	r1, r3, #4
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	9107      	str	r1, [sp, #28]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	db01      	blt.n	8008d9c <_svfiprintf_r+0x108>
 8008d98:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d9a:	e004      	b.n	8008da6 <_svfiprintf_r+0x112>
 8008d9c:	425b      	negs	r3, r3
 8008d9e:	60e3      	str	r3, [r4, #12]
 8008da0:	2302      	movs	r3, #2
 8008da2:	4313      	orrs	r3, r2
 8008da4:	6023      	str	r3, [r4, #0]
 8008da6:	782b      	ldrb	r3, [r5, #0]
 8008da8:	2b2e      	cmp	r3, #46	; 0x2e
 8008daa:	d10a      	bne.n	8008dc2 <_svfiprintf_r+0x12e>
 8008dac:	786b      	ldrb	r3, [r5, #1]
 8008dae:	2b2a      	cmp	r3, #42	; 0x2a
 8008db0:	d135      	bne.n	8008e1e <_svfiprintf_r+0x18a>
 8008db2:	9b07      	ldr	r3, [sp, #28]
 8008db4:	3502      	adds	r5, #2
 8008db6:	1d1a      	adds	r2, r3, #4
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	9207      	str	r2, [sp, #28]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	db2b      	blt.n	8008e18 <_svfiprintf_r+0x184>
 8008dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8008dc2:	4e30      	ldr	r6, [pc, #192]	; (8008e84 <_svfiprintf_r+0x1f0>)
 8008dc4:	2203      	movs	r2, #3
 8008dc6:	0030      	movs	r0, r6
 8008dc8:	7829      	ldrb	r1, [r5, #0]
 8008dca:	f7ff fa43 	bl	8008254 <memchr>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d006      	beq.n	8008de0 <_svfiprintf_r+0x14c>
 8008dd2:	2340      	movs	r3, #64	; 0x40
 8008dd4:	1b80      	subs	r0, r0, r6
 8008dd6:	4083      	lsls	r3, r0
 8008dd8:	6822      	ldr	r2, [r4, #0]
 8008dda:	3501      	adds	r5, #1
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	6023      	str	r3, [r4, #0]
 8008de0:	7829      	ldrb	r1, [r5, #0]
 8008de2:	2206      	movs	r2, #6
 8008de4:	4828      	ldr	r0, [pc, #160]	; (8008e88 <_svfiprintf_r+0x1f4>)
 8008de6:	1c6e      	adds	r6, r5, #1
 8008de8:	7621      	strb	r1, [r4, #24]
 8008dea:	f7ff fa33 	bl	8008254 <memchr>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d03c      	beq.n	8008e6c <_svfiprintf_r+0x1d8>
 8008df2:	4b26      	ldr	r3, [pc, #152]	; (8008e8c <_svfiprintf_r+0x1f8>)
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d125      	bne.n	8008e44 <_svfiprintf_r+0x1b0>
 8008df8:	2207      	movs	r2, #7
 8008dfa:	9b07      	ldr	r3, [sp, #28]
 8008dfc:	3307      	adds	r3, #7
 8008dfe:	4393      	bics	r3, r2
 8008e00:	3308      	adds	r3, #8
 8008e02:	9307      	str	r3, [sp, #28]
 8008e04:	6963      	ldr	r3, [r4, #20]
 8008e06:	9a04      	ldr	r2, [sp, #16]
 8008e08:	189b      	adds	r3, r3, r2
 8008e0a:	6163      	str	r3, [r4, #20]
 8008e0c:	e765      	b.n	8008cda <_svfiprintf_r+0x46>
 8008e0e:	4343      	muls	r3, r0
 8008e10:	0035      	movs	r5, r6
 8008e12:	2101      	movs	r1, #1
 8008e14:	189b      	adds	r3, r3, r2
 8008e16:	e7a6      	b.n	8008d66 <_svfiprintf_r+0xd2>
 8008e18:	2301      	movs	r3, #1
 8008e1a:	425b      	negs	r3, r3
 8008e1c:	e7d0      	b.n	8008dc0 <_svfiprintf_r+0x12c>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	200a      	movs	r0, #10
 8008e22:	001a      	movs	r2, r3
 8008e24:	3501      	adds	r5, #1
 8008e26:	6063      	str	r3, [r4, #4]
 8008e28:	7829      	ldrb	r1, [r5, #0]
 8008e2a:	1c6e      	adds	r6, r5, #1
 8008e2c:	3930      	subs	r1, #48	; 0x30
 8008e2e:	2909      	cmp	r1, #9
 8008e30:	d903      	bls.n	8008e3a <_svfiprintf_r+0x1a6>
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d0c5      	beq.n	8008dc2 <_svfiprintf_r+0x12e>
 8008e36:	9209      	str	r2, [sp, #36]	; 0x24
 8008e38:	e7c3      	b.n	8008dc2 <_svfiprintf_r+0x12e>
 8008e3a:	4342      	muls	r2, r0
 8008e3c:	0035      	movs	r5, r6
 8008e3e:	2301      	movs	r3, #1
 8008e40:	1852      	adds	r2, r2, r1
 8008e42:	e7f1      	b.n	8008e28 <_svfiprintf_r+0x194>
 8008e44:	ab07      	add	r3, sp, #28
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	003a      	movs	r2, r7
 8008e4a:	0021      	movs	r1, r4
 8008e4c:	4b10      	ldr	r3, [pc, #64]	; (8008e90 <_svfiprintf_r+0x1fc>)
 8008e4e:	9803      	ldr	r0, [sp, #12]
 8008e50:	f7fd ff68 	bl	8006d24 <_printf_float>
 8008e54:	9004      	str	r0, [sp, #16]
 8008e56:	9b04      	ldr	r3, [sp, #16]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	d1d3      	bne.n	8008e04 <_svfiprintf_r+0x170>
 8008e5c:	89bb      	ldrh	r3, [r7, #12]
 8008e5e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008e60:	065b      	lsls	r3, r3, #25
 8008e62:	d400      	bmi.n	8008e66 <_svfiprintf_r+0x1d2>
 8008e64:	e72d      	b.n	8008cc2 <_svfiprintf_r+0x2e>
 8008e66:	2001      	movs	r0, #1
 8008e68:	4240      	negs	r0, r0
 8008e6a:	e72a      	b.n	8008cc2 <_svfiprintf_r+0x2e>
 8008e6c:	ab07      	add	r3, sp, #28
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	003a      	movs	r2, r7
 8008e72:	0021      	movs	r1, r4
 8008e74:	4b06      	ldr	r3, [pc, #24]	; (8008e90 <_svfiprintf_r+0x1fc>)
 8008e76:	9803      	ldr	r0, [sp, #12]
 8008e78:	f7fe fa06 	bl	8007288 <_printf_i>
 8008e7c:	e7ea      	b.n	8008e54 <_svfiprintf_r+0x1c0>
 8008e7e:	46c0      	nop			; (mov r8, r8)
 8008e80:	08009f5c 	.word	0x08009f5c
 8008e84:	08009f62 	.word	0x08009f62
 8008e88:	08009f66 	.word	0x08009f66
 8008e8c:	08006d25 	.word	0x08006d25
 8008e90:	08008bd1 	.word	0x08008bd1

08008e94 <_sbrk_r>:
 8008e94:	2300      	movs	r3, #0
 8008e96:	b570      	push	{r4, r5, r6, lr}
 8008e98:	4d06      	ldr	r5, [pc, #24]	; (8008eb4 <_sbrk_r+0x20>)
 8008e9a:	0004      	movs	r4, r0
 8008e9c:	0008      	movs	r0, r1
 8008e9e:	602b      	str	r3, [r5, #0]
 8008ea0:	f7fa fdb8 	bl	8003a14 <_sbrk>
 8008ea4:	1c43      	adds	r3, r0, #1
 8008ea6:	d103      	bne.n	8008eb0 <_sbrk_r+0x1c>
 8008ea8:	682b      	ldr	r3, [r5, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d000      	beq.n	8008eb0 <_sbrk_r+0x1c>
 8008eae:	6023      	str	r3, [r4, #0]
 8008eb0:	bd70      	pop	{r4, r5, r6, pc}
 8008eb2:	46c0      	nop			; (mov r8, r8)
 8008eb4:	2000030c 	.word	0x2000030c

08008eb8 <__assert_func>:
 8008eb8:	b530      	push	{r4, r5, lr}
 8008eba:	0014      	movs	r4, r2
 8008ebc:	001a      	movs	r2, r3
 8008ebe:	4b09      	ldr	r3, [pc, #36]	; (8008ee4 <__assert_func+0x2c>)
 8008ec0:	0005      	movs	r5, r0
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	b085      	sub	sp, #20
 8008ec6:	68d8      	ldr	r0, [r3, #12]
 8008ec8:	4b07      	ldr	r3, [pc, #28]	; (8008ee8 <__assert_func+0x30>)
 8008eca:	2c00      	cmp	r4, #0
 8008ecc:	d101      	bne.n	8008ed2 <__assert_func+0x1a>
 8008ece:	4b07      	ldr	r3, [pc, #28]	; (8008eec <__assert_func+0x34>)
 8008ed0:	001c      	movs	r4, r3
 8008ed2:	9301      	str	r3, [sp, #4]
 8008ed4:	9100      	str	r1, [sp, #0]
 8008ed6:	002b      	movs	r3, r5
 8008ed8:	4905      	ldr	r1, [pc, #20]	; (8008ef0 <__assert_func+0x38>)
 8008eda:	9402      	str	r4, [sp, #8]
 8008edc:	f000 f80a 	bl	8008ef4 <fiprintf>
 8008ee0:	f000 faba 	bl	8009458 <abort>
 8008ee4:	2000000c 	.word	0x2000000c
 8008ee8:	08009f6d 	.word	0x08009f6d
 8008eec:	08009fa8 	.word	0x08009fa8
 8008ef0:	08009f7a 	.word	0x08009f7a

08008ef4 <fiprintf>:
 8008ef4:	b40e      	push	{r1, r2, r3}
 8008ef6:	b503      	push	{r0, r1, lr}
 8008ef8:	0001      	movs	r1, r0
 8008efa:	ab03      	add	r3, sp, #12
 8008efc:	4804      	ldr	r0, [pc, #16]	; (8008f10 <fiprintf+0x1c>)
 8008efe:	cb04      	ldmia	r3!, {r2}
 8008f00:	6800      	ldr	r0, [r0, #0]
 8008f02:	9301      	str	r3, [sp, #4]
 8008f04:	f000 f892 	bl	800902c <_vfiprintf_r>
 8008f08:	b002      	add	sp, #8
 8008f0a:	bc08      	pop	{r3}
 8008f0c:	b003      	add	sp, #12
 8008f0e:	4718      	bx	r3
 8008f10:	2000000c 	.word	0x2000000c

08008f14 <__ascii_mbtowc>:
 8008f14:	b082      	sub	sp, #8
 8008f16:	2900      	cmp	r1, #0
 8008f18:	d100      	bne.n	8008f1c <__ascii_mbtowc+0x8>
 8008f1a:	a901      	add	r1, sp, #4
 8008f1c:	1e10      	subs	r0, r2, #0
 8008f1e:	d006      	beq.n	8008f2e <__ascii_mbtowc+0x1a>
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d006      	beq.n	8008f32 <__ascii_mbtowc+0x1e>
 8008f24:	7813      	ldrb	r3, [r2, #0]
 8008f26:	600b      	str	r3, [r1, #0]
 8008f28:	7810      	ldrb	r0, [r2, #0]
 8008f2a:	1e43      	subs	r3, r0, #1
 8008f2c:	4198      	sbcs	r0, r3
 8008f2e:	b002      	add	sp, #8
 8008f30:	4770      	bx	lr
 8008f32:	2002      	movs	r0, #2
 8008f34:	4240      	negs	r0, r0
 8008f36:	e7fa      	b.n	8008f2e <__ascii_mbtowc+0x1a>

08008f38 <memmove>:
 8008f38:	b510      	push	{r4, lr}
 8008f3a:	4288      	cmp	r0, r1
 8008f3c:	d902      	bls.n	8008f44 <memmove+0xc>
 8008f3e:	188b      	adds	r3, r1, r2
 8008f40:	4298      	cmp	r0, r3
 8008f42:	d303      	bcc.n	8008f4c <memmove+0x14>
 8008f44:	2300      	movs	r3, #0
 8008f46:	e007      	b.n	8008f58 <memmove+0x20>
 8008f48:	5c8b      	ldrb	r3, [r1, r2]
 8008f4a:	5483      	strb	r3, [r0, r2]
 8008f4c:	3a01      	subs	r2, #1
 8008f4e:	d2fb      	bcs.n	8008f48 <memmove+0x10>
 8008f50:	bd10      	pop	{r4, pc}
 8008f52:	5ccc      	ldrb	r4, [r1, r3]
 8008f54:	54c4      	strb	r4, [r0, r3]
 8008f56:	3301      	adds	r3, #1
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d1fa      	bne.n	8008f52 <memmove+0x1a>
 8008f5c:	e7f8      	b.n	8008f50 <memmove+0x18>
	...

08008f60 <__malloc_lock>:
 8008f60:	b510      	push	{r4, lr}
 8008f62:	4802      	ldr	r0, [pc, #8]	; (8008f6c <__malloc_lock+0xc>)
 8008f64:	f000 fc4f 	bl	8009806 <__retarget_lock_acquire_recursive>
 8008f68:	bd10      	pop	{r4, pc}
 8008f6a:	46c0      	nop			; (mov r8, r8)
 8008f6c:	20000310 	.word	0x20000310

08008f70 <__malloc_unlock>:
 8008f70:	b510      	push	{r4, lr}
 8008f72:	4802      	ldr	r0, [pc, #8]	; (8008f7c <__malloc_unlock+0xc>)
 8008f74:	f000 fc48 	bl	8009808 <__retarget_lock_release_recursive>
 8008f78:	bd10      	pop	{r4, pc}
 8008f7a:	46c0      	nop			; (mov r8, r8)
 8008f7c:	20000310 	.word	0x20000310

08008f80 <_realloc_r>:
 8008f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f82:	0007      	movs	r7, r0
 8008f84:	000e      	movs	r6, r1
 8008f86:	0014      	movs	r4, r2
 8008f88:	2900      	cmp	r1, #0
 8008f8a:	d105      	bne.n	8008f98 <_realloc_r+0x18>
 8008f8c:	0011      	movs	r1, r2
 8008f8e:	f7ff fda9 	bl	8008ae4 <_malloc_r>
 8008f92:	0005      	movs	r5, r0
 8008f94:	0028      	movs	r0, r5
 8008f96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f98:	2a00      	cmp	r2, #0
 8008f9a:	d103      	bne.n	8008fa4 <_realloc_r+0x24>
 8008f9c:	f7ff fd36 	bl	8008a0c <_free_r>
 8008fa0:	0025      	movs	r5, r4
 8008fa2:	e7f7      	b.n	8008f94 <_realloc_r+0x14>
 8008fa4:	f000 fc9e 	bl	80098e4 <_malloc_usable_size_r>
 8008fa8:	9001      	str	r0, [sp, #4]
 8008faa:	4284      	cmp	r4, r0
 8008fac:	d803      	bhi.n	8008fb6 <_realloc_r+0x36>
 8008fae:	0035      	movs	r5, r6
 8008fb0:	0843      	lsrs	r3, r0, #1
 8008fb2:	42a3      	cmp	r3, r4
 8008fb4:	d3ee      	bcc.n	8008f94 <_realloc_r+0x14>
 8008fb6:	0021      	movs	r1, r4
 8008fb8:	0038      	movs	r0, r7
 8008fba:	f7ff fd93 	bl	8008ae4 <_malloc_r>
 8008fbe:	1e05      	subs	r5, r0, #0
 8008fc0:	d0e8      	beq.n	8008f94 <_realloc_r+0x14>
 8008fc2:	9b01      	ldr	r3, [sp, #4]
 8008fc4:	0022      	movs	r2, r4
 8008fc6:	429c      	cmp	r4, r3
 8008fc8:	d900      	bls.n	8008fcc <_realloc_r+0x4c>
 8008fca:	001a      	movs	r2, r3
 8008fcc:	0031      	movs	r1, r6
 8008fce:	0028      	movs	r0, r5
 8008fd0:	f7ff f94b 	bl	800826a <memcpy>
 8008fd4:	0031      	movs	r1, r6
 8008fd6:	0038      	movs	r0, r7
 8008fd8:	f7ff fd18 	bl	8008a0c <_free_r>
 8008fdc:	e7da      	b.n	8008f94 <_realloc_r+0x14>

08008fde <__sfputc_r>:
 8008fde:	6893      	ldr	r3, [r2, #8]
 8008fe0:	b510      	push	{r4, lr}
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	6093      	str	r3, [r2, #8]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	da04      	bge.n	8008ff4 <__sfputc_r+0x16>
 8008fea:	6994      	ldr	r4, [r2, #24]
 8008fec:	42a3      	cmp	r3, r4
 8008fee:	db07      	blt.n	8009000 <__sfputc_r+0x22>
 8008ff0:	290a      	cmp	r1, #10
 8008ff2:	d005      	beq.n	8009000 <__sfputc_r+0x22>
 8008ff4:	6813      	ldr	r3, [r2, #0]
 8008ff6:	1c58      	adds	r0, r3, #1
 8008ff8:	6010      	str	r0, [r2, #0]
 8008ffa:	7019      	strb	r1, [r3, #0]
 8008ffc:	0008      	movs	r0, r1
 8008ffe:	bd10      	pop	{r4, pc}
 8009000:	f000 f94e 	bl	80092a0 <__swbuf_r>
 8009004:	0001      	movs	r1, r0
 8009006:	e7f9      	b.n	8008ffc <__sfputc_r+0x1e>

08009008 <__sfputs_r>:
 8009008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900a:	0006      	movs	r6, r0
 800900c:	000f      	movs	r7, r1
 800900e:	0014      	movs	r4, r2
 8009010:	18d5      	adds	r5, r2, r3
 8009012:	42ac      	cmp	r4, r5
 8009014:	d101      	bne.n	800901a <__sfputs_r+0x12>
 8009016:	2000      	movs	r0, #0
 8009018:	e007      	b.n	800902a <__sfputs_r+0x22>
 800901a:	7821      	ldrb	r1, [r4, #0]
 800901c:	003a      	movs	r2, r7
 800901e:	0030      	movs	r0, r6
 8009020:	f7ff ffdd 	bl	8008fde <__sfputc_r>
 8009024:	3401      	adds	r4, #1
 8009026:	1c43      	adds	r3, r0, #1
 8009028:	d1f3      	bne.n	8009012 <__sfputs_r+0xa>
 800902a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800902c <_vfiprintf_r>:
 800902c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800902e:	b0a1      	sub	sp, #132	; 0x84
 8009030:	0006      	movs	r6, r0
 8009032:	000c      	movs	r4, r1
 8009034:	001f      	movs	r7, r3
 8009036:	9203      	str	r2, [sp, #12]
 8009038:	2800      	cmp	r0, #0
 800903a:	d004      	beq.n	8009046 <_vfiprintf_r+0x1a>
 800903c:	6983      	ldr	r3, [r0, #24]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <_vfiprintf_r+0x1a>
 8009042:	f000 fb3f 	bl	80096c4 <__sinit>
 8009046:	4b8e      	ldr	r3, [pc, #568]	; (8009280 <_vfiprintf_r+0x254>)
 8009048:	429c      	cmp	r4, r3
 800904a:	d11c      	bne.n	8009086 <_vfiprintf_r+0x5a>
 800904c:	6874      	ldr	r4, [r6, #4]
 800904e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009050:	07db      	lsls	r3, r3, #31
 8009052:	d405      	bmi.n	8009060 <_vfiprintf_r+0x34>
 8009054:	89a3      	ldrh	r3, [r4, #12]
 8009056:	059b      	lsls	r3, r3, #22
 8009058:	d402      	bmi.n	8009060 <_vfiprintf_r+0x34>
 800905a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800905c:	f000 fbd3 	bl	8009806 <__retarget_lock_acquire_recursive>
 8009060:	89a3      	ldrh	r3, [r4, #12]
 8009062:	071b      	lsls	r3, r3, #28
 8009064:	d502      	bpl.n	800906c <_vfiprintf_r+0x40>
 8009066:	6923      	ldr	r3, [r4, #16]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d11d      	bne.n	80090a8 <_vfiprintf_r+0x7c>
 800906c:	0021      	movs	r1, r4
 800906e:	0030      	movs	r0, r6
 8009070:	f000 f97a 	bl	8009368 <__swsetup_r>
 8009074:	2800      	cmp	r0, #0
 8009076:	d017      	beq.n	80090a8 <_vfiprintf_r+0x7c>
 8009078:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800907a:	07db      	lsls	r3, r3, #31
 800907c:	d50d      	bpl.n	800909a <_vfiprintf_r+0x6e>
 800907e:	2001      	movs	r0, #1
 8009080:	4240      	negs	r0, r0
 8009082:	b021      	add	sp, #132	; 0x84
 8009084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009086:	4b7f      	ldr	r3, [pc, #508]	; (8009284 <_vfiprintf_r+0x258>)
 8009088:	429c      	cmp	r4, r3
 800908a:	d101      	bne.n	8009090 <_vfiprintf_r+0x64>
 800908c:	68b4      	ldr	r4, [r6, #8]
 800908e:	e7de      	b.n	800904e <_vfiprintf_r+0x22>
 8009090:	4b7d      	ldr	r3, [pc, #500]	; (8009288 <_vfiprintf_r+0x25c>)
 8009092:	429c      	cmp	r4, r3
 8009094:	d1db      	bne.n	800904e <_vfiprintf_r+0x22>
 8009096:	68f4      	ldr	r4, [r6, #12]
 8009098:	e7d9      	b.n	800904e <_vfiprintf_r+0x22>
 800909a:	89a3      	ldrh	r3, [r4, #12]
 800909c:	059b      	lsls	r3, r3, #22
 800909e:	d4ee      	bmi.n	800907e <_vfiprintf_r+0x52>
 80090a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090a2:	f000 fbb1 	bl	8009808 <__retarget_lock_release_recursive>
 80090a6:	e7ea      	b.n	800907e <_vfiprintf_r+0x52>
 80090a8:	2300      	movs	r3, #0
 80090aa:	ad08      	add	r5, sp, #32
 80090ac:	616b      	str	r3, [r5, #20]
 80090ae:	3320      	adds	r3, #32
 80090b0:	766b      	strb	r3, [r5, #25]
 80090b2:	3310      	adds	r3, #16
 80090b4:	76ab      	strb	r3, [r5, #26]
 80090b6:	9707      	str	r7, [sp, #28]
 80090b8:	9f03      	ldr	r7, [sp, #12]
 80090ba:	783b      	ldrb	r3, [r7, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d001      	beq.n	80090c4 <_vfiprintf_r+0x98>
 80090c0:	2b25      	cmp	r3, #37	; 0x25
 80090c2:	d14e      	bne.n	8009162 <_vfiprintf_r+0x136>
 80090c4:	9b03      	ldr	r3, [sp, #12]
 80090c6:	1afb      	subs	r3, r7, r3
 80090c8:	9305      	str	r3, [sp, #20]
 80090ca:	9b03      	ldr	r3, [sp, #12]
 80090cc:	429f      	cmp	r7, r3
 80090ce:	d00d      	beq.n	80090ec <_vfiprintf_r+0xc0>
 80090d0:	9b05      	ldr	r3, [sp, #20]
 80090d2:	0021      	movs	r1, r4
 80090d4:	0030      	movs	r0, r6
 80090d6:	9a03      	ldr	r2, [sp, #12]
 80090d8:	f7ff ff96 	bl	8009008 <__sfputs_r>
 80090dc:	1c43      	adds	r3, r0, #1
 80090de:	d100      	bne.n	80090e2 <_vfiprintf_r+0xb6>
 80090e0:	e0b5      	b.n	800924e <_vfiprintf_r+0x222>
 80090e2:	696a      	ldr	r2, [r5, #20]
 80090e4:	9b05      	ldr	r3, [sp, #20]
 80090e6:	4694      	mov	ip, r2
 80090e8:	4463      	add	r3, ip
 80090ea:	616b      	str	r3, [r5, #20]
 80090ec:	783b      	ldrb	r3, [r7, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d100      	bne.n	80090f4 <_vfiprintf_r+0xc8>
 80090f2:	e0ac      	b.n	800924e <_vfiprintf_r+0x222>
 80090f4:	2201      	movs	r2, #1
 80090f6:	1c7b      	adds	r3, r7, #1
 80090f8:	9303      	str	r3, [sp, #12]
 80090fa:	2300      	movs	r3, #0
 80090fc:	4252      	negs	r2, r2
 80090fe:	606a      	str	r2, [r5, #4]
 8009100:	a904      	add	r1, sp, #16
 8009102:	3254      	adds	r2, #84	; 0x54
 8009104:	1852      	adds	r2, r2, r1
 8009106:	602b      	str	r3, [r5, #0]
 8009108:	60eb      	str	r3, [r5, #12]
 800910a:	60ab      	str	r3, [r5, #8]
 800910c:	7013      	strb	r3, [r2, #0]
 800910e:	65ab      	str	r3, [r5, #88]	; 0x58
 8009110:	9b03      	ldr	r3, [sp, #12]
 8009112:	2205      	movs	r2, #5
 8009114:	7819      	ldrb	r1, [r3, #0]
 8009116:	485d      	ldr	r0, [pc, #372]	; (800928c <_vfiprintf_r+0x260>)
 8009118:	f7ff f89c 	bl	8008254 <memchr>
 800911c:	9b03      	ldr	r3, [sp, #12]
 800911e:	1c5f      	adds	r7, r3, #1
 8009120:	2800      	cmp	r0, #0
 8009122:	d120      	bne.n	8009166 <_vfiprintf_r+0x13a>
 8009124:	682a      	ldr	r2, [r5, #0]
 8009126:	06d3      	lsls	r3, r2, #27
 8009128:	d504      	bpl.n	8009134 <_vfiprintf_r+0x108>
 800912a:	2353      	movs	r3, #83	; 0x53
 800912c:	a904      	add	r1, sp, #16
 800912e:	185b      	adds	r3, r3, r1
 8009130:	2120      	movs	r1, #32
 8009132:	7019      	strb	r1, [r3, #0]
 8009134:	0713      	lsls	r3, r2, #28
 8009136:	d504      	bpl.n	8009142 <_vfiprintf_r+0x116>
 8009138:	2353      	movs	r3, #83	; 0x53
 800913a:	a904      	add	r1, sp, #16
 800913c:	185b      	adds	r3, r3, r1
 800913e:	212b      	movs	r1, #43	; 0x2b
 8009140:	7019      	strb	r1, [r3, #0]
 8009142:	9b03      	ldr	r3, [sp, #12]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	2b2a      	cmp	r3, #42	; 0x2a
 8009148:	d016      	beq.n	8009178 <_vfiprintf_r+0x14c>
 800914a:	2100      	movs	r1, #0
 800914c:	68eb      	ldr	r3, [r5, #12]
 800914e:	9f03      	ldr	r7, [sp, #12]
 8009150:	783a      	ldrb	r2, [r7, #0]
 8009152:	1c78      	adds	r0, r7, #1
 8009154:	3a30      	subs	r2, #48	; 0x30
 8009156:	4684      	mov	ip, r0
 8009158:	2a09      	cmp	r2, #9
 800915a:	d94f      	bls.n	80091fc <_vfiprintf_r+0x1d0>
 800915c:	2900      	cmp	r1, #0
 800915e:	d111      	bne.n	8009184 <_vfiprintf_r+0x158>
 8009160:	e017      	b.n	8009192 <_vfiprintf_r+0x166>
 8009162:	3701      	adds	r7, #1
 8009164:	e7a9      	b.n	80090ba <_vfiprintf_r+0x8e>
 8009166:	4b49      	ldr	r3, [pc, #292]	; (800928c <_vfiprintf_r+0x260>)
 8009168:	682a      	ldr	r2, [r5, #0]
 800916a:	1ac0      	subs	r0, r0, r3
 800916c:	2301      	movs	r3, #1
 800916e:	4083      	lsls	r3, r0
 8009170:	4313      	orrs	r3, r2
 8009172:	602b      	str	r3, [r5, #0]
 8009174:	9703      	str	r7, [sp, #12]
 8009176:	e7cb      	b.n	8009110 <_vfiprintf_r+0xe4>
 8009178:	9b07      	ldr	r3, [sp, #28]
 800917a:	1d19      	adds	r1, r3, #4
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	9107      	str	r1, [sp, #28]
 8009180:	2b00      	cmp	r3, #0
 8009182:	db01      	blt.n	8009188 <_vfiprintf_r+0x15c>
 8009184:	930b      	str	r3, [sp, #44]	; 0x2c
 8009186:	e004      	b.n	8009192 <_vfiprintf_r+0x166>
 8009188:	425b      	negs	r3, r3
 800918a:	60eb      	str	r3, [r5, #12]
 800918c:	2302      	movs	r3, #2
 800918e:	4313      	orrs	r3, r2
 8009190:	602b      	str	r3, [r5, #0]
 8009192:	783b      	ldrb	r3, [r7, #0]
 8009194:	2b2e      	cmp	r3, #46	; 0x2e
 8009196:	d10a      	bne.n	80091ae <_vfiprintf_r+0x182>
 8009198:	787b      	ldrb	r3, [r7, #1]
 800919a:	2b2a      	cmp	r3, #42	; 0x2a
 800919c:	d137      	bne.n	800920e <_vfiprintf_r+0x1e2>
 800919e:	9b07      	ldr	r3, [sp, #28]
 80091a0:	3702      	adds	r7, #2
 80091a2:	1d1a      	adds	r2, r3, #4
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	9207      	str	r2, [sp, #28]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	db2d      	blt.n	8009208 <_vfiprintf_r+0x1dc>
 80091ac:	9309      	str	r3, [sp, #36]	; 0x24
 80091ae:	2203      	movs	r2, #3
 80091b0:	7839      	ldrb	r1, [r7, #0]
 80091b2:	4837      	ldr	r0, [pc, #220]	; (8009290 <_vfiprintf_r+0x264>)
 80091b4:	f7ff f84e 	bl	8008254 <memchr>
 80091b8:	2800      	cmp	r0, #0
 80091ba:	d007      	beq.n	80091cc <_vfiprintf_r+0x1a0>
 80091bc:	4b34      	ldr	r3, [pc, #208]	; (8009290 <_vfiprintf_r+0x264>)
 80091be:	682a      	ldr	r2, [r5, #0]
 80091c0:	1ac0      	subs	r0, r0, r3
 80091c2:	2340      	movs	r3, #64	; 0x40
 80091c4:	4083      	lsls	r3, r0
 80091c6:	4313      	orrs	r3, r2
 80091c8:	3701      	adds	r7, #1
 80091ca:	602b      	str	r3, [r5, #0]
 80091cc:	7839      	ldrb	r1, [r7, #0]
 80091ce:	1c7b      	adds	r3, r7, #1
 80091d0:	2206      	movs	r2, #6
 80091d2:	4830      	ldr	r0, [pc, #192]	; (8009294 <_vfiprintf_r+0x268>)
 80091d4:	9303      	str	r3, [sp, #12]
 80091d6:	7629      	strb	r1, [r5, #24]
 80091d8:	f7ff f83c 	bl	8008254 <memchr>
 80091dc:	2800      	cmp	r0, #0
 80091de:	d045      	beq.n	800926c <_vfiprintf_r+0x240>
 80091e0:	4b2d      	ldr	r3, [pc, #180]	; (8009298 <_vfiprintf_r+0x26c>)
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d127      	bne.n	8009236 <_vfiprintf_r+0x20a>
 80091e6:	2207      	movs	r2, #7
 80091e8:	9b07      	ldr	r3, [sp, #28]
 80091ea:	3307      	adds	r3, #7
 80091ec:	4393      	bics	r3, r2
 80091ee:	3308      	adds	r3, #8
 80091f0:	9307      	str	r3, [sp, #28]
 80091f2:	696b      	ldr	r3, [r5, #20]
 80091f4:	9a04      	ldr	r2, [sp, #16]
 80091f6:	189b      	adds	r3, r3, r2
 80091f8:	616b      	str	r3, [r5, #20]
 80091fa:	e75d      	b.n	80090b8 <_vfiprintf_r+0x8c>
 80091fc:	210a      	movs	r1, #10
 80091fe:	434b      	muls	r3, r1
 8009200:	4667      	mov	r7, ip
 8009202:	189b      	adds	r3, r3, r2
 8009204:	3909      	subs	r1, #9
 8009206:	e7a3      	b.n	8009150 <_vfiprintf_r+0x124>
 8009208:	2301      	movs	r3, #1
 800920a:	425b      	negs	r3, r3
 800920c:	e7ce      	b.n	80091ac <_vfiprintf_r+0x180>
 800920e:	2300      	movs	r3, #0
 8009210:	001a      	movs	r2, r3
 8009212:	3701      	adds	r7, #1
 8009214:	606b      	str	r3, [r5, #4]
 8009216:	7839      	ldrb	r1, [r7, #0]
 8009218:	1c78      	adds	r0, r7, #1
 800921a:	3930      	subs	r1, #48	; 0x30
 800921c:	4684      	mov	ip, r0
 800921e:	2909      	cmp	r1, #9
 8009220:	d903      	bls.n	800922a <_vfiprintf_r+0x1fe>
 8009222:	2b00      	cmp	r3, #0
 8009224:	d0c3      	beq.n	80091ae <_vfiprintf_r+0x182>
 8009226:	9209      	str	r2, [sp, #36]	; 0x24
 8009228:	e7c1      	b.n	80091ae <_vfiprintf_r+0x182>
 800922a:	230a      	movs	r3, #10
 800922c:	435a      	muls	r2, r3
 800922e:	4667      	mov	r7, ip
 8009230:	1852      	adds	r2, r2, r1
 8009232:	3b09      	subs	r3, #9
 8009234:	e7ef      	b.n	8009216 <_vfiprintf_r+0x1ea>
 8009236:	ab07      	add	r3, sp, #28
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	0022      	movs	r2, r4
 800923c:	0029      	movs	r1, r5
 800923e:	0030      	movs	r0, r6
 8009240:	4b16      	ldr	r3, [pc, #88]	; (800929c <_vfiprintf_r+0x270>)
 8009242:	f7fd fd6f 	bl	8006d24 <_printf_float>
 8009246:	9004      	str	r0, [sp, #16]
 8009248:	9b04      	ldr	r3, [sp, #16]
 800924a:	3301      	adds	r3, #1
 800924c:	d1d1      	bne.n	80091f2 <_vfiprintf_r+0x1c6>
 800924e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009250:	07db      	lsls	r3, r3, #31
 8009252:	d405      	bmi.n	8009260 <_vfiprintf_r+0x234>
 8009254:	89a3      	ldrh	r3, [r4, #12]
 8009256:	059b      	lsls	r3, r3, #22
 8009258:	d402      	bmi.n	8009260 <_vfiprintf_r+0x234>
 800925a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800925c:	f000 fad4 	bl	8009808 <__retarget_lock_release_recursive>
 8009260:	89a3      	ldrh	r3, [r4, #12]
 8009262:	065b      	lsls	r3, r3, #25
 8009264:	d500      	bpl.n	8009268 <_vfiprintf_r+0x23c>
 8009266:	e70a      	b.n	800907e <_vfiprintf_r+0x52>
 8009268:	980d      	ldr	r0, [sp, #52]	; 0x34
 800926a:	e70a      	b.n	8009082 <_vfiprintf_r+0x56>
 800926c:	ab07      	add	r3, sp, #28
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	0022      	movs	r2, r4
 8009272:	0029      	movs	r1, r5
 8009274:	0030      	movs	r0, r6
 8009276:	4b09      	ldr	r3, [pc, #36]	; (800929c <_vfiprintf_r+0x270>)
 8009278:	f7fe f806 	bl	8007288 <_printf_i>
 800927c:	e7e3      	b.n	8009246 <_vfiprintf_r+0x21a>
 800927e:	46c0      	nop			; (mov r8, r8)
 8009280:	0800a0d4 	.word	0x0800a0d4
 8009284:	0800a0f4 	.word	0x0800a0f4
 8009288:	0800a0b4 	.word	0x0800a0b4
 800928c:	08009f5c 	.word	0x08009f5c
 8009290:	08009f62 	.word	0x08009f62
 8009294:	08009f66 	.word	0x08009f66
 8009298:	08006d25 	.word	0x08006d25
 800929c:	08009009 	.word	0x08009009

080092a0 <__swbuf_r>:
 80092a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a2:	0005      	movs	r5, r0
 80092a4:	000e      	movs	r6, r1
 80092a6:	0014      	movs	r4, r2
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d004      	beq.n	80092b6 <__swbuf_r+0x16>
 80092ac:	6983      	ldr	r3, [r0, #24]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d101      	bne.n	80092b6 <__swbuf_r+0x16>
 80092b2:	f000 fa07 	bl	80096c4 <__sinit>
 80092b6:	4b22      	ldr	r3, [pc, #136]	; (8009340 <__swbuf_r+0xa0>)
 80092b8:	429c      	cmp	r4, r3
 80092ba:	d12e      	bne.n	800931a <__swbuf_r+0x7a>
 80092bc:	686c      	ldr	r4, [r5, #4]
 80092be:	69a3      	ldr	r3, [r4, #24]
 80092c0:	60a3      	str	r3, [r4, #8]
 80092c2:	89a3      	ldrh	r3, [r4, #12]
 80092c4:	071b      	lsls	r3, r3, #28
 80092c6:	d532      	bpl.n	800932e <__swbuf_r+0x8e>
 80092c8:	6923      	ldr	r3, [r4, #16]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d02f      	beq.n	800932e <__swbuf_r+0x8e>
 80092ce:	6823      	ldr	r3, [r4, #0]
 80092d0:	6922      	ldr	r2, [r4, #16]
 80092d2:	b2f7      	uxtb	r7, r6
 80092d4:	1a98      	subs	r0, r3, r2
 80092d6:	6963      	ldr	r3, [r4, #20]
 80092d8:	b2f6      	uxtb	r6, r6
 80092da:	4283      	cmp	r3, r0
 80092dc:	dc05      	bgt.n	80092ea <__swbuf_r+0x4a>
 80092de:	0021      	movs	r1, r4
 80092e0:	0028      	movs	r0, r5
 80092e2:	f000 f94d 	bl	8009580 <_fflush_r>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d127      	bne.n	800933a <__swbuf_r+0x9a>
 80092ea:	68a3      	ldr	r3, [r4, #8]
 80092ec:	3001      	adds	r0, #1
 80092ee:	3b01      	subs	r3, #1
 80092f0:	60a3      	str	r3, [r4, #8]
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	1c5a      	adds	r2, r3, #1
 80092f6:	6022      	str	r2, [r4, #0]
 80092f8:	701f      	strb	r7, [r3, #0]
 80092fa:	6963      	ldr	r3, [r4, #20]
 80092fc:	4283      	cmp	r3, r0
 80092fe:	d004      	beq.n	800930a <__swbuf_r+0x6a>
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	07db      	lsls	r3, r3, #31
 8009304:	d507      	bpl.n	8009316 <__swbuf_r+0x76>
 8009306:	2e0a      	cmp	r6, #10
 8009308:	d105      	bne.n	8009316 <__swbuf_r+0x76>
 800930a:	0021      	movs	r1, r4
 800930c:	0028      	movs	r0, r5
 800930e:	f000 f937 	bl	8009580 <_fflush_r>
 8009312:	2800      	cmp	r0, #0
 8009314:	d111      	bne.n	800933a <__swbuf_r+0x9a>
 8009316:	0030      	movs	r0, r6
 8009318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800931a:	4b0a      	ldr	r3, [pc, #40]	; (8009344 <__swbuf_r+0xa4>)
 800931c:	429c      	cmp	r4, r3
 800931e:	d101      	bne.n	8009324 <__swbuf_r+0x84>
 8009320:	68ac      	ldr	r4, [r5, #8]
 8009322:	e7cc      	b.n	80092be <__swbuf_r+0x1e>
 8009324:	4b08      	ldr	r3, [pc, #32]	; (8009348 <__swbuf_r+0xa8>)
 8009326:	429c      	cmp	r4, r3
 8009328:	d1c9      	bne.n	80092be <__swbuf_r+0x1e>
 800932a:	68ec      	ldr	r4, [r5, #12]
 800932c:	e7c7      	b.n	80092be <__swbuf_r+0x1e>
 800932e:	0021      	movs	r1, r4
 8009330:	0028      	movs	r0, r5
 8009332:	f000 f819 	bl	8009368 <__swsetup_r>
 8009336:	2800      	cmp	r0, #0
 8009338:	d0c9      	beq.n	80092ce <__swbuf_r+0x2e>
 800933a:	2601      	movs	r6, #1
 800933c:	4276      	negs	r6, r6
 800933e:	e7ea      	b.n	8009316 <__swbuf_r+0x76>
 8009340:	0800a0d4 	.word	0x0800a0d4
 8009344:	0800a0f4 	.word	0x0800a0f4
 8009348:	0800a0b4 	.word	0x0800a0b4

0800934c <__ascii_wctomb>:
 800934c:	0003      	movs	r3, r0
 800934e:	1e08      	subs	r0, r1, #0
 8009350:	d005      	beq.n	800935e <__ascii_wctomb+0x12>
 8009352:	2aff      	cmp	r2, #255	; 0xff
 8009354:	d904      	bls.n	8009360 <__ascii_wctomb+0x14>
 8009356:	228a      	movs	r2, #138	; 0x8a
 8009358:	2001      	movs	r0, #1
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	4240      	negs	r0, r0
 800935e:	4770      	bx	lr
 8009360:	2001      	movs	r0, #1
 8009362:	700a      	strb	r2, [r1, #0]
 8009364:	e7fb      	b.n	800935e <__ascii_wctomb+0x12>
	...

08009368 <__swsetup_r>:
 8009368:	4b37      	ldr	r3, [pc, #220]	; (8009448 <__swsetup_r+0xe0>)
 800936a:	b570      	push	{r4, r5, r6, lr}
 800936c:	681d      	ldr	r5, [r3, #0]
 800936e:	0006      	movs	r6, r0
 8009370:	000c      	movs	r4, r1
 8009372:	2d00      	cmp	r5, #0
 8009374:	d005      	beq.n	8009382 <__swsetup_r+0x1a>
 8009376:	69ab      	ldr	r3, [r5, #24]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d102      	bne.n	8009382 <__swsetup_r+0x1a>
 800937c:	0028      	movs	r0, r5
 800937e:	f000 f9a1 	bl	80096c4 <__sinit>
 8009382:	4b32      	ldr	r3, [pc, #200]	; (800944c <__swsetup_r+0xe4>)
 8009384:	429c      	cmp	r4, r3
 8009386:	d10f      	bne.n	80093a8 <__swsetup_r+0x40>
 8009388:	686c      	ldr	r4, [r5, #4]
 800938a:	230c      	movs	r3, #12
 800938c:	5ee2      	ldrsh	r2, [r4, r3]
 800938e:	b293      	uxth	r3, r2
 8009390:	0711      	lsls	r1, r2, #28
 8009392:	d42d      	bmi.n	80093f0 <__swsetup_r+0x88>
 8009394:	06d9      	lsls	r1, r3, #27
 8009396:	d411      	bmi.n	80093bc <__swsetup_r+0x54>
 8009398:	2309      	movs	r3, #9
 800939a:	2001      	movs	r0, #1
 800939c:	6033      	str	r3, [r6, #0]
 800939e:	3337      	adds	r3, #55	; 0x37
 80093a0:	4313      	orrs	r3, r2
 80093a2:	81a3      	strh	r3, [r4, #12]
 80093a4:	4240      	negs	r0, r0
 80093a6:	bd70      	pop	{r4, r5, r6, pc}
 80093a8:	4b29      	ldr	r3, [pc, #164]	; (8009450 <__swsetup_r+0xe8>)
 80093aa:	429c      	cmp	r4, r3
 80093ac:	d101      	bne.n	80093b2 <__swsetup_r+0x4a>
 80093ae:	68ac      	ldr	r4, [r5, #8]
 80093b0:	e7eb      	b.n	800938a <__swsetup_r+0x22>
 80093b2:	4b28      	ldr	r3, [pc, #160]	; (8009454 <__swsetup_r+0xec>)
 80093b4:	429c      	cmp	r4, r3
 80093b6:	d1e8      	bne.n	800938a <__swsetup_r+0x22>
 80093b8:	68ec      	ldr	r4, [r5, #12]
 80093ba:	e7e6      	b.n	800938a <__swsetup_r+0x22>
 80093bc:	075b      	lsls	r3, r3, #29
 80093be:	d513      	bpl.n	80093e8 <__swsetup_r+0x80>
 80093c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093c2:	2900      	cmp	r1, #0
 80093c4:	d008      	beq.n	80093d8 <__swsetup_r+0x70>
 80093c6:	0023      	movs	r3, r4
 80093c8:	3344      	adds	r3, #68	; 0x44
 80093ca:	4299      	cmp	r1, r3
 80093cc:	d002      	beq.n	80093d4 <__swsetup_r+0x6c>
 80093ce:	0030      	movs	r0, r6
 80093d0:	f7ff fb1c 	bl	8008a0c <_free_r>
 80093d4:	2300      	movs	r3, #0
 80093d6:	6363      	str	r3, [r4, #52]	; 0x34
 80093d8:	2224      	movs	r2, #36	; 0x24
 80093da:	89a3      	ldrh	r3, [r4, #12]
 80093dc:	4393      	bics	r3, r2
 80093de:	81a3      	strh	r3, [r4, #12]
 80093e0:	2300      	movs	r3, #0
 80093e2:	6063      	str	r3, [r4, #4]
 80093e4:	6923      	ldr	r3, [r4, #16]
 80093e6:	6023      	str	r3, [r4, #0]
 80093e8:	2308      	movs	r3, #8
 80093ea:	89a2      	ldrh	r2, [r4, #12]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	81a3      	strh	r3, [r4, #12]
 80093f0:	6923      	ldr	r3, [r4, #16]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d10b      	bne.n	800940e <__swsetup_r+0xa6>
 80093f6:	21a0      	movs	r1, #160	; 0xa0
 80093f8:	2280      	movs	r2, #128	; 0x80
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	0089      	lsls	r1, r1, #2
 80093fe:	0092      	lsls	r2, r2, #2
 8009400:	400b      	ands	r3, r1
 8009402:	4293      	cmp	r3, r2
 8009404:	d003      	beq.n	800940e <__swsetup_r+0xa6>
 8009406:	0021      	movs	r1, r4
 8009408:	0030      	movs	r0, r6
 800940a:	f000 fa27 	bl	800985c <__smakebuf_r>
 800940e:	220c      	movs	r2, #12
 8009410:	5ea3      	ldrsh	r3, [r4, r2]
 8009412:	2001      	movs	r0, #1
 8009414:	001a      	movs	r2, r3
 8009416:	b299      	uxth	r1, r3
 8009418:	4002      	ands	r2, r0
 800941a:	4203      	tst	r3, r0
 800941c:	d00f      	beq.n	800943e <__swsetup_r+0xd6>
 800941e:	2200      	movs	r2, #0
 8009420:	60a2      	str	r2, [r4, #8]
 8009422:	6962      	ldr	r2, [r4, #20]
 8009424:	4252      	negs	r2, r2
 8009426:	61a2      	str	r2, [r4, #24]
 8009428:	2000      	movs	r0, #0
 800942a:	6922      	ldr	r2, [r4, #16]
 800942c:	4282      	cmp	r2, r0
 800942e:	d1ba      	bne.n	80093a6 <__swsetup_r+0x3e>
 8009430:	060a      	lsls	r2, r1, #24
 8009432:	d5b8      	bpl.n	80093a6 <__swsetup_r+0x3e>
 8009434:	2240      	movs	r2, #64	; 0x40
 8009436:	4313      	orrs	r3, r2
 8009438:	81a3      	strh	r3, [r4, #12]
 800943a:	3801      	subs	r0, #1
 800943c:	e7b3      	b.n	80093a6 <__swsetup_r+0x3e>
 800943e:	0788      	lsls	r0, r1, #30
 8009440:	d400      	bmi.n	8009444 <__swsetup_r+0xdc>
 8009442:	6962      	ldr	r2, [r4, #20]
 8009444:	60a2      	str	r2, [r4, #8]
 8009446:	e7ef      	b.n	8009428 <__swsetup_r+0xc0>
 8009448:	2000000c 	.word	0x2000000c
 800944c:	0800a0d4 	.word	0x0800a0d4
 8009450:	0800a0f4 	.word	0x0800a0f4
 8009454:	0800a0b4 	.word	0x0800a0b4

08009458 <abort>:
 8009458:	2006      	movs	r0, #6
 800945a:	b510      	push	{r4, lr}
 800945c:	f000 fa74 	bl	8009948 <raise>
 8009460:	2001      	movs	r0, #1
 8009462:	f7fa fa66 	bl	8003932 <_exit>
	...

08009468 <__sflush_r>:
 8009468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800946a:	898b      	ldrh	r3, [r1, #12]
 800946c:	0005      	movs	r5, r0
 800946e:	000c      	movs	r4, r1
 8009470:	071a      	lsls	r2, r3, #28
 8009472:	d45f      	bmi.n	8009534 <__sflush_r+0xcc>
 8009474:	684a      	ldr	r2, [r1, #4]
 8009476:	2a00      	cmp	r2, #0
 8009478:	dc04      	bgt.n	8009484 <__sflush_r+0x1c>
 800947a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800947c:	2a00      	cmp	r2, #0
 800947e:	dc01      	bgt.n	8009484 <__sflush_r+0x1c>
 8009480:	2000      	movs	r0, #0
 8009482:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009484:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009486:	2f00      	cmp	r7, #0
 8009488:	d0fa      	beq.n	8009480 <__sflush_r+0x18>
 800948a:	2200      	movs	r2, #0
 800948c:	2180      	movs	r1, #128	; 0x80
 800948e:	682e      	ldr	r6, [r5, #0]
 8009490:	602a      	str	r2, [r5, #0]
 8009492:	001a      	movs	r2, r3
 8009494:	0149      	lsls	r1, r1, #5
 8009496:	400a      	ands	r2, r1
 8009498:	420b      	tst	r3, r1
 800949a:	d034      	beq.n	8009506 <__sflush_r+0x9e>
 800949c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800949e:	89a3      	ldrh	r3, [r4, #12]
 80094a0:	075b      	lsls	r3, r3, #29
 80094a2:	d506      	bpl.n	80094b2 <__sflush_r+0x4a>
 80094a4:	6863      	ldr	r3, [r4, #4]
 80094a6:	1ac0      	subs	r0, r0, r3
 80094a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <__sflush_r+0x4a>
 80094ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094b0:	1ac0      	subs	r0, r0, r3
 80094b2:	0002      	movs	r2, r0
 80094b4:	6a21      	ldr	r1, [r4, #32]
 80094b6:	2300      	movs	r3, #0
 80094b8:	0028      	movs	r0, r5
 80094ba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80094bc:	47b8      	blx	r7
 80094be:	89a1      	ldrh	r1, [r4, #12]
 80094c0:	1c43      	adds	r3, r0, #1
 80094c2:	d106      	bne.n	80094d2 <__sflush_r+0x6a>
 80094c4:	682b      	ldr	r3, [r5, #0]
 80094c6:	2b1d      	cmp	r3, #29
 80094c8:	d831      	bhi.n	800952e <__sflush_r+0xc6>
 80094ca:	4a2c      	ldr	r2, [pc, #176]	; (800957c <__sflush_r+0x114>)
 80094cc:	40da      	lsrs	r2, r3
 80094ce:	07d3      	lsls	r3, r2, #31
 80094d0:	d52d      	bpl.n	800952e <__sflush_r+0xc6>
 80094d2:	2300      	movs	r3, #0
 80094d4:	6063      	str	r3, [r4, #4]
 80094d6:	6923      	ldr	r3, [r4, #16]
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	04cb      	lsls	r3, r1, #19
 80094dc:	d505      	bpl.n	80094ea <__sflush_r+0x82>
 80094de:	1c43      	adds	r3, r0, #1
 80094e0:	d102      	bne.n	80094e8 <__sflush_r+0x80>
 80094e2:	682b      	ldr	r3, [r5, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d100      	bne.n	80094ea <__sflush_r+0x82>
 80094e8:	6560      	str	r0, [r4, #84]	; 0x54
 80094ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094ec:	602e      	str	r6, [r5, #0]
 80094ee:	2900      	cmp	r1, #0
 80094f0:	d0c6      	beq.n	8009480 <__sflush_r+0x18>
 80094f2:	0023      	movs	r3, r4
 80094f4:	3344      	adds	r3, #68	; 0x44
 80094f6:	4299      	cmp	r1, r3
 80094f8:	d002      	beq.n	8009500 <__sflush_r+0x98>
 80094fa:	0028      	movs	r0, r5
 80094fc:	f7ff fa86 	bl	8008a0c <_free_r>
 8009500:	2000      	movs	r0, #0
 8009502:	6360      	str	r0, [r4, #52]	; 0x34
 8009504:	e7bd      	b.n	8009482 <__sflush_r+0x1a>
 8009506:	2301      	movs	r3, #1
 8009508:	0028      	movs	r0, r5
 800950a:	6a21      	ldr	r1, [r4, #32]
 800950c:	47b8      	blx	r7
 800950e:	1c43      	adds	r3, r0, #1
 8009510:	d1c5      	bne.n	800949e <__sflush_r+0x36>
 8009512:	682b      	ldr	r3, [r5, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d0c2      	beq.n	800949e <__sflush_r+0x36>
 8009518:	2b1d      	cmp	r3, #29
 800951a:	d001      	beq.n	8009520 <__sflush_r+0xb8>
 800951c:	2b16      	cmp	r3, #22
 800951e:	d101      	bne.n	8009524 <__sflush_r+0xbc>
 8009520:	602e      	str	r6, [r5, #0]
 8009522:	e7ad      	b.n	8009480 <__sflush_r+0x18>
 8009524:	2340      	movs	r3, #64	; 0x40
 8009526:	89a2      	ldrh	r2, [r4, #12]
 8009528:	4313      	orrs	r3, r2
 800952a:	81a3      	strh	r3, [r4, #12]
 800952c:	e7a9      	b.n	8009482 <__sflush_r+0x1a>
 800952e:	2340      	movs	r3, #64	; 0x40
 8009530:	430b      	orrs	r3, r1
 8009532:	e7fa      	b.n	800952a <__sflush_r+0xc2>
 8009534:	690f      	ldr	r7, [r1, #16]
 8009536:	2f00      	cmp	r7, #0
 8009538:	d0a2      	beq.n	8009480 <__sflush_r+0x18>
 800953a:	680a      	ldr	r2, [r1, #0]
 800953c:	600f      	str	r7, [r1, #0]
 800953e:	1bd2      	subs	r2, r2, r7
 8009540:	9201      	str	r2, [sp, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	079b      	lsls	r3, r3, #30
 8009546:	d100      	bne.n	800954a <__sflush_r+0xe2>
 8009548:	694a      	ldr	r2, [r1, #20]
 800954a:	60a2      	str	r2, [r4, #8]
 800954c:	9b01      	ldr	r3, [sp, #4]
 800954e:	2b00      	cmp	r3, #0
 8009550:	dc00      	bgt.n	8009554 <__sflush_r+0xec>
 8009552:	e795      	b.n	8009480 <__sflush_r+0x18>
 8009554:	003a      	movs	r2, r7
 8009556:	0028      	movs	r0, r5
 8009558:	9b01      	ldr	r3, [sp, #4]
 800955a:	6a21      	ldr	r1, [r4, #32]
 800955c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800955e:	47b0      	blx	r6
 8009560:	2800      	cmp	r0, #0
 8009562:	dc06      	bgt.n	8009572 <__sflush_r+0x10a>
 8009564:	2340      	movs	r3, #64	; 0x40
 8009566:	2001      	movs	r0, #1
 8009568:	89a2      	ldrh	r2, [r4, #12]
 800956a:	4240      	negs	r0, r0
 800956c:	4313      	orrs	r3, r2
 800956e:	81a3      	strh	r3, [r4, #12]
 8009570:	e787      	b.n	8009482 <__sflush_r+0x1a>
 8009572:	9b01      	ldr	r3, [sp, #4]
 8009574:	183f      	adds	r7, r7, r0
 8009576:	1a1b      	subs	r3, r3, r0
 8009578:	9301      	str	r3, [sp, #4]
 800957a:	e7e7      	b.n	800954c <__sflush_r+0xe4>
 800957c:	20400001 	.word	0x20400001

08009580 <_fflush_r>:
 8009580:	690b      	ldr	r3, [r1, #16]
 8009582:	b570      	push	{r4, r5, r6, lr}
 8009584:	0005      	movs	r5, r0
 8009586:	000c      	movs	r4, r1
 8009588:	2b00      	cmp	r3, #0
 800958a:	d102      	bne.n	8009592 <_fflush_r+0x12>
 800958c:	2500      	movs	r5, #0
 800958e:	0028      	movs	r0, r5
 8009590:	bd70      	pop	{r4, r5, r6, pc}
 8009592:	2800      	cmp	r0, #0
 8009594:	d004      	beq.n	80095a0 <_fflush_r+0x20>
 8009596:	6983      	ldr	r3, [r0, #24]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d101      	bne.n	80095a0 <_fflush_r+0x20>
 800959c:	f000 f892 	bl	80096c4 <__sinit>
 80095a0:	4b14      	ldr	r3, [pc, #80]	; (80095f4 <_fflush_r+0x74>)
 80095a2:	429c      	cmp	r4, r3
 80095a4:	d11b      	bne.n	80095de <_fflush_r+0x5e>
 80095a6:	686c      	ldr	r4, [r5, #4]
 80095a8:	220c      	movs	r2, #12
 80095aa:	5ea3      	ldrsh	r3, [r4, r2]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d0ed      	beq.n	800958c <_fflush_r+0xc>
 80095b0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095b2:	07d2      	lsls	r2, r2, #31
 80095b4:	d404      	bmi.n	80095c0 <_fflush_r+0x40>
 80095b6:	059b      	lsls	r3, r3, #22
 80095b8:	d402      	bmi.n	80095c0 <_fflush_r+0x40>
 80095ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095bc:	f000 f923 	bl	8009806 <__retarget_lock_acquire_recursive>
 80095c0:	0028      	movs	r0, r5
 80095c2:	0021      	movs	r1, r4
 80095c4:	f7ff ff50 	bl	8009468 <__sflush_r>
 80095c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095ca:	0005      	movs	r5, r0
 80095cc:	07db      	lsls	r3, r3, #31
 80095ce:	d4de      	bmi.n	800958e <_fflush_r+0xe>
 80095d0:	89a3      	ldrh	r3, [r4, #12]
 80095d2:	059b      	lsls	r3, r3, #22
 80095d4:	d4db      	bmi.n	800958e <_fflush_r+0xe>
 80095d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095d8:	f000 f916 	bl	8009808 <__retarget_lock_release_recursive>
 80095dc:	e7d7      	b.n	800958e <_fflush_r+0xe>
 80095de:	4b06      	ldr	r3, [pc, #24]	; (80095f8 <_fflush_r+0x78>)
 80095e0:	429c      	cmp	r4, r3
 80095e2:	d101      	bne.n	80095e8 <_fflush_r+0x68>
 80095e4:	68ac      	ldr	r4, [r5, #8]
 80095e6:	e7df      	b.n	80095a8 <_fflush_r+0x28>
 80095e8:	4b04      	ldr	r3, [pc, #16]	; (80095fc <_fflush_r+0x7c>)
 80095ea:	429c      	cmp	r4, r3
 80095ec:	d1dc      	bne.n	80095a8 <_fflush_r+0x28>
 80095ee:	68ec      	ldr	r4, [r5, #12]
 80095f0:	e7da      	b.n	80095a8 <_fflush_r+0x28>
 80095f2:	46c0      	nop			; (mov r8, r8)
 80095f4:	0800a0d4 	.word	0x0800a0d4
 80095f8:	0800a0f4 	.word	0x0800a0f4
 80095fc:	0800a0b4 	.word	0x0800a0b4

08009600 <std>:
 8009600:	2300      	movs	r3, #0
 8009602:	b510      	push	{r4, lr}
 8009604:	0004      	movs	r4, r0
 8009606:	6003      	str	r3, [r0, #0]
 8009608:	6043      	str	r3, [r0, #4]
 800960a:	6083      	str	r3, [r0, #8]
 800960c:	8181      	strh	r1, [r0, #12]
 800960e:	6643      	str	r3, [r0, #100]	; 0x64
 8009610:	0019      	movs	r1, r3
 8009612:	81c2      	strh	r2, [r0, #14]
 8009614:	6103      	str	r3, [r0, #16]
 8009616:	6143      	str	r3, [r0, #20]
 8009618:	6183      	str	r3, [r0, #24]
 800961a:	2208      	movs	r2, #8
 800961c:	305c      	adds	r0, #92	; 0x5c
 800961e:	f7fd facf 	bl	8006bc0 <memset>
 8009622:	4b05      	ldr	r3, [pc, #20]	; (8009638 <std+0x38>)
 8009624:	6224      	str	r4, [r4, #32]
 8009626:	6263      	str	r3, [r4, #36]	; 0x24
 8009628:	4b04      	ldr	r3, [pc, #16]	; (800963c <std+0x3c>)
 800962a:	62a3      	str	r3, [r4, #40]	; 0x28
 800962c:	4b04      	ldr	r3, [pc, #16]	; (8009640 <std+0x40>)
 800962e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009630:	4b04      	ldr	r3, [pc, #16]	; (8009644 <std+0x44>)
 8009632:	6323      	str	r3, [r4, #48]	; 0x30
 8009634:	bd10      	pop	{r4, pc}
 8009636:	46c0      	nop			; (mov r8, r8)
 8009638:	08009989 	.word	0x08009989
 800963c:	080099b1 	.word	0x080099b1
 8009640:	080099e9 	.word	0x080099e9
 8009644:	08009a15 	.word	0x08009a15

08009648 <_cleanup_r>:
 8009648:	b510      	push	{r4, lr}
 800964a:	4902      	ldr	r1, [pc, #8]	; (8009654 <_cleanup_r+0xc>)
 800964c:	f000 f8ba 	bl	80097c4 <_fwalk_reent>
 8009650:	bd10      	pop	{r4, pc}
 8009652:	46c0      	nop			; (mov r8, r8)
 8009654:	08009581 	.word	0x08009581

08009658 <__sfmoreglue>:
 8009658:	b570      	push	{r4, r5, r6, lr}
 800965a:	2568      	movs	r5, #104	; 0x68
 800965c:	1e4a      	subs	r2, r1, #1
 800965e:	4355      	muls	r5, r2
 8009660:	000e      	movs	r6, r1
 8009662:	0029      	movs	r1, r5
 8009664:	3174      	adds	r1, #116	; 0x74
 8009666:	f7ff fa3d 	bl	8008ae4 <_malloc_r>
 800966a:	1e04      	subs	r4, r0, #0
 800966c:	d008      	beq.n	8009680 <__sfmoreglue+0x28>
 800966e:	2100      	movs	r1, #0
 8009670:	002a      	movs	r2, r5
 8009672:	6001      	str	r1, [r0, #0]
 8009674:	6046      	str	r6, [r0, #4]
 8009676:	300c      	adds	r0, #12
 8009678:	60a0      	str	r0, [r4, #8]
 800967a:	3268      	adds	r2, #104	; 0x68
 800967c:	f7fd faa0 	bl	8006bc0 <memset>
 8009680:	0020      	movs	r0, r4
 8009682:	bd70      	pop	{r4, r5, r6, pc}

08009684 <__sfp_lock_acquire>:
 8009684:	b510      	push	{r4, lr}
 8009686:	4802      	ldr	r0, [pc, #8]	; (8009690 <__sfp_lock_acquire+0xc>)
 8009688:	f000 f8bd 	bl	8009806 <__retarget_lock_acquire_recursive>
 800968c:	bd10      	pop	{r4, pc}
 800968e:	46c0      	nop			; (mov r8, r8)
 8009690:	20000311 	.word	0x20000311

08009694 <__sfp_lock_release>:
 8009694:	b510      	push	{r4, lr}
 8009696:	4802      	ldr	r0, [pc, #8]	; (80096a0 <__sfp_lock_release+0xc>)
 8009698:	f000 f8b6 	bl	8009808 <__retarget_lock_release_recursive>
 800969c:	bd10      	pop	{r4, pc}
 800969e:	46c0      	nop			; (mov r8, r8)
 80096a0:	20000311 	.word	0x20000311

080096a4 <__sinit_lock_acquire>:
 80096a4:	b510      	push	{r4, lr}
 80096a6:	4802      	ldr	r0, [pc, #8]	; (80096b0 <__sinit_lock_acquire+0xc>)
 80096a8:	f000 f8ad 	bl	8009806 <__retarget_lock_acquire_recursive>
 80096ac:	bd10      	pop	{r4, pc}
 80096ae:	46c0      	nop			; (mov r8, r8)
 80096b0:	20000312 	.word	0x20000312

080096b4 <__sinit_lock_release>:
 80096b4:	b510      	push	{r4, lr}
 80096b6:	4802      	ldr	r0, [pc, #8]	; (80096c0 <__sinit_lock_release+0xc>)
 80096b8:	f000 f8a6 	bl	8009808 <__retarget_lock_release_recursive>
 80096bc:	bd10      	pop	{r4, pc}
 80096be:	46c0      	nop			; (mov r8, r8)
 80096c0:	20000312 	.word	0x20000312

080096c4 <__sinit>:
 80096c4:	b513      	push	{r0, r1, r4, lr}
 80096c6:	0004      	movs	r4, r0
 80096c8:	f7ff ffec 	bl	80096a4 <__sinit_lock_acquire>
 80096cc:	69a3      	ldr	r3, [r4, #24]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d002      	beq.n	80096d8 <__sinit+0x14>
 80096d2:	f7ff ffef 	bl	80096b4 <__sinit_lock_release>
 80096d6:	bd13      	pop	{r0, r1, r4, pc}
 80096d8:	64a3      	str	r3, [r4, #72]	; 0x48
 80096da:	64e3      	str	r3, [r4, #76]	; 0x4c
 80096dc:	6523      	str	r3, [r4, #80]	; 0x50
 80096de:	4b13      	ldr	r3, [pc, #76]	; (800972c <__sinit+0x68>)
 80096e0:	4a13      	ldr	r2, [pc, #76]	; (8009730 <__sinit+0x6c>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80096e6:	9301      	str	r3, [sp, #4]
 80096e8:	42a3      	cmp	r3, r4
 80096ea:	d101      	bne.n	80096f0 <__sinit+0x2c>
 80096ec:	2301      	movs	r3, #1
 80096ee:	61a3      	str	r3, [r4, #24]
 80096f0:	0020      	movs	r0, r4
 80096f2:	f000 f81f 	bl	8009734 <__sfp>
 80096f6:	6060      	str	r0, [r4, #4]
 80096f8:	0020      	movs	r0, r4
 80096fa:	f000 f81b 	bl	8009734 <__sfp>
 80096fe:	60a0      	str	r0, [r4, #8]
 8009700:	0020      	movs	r0, r4
 8009702:	f000 f817 	bl	8009734 <__sfp>
 8009706:	2200      	movs	r2, #0
 8009708:	2104      	movs	r1, #4
 800970a:	60e0      	str	r0, [r4, #12]
 800970c:	6860      	ldr	r0, [r4, #4]
 800970e:	f7ff ff77 	bl	8009600 <std>
 8009712:	2201      	movs	r2, #1
 8009714:	2109      	movs	r1, #9
 8009716:	68a0      	ldr	r0, [r4, #8]
 8009718:	f7ff ff72 	bl	8009600 <std>
 800971c:	2202      	movs	r2, #2
 800971e:	2112      	movs	r1, #18
 8009720:	68e0      	ldr	r0, [r4, #12]
 8009722:	f7ff ff6d 	bl	8009600 <std>
 8009726:	2301      	movs	r3, #1
 8009728:	61a3      	str	r3, [r4, #24]
 800972a:	e7d2      	b.n	80096d2 <__sinit+0xe>
 800972c:	08009d38 	.word	0x08009d38
 8009730:	08009649 	.word	0x08009649

08009734 <__sfp>:
 8009734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009736:	0007      	movs	r7, r0
 8009738:	f7ff ffa4 	bl	8009684 <__sfp_lock_acquire>
 800973c:	4b1f      	ldr	r3, [pc, #124]	; (80097bc <__sfp+0x88>)
 800973e:	681e      	ldr	r6, [r3, #0]
 8009740:	69b3      	ldr	r3, [r6, #24]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d102      	bne.n	800974c <__sfp+0x18>
 8009746:	0030      	movs	r0, r6
 8009748:	f7ff ffbc 	bl	80096c4 <__sinit>
 800974c:	3648      	adds	r6, #72	; 0x48
 800974e:	68b4      	ldr	r4, [r6, #8]
 8009750:	6873      	ldr	r3, [r6, #4]
 8009752:	3b01      	subs	r3, #1
 8009754:	d504      	bpl.n	8009760 <__sfp+0x2c>
 8009756:	6833      	ldr	r3, [r6, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d022      	beq.n	80097a2 <__sfp+0x6e>
 800975c:	6836      	ldr	r6, [r6, #0]
 800975e:	e7f6      	b.n	800974e <__sfp+0x1a>
 8009760:	220c      	movs	r2, #12
 8009762:	5ea5      	ldrsh	r5, [r4, r2]
 8009764:	2d00      	cmp	r5, #0
 8009766:	d11a      	bne.n	800979e <__sfp+0x6a>
 8009768:	0020      	movs	r0, r4
 800976a:	4b15      	ldr	r3, [pc, #84]	; (80097c0 <__sfp+0x8c>)
 800976c:	3058      	adds	r0, #88	; 0x58
 800976e:	60e3      	str	r3, [r4, #12]
 8009770:	6665      	str	r5, [r4, #100]	; 0x64
 8009772:	f000 f847 	bl	8009804 <__retarget_lock_init_recursive>
 8009776:	f7ff ff8d 	bl	8009694 <__sfp_lock_release>
 800977a:	0020      	movs	r0, r4
 800977c:	2208      	movs	r2, #8
 800977e:	0029      	movs	r1, r5
 8009780:	6025      	str	r5, [r4, #0]
 8009782:	60a5      	str	r5, [r4, #8]
 8009784:	6065      	str	r5, [r4, #4]
 8009786:	6125      	str	r5, [r4, #16]
 8009788:	6165      	str	r5, [r4, #20]
 800978a:	61a5      	str	r5, [r4, #24]
 800978c:	305c      	adds	r0, #92	; 0x5c
 800978e:	f7fd fa17 	bl	8006bc0 <memset>
 8009792:	6365      	str	r5, [r4, #52]	; 0x34
 8009794:	63a5      	str	r5, [r4, #56]	; 0x38
 8009796:	64a5      	str	r5, [r4, #72]	; 0x48
 8009798:	64e5      	str	r5, [r4, #76]	; 0x4c
 800979a:	0020      	movs	r0, r4
 800979c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800979e:	3468      	adds	r4, #104	; 0x68
 80097a0:	e7d7      	b.n	8009752 <__sfp+0x1e>
 80097a2:	2104      	movs	r1, #4
 80097a4:	0038      	movs	r0, r7
 80097a6:	f7ff ff57 	bl	8009658 <__sfmoreglue>
 80097aa:	1e04      	subs	r4, r0, #0
 80097ac:	6030      	str	r0, [r6, #0]
 80097ae:	d1d5      	bne.n	800975c <__sfp+0x28>
 80097b0:	f7ff ff70 	bl	8009694 <__sfp_lock_release>
 80097b4:	230c      	movs	r3, #12
 80097b6:	603b      	str	r3, [r7, #0]
 80097b8:	e7ef      	b.n	800979a <__sfp+0x66>
 80097ba:	46c0      	nop			; (mov r8, r8)
 80097bc:	08009d38 	.word	0x08009d38
 80097c0:	ffff0001 	.word	0xffff0001

080097c4 <_fwalk_reent>:
 80097c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097c6:	0004      	movs	r4, r0
 80097c8:	0006      	movs	r6, r0
 80097ca:	2700      	movs	r7, #0
 80097cc:	9101      	str	r1, [sp, #4]
 80097ce:	3448      	adds	r4, #72	; 0x48
 80097d0:	6863      	ldr	r3, [r4, #4]
 80097d2:	68a5      	ldr	r5, [r4, #8]
 80097d4:	9300      	str	r3, [sp, #0]
 80097d6:	9b00      	ldr	r3, [sp, #0]
 80097d8:	3b01      	subs	r3, #1
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	d504      	bpl.n	80097e8 <_fwalk_reent+0x24>
 80097de:	6824      	ldr	r4, [r4, #0]
 80097e0:	2c00      	cmp	r4, #0
 80097e2:	d1f5      	bne.n	80097d0 <_fwalk_reent+0xc>
 80097e4:	0038      	movs	r0, r7
 80097e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097e8:	89ab      	ldrh	r3, [r5, #12]
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d908      	bls.n	8009800 <_fwalk_reent+0x3c>
 80097ee:	220e      	movs	r2, #14
 80097f0:	5eab      	ldrsh	r3, [r5, r2]
 80097f2:	3301      	adds	r3, #1
 80097f4:	d004      	beq.n	8009800 <_fwalk_reent+0x3c>
 80097f6:	0029      	movs	r1, r5
 80097f8:	0030      	movs	r0, r6
 80097fa:	9b01      	ldr	r3, [sp, #4]
 80097fc:	4798      	blx	r3
 80097fe:	4307      	orrs	r7, r0
 8009800:	3568      	adds	r5, #104	; 0x68
 8009802:	e7e8      	b.n	80097d6 <_fwalk_reent+0x12>

08009804 <__retarget_lock_init_recursive>:
 8009804:	4770      	bx	lr

08009806 <__retarget_lock_acquire_recursive>:
 8009806:	4770      	bx	lr

08009808 <__retarget_lock_release_recursive>:
 8009808:	4770      	bx	lr
	...

0800980c <__swhatbuf_r>:
 800980c:	b570      	push	{r4, r5, r6, lr}
 800980e:	000e      	movs	r6, r1
 8009810:	001d      	movs	r5, r3
 8009812:	230e      	movs	r3, #14
 8009814:	5ec9      	ldrsh	r1, [r1, r3]
 8009816:	0014      	movs	r4, r2
 8009818:	b096      	sub	sp, #88	; 0x58
 800981a:	2900      	cmp	r1, #0
 800981c:	da08      	bge.n	8009830 <__swhatbuf_r+0x24>
 800981e:	220c      	movs	r2, #12
 8009820:	5eb3      	ldrsh	r3, [r6, r2]
 8009822:	2200      	movs	r2, #0
 8009824:	602a      	str	r2, [r5, #0]
 8009826:	061b      	lsls	r3, r3, #24
 8009828:	d411      	bmi.n	800984e <__swhatbuf_r+0x42>
 800982a:	2380      	movs	r3, #128	; 0x80
 800982c:	00db      	lsls	r3, r3, #3
 800982e:	e00f      	b.n	8009850 <__swhatbuf_r+0x44>
 8009830:	466a      	mov	r2, sp
 8009832:	f000 f91b 	bl	8009a6c <_fstat_r>
 8009836:	2800      	cmp	r0, #0
 8009838:	dbf1      	blt.n	800981e <__swhatbuf_r+0x12>
 800983a:	23f0      	movs	r3, #240	; 0xf0
 800983c:	9901      	ldr	r1, [sp, #4]
 800983e:	021b      	lsls	r3, r3, #8
 8009840:	4019      	ands	r1, r3
 8009842:	4b05      	ldr	r3, [pc, #20]	; (8009858 <__swhatbuf_r+0x4c>)
 8009844:	18c9      	adds	r1, r1, r3
 8009846:	424b      	negs	r3, r1
 8009848:	4159      	adcs	r1, r3
 800984a:	6029      	str	r1, [r5, #0]
 800984c:	e7ed      	b.n	800982a <__swhatbuf_r+0x1e>
 800984e:	2340      	movs	r3, #64	; 0x40
 8009850:	2000      	movs	r0, #0
 8009852:	6023      	str	r3, [r4, #0]
 8009854:	b016      	add	sp, #88	; 0x58
 8009856:	bd70      	pop	{r4, r5, r6, pc}
 8009858:	ffffe000 	.word	0xffffe000

0800985c <__smakebuf_r>:
 800985c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800985e:	2602      	movs	r6, #2
 8009860:	898b      	ldrh	r3, [r1, #12]
 8009862:	0005      	movs	r5, r0
 8009864:	000c      	movs	r4, r1
 8009866:	4233      	tst	r3, r6
 8009868:	d006      	beq.n	8009878 <__smakebuf_r+0x1c>
 800986a:	0023      	movs	r3, r4
 800986c:	3347      	adds	r3, #71	; 0x47
 800986e:	6023      	str	r3, [r4, #0]
 8009870:	6123      	str	r3, [r4, #16]
 8009872:	2301      	movs	r3, #1
 8009874:	6163      	str	r3, [r4, #20]
 8009876:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009878:	466a      	mov	r2, sp
 800987a:	ab01      	add	r3, sp, #4
 800987c:	f7ff ffc6 	bl	800980c <__swhatbuf_r>
 8009880:	9900      	ldr	r1, [sp, #0]
 8009882:	0007      	movs	r7, r0
 8009884:	0028      	movs	r0, r5
 8009886:	f7ff f92d 	bl	8008ae4 <_malloc_r>
 800988a:	2800      	cmp	r0, #0
 800988c:	d108      	bne.n	80098a0 <__smakebuf_r+0x44>
 800988e:	220c      	movs	r2, #12
 8009890:	5ea3      	ldrsh	r3, [r4, r2]
 8009892:	059a      	lsls	r2, r3, #22
 8009894:	d4ef      	bmi.n	8009876 <__smakebuf_r+0x1a>
 8009896:	2203      	movs	r2, #3
 8009898:	4393      	bics	r3, r2
 800989a:	431e      	orrs	r6, r3
 800989c:	81a6      	strh	r6, [r4, #12]
 800989e:	e7e4      	b.n	800986a <__smakebuf_r+0xe>
 80098a0:	4b0f      	ldr	r3, [pc, #60]	; (80098e0 <__smakebuf_r+0x84>)
 80098a2:	62ab      	str	r3, [r5, #40]	; 0x28
 80098a4:	2380      	movs	r3, #128	; 0x80
 80098a6:	89a2      	ldrh	r2, [r4, #12]
 80098a8:	6020      	str	r0, [r4, #0]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	81a3      	strh	r3, [r4, #12]
 80098ae:	9b00      	ldr	r3, [sp, #0]
 80098b0:	6120      	str	r0, [r4, #16]
 80098b2:	6163      	str	r3, [r4, #20]
 80098b4:	9b01      	ldr	r3, [sp, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00d      	beq.n	80098d6 <__smakebuf_r+0x7a>
 80098ba:	0028      	movs	r0, r5
 80098bc:	230e      	movs	r3, #14
 80098be:	5ee1      	ldrsh	r1, [r4, r3]
 80098c0:	f000 f8e6 	bl	8009a90 <_isatty_r>
 80098c4:	2800      	cmp	r0, #0
 80098c6:	d006      	beq.n	80098d6 <__smakebuf_r+0x7a>
 80098c8:	2203      	movs	r2, #3
 80098ca:	89a3      	ldrh	r3, [r4, #12]
 80098cc:	4393      	bics	r3, r2
 80098ce:	001a      	movs	r2, r3
 80098d0:	2301      	movs	r3, #1
 80098d2:	4313      	orrs	r3, r2
 80098d4:	81a3      	strh	r3, [r4, #12]
 80098d6:	89a0      	ldrh	r0, [r4, #12]
 80098d8:	4307      	orrs	r7, r0
 80098da:	81a7      	strh	r7, [r4, #12]
 80098dc:	e7cb      	b.n	8009876 <__smakebuf_r+0x1a>
 80098de:	46c0      	nop			; (mov r8, r8)
 80098e0:	08009649 	.word	0x08009649

080098e4 <_malloc_usable_size_r>:
 80098e4:	1f0b      	subs	r3, r1, #4
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	1f18      	subs	r0, r3, #4
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	da01      	bge.n	80098f2 <_malloc_usable_size_r+0xe>
 80098ee:	580b      	ldr	r3, [r1, r0]
 80098f0:	18c0      	adds	r0, r0, r3
 80098f2:	4770      	bx	lr

080098f4 <_raise_r>:
 80098f4:	b570      	push	{r4, r5, r6, lr}
 80098f6:	0004      	movs	r4, r0
 80098f8:	000d      	movs	r5, r1
 80098fa:	291f      	cmp	r1, #31
 80098fc:	d904      	bls.n	8009908 <_raise_r+0x14>
 80098fe:	2316      	movs	r3, #22
 8009900:	6003      	str	r3, [r0, #0]
 8009902:	2001      	movs	r0, #1
 8009904:	4240      	negs	r0, r0
 8009906:	bd70      	pop	{r4, r5, r6, pc}
 8009908:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800990a:	2b00      	cmp	r3, #0
 800990c:	d004      	beq.n	8009918 <_raise_r+0x24>
 800990e:	008a      	lsls	r2, r1, #2
 8009910:	189b      	adds	r3, r3, r2
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	2a00      	cmp	r2, #0
 8009916:	d108      	bne.n	800992a <_raise_r+0x36>
 8009918:	0020      	movs	r0, r4
 800991a:	f000 f831 	bl	8009980 <_getpid_r>
 800991e:	002a      	movs	r2, r5
 8009920:	0001      	movs	r1, r0
 8009922:	0020      	movs	r0, r4
 8009924:	f000 f81a 	bl	800995c <_kill_r>
 8009928:	e7ed      	b.n	8009906 <_raise_r+0x12>
 800992a:	2000      	movs	r0, #0
 800992c:	2a01      	cmp	r2, #1
 800992e:	d0ea      	beq.n	8009906 <_raise_r+0x12>
 8009930:	1c51      	adds	r1, r2, #1
 8009932:	d103      	bne.n	800993c <_raise_r+0x48>
 8009934:	2316      	movs	r3, #22
 8009936:	3001      	adds	r0, #1
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	e7e4      	b.n	8009906 <_raise_r+0x12>
 800993c:	2400      	movs	r4, #0
 800993e:	0028      	movs	r0, r5
 8009940:	601c      	str	r4, [r3, #0]
 8009942:	4790      	blx	r2
 8009944:	0020      	movs	r0, r4
 8009946:	e7de      	b.n	8009906 <_raise_r+0x12>

08009948 <raise>:
 8009948:	b510      	push	{r4, lr}
 800994a:	4b03      	ldr	r3, [pc, #12]	; (8009958 <raise+0x10>)
 800994c:	0001      	movs	r1, r0
 800994e:	6818      	ldr	r0, [r3, #0]
 8009950:	f7ff ffd0 	bl	80098f4 <_raise_r>
 8009954:	bd10      	pop	{r4, pc}
 8009956:	46c0      	nop			; (mov r8, r8)
 8009958:	2000000c 	.word	0x2000000c

0800995c <_kill_r>:
 800995c:	2300      	movs	r3, #0
 800995e:	b570      	push	{r4, r5, r6, lr}
 8009960:	4d06      	ldr	r5, [pc, #24]	; (800997c <_kill_r+0x20>)
 8009962:	0004      	movs	r4, r0
 8009964:	0008      	movs	r0, r1
 8009966:	0011      	movs	r1, r2
 8009968:	602b      	str	r3, [r5, #0]
 800996a:	f7f9 ffd2 	bl	8003912 <_kill>
 800996e:	1c43      	adds	r3, r0, #1
 8009970:	d103      	bne.n	800997a <_kill_r+0x1e>
 8009972:	682b      	ldr	r3, [r5, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d000      	beq.n	800997a <_kill_r+0x1e>
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	bd70      	pop	{r4, r5, r6, pc}
 800997c:	2000030c 	.word	0x2000030c

08009980 <_getpid_r>:
 8009980:	b510      	push	{r4, lr}
 8009982:	f7f9 ffc0 	bl	8003906 <_getpid>
 8009986:	bd10      	pop	{r4, pc}

08009988 <__sread>:
 8009988:	b570      	push	{r4, r5, r6, lr}
 800998a:	000c      	movs	r4, r1
 800998c:	250e      	movs	r5, #14
 800998e:	5f49      	ldrsh	r1, [r1, r5]
 8009990:	f000 f8a4 	bl	8009adc <_read_r>
 8009994:	2800      	cmp	r0, #0
 8009996:	db03      	blt.n	80099a0 <__sread+0x18>
 8009998:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800999a:	181b      	adds	r3, r3, r0
 800999c:	6563      	str	r3, [r4, #84]	; 0x54
 800999e:	bd70      	pop	{r4, r5, r6, pc}
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	4a02      	ldr	r2, [pc, #8]	; (80099ac <__sread+0x24>)
 80099a4:	4013      	ands	r3, r2
 80099a6:	81a3      	strh	r3, [r4, #12]
 80099a8:	e7f9      	b.n	800999e <__sread+0x16>
 80099aa:	46c0      	nop			; (mov r8, r8)
 80099ac:	ffffefff 	.word	0xffffefff

080099b0 <__swrite>:
 80099b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b2:	001f      	movs	r7, r3
 80099b4:	898b      	ldrh	r3, [r1, #12]
 80099b6:	0005      	movs	r5, r0
 80099b8:	000c      	movs	r4, r1
 80099ba:	0016      	movs	r6, r2
 80099bc:	05db      	lsls	r3, r3, #23
 80099be:	d505      	bpl.n	80099cc <__swrite+0x1c>
 80099c0:	230e      	movs	r3, #14
 80099c2:	5ec9      	ldrsh	r1, [r1, r3]
 80099c4:	2200      	movs	r2, #0
 80099c6:	2302      	movs	r3, #2
 80099c8:	f000 f874 	bl	8009ab4 <_lseek_r>
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	4a05      	ldr	r2, [pc, #20]	; (80099e4 <__swrite+0x34>)
 80099d0:	0028      	movs	r0, r5
 80099d2:	4013      	ands	r3, r2
 80099d4:	81a3      	strh	r3, [r4, #12]
 80099d6:	0032      	movs	r2, r6
 80099d8:	230e      	movs	r3, #14
 80099da:	5ee1      	ldrsh	r1, [r4, r3]
 80099dc:	003b      	movs	r3, r7
 80099de:	f000 f81f 	bl	8009a20 <_write_r>
 80099e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099e4:	ffffefff 	.word	0xffffefff

080099e8 <__sseek>:
 80099e8:	b570      	push	{r4, r5, r6, lr}
 80099ea:	000c      	movs	r4, r1
 80099ec:	250e      	movs	r5, #14
 80099ee:	5f49      	ldrsh	r1, [r1, r5]
 80099f0:	f000 f860 	bl	8009ab4 <_lseek_r>
 80099f4:	89a3      	ldrh	r3, [r4, #12]
 80099f6:	1c42      	adds	r2, r0, #1
 80099f8:	d103      	bne.n	8009a02 <__sseek+0x1a>
 80099fa:	4a05      	ldr	r2, [pc, #20]	; (8009a10 <__sseek+0x28>)
 80099fc:	4013      	ands	r3, r2
 80099fe:	81a3      	strh	r3, [r4, #12]
 8009a00:	bd70      	pop	{r4, r5, r6, pc}
 8009a02:	2280      	movs	r2, #128	; 0x80
 8009a04:	0152      	lsls	r2, r2, #5
 8009a06:	4313      	orrs	r3, r2
 8009a08:	81a3      	strh	r3, [r4, #12]
 8009a0a:	6560      	str	r0, [r4, #84]	; 0x54
 8009a0c:	e7f8      	b.n	8009a00 <__sseek+0x18>
 8009a0e:	46c0      	nop			; (mov r8, r8)
 8009a10:	ffffefff 	.word	0xffffefff

08009a14 <__sclose>:
 8009a14:	b510      	push	{r4, lr}
 8009a16:	230e      	movs	r3, #14
 8009a18:	5ec9      	ldrsh	r1, [r1, r3]
 8009a1a:	f000 f815 	bl	8009a48 <_close_r>
 8009a1e:	bd10      	pop	{r4, pc}

08009a20 <_write_r>:
 8009a20:	b570      	push	{r4, r5, r6, lr}
 8009a22:	0004      	movs	r4, r0
 8009a24:	0008      	movs	r0, r1
 8009a26:	0011      	movs	r1, r2
 8009a28:	001a      	movs	r2, r3
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	4d05      	ldr	r5, [pc, #20]	; (8009a44 <_write_r+0x24>)
 8009a2e:	602b      	str	r3, [r5, #0]
 8009a30:	f7f9 ffa8 	bl	8003984 <_write>
 8009a34:	1c43      	adds	r3, r0, #1
 8009a36:	d103      	bne.n	8009a40 <_write_r+0x20>
 8009a38:	682b      	ldr	r3, [r5, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d000      	beq.n	8009a40 <_write_r+0x20>
 8009a3e:	6023      	str	r3, [r4, #0]
 8009a40:	bd70      	pop	{r4, r5, r6, pc}
 8009a42:	46c0      	nop			; (mov r8, r8)
 8009a44:	2000030c 	.word	0x2000030c

08009a48 <_close_r>:
 8009a48:	2300      	movs	r3, #0
 8009a4a:	b570      	push	{r4, r5, r6, lr}
 8009a4c:	4d06      	ldr	r5, [pc, #24]	; (8009a68 <_close_r+0x20>)
 8009a4e:	0004      	movs	r4, r0
 8009a50:	0008      	movs	r0, r1
 8009a52:	602b      	str	r3, [r5, #0]
 8009a54:	f7f9 ffb2 	bl	80039bc <_close>
 8009a58:	1c43      	adds	r3, r0, #1
 8009a5a:	d103      	bne.n	8009a64 <_close_r+0x1c>
 8009a5c:	682b      	ldr	r3, [r5, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d000      	beq.n	8009a64 <_close_r+0x1c>
 8009a62:	6023      	str	r3, [r4, #0]
 8009a64:	bd70      	pop	{r4, r5, r6, pc}
 8009a66:	46c0      	nop			; (mov r8, r8)
 8009a68:	2000030c 	.word	0x2000030c

08009a6c <_fstat_r>:
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	b570      	push	{r4, r5, r6, lr}
 8009a70:	4d06      	ldr	r5, [pc, #24]	; (8009a8c <_fstat_r+0x20>)
 8009a72:	0004      	movs	r4, r0
 8009a74:	0008      	movs	r0, r1
 8009a76:	0011      	movs	r1, r2
 8009a78:	602b      	str	r3, [r5, #0]
 8009a7a:	f7f9 ffa9 	bl	80039d0 <_fstat>
 8009a7e:	1c43      	adds	r3, r0, #1
 8009a80:	d103      	bne.n	8009a8a <_fstat_r+0x1e>
 8009a82:	682b      	ldr	r3, [r5, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d000      	beq.n	8009a8a <_fstat_r+0x1e>
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	bd70      	pop	{r4, r5, r6, pc}
 8009a8c:	2000030c 	.word	0x2000030c

08009a90 <_isatty_r>:
 8009a90:	2300      	movs	r3, #0
 8009a92:	b570      	push	{r4, r5, r6, lr}
 8009a94:	4d06      	ldr	r5, [pc, #24]	; (8009ab0 <_isatty_r+0x20>)
 8009a96:	0004      	movs	r4, r0
 8009a98:	0008      	movs	r0, r1
 8009a9a:	602b      	str	r3, [r5, #0]
 8009a9c:	f7f9 ffa6 	bl	80039ec <_isatty>
 8009aa0:	1c43      	adds	r3, r0, #1
 8009aa2:	d103      	bne.n	8009aac <_isatty_r+0x1c>
 8009aa4:	682b      	ldr	r3, [r5, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d000      	beq.n	8009aac <_isatty_r+0x1c>
 8009aaa:	6023      	str	r3, [r4, #0]
 8009aac:	bd70      	pop	{r4, r5, r6, pc}
 8009aae:	46c0      	nop			; (mov r8, r8)
 8009ab0:	2000030c 	.word	0x2000030c

08009ab4 <_lseek_r>:
 8009ab4:	b570      	push	{r4, r5, r6, lr}
 8009ab6:	0004      	movs	r4, r0
 8009ab8:	0008      	movs	r0, r1
 8009aba:	0011      	movs	r1, r2
 8009abc:	001a      	movs	r2, r3
 8009abe:	2300      	movs	r3, #0
 8009ac0:	4d05      	ldr	r5, [pc, #20]	; (8009ad8 <_lseek_r+0x24>)
 8009ac2:	602b      	str	r3, [r5, #0]
 8009ac4:	f7f9 ff9b 	bl	80039fe <_lseek>
 8009ac8:	1c43      	adds	r3, r0, #1
 8009aca:	d103      	bne.n	8009ad4 <_lseek_r+0x20>
 8009acc:	682b      	ldr	r3, [r5, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d000      	beq.n	8009ad4 <_lseek_r+0x20>
 8009ad2:	6023      	str	r3, [r4, #0]
 8009ad4:	bd70      	pop	{r4, r5, r6, pc}
 8009ad6:	46c0      	nop			; (mov r8, r8)
 8009ad8:	2000030c 	.word	0x2000030c

08009adc <_read_r>:
 8009adc:	b570      	push	{r4, r5, r6, lr}
 8009ade:	0004      	movs	r4, r0
 8009ae0:	0008      	movs	r0, r1
 8009ae2:	0011      	movs	r1, r2
 8009ae4:	001a      	movs	r2, r3
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	4d05      	ldr	r5, [pc, #20]	; (8009b00 <_read_r+0x24>)
 8009aea:	602b      	str	r3, [r5, #0]
 8009aec:	f7f9 ff2d 	bl	800394a <_read>
 8009af0:	1c43      	adds	r3, r0, #1
 8009af2:	d103      	bne.n	8009afc <_read_r+0x20>
 8009af4:	682b      	ldr	r3, [r5, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d000      	beq.n	8009afc <_read_r+0x20>
 8009afa:	6023      	str	r3, [r4, #0]
 8009afc:	bd70      	pop	{r4, r5, r6, pc}
 8009afe:	46c0      	nop			; (mov r8, r8)
 8009b00:	2000030c 	.word	0x2000030c

08009b04 <_init>:
 8009b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b06:	46c0      	nop			; (mov r8, r8)
 8009b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b0a:	bc08      	pop	{r3}
 8009b0c:	469e      	mov	lr, r3
 8009b0e:	4770      	bx	lr

08009b10 <_fini>:
 8009b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b12:	46c0      	nop			; (mov r8, r8)
 8009b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b16:	bc08      	pop	{r3}
 8009b18:	469e      	mov	lr, r3
 8009b1a:	4770      	bx	lr
