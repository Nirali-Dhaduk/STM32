
UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fc4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003084  08003084  00013084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030f0  080030f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080030f0  080030f0  000130f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030f8  080030f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030f8  080030f8  000130f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030fc  080030fc  000130fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  0800310c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  0800310c  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f72  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000169e  00000000  00000000  00028fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  0002a648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a8  00000000  00000000  0002ad78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013853  00000000  00000000  0002b420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000955a  00000000  00000000  0003ec73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007799b  00000000  00000000  000481cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bfb68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018c0  00000000  00000000  000bfbb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800306c 	.word	0x0800306c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800306c 	.word	0x0800306c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fa4a 	bl	8000944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f812 	bl	80004d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f8c6 	bl	8000644 <MX_GPIO_Init>
  MX_DMA_Init();
 80004b8:	f000 f8a6 	bl	8000608 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004bc:	f000 f874 	bl	80005a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//	HAL_UART_Transmit_DMA(&huart1, TxData, sizeof(TxData));
	HAL_UART_Receive_DMA(&huart1, RxData, sizeof(RxData));
 80004c0:	4903      	ldr	r1, [pc, #12]	; (80004d0 <main+0x28>)
 80004c2:	4b04      	ldr	r3, [pc, #16]	; (80004d4 <main+0x2c>)
 80004c4:	2205      	movs	r2, #5
 80004c6:	0018      	movs	r0, r3
 80004c8:	f001 febc 	bl	8002244 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80004cc:	e7fe      	b.n	80004cc <main+0x24>
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	20000140 	.word	0x20000140
 80004d4:	20000028 	.word	0x20000028

080004d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b09d      	sub	sp, #116	; 0x74
 80004dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004de:	2438      	movs	r4, #56	; 0x38
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	0018      	movs	r0, r3
 80004e4:	2338      	movs	r3, #56	; 0x38
 80004e6:	001a      	movs	r2, r3
 80004e8:	2100      	movs	r1, #0
 80004ea:	f002 fdb7 	bl	800305c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ee:	2324      	movs	r3, #36	; 0x24
 80004f0:	18fb      	adds	r3, r7, r3
 80004f2:	0018      	movs	r0, r3
 80004f4:	2314      	movs	r3, #20
 80004f6:	001a      	movs	r2, r3
 80004f8:	2100      	movs	r1, #0
 80004fa:	f002 fdaf 	bl	800305c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004fe:	003b      	movs	r3, r7
 8000500:	0018      	movs	r0, r3
 8000502:	2324      	movs	r3, #36	; 0x24
 8000504:	001a      	movs	r2, r3
 8000506:	2100      	movs	r1, #0
 8000508:	f002 fda8 	bl	800305c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800050c:	4b24      	ldr	r3, [pc, #144]	; (80005a0 <SystemClock_Config+0xc8>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a24      	ldr	r2, [pc, #144]	; (80005a4 <SystemClock_Config+0xcc>)
 8000512:	401a      	ands	r2, r3
 8000514:	4b22      	ldr	r3, [pc, #136]	; (80005a0 <SystemClock_Config+0xc8>)
 8000516:	2180      	movs	r1, #128	; 0x80
 8000518:	0109      	lsls	r1, r1, #4
 800051a:	430a      	orrs	r2, r1
 800051c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800051e:	0021      	movs	r1, r4
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2202      	movs	r2, #2
 8000524:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2201      	movs	r2, #1
 800052a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2210      	movs	r2, #16
 8000530:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2200      	movs	r2, #0
 8000536:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000538:	187b      	adds	r3, r7, r1
 800053a:	0018      	movs	r0, r3
 800053c:	f000 feb8 	bl	80012b0 <HAL_RCC_OscConfig>
 8000540:	1e03      	subs	r3, r0, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000544:	f000 f8ea 	bl	800071c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000548:	2124      	movs	r1, #36	; 0x24
 800054a:	187b      	adds	r3, r7, r1
 800054c:	220f      	movs	r2, #15
 800054e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2201      	movs	r2, #1
 8000554:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2100      	movs	r1, #0
 800056c:	0018      	movs	r0, r3
 800056e:	f001 fa63 	bl	8001a38 <HAL_RCC_ClockConfig>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000576:	f000 f8d1 	bl	800071c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800057a:	003b      	movs	r3, r7
 800057c:	2201      	movs	r2, #1
 800057e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000580:	003b      	movs	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000586:	003b      	movs	r3, r7
 8000588:	0018      	movs	r0, r3
 800058a:	f001 fc79 	bl	8001e80 <HAL_RCCEx_PeriphCLKConfig>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000592:	f000 f8c3 	bl	800071c <Error_Handler>
  }
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b01d      	add	sp, #116	; 0x74
 800059c:	bd90      	pop	{r4, r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	40007000 	.word	0x40007000
 80005a4:	ffffe7ff 	.word	0xffffe7ff

080005a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_USART1_UART_Init+0x58>)
 80005ae:	4a15      	ldr	r2, [pc, #84]	; (8000604 <MX_USART1_UART_Init+0x5c>)
 80005b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <MX_USART1_UART_Init+0x58>)
 80005b4:	22e1      	movs	r2, #225	; 0xe1
 80005b6:	0252      	lsls	r2, r2, #9
 80005b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_USART1_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_USART1_UART_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_USART1_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_USART1_UART_Init+0x58>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_USART1_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_USART1_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <MX_USART1_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_USART1_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <MX_USART1_UART_Init+0x58>)
 80005ec:	0018      	movs	r0, r3
 80005ee:	f001 fdd5 	bl	800219c <HAL_UART_Init>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005f6:	f000 f891 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000028 	.word	0x20000028
 8000604:	40013800 	.word	0x40013800

08000608 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_DMA_Init+0x38>)
 8000610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <MX_DMA_Init+0x38>)
 8000614:	2101      	movs	r1, #1
 8000616:	430a      	orrs	r2, r1
 8000618:	631a      	str	r2, [r3, #48]	; 0x30
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_DMA_Init+0x38>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	2201      	movs	r2, #1
 8000620:	4013      	ands	r3, r2
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	200a      	movs	r0, #10
 800062c:	f000 faa6 	bl	8000b7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000630:	200a      	movs	r0, #10
 8000632:	f000 fab8 	bl	8000ba6 <HAL_NVIC_EnableIRQ>

}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	b002      	add	sp, #8
 800063c:	bd80      	pop	{r7, pc}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	40021000 	.word	0x40021000

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b08b      	sub	sp, #44	; 0x2c
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	2414      	movs	r4, #20
 800064c:	193b      	adds	r3, r7, r4
 800064e:	0018      	movs	r0, r3
 8000650:	2314      	movs	r3, #20
 8000652:	001a      	movs	r2, r3
 8000654:	2100      	movs	r1, #0
 8000656:	f002 fd01 	bl	800305c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <MX_GPIO_Init+0xb0>)
 800065c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800065e:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <MX_GPIO_Init+0xb0>)
 8000660:	2104      	movs	r1, #4
 8000662:	430a      	orrs	r2, r1
 8000664:	62da      	str	r2, [r3, #44]	; 0x2c
 8000666:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <MX_GPIO_Init+0xb0>)
 8000668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800066a:	2204      	movs	r2, #4
 800066c:	4013      	ands	r3, r2
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <MX_GPIO_Init+0xb0>)
 8000674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000676:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <MX_GPIO_Init+0xb0>)
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	430a      	orrs	r2, r1
 800067c:	62da      	str	r2, [r3, #44]	; 0x2c
 800067e:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <MX_GPIO_Init+0xb0>)
 8000680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	4013      	ands	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_GPIO_Init+0xb0>)
 800068c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_GPIO_Init+0xb0>)
 8000690:	2101      	movs	r1, #1
 8000692:	430a      	orrs	r2, r1
 8000694:	62da      	str	r2, [r3, #44]	; 0x2c
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_GPIO_Init+0xb0>)
 8000698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069a:	2201      	movs	r2, #1
 800069c:	4013      	ands	r3, r2
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_GPIO_Init+0xb0>)
 80006a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_GPIO_Init+0xb0>)
 80006a8:	2102      	movs	r1, #2
 80006aa:	430a      	orrs	r2, r1
 80006ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_GPIO_Init+0xb0>)
 80006b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b2:	2202      	movs	r2, #2
 80006b4:	4013      	ands	r3, r2
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin, GPIO_PIN_RESET);
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_GPIO_Init+0xb4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	2110      	movs	r1, #16
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 fdbd 	bl	8001240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_GREEN_LED_Pin */
  GPIO_InitStruct.Pin = BSP_GREEN_LED_Pin;
 80006c6:	0021      	movs	r1, r4
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2210      	movs	r2, #16
 80006cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2201      	movs	r2, #1
 80006d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	4a05      	ldr	r2, [pc, #20]	; (80006f8 <MX_GPIO_Init+0xb4>)
 80006e4:	0019      	movs	r1, r3
 80006e6:	0010      	movs	r0, r2
 80006e8:	f000 fc34 	bl	8000f54 <HAL_GPIO_Init>

}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b00b      	add	sp, #44	; 0x2c
 80006f2:	bd90      	pop	{r4, r7, pc}
 80006f4:	40021000 	.word	0x40021000
 80006f8:	50000400 	.word	0x50000400

080006fc <HAL_UART_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
//void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart) {
//	HAL_GPIO_TogglePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin);
//}
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

//	HAL_UART_Transmit(huart, RxData, sizeof(RxData),1000);
	HAL_GPIO_TogglePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin);
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <HAL_UART_RxHalfCpltCallback+0x1c>)
 8000706:	2110      	movs	r1, #16
 8000708:	0018      	movs	r0, r3
 800070a:	f000 fdb6 	bl	800127a <HAL_GPIO_TogglePin>
}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b002      	add	sp, #8
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	50000400 	.word	0x50000400

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000724:	e7fe      	b.n	8000724 <Error_Handler+0x8>
	...

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <HAL_MspInit+0x24>)
 800072e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_MspInit+0x24>)
 8000732:	2101      	movs	r1, #1
 8000734:	430a      	orrs	r2, r1
 8000736:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <HAL_MspInit+0x24>)
 800073a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <HAL_MspInit+0x24>)
 800073e:	2180      	movs	r1, #128	; 0x80
 8000740:	0549      	lsls	r1, r1, #21
 8000742:	430a      	orrs	r2, r1
 8000744:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40021000 	.word	0x40021000

08000750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b089      	sub	sp, #36	; 0x24
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	240c      	movs	r4, #12
 800075a:	193b      	adds	r3, r7, r4
 800075c:	0018      	movs	r0, r3
 800075e:	2314      	movs	r3, #20
 8000760:	001a      	movs	r2, r3
 8000762:	2100      	movs	r1, #0
 8000764:	f002 fc7a 	bl	800305c <memset>
  if(huart->Instance==USART1)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a42      	ldr	r2, [pc, #264]	; (8000878 <HAL_UART_MspInit+0x128>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d000      	beq.n	8000774 <HAL_UART_MspInit+0x24>
 8000772:	e07c      	b.n	800086e <HAL_UART_MspInit+0x11e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000774:	4b41      	ldr	r3, [pc, #260]	; (800087c <HAL_UART_MspInit+0x12c>)
 8000776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000778:	4b40      	ldr	r3, [pc, #256]	; (800087c <HAL_UART_MspInit+0x12c>)
 800077a:	2180      	movs	r1, #128	; 0x80
 800077c:	01c9      	lsls	r1, r1, #7
 800077e:	430a      	orrs	r2, r1
 8000780:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b3e      	ldr	r3, [pc, #248]	; (800087c <HAL_UART_MspInit+0x12c>)
 8000784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000786:	4b3d      	ldr	r3, [pc, #244]	; (800087c <HAL_UART_MspInit+0x12c>)
 8000788:	2101      	movs	r1, #1
 800078a:	430a      	orrs	r2, r1
 800078c:	62da      	str	r2, [r3, #44]	; 0x2c
 800078e:	4b3b      	ldr	r3, [pc, #236]	; (800087c <HAL_UART_MspInit+0x12c>)
 8000790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000792:	2201      	movs	r2, #1
 8000794:	4013      	ands	r3, r2
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800079a:	193b      	adds	r3, r7, r4
 800079c:	22c0      	movs	r2, #192	; 0xc0
 800079e:	00d2      	lsls	r2, r2, #3
 80007a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	0021      	movs	r1, r4
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2202      	movs	r2, #2
 80007a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2203      	movs	r2, #3
 80007b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2204      	movs	r2, #4
 80007ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	187a      	adds	r2, r7, r1
 80007be:	23a0      	movs	r3, #160	; 0xa0
 80007c0:	05db      	lsls	r3, r3, #23
 80007c2:	0011      	movs	r1, r2
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 fbc5 	bl	8000f54 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80007ca:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <HAL_UART_MspInit+0x130>)
 80007cc:	4a2d      	ldr	r2, [pc, #180]	; (8000884 <HAL_UART_MspInit+0x134>)
 80007ce:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 80007d0:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <HAL_UART_MspInit+0x130>)
 80007d2:	2203      	movs	r2, #3
 80007d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007d6:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <HAL_UART_MspInit+0x130>)
 80007d8:	2210      	movs	r2, #16
 80007da:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007dc:	4b28      	ldr	r3, [pc, #160]	; (8000880 <HAL_UART_MspInit+0x130>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007e2:	4b27      	ldr	r3, [pc, #156]	; (8000880 <HAL_UART_MspInit+0x130>)
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007e8:	4b25      	ldr	r3, [pc, #148]	; (8000880 <HAL_UART_MspInit+0x130>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007ee:	4b24      	ldr	r3, [pc, #144]	; (8000880 <HAL_UART_MspInit+0x130>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <HAL_UART_MspInit+0x130>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007fa:	4b21      	ldr	r3, [pc, #132]	; (8000880 <HAL_UART_MspInit+0x130>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000800:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <HAL_UART_MspInit+0x130>)
 8000802:	0018      	movs	r0, r3
 8000804:	f000 f9ec 	bl	8000be0 <HAL_DMA_Init>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800080c:	f7ff ff86 	bl	800071c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <HAL_UART_MspInit+0x130>)
 8000814:	671a      	str	r2, [r3, #112]	; 0x70
 8000816:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <HAL_UART_MspInit+0x130>)
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <HAL_UART_MspInit+0x138>)
 800081e:	4a1b      	ldr	r2, [pc, #108]	; (800088c <HAL_UART_MspInit+0x13c>)
 8000820:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8000822:	4b19      	ldr	r3, [pc, #100]	; (8000888 <HAL_UART_MspInit+0x138>)
 8000824:	2203      	movs	r2, #3
 8000826:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <HAL_UART_MspInit+0x138>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <HAL_UART_MspInit+0x138>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <HAL_UART_MspInit+0x138>)
 8000836:	2280      	movs	r2, #128	; 0x80
 8000838:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <HAL_UART_MspInit+0x138>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <HAL_UART_MspInit+0x138>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <HAL_UART_MspInit+0x138>)
 8000848:	2200      	movs	r2, #0
 800084a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <HAL_UART_MspInit+0x138>)
 800084e:	2200      	movs	r2, #0
 8000850:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <HAL_UART_MspInit+0x138>)
 8000854:	0018      	movs	r0, r3
 8000856:	f000 f9c3 	bl	8000be0 <HAL_DMA_Init>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800085e:	f7ff ff5d 	bl	800071c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a08      	ldr	r2, [pc, #32]	; (8000888 <HAL_UART_MspInit+0x138>)
 8000866:	675a      	str	r2, [r3, #116]	; 0x74
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <HAL_UART_MspInit+0x138>)
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b009      	add	sp, #36	; 0x24
 8000874:	bd90      	pop	{r4, r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	40013800 	.word	0x40013800
 800087c:	40021000 	.word	0x40021000
 8000880:	200000b0 	.word	0x200000b0
 8000884:	4002001c 	.word	0x4002001c
 8000888:	200000f8 	.word	0x200000f8
 800088c:	40020030 	.word	0x40020030

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <NMI_Handler+0x4>

08000896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <HardFault_Handler+0x4>

0800089c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b4:	f000 f89a 	bl	80009ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <DMA1_Channel2_3_IRQHandler+0x1c>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 fa68 	bl	8000d9c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <DMA1_Channel2_3_IRQHandler+0x20>)
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 fa64 	bl	8000d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	200000b0 	.word	0x200000b0
 80008e0:	200000f8 	.word	0x200000f8

080008e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80008f0:	480d      	ldr	r0, [pc, #52]	; (8000928 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008f2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008f4:	f7ff fff6 	bl	80008e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <LoopForever+0x6>)
  ldr r1, =_edata
 80008fa:	490d      	ldr	r1, [pc, #52]	; (8000930 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008fc:	4a0d      	ldr	r2, [pc, #52]	; (8000934 <LoopForever+0xe>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000900:	e002      	b.n	8000908 <LoopCopyDataInit>

08000902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000906:	3304      	adds	r3, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800090c:	d3f9      	bcc.n	8000902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090e:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000910:	4c0a      	ldr	r4, [pc, #40]	; (800093c <LoopForever+0x16>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000914:	e001      	b.n	800091a <LoopFillZerobss>

08000916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000918:	3204      	adds	r2, #4

0800091a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800091c:	d3fb      	bcc.n	8000916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091e:	f002 fb79 	bl	8003014 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000922:	f7ff fdc1 	bl	80004a8 <main>

08000926 <LoopForever>:

LoopForever:
    b LoopForever
 8000926:	e7fe      	b.n	8000926 <LoopForever>
  ldr   r0, =_estack
 8000928:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800092c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000930:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000934:	08003100 	.word	0x08003100
  ldr r2, =_sbss
 8000938:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800093c:	2000014c 	.word	0x2000014c

08000940 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC1_COMP_IRQHandler>
	...

08000944 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <HAL_Init+0x3c>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <HAL_Init+0x3c>)
 8000956:	2140      	movs	r1, #64	; 0x40
 8000958:	430a      	orrs	r2, r1
 800095a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800095c:	2000      	movs	r0, #0
 800095e:	f000 f811 	bl	8000984 <HAL_InitTick>
 8000962:	1e03      	subs	r3, r0, #0
 8000964:	d003      	beq.n	800096e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
 800096c:	e001      	b.n	8000972 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800096e:	f7ff fedb 	bl	8000728 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	781b      	ldrb	r3, [r3, #0]
}
 8000976:	0018      	movs	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	b002      	add	sp, #8
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	40022000 	.word	0x40022000

08000984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <HAL_InitTick+0x5c>)
 800098e:	681c      	ldr	r4, [r3, #0]
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <HAL_InitTick+0x60>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	0019      	movs	r1, r3
 8000996:	23fa      	movs	r3, #250	; 0xfa
 8000998:	0098      	lsls	r0, r3, #2
 800099a:	f7ff fbb5 	bl	8000108 <__udivsi3>
 800099e:	0003      	movs	r3, r0
 80009a0:	0019      	movs	r1, r3
 80009a2:	0020      	movs	r0, r4
 80009a4:	f7ff fbb0 	bl	8000108 <__udivsi3>
 80009a8:	0003      	movs	r3, r0
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 f90b 	bl	8000bc6 <HAL_SYSTICK_Config>
 80009b0:	1e03      	subs	r3, r0, #0
 80009b2:	d001      	beq.n	80009b8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009b4:	2301      	movs	r3, #1
 80009b6:	e00f      	b.n	80009d8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d80b      	bhi.n	80009d6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	2301      	movs	r3, #1
 80009c2:	425b      	negs	r3, r3
 80009c4:	2200      	movs	r2, #0
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 f8d8 	bl	8000b7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_InitTick+0x64>)
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009d2:	2300      	movs	r3, #0
 80009d4:	e000      	b.n	80009d8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
}
 80009d8:	0018      	movs	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	b003      	add	sp, #12
 80009de:	bd90      	pop	{r4, r7, pc}
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20000008 	.word	0x20000008
 80009e8:	20000004 	.word	0x20000004

080009ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <HAL_IncTick+0x1c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	001a      	movs	r2, r3
 80009f6:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_IncTick+0x20>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	18d2      	adds	r2, r2, r3
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <HAL_IncTick+0x20>)
 80009fe:	601a      	str	r2, [r3, #0]
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000148 	.word	0x20000148

08000a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b02      	ldr	r3, [pc, #8]	; (8000a20 <HAL_GetTick+0x10>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	0018      	movs	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	20000148 	.word	0x20000148

08000a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	0002      	movs	r2, r0
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a30:	1dfb      	adds	r3, r7, #7
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b7f      	cmp	r3, #127	; 0x7f
 8000a36:	d809      	bhi.n	8000a4c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	231f      	movs	r3, #31
 8000a40:	401a      	ands	r2, r3
 8000a42:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <__NVIC_EnableIRQ+0x30>)
 8000a44:	2101      	movs	r1, #1
 8000a46:	4091      	lsls	r1, r2
 8000a48:	000a      	movs	r2, r1
 8000a4a:	601a      	str	r2, [r3, #0]
  }
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b002      	add	sp, #8
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	e000e100 	.word	0xe000e100

08000a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	0002      	movs	r2, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a6c:	d828      	bhi.n	8000ac0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a6e:	4a2f      	ldr	r2, [pc, #188]	; (8000b2c <__NVIC_SetPriority+0xd4>)
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b25b      	sxtb	r3, r3
 8000a76:	089b      	lsrs	r3, r3, #2
 8000a78:	33c0      	adds	r3, #192	; 0xc0
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	589b      	ldr	r3, [r3, r2]
 8000a7e:	1dfa      	adds	r2, r7, #7
 8000a80:	7812      	ldrb	r2, [r2, #0]
 8000a82:	0011      	movs	r1, r2
 8000a84:	2203      	movs	r2, #3
 8000a86:	400a      	ands	r2, r1
 8000a88:	00d2      	lsls	r2, r2, #3
 8000a8a:	21ff      	movs	r1, #255	; 0xff
 8000a8c:	4091      	lsls	r1, r2
 8000a8e:	000a      	movs	r2, r1
 8000a90:	43d2      	mvns	r2, r2
 8000a92:	401a      	ands	r2, r3
 8000a94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	019b      	lsls	r3, r3, #6
 8000a9a:	22ff      	movs	r2, #255	; 0xff
 8000a9c:	401a      	ands	r2, r3
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	4003      	ands	r3, r0
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aac:	481f      	ldr	r0, [pc, #124]	; (8000b2c <__NVIC_SetPriority+0xd4>)
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	b25b      	sxtb	r3, r3
 8000ab4:	089b      	lsrs	r3, r3, #2
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	33c0      	adds	r3, #192	; 0xc0
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000abe:	e031      	b.n	8000b24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac0:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <__NVIC_SetPriority+0xd8>)
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	0019      	movs	r1, r3
 8000ac8:	230f      	movs	r3, #15
 8000aca:	400b      	ands	r3, r1
 8000acc:	3b08      	subs	r3, #8
 8000ace:	089b      	lsrs	r3, r3, #2
 8000ad0:	3306      	adds	r3, #6
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	18d3      	adds	r3, r2, r3
 8000ad6:	3304      	adds	r3, #4
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	1dfa      	adds	r2, r7, #7
 8000adc:	7812      	ldrb	r2, [r2, #0]
 8000ade:	0011      	movs	r1, r2
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	400a      	ands	r2, r1
 8000ae4:	00d2      	lsls	r2, r2, #3
 8000ae6:	21ff      	movs	r1, #255	; 0xff
 8000ae8:	4091      	lsls	r1, r2
 8000aea:	000a      	movs	r2, r1
 8000aec:	43d2      	mvns	r2, r2
 8000aee:	401a      	ands	r2, r3
 8000af0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	019b      	lsls	r3, r3, #6
 8000af6:	22ff      	movs	r2, #255	; 0xff
 8000af8:	401a      	ands	r2, r3
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	0018      	movs	r0, r3
 8000b00:	2303      	movs	r3, #3
 8000b02:	4003      	ands	r3, r0
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b08:	4809      	ldr	r0, [pc, #36]	; (8000b30 <__NVIC_SetPriority+0xd8>)
 8000b0a:	1dfb      	adds	r3, r7, #7
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	001c      	movs	r4, r3
 8000b10:	230f      	movs	r3, #15
 8000b12:	4023      	ands	r3, r4
 8000b14:	3b08      	subs	r3, #8
 8000b16:	089b      	lsrs	r3, r3, #2
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	3306      	adds	r3, #6
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	18c3      	adds	r3, r0, r3
 8000b20:	3304      	adds	r3, #4
 8000b22:	601a      	str	r2, [r3, #0]
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b003      	add	sp, #12
 8000b2a:	bd90      	pop	{r4, r7, pc}
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	1e5a      	subs	r2, r3, #1
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	045b      	lsls	r3, r3, #17
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d301      	bcc.n	8000b4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e010      	b.n	8000b6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <SysTick_Config+0x44>)
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	3a01      	subs	r2, #1
 8000b52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b54:	2301      	movs	r3, #1
 8000b56:	425b      	negs	r3, r3
 8000b58:	2103      	movs	r1, #3
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f7ff ff7c 	bl	8000a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <SysTick_Config+0x44>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b66:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <SysTick_Config+0x44>)
 8000b68:	2207      	movs	r2, #7
 8000b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	0018      	movs	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b002      	add	sp, #8
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	e000e010 	.word	0xe000e010

08000b7c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	210f      	movs	r1, #15
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	1c02      	adds	r2, r0, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	0011      	movs	r1, r2
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff ff5d 	bl	8000a58 <__NVIC_SetPriority>
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b004      	add	sp, #16
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	0002      	movs	r2, r0
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b25b      	sxtb	r3, r3
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f7ff ff33 	bl	8000a24 <__NVIC_EnableIRQ>
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b002      	add	sp, #8
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f7ff ffaf 	bl	8000b34 <SysTick_Config>
 8000bd6:	0003      	movs	r3, r0
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b002      	add	sp, #8
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e061      	b.n	8000cb6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a32      	ldr	r2, [pc, #200]	; (8000cc0 <HAL_DMA_Init+0xe0>)
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	4463      	add	r3, ip
 8000bfc:	2114      	movs	r1, #20
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f7ff fa82 	bl	8000108 <__udivsi3>
 8000c04:	0003      	movs	r3, r0
 8000c06:	009a      	lsls	r2, r3, #2
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a2d      	ldr	r2, [pc, #180]	; (8000cc4 <HAL_DMA_Init+0xe4>)
 8000c10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2225      	movs	r2, #37	; 0x25
 8000c16:	2102      	movs	r1, #2
 8000c18:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	4a28      	ldr	r2, [pc, #160]	; (8000cc8 <HAL_DMA_Init+0xe8>)
 8000c26:	4013      	ands	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000c32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a1b      	ldr	r3, [r3, #32]
 8000c50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	01db      	lsls	r3, r3, #7
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d018      	beq.n	8000c9e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <HAL_DMA_Init+0xec>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c74:	211c      	movs	r1, #28
 8000c76:	400b      	ands	r3, r1
 8000c78:	210f      	movs	r1, #15
 8000c7a:	4099      	lsls	r1, r3
 8000c7c:	000b      	movs	r3, r1
 8000c7e:	43d9      	mvns	r1, r3
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_DMA_Init+0xec>)
 8000c82:	400a      	ands	r2, r1
 8000c84:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_DMA_Init+0xec>)
 8000c88:	6819      	ldr	r1, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	201c      	movs	r0, #28
 8000c94:	4003      	ands	r3, r0
 8000c96:	409a      	lsls	r2, r3
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <HAL_DMA_Init+0xec>)
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2225      	movs	r2, #37	; 0x25
 8000ca8:	2101      	movs	r1, #1
 8000caa:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2224      	movs	r2, #36	; 0x24
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b004      	add	sp, #16
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	bffdfff8 	.word	0xbffdfff8
 8000cc4:	40020000 	.word	0x40020000
 8000cc8:	ffff800f 	.word	0xffff800f
 8000ccc:	400200a8 	.word	0x400200a8

08000cd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
 8000cdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000cde:	2317      	movs	r3, #23
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2224      	movs	r2, #36	; 0x24
 8000cea:	5c9b      	ldrb	r3, [r3, r2]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d101      	bne.n	8000cf4 <HAL_DMA_Start_IT+0x24>
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	e04f      	b.n	8000d94 <HAL_DMA_Start_IT+0xc4>
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2224      	movs	r2, #36	; 0x24
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2225      	movs	r2, #37	; 0x25
 8000d00:	5c9b      	ldrb	r3, [r3, r2]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d13a      	bne.n	8000d7e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	2225      	movs	r2, #37	; 0x25
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2200      	movs	r2, #0
 8000d14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2101      	movs	r1, #1
 8000d22:	438a      	bics	r2, r1
 8000d24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	68b9      	ldr	r1, [r7, #8]
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f000 f8e3 	bl	8000ef8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d008      	beq.n	8000d4c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	210e      	movs	r1, #14
 8000d46:	430a      	orrs	r2, r1
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	e00f      	b.n	8000d6c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2104      	movs	r1, #4
 8000d58:	438a      	bics	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	210a      	movs	r1, #10
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2101      	movs	r1, #1
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	e007      	b.n	8000d8e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2224      	movs	r2, #36	; 0x24
 8000d82:	2100      	movs	r1, #0
 8000d84:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d86:	2317      	movs	r3, #23
 8000d88:	18fb      	adds	r3, r7, r3
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8000d8e:	2317      	movs	r3, #23
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	781b      	ldrb	r3, [r3, #0]
}
 8000d94:	0018      	movs	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b006      	add	sp, #24
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db8:	221c      	movs	r2, #28
 8000dba:	4013      	ands	r3, r2
 8000dbc:	2204      	movs	r2, #4
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	0013      	movs	r3, r2
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	d026      	beq.n	8000e16 <HAL_DMA_IRQHandler+0x7a>
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	2204      	movs	r2, #4
 8000dcc:	4013      	ands	r3, r2
 8000dce:	d022      	beq.n	8000e16 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2220      	movs	r2, #32
 8000dd8:	4013      	ands	r3, r2
 8000dda:	d107      	bne.n	8000dec <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2104      	movs	r1, #4
 8000de8:	438a      	bics	r2, r1
 8000dea:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df0:	221c      	movs	r2, #28
 8000df2:	401a      	ands	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	2104      	movs	r1, #4
 8000dfa:	4091      	lsls	r1, r2
 8000dfc:	000a      	movs	r2, r1
 8000dfe:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d100      	bne.n	8000e0a <HAL_DMA_IRQHandler+0x6e>
 8000e08:	e071      	b.n	8000eee <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	0010      	movs	r0, r2
 8000e12:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8000e14:	e06b      	b.n	8000eee <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	221c      	movs	r2, #28
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	2202      	movs	r2, #2
 8000e20:	409a      	lsls	r2, r3
 8000e22:	0013      	movs	r3, r2
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	4013      	ands	r3, r2
 8000e28:	d02d      	beq.n	8000e86 <HAL_DMA_IRQHandler+0xea>
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d029      	beq.n	8000e86 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2220      	movs	r2, #32
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d10b      	bne.n	8000e56 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	210a      	movs	r1, #10
 8000e4a:	438a      	bics	r2, r1
 8000e4c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2225      	movs	r2, #37	; 0x25
 8000e52:	2101      	movs	r1, #1
 8000e54:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	221c      	movs	r2, #28
 8000e5c:	401a      	ands	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	2102      	movs	r1, #2
 8000e64:	4091      	lsls	r1, r2
 8000e66:	000a      	movs	r2, r1
 8000e68:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2224      	movs	r2, #36	; 0x24
 8000e6e:	2100      	movs	r1, #0
 8000e70:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d039      	beq.n	8000eee <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	0010      	movs	r0, r2
 8000e82:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e84:	e033      	b.n	8000eee <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	221c      	movs	r2, #28
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	2208      	movs	r2, #8
 8000e90:	409a      	lsls	r2, r3
 8000e92:	0013      	movs	r3, r2
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	4013      	ands	r3, r2
 8000e98:	d02a      	beq.n	8000ef0 <HAL_DMA_IRQHandler+0x154>
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	2208      	movs	r2, #8
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d026      	beq.n	8000ef0 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	210e      	movs	r1, #14
 8000eae:	438a      	bics	r2, r1
 8000eb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	221c      	movs	r2, #28
 8000eb8:	401a      	ands	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	000a      	movs	r2, r1
 8000ec4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2201      	movs	r2, #1
 8000eca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2225      	movs	r2, #37	; 0x25
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2224      	movs	r2, #36	; 0x24
 8000ed8:	2100      	movs	r1, #0
 8000eda:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d005      	beq.n	8000ef0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	0010      	movs	r0, r2
 8000eec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46c0      	nop			; (mov r8, r8)
}
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b004      	add	sp, #16
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
 8000f04:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	221c      	movs	r2, #28
 8000f0c:	401a      	ands	r2, r3
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	2101      	movs	r1, #1
 8000f14:	4091      	lsls	r1, r2
 8000f16:	000a      	movs	r2, r1
 8000f18:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	2b10      	cmp	r3, #16
 8000f28:	d108      	bne.n	8000f3c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f3a:	e007      	b.n	8000f4c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	60da      	str	r2, [r3, #12]
}
 8000f4c:	46c0      	nop			; (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b004      	add	sp, #16
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f6a:	e14f      	b.n	800120c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2101      	movs	r1, #1
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	4091      	lsls	r1, r2
 8000f76:	000a      	movs	r2, r1
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d100      	bne.n	8000f84 <HAL_GPIO_Init+0x30>
 8000f82:	e140      	b.n	8001206 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2203      	movs	r2, #3
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d005      	beq.n	8000f9c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2203      	movs	r2, #3
 8000f96:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d130      	bne.n	8000ffe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	409a      	lsls	r2, r3
 8000faa:	0013      	movs	r3, r2
 8000fac:	43da      	mvns	r2, r3
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	68da      	ldr	r2, [r3, #12]
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	409a      	lsls	r2, r3
 8000fbe:	0013      	movs	r3, r2
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	091b      	lsrs	r3, r3, #4
 8000fe8:	2201      	movs	r2, #1
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	0013      	movs	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2203      	movs	r2, #3
 8001004:	4013      	ands	r3, r2
 8001006:	2b03      	cmp	r3, #3
 8001008:	d017      	beq.n	800103a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	2203      	movs	r2, #3
 8001016:	409a      	lsls	r2, r3
 8001018:	0013      	movs	r3, r2
 800101a:	43da      	mvns	r2, r3
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	409a      	lsls	r2, r3
 800102c:	0013      	movs	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2203      	movs	r2, #3
 8001040:	4013      	ands	r3, r2
 8001042:	2b02      	cmp	r3, #2
 8001044:	d123      	bne.n	800108e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	58d3      	ldr	r3, [r2, r3]
 8001052:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	2207      	movs	r2, #7
 8001058:	4013      	ands	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	220f      	movs	r2, #15
 800105e:	409a      	lsls	r2, r3
 8001060:	0013      	movs	r3, r2
 8001062:	43da      	mvns	r2, r3
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	691a      	ldr	r2, [r3, #16]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	2107      	movs	r1, #7
 8001072:	400b      	ands	r3, r1
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	409a      	lsls	r2, r3
 8001078:	0013      	movs	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	08da      	lsrs	r2, r3, #3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3208      	adds	r2, #8
 8001088:	0092      	lsls	r2, r2, #2
 800108a:	6939      	ldr	r1, [r7, #16]
 800108c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	409a      	lsls	r2, r3
 800109c:	0013      	movs	r3, r2
 800109e:	43da      	mvns	r2, r3
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2203      	movs	r2, #3
 80010ac:	401a      	ands	r2, r3
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	409a      	lsls	r2, r3
 80010b4:	0013      	movs	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	23c0      	movs	r3, #192	; 0xc0
 80010c8:	029b      	lsls	r3, r3, #10
 80010ca:	4013      	ands	r3, r2
 80010cc:	d100      	bne.n	80010d0 <HAL_GPIO_Init+0x17c>
 80010ce:	e09a      	b.n	8001206 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d0:	4b54      	ldr	r3, [pc, #336]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 80010d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d4:	4b53      	ldr	r3, [pc, #332]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 80010d6:	2101      	movs	r1, #1
 80010d8:	430a      	orrs	r2, r1
 80010da:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80010dc:	4a52      	ldr	r2, [pc, #328]	; (8001228 <HAL_GPIO_Init+0x2d4>)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	3302      	adds	r3, #2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	589b      	ldr	r3, [r3, r2]
 80010e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	2203      	movs	r2, #3
 80010ee:	4013      	ands	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	220f      	movs	r2, #15
 80010f4:	409a      	lsls	r2, r3
 80010f6:	0013      	movs	r3, r2
 80010f8:	43da      	mvns	r2, r3
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	23a0      	movs	r3, #160	; 0xa0
 8001104:	05db      	lsls	r3, r3, #23
 8001106:	429a      	cmp	r2, r3
 8001108:	d019      	beq.n	800113e <HAL_GPIO_Init+0x1ea>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a47      	ldr	r2, [pc, #284]	; (800122c <HAL_GPIO_Init+0x2d8>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d013      	beq.n	800113a <HAL_GPIO_Init+0x1e6>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a46      	ldr	r2, [pc, #280]	; (8001230 <HAL_GPIO_Init+0x2dc>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d00d      	beq.n	8001136 <HAL_GPIO_Init+0x1e2>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a45      	ldr	r2, [pc, #276]	; (8001234 <HAL_GPIO_Init+0x2e0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d007      	beq.n	8001132 <HAL_GPIO_Init+0x1de>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a44      	ldr	r2, [pc, #272]	; (8001238 <HAL_GPIO_Init+0x2e4>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d101      	bne.n	800112e <HAL_GPIO_Init+0x1da>
 800112a:	2305      	movs	r3, #5
 800112c:	e008      	b.n	8001140 <HAL_GPIO_Init+0x1ec>
 800112e:	2306      	movs	r3, #6
 8001130:	e006      	b.n	8001140 <HAL_GPIO_Init+0x1ec>
 8001132:	2303      	movs	r3, #3
 8001134:	e004      	b.n	8001140 <HAL_GPIO_Init+0x1ec>
 8001136:	2302      	movs	r3, #2
 8001138:	e002      	b.n	8001140 <HAL_GPIO_Init+0x1ec>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <HAL_GPIO_Init+0x1ec>
 800113e:	2300      	movs	r3, #0
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	2103      	movs	r1, #3
 8001144:	400a      	ands	r2, r1
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	4093      	lsls	r3, r2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001150:	4935      	ldr	r1, [pc, #212]	; (8001228 <HAL_GPIO_Init+0x2d4>)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3302      	adds	r3, #2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115e:	4b37      	ldr	r3, [pc, #220]	; (800123c <HAL_GPIO_Init+0x2e8>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	43da      	mvns	r2, r3
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	2380      	movs	r3, #128	; 0x80
 8001174:	035b      	lsls	r3, r3, #13
 8001176:	4013      	ands	r3, r2
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001182:	4b2e      	ldr	r3, [pc, #184]	; (800123c <HAL_GPIO_Init+0x2e8>)
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001188:	4b2c      	ldr	r3, [pc, #176]	; (800123c <HAL_GPIO_Init+0x2e8>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	43da      	mvns	r2, r3
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	039b      	lsls	r3, r3, #14
 80011a0:	4013      	ands	r3, r2
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011ac:	4b23      	ldr	r3, [pc, #140]	; (800123c <HAL_GPIO_Init+0x2e8>)
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80011b2:	4b22      	ldr	r3, [pc, #136]	; (800123c <HAL_GPIO_Init+0x2e8>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	43da      	mvns	r2, r3
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	029b      	lsls	r3, r3, #10
 80011ca:	4013      	ands	r3, r2
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_GPIO_Init+0x2e8>)
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <HAL_GPIO_Init+0x2e8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43da      	mvns	r2, r3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	025b      	lsls	r3, r3, #9
 80011f4:	4013      	ands	r3, r2
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_GPIO_Init+0x2e8>)
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3301      	adds	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	40da      	lsrs	r2, r3
 8001214:	1e13      	subs	r3, r2, #0
 8001216:	d000      	beq.n	800121a <HAL_GPIO_Init+0x2c6>
 8001218:	e6a8      	b.n	8000f6c <HAL_GPIO_Init+0x18>
  }
}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	b006      	add	sp, #24
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40021000 	.word	0x40021000
 8001228:	40010000 	.word	0x40010000
 800122c:	50000400 	.word	0x50000400
 8001230:	50000800 	.word	0x50000800
 8001234:	50000c00 	.word	0x50000c00
 8001238:	50001c00 	.word	0x50001c00
 800123c:	40010400 	.word	0x40010400

08001240 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	0008      	movs	r0, r1
 800124a:	0011      	movs	r1, r2
 800124c:	1cbb      	adds	r3, r7, #2
 800124e:	1c02      	adds	r2, r0, #0
 8001250:	801a      	strh	r2, [r3, #0]
 8001252:	1c7b      	adds	r3, r7, #1
 8001254:	1c0a      	adds	r2, r1, #0
 8001256:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001258:	1c7b      	adds	r3, r7, #1
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001260:	1cbb      	adds	r3, r7, #2
 8001262:	881a      	ldrh	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001268:	e003      	b.n	8001272 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800126a:	1cbb      	adds	r3, r7, #2
 800126c:	881a      	ldrh	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	46bd      	mov	sp, r7
 8001276:	b002      	add	sp, #8
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	000a      	movs	r2, r1
 8001284:	1cbb      	adds	r3, r7, #2
 8001286:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800128e:	1cbb      	adds	r3, r7, #2
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	4013      	ands	r3, r2
 8001296:	041a      	lsls	r2, r3, #16
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43db      	mvns	r3, r3
 800129c:	1cb9      	adds	r1, r7, #2
 800129e:	8809      	ldrh	r1, [r1, #0]
 80012a0:	400b      	ands	r3, r1
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	619a      	str	r2, [r3, #24]
}
 80012a8:	46c0      	nop			; (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b004      	add	sp, #16
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b0:	b5b0      	push	{r4, r5, r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d102      	bne.n	80012c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	f000 fbaf 	bl	8001a22 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012c4:	4bcf      	ldr	r3, [pc, #828]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	220c      	movs	r2, #12
 80012ca:	4013      	ands	r3, r2
 80012cc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ce:	4bcd      	ldr	r3, [pc, #820]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	025b      	lsls	r3, r3, #9
 80012d6:	4013      	ands	r3, r2
 80012d8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2201      	movs	r2, #1
 80012e0:	4013      	ands	r3, r2
 80012e2:	d100      	bne.n	80012e6 <HAL_RCC_OscConfig+0x36>
 80012e4:	e07e      	b.n	80013e4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012e6:	6a3b      	ldr	r3, [r7, #32]
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	d007      	beq.n	80012fc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	2b0c      	cmp	r3, #12
 80012f0:	d112      	bne.n	8001318 <HAL_RCC_OscConfig+0x68>
 80012f2:	69fa      	ldr	r2, [r7, #28]
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	025b      	lsls	r3, r3, #9
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d10d      	bne.n	8001318 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	4bc1      	ldr	r3, [pc, #772]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	029b      	lsls	r3, r3, #10
 8001304:	4013      	ands	r3, r2
 8001306:	d100      	bne.n	800130a <HAL_RCC_OscConfig+0x5a>
 8001308:	e06b      	b.n	80013e2 <HAL_RCC_OscConfig+0x132>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d167      	bne.n	80013e2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	f000 fb85 	bl	8001a22 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	025b      	lsls	r3, r3, #9
 8001320:	429a      	cmp	r2, r3
 8001322:	d107      	bne.n	8001334 <HAL_RCC_OscConfig+0x84>
 8001324:	4bb7      	ldr	r3, [pc, #732]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4bb6      	ldr	r3, [pc, #728]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	0249      	lsls	r1, r1, #9
 800132e:	430a      	orrs	r2, r1
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	e027      	b.n	8001384 <HAL_RCC_OscConfig+0xd4>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	23a0      	movs	r3, #160	; 0xa0
 800133a:	02db      	lsls	r3, r3, #11
 800133c:	429a      	cmp	r2, r3
 800133e:	d10e      	bne.n	800135e <HAL_RCC_OscConfig+0xae>
 8001340:	4bb0      	ldr	r3, [pc, #704]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4baf      	ldr	r3, [pc, #700]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 8001346:	2180      	movs	r1, #128	; 0x80
 8001348:	02c9      	lsls	r1, r1, #11
 800134a:	430a      	orrs	r2, r1
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	4bad      	ldr	r3, [pc, #692]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4bac      	ldr	r3, [pc, #688]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	0249      	lsls	r1, r1, #9
 8001358:	430a      	orrs	r2, r1
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e012      	b.n	8001384 <HAL_RCC_OscConfig+0xd4>
 800135e:	4ba9      	ldr	r3, [pc, #676]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4ba8      	ldr	r3, [pc, #672]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 8001364:	49a8      	ldr	r1, [pc, #672]	; (8001608 <HAL_RCC_OscConfig+0x358>)
 8001366:	400a      	ands	r2, r1
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	4ba6      	ldr	r3, [pc, #664]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	025b      	lsls	r3, r3, #9
 8001372:	4013      	ands	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4ba2      	ldr	r3, [pc, #648]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4ba1      	ldr	r3, [pc, #644]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 800137e:	49a3      	ldr	r1, [pc, #652]	; (800160c <HAL_RCC_OscConfig+0x35c>)
 8001380:	400a      	ands	r2, r1
 8001382:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d015      	beq.n	80013b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fb40 	bl	8000a10 <HAL_GetTick>
 8001390:	0003      	movs	r3, r0
 8001392:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001394:	e009      	b.n	80013aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001396:	f7ff fb3b 	bl	8000a10 <HAL_GetTick>
 800139a:	0002      	movs	r2, r0
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b64      	cmp	r3, #100	; 0x64
 80013a2:	d902      	bls.n	80013aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	f000 fb3c 	bl	8001a22 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013aa:	4b96      	ldr	r3, [pc, #600]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	029b      	lsls	r3, r3, #10
 80013b2:	4013      	ands	r3, r2
 80013b4:	d0ef      	beq.n	8001396 <HAL_RCC_OscConfig+0xe6>
 80013b6:	e015      	b.n	80013e4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b8:	f7ff fb2a 	bl	8000a10 <HAL_GetTick>
 80013bc:	0003      	movs	r3, r0
 80013be:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c2:	f7ff fb25 	bl	8000a10 <HAL_GetTick>
 80013c6:	0002      	movs	r2, r0
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b64      	cmp	r3, #100	; 0x64
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e326      	b.n	8001a22 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013d4:	4b8b      	ldr	r3, [pc, #556]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	4013      	ands	r3, r2
 80013de:	d1f0      	bne.n	80013c2 <HAL_RCC_OscConfig+0x112>
 80013e0:	e000      	b.n	80013e4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2202      	movs	r2, #2
 80013ea:	4013      	ands	r3, r2
 80013ec:	d100      	bne.n	80013f0 <HAL_RCC_OscConfig+0x140>
 80013ee:	e08b      	b.n	8001508 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d005      	beq.n	8001408 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	2b0c      	cmp	r3, #12
 8001400:	d13e      	bne.n	8001480 <HAL_RCC_OscConfig+0x1d0>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d13b      	bne.n	8001480 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001408:	4b7e      	ldr	r3, [pc, #504]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2204      	movs	r2, #4
 800140e:	4013      	ands	r3, r2
 8001410:	d004      	beq.n	800141c <HAL_RCC_OscConfig+0x16c>
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e302      	b.n	8001a22 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141c:	4b79      	ldr	r3, [pc, #484]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	4a7b      	ldr	r2, [pc, #492]	; (8001610 <HAL_RCC_OscConfig+0x360>)
 8001422:	4013      	ands	r3, r2
 8001424:	0019      	movs	r1, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	021a      	lsls	r2, r3, #8
 800142c:	4b75      	ldr	r3, [pc, #468]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 800142e:	430a      	orrs	r2, r1
 8001430:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001432:	4b74      	ldr	r3, [pc, #464]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2209      	movs	r2, #9
 8001438:	4393      	bics	r3, r2
 800143a:	0019      	movs	r1, r3
 800143c:	4b71      	ldr	r3, [pc, #452]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	430a      	orrs	r2, r1
 8001442:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001444:	f000 fc40 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001448:	0001      	movs	r1, r0
 800144a:	4b6e      	ldr	r3, [pc, #440]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	091b      	lsrs	r3, r3, #4
 8001450:	220f      	movs	r2, #15
 8001452:	4013      	ands	r3, r2
 8001454:	4a6f      	ldr	r2, [pc, #444]	; (8001614 <HAL_RCC_OscConfig+0x364>)
 8001456:	5cd3      	ldrb	r3, [r2, r3]
 8001458:	000a      	movs	r2, r1
 800145a:	40da      	lsrs	r2, r3
 800145c:	4b6e      	ldr	r3, [pc, #440]	; (8001618 <HAL_RCC_OscConfig+0x368>)
 800145e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001460:	4b6e      	ldr	r3, [pc, #440]	; (800161c <HAL_RCC_OscConfig+0x36c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2513      	movs	r5, #19
 8001466:	197c      	adds	r4, r7, r5
 8001468:	0018      	movs	r0, r3
 800146a:	f7ff fa8b 	bl	8000984 <HAL_InitTick>
 800146e:	0003      	movs	r3, r0
 8001470:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001472:	197b      	adds	r3, r7, r5
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d046      	beq.n	8001508 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800147a:	197b      	adds	r3, r7, r5
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	e2d0      	b.n	8001a22 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d027      	beq.n	80014d6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001486:	4b5f      	ldr	r3, [pc, #380]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2209      	movs	r2, #9
 800148c:	4393      	bics	r3, r2
 800148e:	0019      	movs	r1, r3
 8001490:	4b5c      	ldr	r3, [pc, #368]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	430a      	orrs	r2, r1
 8001496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff faba 	bl	8000a10 <HAL_GetTick>
 800149c:	0003      	movs	r3, r0
 800149e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a2:	f7ff fab5 	bl	8000a10 <HAL_GetTick>
 80014a6:	0002      	movs	r2, r0
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e2b6      	b.n	8001a22 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014b4:	4b53      	ldr	r3, [pc, #332]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2204      	movs	r2, #4
 80014ba:	4013      	ands	r3, r2
 80014bc:	d0f1      	beq.n	80014a2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014be:	4b51      	ldr	r3, [pc, #324]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4a53      	ldr	r2, [pc, #332]	; (8001610 <HAL_RCC_OscConfig+0x360>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	0019      	movs	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	021a      	lsls	r2, r3, #8
 80014ce:	4b4d      	ldr	r3, [pc, #308]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 80014d0:	430a      	orrs	r2, r1
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	e018      	b.n	8001508 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d6:	4b4b      	ldr	r3, [pc, #300]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b4a      	ldr	r3, [pc, #296]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 80014dc:	2101      	movs	r1, #1
 80014de:	438a      	bics	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e2:	f7ff fa95 	bl	8000a10 <HAL_GetTick>
 80014e6:	0003      	movs	r3, r0
 80014e8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ec:	f7ff fa90 	bl	8000a10 <HAL_GetTick>
 80014f0:	0002      	movs	r2, r0
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e291      	b.n	8001a22 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014fe:	4b41      	ldr	r3, [pc, #260]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2204      	movs	r2, #4
 8001504:	4013      	ands	r3, r2
 8001506:	d1f1      	bne.n	80014ec <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2210      	movs	r2, #16
 800150e:	4013      	ands	r3, r2
 8001510:	d100      	bne.n	8001514 <HAL_RCC_OscConfig+0x264>
 8001512:	e0a1      	b.n	8001658 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d140      	bne.n	800159c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800151a:	4b3a      	ldr	r3, [pc, #232]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4013      	ands	r3, r2
 8001524:	d005      	beq.n	8001532 <HAL_RCC_OscConfig+0x282>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e277      	b.n	8001a22 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001532:	4b34      	ldr	r3, [pc, #208]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	4a3a      	ldr	r2, [pc, #232]	; (8001620 <HAL_RCC_OscConfig+0x370>)
 8001538:	4013      	ands	r3, r2
 800153a:	0019      	movs	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001540:	4b30      	ldr	r3, [pc, #192]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 8001542:	430a      	orrs	r2, r1
 8001544:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001546:	4b2f      	ldr	r3, [pc, #188]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	0a19      	lsrs	r1, r3, #8
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	061a      	lsls	r2, r3, #24
 8001554:	4b2b      	ldr	r3, [pc, #172]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 8001556:	430a      	orrs	r2, r1
 8001558:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	0b5b      	lsrs	r3, r3, #13
 8001560:	3301      	adds	r3, #1
 8001562:	2280      	movs	r2, #128	; 0x80
 8001564:	0212      	lsls	r2, r2, #8
 8001566:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001568:	4b26      	ldr	r3, [pc, #152]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	091b      	lsrs	r3, r3, #4
 800156e:	210f      	movs	r1, #15
 8001570:	400b      	ands	r3, r1
 8001572:	4928      	ldr	r1, [pc, #160]	; (8001614 <HAL_RCC_OscConfig+0x364>)
 8001574:	5ccb      	ldrb	r3, [r1, r3]
 8001576:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001578:	4b27      	ldr	r3, [pc, #156]	; (8001618 <HAL_RCC_OscConfig+0x368>)
 800157a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800157c:	4b27      	ldr	r3, [pc, #156]	; (800161c <HAL_RCC_OscConfig+0x36c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2513      	movs	r5, #19
 8001582:	197c      	adds	r4, r7, r5
 8001584:	0018      	movs	r0, r3
 8001586:	f7ff f9fd 	bl	8000984 <HAL_InitTick>
 800158a:	0003      	movs	r3, r0
 800158c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800158e:	197b      	adds	r3, r7, r5
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d060      	beq.n	8001658 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001596:	197b      	adds	r3, r7, r5
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	e242      	b.n	8001a22 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d03f      	beq.n	8001624 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015a4:	4b17      	ldr	r3, [pc, #92]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 80015aa:	2180      	movs	r1, #128	; 0x80
 80015ac:	0049      	lsls	r1, r1, #1
 80015ae:	430a      	orrs	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b2:	f7ff fa2d 	bl	8000a10 <HAL_GetTick>
 80015b6:	0003      	movs	r3, r0
 80015b8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015bc:	f7ff fa28 	bl	8000a10 <HAL_GetTick>
 80015c0:	0002      	movs	r2, r0
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e229      	b.n	8001a22 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4013      	ands	r3, r2
 80015d8:	d0f0      	beq.n	80015bc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	4a10      	ldr	r2, [pc, #64]	; (8001620 <HAL_RCC_OscConfig+0x370>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	0019      	movs	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 80015ea:	430a      	orrs	r2, r1
 80015ec:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	0a19      	lsrs	r1, r3, #8
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	061a      	lsls	r2, r3, #24
 80015fc:	4b01      	ldr	r3, [pc, #4]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 80015fe:	430a      	orrs	r2, r1
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	e029      	b.n	8001658 <HAL_RCC_OscConfig+0x3a8>
 8001604:	40021000 	.word	0x40021000
 8001608:	fffeffff 	.word	0xfffeffff
 800160c:	fffbffff 	.word	0xfffbffff
 8001610:	ffffe0ff 	.word	0xffffe0ff
 8001614:	08003084 	.word	0x08003084
 8001618:	20000000 	.word	0x20000000
 800161c:	20000004 	.word	0x20000004
 8001620:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001624:	4bbd      	ldr	r3, [pc, #756]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4bbc      	ldr	r3, [pc, #752]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 800162a:	49bd      	ldr	r1, [pc, #756]	; (8001920 <HAL_RCC_OscConfig+0x670>)
 800162c:	400a      	ands	r2, r1
 800162e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff f9ee 	bl	8000a10 <HAL_GetTick>
 8001634:	0003      	movs	r3, r0
 8001636:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800163a:	f7ff f9e9 	bl	8000a10 <HAL_GetTick>
 800163e:	0002      	movs	r2, r0
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e1ea      	b.n	8001a22 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800164c:	4bb3      	ldr	r3, [pc, #716]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4013      	ands	r3, r2
 8001656:	d1f0      	bne.n	800163a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2208      	movs	r2, #8
 800165e:	4013      	ands	r3, r2
 8001660:	d036      	beq.n	80016d0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d019      	beq.n	800169e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800166a:	4bac      	ldr	r3, [pc, #688]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 800166c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800166e:	4bab      	ldr	r3, [pc, #684]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 8001670:	2101      	movs	r1, #1
 8001672:	430a      	orrs	r2, r1
 8001674:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001676:	f7ff f9cb 	bl	8000a10 <HAL_GetTick>
 800167a:	0003      	movs	r3, r0
 800167c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001680:	f7ff f9c6 	bl	8000a10 <HAL_GetTick>
 8001684:	0002      	movs	r2, r0
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e1c7      	b.n	8001a22 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001692:	4ba2      	ldr	r3, [pc, #648]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 8001694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001696:	2202      	movs	r2, #2
 8001698:	4013      	ands	r3, r2
 800169a:	d0f1      	beq.n	8001680 <HAL_RCC_OscConfig+0x3d0>
 800169c:	e018      	b.n	80016d0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800169e:	4b9f      	ldr	r3, [pc, #636]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 80016a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016a2:	4b9e      	ldr	r3, [pc, #632]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 80016a4:	2101      	movs	r1, #1
 80016a6:	438a      	bics	r2, r1
 80016a8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016aa:	f7ff f9b1 	bl	8000a10 <HAL_GetTick>
 80016ae:	0003      	movs	r3, r0
 80016b0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b4:	f7ff f9ac 	bl	8000a10 <HAL_GetTick>
 80016b8:	0002      	movs	r2, r0
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e1ad      	b.n	8001a22 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016c6:	4b95      	ldr	r3, [pc, #596]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 80016c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ca:	2202      	movs	r2, #2
 80016cc:	4013      	ands	r3, r2
 80016ce:	d1f1      	bne.n	80016b4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2204      	movs	r2, #4
 80016d6:	4013      	ands	r3, r2
 80016d8:	d100      	bne.n	80016dc <HAL_RCC_OscConfig+0x42c>
 80016da:	e0ae      	b.n	800183a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016dc:	2027      	movs	r0, #39	; 0x27
 80016de:	183b      	adds	r3, r7, r0
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e4:	4b8d      	ldr	r3, [pc, #564]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 80016e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	055b      	lsls	r3, r3, #21
 80016ec:	4013      	ands	r3, r2
 80016ee:	d109      	bne.n	8001704 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f0:	4b8a      	ldr	r3, [pc, #552]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 80016f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016f4:	4b89      	ldr	r3, [pc, #548]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	0549      	lsls	r1, r1, #21
 80016fa:	430a      	orrs	r2, r1
 80016fc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80016fe:	183b      	adds	r3, r7, r0
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001704:	4b87      	ldr	r3, [pc, #540]	; (8001924 <HAL_RCC_OscConfig+0x674>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4013      	ands	r3, r2
 800170e:	d11a      	bne.n	8001746 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001710:	4b84      	ldr	r3, [pc, #528]	; (8001924 <HAL_RCC_OscConfig+0x674>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b83      	ldr	r3, [pc, #524]	; (8001924 <HAL_RCC_OscConfig+0x674>)
 8001716:	2180      	movs	r1, #128	; 0x80
 8001718:	0049      	lsls	r1, r1, #1
 800171a:	430a      	orrs	r2, r1
 800171c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171e:	f7ff f977 	bl	8000a10 <HAL_GetTick>
 8001722:	0003      	movs	r3, r0
 8001724:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001728:	f7ff f972 	bl	8000a10 <HAL_GetTick>
 800172c:	0002      	movs	r2, r0
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	; 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e173      	b.n	8001a22 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173a:	4b7a      	ldr	r3, [pc, #488]	; (8001924 <HAL_RCC_OscConfig+0x674>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4013      	ands	r3, r2
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	429a      	cmp	r2, r3
 8001750:	d107      	bne.n	8001762 <HAL_RCC_OscConfig+0x4b2>
 8001752:	4b72      	ldr	r3, [pc, #456]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 8001754:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001756:	4b71      	ldr	r3, [pc, #452]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 8001758:	2180      	movs	r1, #128	; 0x80
 800175a:	0049      	lsls	r1, r1, #1
 800175c:	430a      	orrs	r2, r1
 800175e:	651a      	str	r2, [r3, #80]	; 0x50
 8001760:	e031      	b.n	80017c6 <HAL_RCC_OscConfig+0x516>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0x4d4>
 800176a:	4b6c      	ldr	r3, [pc, #432]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 800176c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800176e:	4b6b      	ldr	r3, [pc, #428]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 8001770:	496b      	ldr	r1, [pc, #428]	; (8001920 <HAL_RCC_OscConfig+0x670>)
 8001772:	400a      	ands	r2, r1
 8001774:	651a      	str	r2, [r3, #80]	; 0x50
 8001776:	4b69      	ldr	r3, [pc, #420]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 8001778:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800177a:	4b68      	ldr	r3, [pc, #416]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 800177c:	496a      	ldr	r1, [pc, #424]	; (8001928 <HAL_RCC_OscConfig+0x678>)
 800177e:	400a      	ands	r2, r1
 8001780:	651a      	str	r2, [r3, #80]	; 0x50
 8001782:	e020      	b.n	80017c6 <HAL_RCC_OscConfig+0x516>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	23a0      	movs	r3, #160	; 0xa0
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	429a      	cmp	r2, r3
 800178e:	d10e      	bne.n	80017ae <HAL_RCC_OscConfig+0x4fe>
 8001790:	4b62      	ldr	r3, [pc, #392]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 8001792:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001794:	4b61      	ldr	r3, [pc, #388]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 8001796:	2180      	movs	r1, #128	; 0x80
 8001798:	00c9      	lsls	r1, r1, #3
 800179a:	430a      	orrs	r2, r1
 800179c:	651a      	str	r2, [r3, #80]	; 0x50
 800179e:	4b5f      	ldr	r3, [pc, #380]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 80017a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017a2:	4b5e      	ldr	r3, [pc, #376]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 80017a4:	2180      	movs	r1, #128	; 0x80
 80017a6:	0049      	lsls	r1, r1, #1
 80017a8:	430a      	orrs	r2, r1
 80017aa:	651a      	str	r2, [r3, #80]	; 0x50
 80017ac:	e00b      	b.n	80017c6 <HAL_RCC_OscConfig+0x516>
 80017ae:	4b5b      	ldr	r3, [pc, #364]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 80017b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017b2:	4b5a      	ldr	r3, [pc, #360]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 80017b4:	495a      	ldr	r1, [pc, #360]	; (8001920 <HAL_RCC_OscConfig+0x670>)
 80017b6:	400a      	ands	r2, r1
 80017b8:	651a      	str	r2, [r3, #80]	; 0x50
 80017ba:	4b58      	ldr	r3, [pc, #352]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 80017bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017be:	4b57      	ldr	r3, [pc, #348]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 80017c0:	4959      	ldr	r1, [pc, #356]	; (8001928 <HAL_RCC_OscConfig+0x678>)
 80017c2:	400a      	ands	r2, r1
 80017c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d015      	beq.n	80017fa <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ce:	f7ff f91f 	bl	8000a10 <HAL_GetTick>
 80017d2:	0003      	movs	r3, r0
 80017d4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017d6:	e009      	b.n	80017ec <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d8:	f7ff f91a 	bl	8000a10 <HAL_GetTick>
 80017dc:	0002      	movs	r2, r0
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	4a52      	ldr	r2, [pc, #328]	; (800192c <HAL_RCC_OscConfig+0x67c>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e11a      	b.n	8001a22 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017ec:	4b4b      	ldr	r3, [pc, #300]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 80017ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4013      	ands	r3, r2
 80017f6:	d0ef      	beq.n	80017d8 <HAL_RCC_OscConfig+0x528>
 80017f8:	e014      	b.n	8001824 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fa:	f7ff f909 	bl	8000a10 <HAL_GetTick>
 80017fe:	0003      	movs	r3, r0
 8001800:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001802:	e009      	b.n	8001818 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001804:	f7ff f904 	bl	8000a10 <HAL_GetTick>
 8001808:	0002      	movs	r2, r0
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	4a47      	ldr	r2, [pc, #284]	; (800192c <HAL_RCC_OscConfig+0x67c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e104      	b.n	8001a22 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001818:	4b40      	ldr	r3, [pc, #256]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 800181a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4013      	ands	r3, r2
 8001822:	d1ef      	bne.n	8001804 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001824:	2327      	movs	r3, #39	; 0x27
 8001826:	18fb      	adds	r3, r7, r3
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d105      	bne.n	800183a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800182e:	4b3b      	ldr	r3, [pc, #236]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 8001830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001832:	4b3a      	ldr	r3, [pc, #232]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 8001834:	493e      	ldr	r1, [pc, #248]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 8001836:	400a      	ands	r2, r1
 8001838:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2220      	movs	r2, #32
 8001840:	4013      	ands	r3, r2
 8001842:	d049      	beq.n	80018d8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d026      	beq.n	800189a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800184c:	4b33      	ldr	r3, [pc, #204]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 8001852:	2101      	movs	r1, #1
 8001854:	430a      	orrs	r2, r1
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	4b30      	ldr	r3, [pc, #192]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 800185a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800185c:	4b2f      	ldr	r3, [pc, #188]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 800185e:	2101      	movs	r1, #1
 8001860:	430a      	orrs	r2, r1
 8001862:	635a      	str	r2, [r3, #52]	; 0x34
 8001864:	4b33      	ldr	r3, [pc, #204]	; (8001934 <HAL_RCC_OscConfig+0x684>)
 8001866:	6a1a      	ldr	r2, [r3, #32]
 8001868:	4b32      	ldr	r3, [pc, #200]	; (8001934 <HAL_RCC_OscConfig+0x684>)
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	0189      	lsls	r1, r1, #6
 800186e:	430a      	orrs	r2, r1
 8001870:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001872:	f7ff f8cd 	bl	8000a10 <HAL_GetTick>
 8001876:	0003      	movs	r3, r0
 8001878:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800187c:	f7ff f8c8 	bl	8000a10 <HAL_GetTick>
 8001880:	0002      	movs	r2, r0
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e0c9      	b.n	8001a22 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800188e:	4b23      	ldr	r3, [pc, #140]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2202      	movs	r2, #2
 8001894:	4013      	ands	r3, r2
 8001896:	d0f1      	beq.n	800187c <HAL_RCC_OscConfig+0x5cc>
 8001898:	e01e      	b.n	80018d8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800189a:	4b20      	ldr	r3, [pc, #128]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	4b1f      	ldr	r3, [pc, #124]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 80018a0:	2101      	movs	r1, #1
 80018a2:	438a      	bics	r2, r1
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	4b23      	ldr	r3, [pc, #140]	; (8001934 <HAL_RCC_OscConfig+0x684>)
 80018a8:	6a1a      	ldr	r2, [r3, #32]
 80018aa:	4b22      	ldr	r3, [pc, #136]	; (8001934 <HAL_RCC_OscConfig+0x684>)
 80018ac:	4922      	ldr	r1, [pc, #136]	; (8001938 <HAL_RCC_OscConfig+0x688>)
 80018ae:	400a      	ands	r2, r1
 80018b0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7ff f8ad 	bl	8000a10 <HAL_GetTick>
 80018b6:	0003      	movs	r3, r0
 80018b8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018bc:	f7ff f8a8 	bl	8000a10 <HAL_GetTick>
 80018c0:	0002      	movs	r2, r0
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e0a9      	b.n	8001a22 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2202      	movs	r2, #2
 80018d4:	4013      	ands	r3, r2
 80018d6:	d1f1      	bne.n	80018bc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d100      	bne.n	80018e2 <HAL_RCC_OscConfig+0x632>
 80018e0:	e09e      	b.n	8001a20 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	2b0c      	cmp	r3, #12
 80018e6:	d100      	bne.n	80018ea <HAL_RCC_OscConfig+0x63a>
 80018e8:	e077      	b.n	80019da <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d158      	bne.n	80019a4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_RCC_OscConfig+0x66c>)
 80018f8:	4910      	ldr	r1, [pc, #64]	; (800193c <HAL_RCC_OscConfig+0x68c>)
 80018fa:	400a      	ands	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff f887 	bl	8000a10 <HAL_GetTick>
 8001902:	0003      	movs	r3, r0
 8001904:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001906:	e01b      	b.n	8001940 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001908:	f7ff f882 	bl	8000a10 <HAL_GetTick>
 800190c:	0002      	movs	r2, r0
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d914      	bls.n	8001940 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e083      	b.n	8001a22 <HAL_RCC_OscConfig+0x772>
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	40021000 	.word	0x40021000
 8001920:	fffffeff 	.word	0xfffffeff
 8001924:	40007000 	.word	0x40007000
 8001928:	fffffbff 	.word	0xfffffbff
 800192c:	00001388 	.word	0x00001388
 8001930:	efffffff 	.word	0xefffffff
 8001934:	40010000 	.word	0x40010000
 8001938:	ffffdfff 	.word	0xffffdfff
 800193c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001940:	4b3a      	ldr	r3, [pc, #232]	; (8001a2c <HAL_RCC_OscConfig+0x77c>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	049b      	lsls	r3, r3, #18
 8001948:	4013      	ands	r3, r2
 800194a:	d1dd      	bne.n	8001908 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800194c:	4b37      	ldr	r3, [pc, #220]	; (8001a2c <HAL_RCC_OscConfig+0x77c>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4a37      	ldr	r2, [pc, #220]	; (8001a30 <HAL_RCC_OscConfig+0x780>)
 8001952:	4013      	ands	r3, r2
 8001954:	0019      	movs	r1, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001964:	431a      	orrs	r2, r3
 8001966:	4b31      	ldr	r3, [pc, #196]	; (8001a2c <HAL_RCC_OscConfig+0x77c>)
 8001968:	430a      	orrs	r2, r1
 800196a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800196c:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <HAL_RCC_OscConfig+0x77c>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b2e      	ldr	r3, [pc, #184]	; (8001a2c <HAL_RCC_OscConfig+0x77c>)
 8001972:	2180      	movs	r1, #128	; 0x80
 8001974:	0449      	lsls	r1, r1, #17
 8001976:	430a      	orrs	r2, r1
 8001978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197a:	f7ff f849 	bl	8000a10 <HAL_GetTick>
 800197e:	0003      	movs	r3, r0
 8001980:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001984:	f7ff f844 	bl	8000a10 <HAL_GetTick>
 8001988:	0002      	movs	r2, r0
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e045      	b.n	8001a22 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001996:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <HAL_RCC_OscConfig+0x77c>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	049b      	lsls	r3, r3, #18
 800199e:	4013      	ands	r3, r2
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x6d4>
 80019a2:	e03d      	b.n	8001a20 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a4:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <HAL_RCC_OscConfig+0x77c>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <HAL_RCC_OscConfig+0x77c>)
 80019aa:	4922      	ldr	r1, [pc, #136]	; (8001a34 <HAL_RCC_OscConfig+0x784>)
 80019ac:	400a      	ands	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff f82e 	bl	8000a10 <HAL_GetTick>
 80019b4:	0003      	movs	r3, r0
 80019b6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ba:	f7ff f829 	bl	8000a10 <HAL_GetTick>
 80019be:	0002      	movs	r2, r0
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e02a      	b.n	8001a22 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019cc:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <HAL_RCC_OscConfig+0x77c>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	049b      	lsls	r3, r3, #18
 80019d4:	4013      	ands	r3, r2
 80019d6:	d1f0      	bne.n	80019ba <HAL_RCC_OscConfig+0x70a>
 80019d8:	e022      	b.n	8001a20 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e01d      	b.n	8001a22 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <HAL_RCC_OscConfig+0x77c>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	025b      	lsls	r3, r3, #9
 80019f2:	401a      	ands	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d10f      	bne.n	8001a1c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019fc:	69fa      	ldr	r2, [r7, #28]
 80019fe:	23f0      	movs	r3, #240	; 0xf0
 8001a00:	039b      	lsls	r3, r3, #14
 8001a02:	401a      	ands	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d107      	bne.n	8001a1c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001a0c:	69fa      	ldr	r2, [r7, #28]
 8001a0e:	23c0      	movs	r3, #192	; 0xc0
 8001a10:	041b      	lsls	r3, r3, #16
 8001a12:	401a      	ands	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d001      	beq.n	8001a20 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	0018      	movs	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b00a      	add	sp, #40	; 0x28
 8001a28:	bdb0      	pop	{r4, r5, r7, pc}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	ff02ffff 	.word	0xff02ffff
 8001a34:	feffffff 	.word	0xfeffffff

08001a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a38:	b5b0      	push	{r4, r5, r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e128      	b.n	8001c9e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b96      	ldr	r3, [pc, #600]	; (8001ca8 <HAL_RCC_ClockConfig+0x270>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2201      	movs	r2, #1
 8001a52:	4013      	ands	r3, r2
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d91e      	bls.n	8001a98 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4b93      	ldr	r3, [pc, #588]	; (8001ca8 <HAL_RCC_ClockConfig+0x270>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4393      	bics	r3, r2
 8001a62:	0019      	movs	r1, r3
 8001a64:	4b90      	ldr	r3, [pc, #576]	; (8001ca8 <HAL_RCC_ClockConfig+0x270>)
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a6c:	f7fe ffd0 	bl	8000a10 <HAL_GetTick>
 8001a70:	0003      	movs	r3, r0
 8001a72:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a74:	e009      	b.n	8001a8a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a76:	f7fe ffcb 	bl	8000a10 <HAL_GetTick>
 8001a7a:	0002      	movs	r2, r0
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	4a8a      	ldr	r2, [pc, #552]	; (8001cac <HAL_RCC_ClockConfig+0x274>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e109      	b.n	8001c9e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8a:	4b87      	ldr	r3, [pc, #540]	; (8001ca8 <HAL_RCC_ClockConfig+0x270>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4013      	ands	r3, r2
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d1ee      	bne.n	8001a76 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d009      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa2:	4b83      	ldr	r3, [pc, #524]	; (8001cb0 <HAL_RCC_ClockConfig+0x278>)
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	22f0      	movs	r2, #240	; 0xf0
 8001aa8:	4393      	bics	r3, r2
 8001aaa:	0019      	movs	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	4b7f      	ldr	r3, [pc, #508]	; (8001cb0 <HAL_RCC_ClockConfig+0x278>)
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2201      	movs	r2, #1
 8001abc:	4013      	ands	r3, r2
 8001abe:	d100      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0x8a>
 8001ac0:	e089      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aca:	4b79      	ldr	r3, [pc, #484]	; (8001cb0 <HAL_RCC_ClockConfig+0x278>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	029b      	lsls	r3, r3, #10
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d120      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e0e1      	b.n	8001c9e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d107      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ae2:	4b73      	ldr	r3, [pc, #460]	; (8001cb0 <HAL_RCC_ClockConfig+0x278>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	049b      	lsls	r3, r3, #18
 8001aea:	4013      	ands	r3, r2
 8001aec:	d114      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e0d5      	b.n	8001c9e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d106      	bne.n	8001b08 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001afa:	4b6d      	ldr	r3, [pc, #436]	; (8001cb0 <HAL_RCC_ClockConfig+0x278>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2204      	movs	r2, #4
 8001b00:	4013      	ands	r3, r2
 8001b02:	d109      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0ca      	b.n	8001c9e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b08:	4b69      	ldr	r3, [pc, #420]	; (8001cb0 <HAL_RCC_ClockConfig+0x278>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4013      	ands	r3, r2
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0c2      	b.n	8001c9e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b18:	4b65      	ldr	r3, [pc, #404]	; (8001cb0 <HAL_RCC_ClockConfig+0x278>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	4393      	bics	r3, r2
 8001b20:	0019      	movs	r1, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	4b62      	ldr	r3, [pc, #392]	; (8001cb0 <HAL_RCC_ClockConfig+0x278>)
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b2c:	f7fe ff70 	bl	8000a10 <HAL_GetTick>
 8001b30:	0003      	movs	r3, r0
 8001b32:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d111      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b3c:	e009      	b.n	8001b52 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3e:	f7fe ff67 	bl	8000a10 <HAL_GetTick>
 8001b42:	0002      	movs	r2, r0
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	4a58      	ldr	r2, [pc, #352]	; (8001cac <HAL_RCC_ClockConfig+0x274>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e0a5      	b.n	8001c9e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b52:	4b57      	ldr	r3, [pc, #348]	; (8001cb0 <HAL_RCC_ClockConfig+0x278>)
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	220c      	movs	r2, #12
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d1ef      	bne.n	8001b3e <HAL_RCC_ClockConfig+0x106>
 8001b5e:	e03a      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d111      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b68:	e009      	b.n	8001b7e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6a:	f7fe ff51 	bl	8000a10 <HAL_GetTick>
 8001b6e:	0002      	movs	r2, r0
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	4a4d      	ldr	r2, [pc, #308]	; (8001cac <HAL_RCC_ClockConfig+0x274>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e08f      	b.n	8001c9e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b7e:	4b4c      	ldr	r3, [pc, #304]	; (8001cb0 <HAL_RCC_ClockConfig+0x278>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	220c      	movs	r2, #12
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b0c      	cmp	r3, #12
 8001b88:	d1ef      	bne.n	8001b6a <HAL_RCC_ClockConfig+0x132>
 8001b8a:	e024      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d11b      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b94:	e009      	b.n	8001baa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b96:	f7fe ff3b 	bl	8000a10 <HAL_GetTick>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	4a42      	ldr	r2, [pc, #264]	; (8001cac <HAL_RCC_ClockConfig+0x274>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e079      	b.n	8001c9e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001baa:	4b41      	ldr	r3, [pc, #260]	; (8001cb0 <HAL_RCC_ClockConfig+0x278>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	220c      	movs	r2, #12
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d1ef      	bne.n	8001b96 <HAL_RCC_ClockConfig+0x15e>
 8001bb6:	e00e      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb8:	f7fe ff2a 	bl	8000a10 <HAL_GetTick>
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	4a3a      	ldr	r2, [pc, #232]	; (8001cac <HAL_RCC_ClockConfig+0x274>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e068      	b.n	8001c9e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bcc:	4b38      	ldr	r3, [pc, #224]	; (8001cb0 <HAL_RCC_ClockConfig+0x278>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	220c      	movs	r2, #12
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd6:	4b34      	ldr	r3, [pc, #208]	; (8001ca8 <HAL_RCC_ClockConfig+0x270>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4013      	ands	r3, r2
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d21e      	bcs.n	8001c22 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be4:	4b30      	ldr	r3, [pc, #192]	; (8001ca8 <HAL_RCC_ClockConfig+0x270>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2201      	movs	r2, #1
 8001bea:	4393      	bics	r3, r2
 8001bec:	0019      	movs	r1, r3
 8001bee:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <HAL_RCC_ClockConfig+0x270>)
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bf6:	f7fe ff0b 	bl	8000a10 <HAL_GetTick>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfe:	e009      	b.n	8001c14 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c00:	f7fe ff06 	bl	8000a10 <HAL_GetTick>
 8001c04:	0002      	movs	r2, r0
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	4a28      	ldr	r2, [pc, #160]	; (8001cac <HAL_RCC_ClockConfig+0x274>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e044      	b.n	8001c9e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c14:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <HAL_RCC_ClockConfig+0x270>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d1ee      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2204      	movs	r2, #4
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d009      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c2c:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_RCC_ClockConfig+0x278>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	4a20      	ldr	r2, [pc, #128]	; (8001cb4 <HAL_RCC_ClockConfig+0x27c>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	0019      	movs	r1, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_RCC_ClockConfig+0x278>)
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2208      	movs	r2, #8
 8001c46:	4013      	ands	r3, r2
 8001c48:	d00a      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c4a:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_RCC_ClockConfig+0x278>)
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	4a1a      	ldr	r2, [pc, #104]	; (8001cb8 <HAL_RCC_ClockConfig+0x280>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	0019      	movs	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	00da      	lsls	r2, r3, #3
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_RCC_ClockConfig+0x278>)
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c60:	f000 f832 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001c64:	0001      	movs	r1, r0
 8001c66:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_RCC_ClockConfig+0x278>)
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	091b      	lsrs	r3, r3, #4
 8001c6c:	220f      	movs	r2, #15
 8001c6e:	4013      	ands	r3, r2
 8001c70:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <HAL_RCC_ClockConfig+0x284>)
 8001c72:	5cd3      	ldrb	r3, [r2, r3]
 8001c74:	000a      	movs	r2, r1
 8001c76:	40da      	lsrs	r2, r3
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <HAL_RCC_ClockConfig+0x288>)
 8001c7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_RCC_ClockConfig+0x28c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	250b      	movs	r5, #11
 8001c82:	197c      	adds	r4, r7, r5
 8001c84:	0018      	movs	r0, r3
 8001c86:	f7fe fe7d 	bl	8000984 <HAL_InitTick>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001c8e:	197b      	adds	r3, r7, r5
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001c96:	197b      	adds	r3, r7, r5
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	e000      	b.n	8001c9e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b004      	add	sp, #16
 8001ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	40022000 	.word	0x40022000
 8001cac:	00001388 	.word	0x00001388
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	fffff8ff 	.word	0xfffff8ff
 8001cb8:	ffffc7ff 	.word	0xffffc7ff
 8001cbc:	08003084 	.word	0x08003084
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc8:	b5b0      	push	{r4, r5, r7, lr}
 8001cca:	b08e      	sub	sp, #56	; 0x38
 8001ccc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001cce:	4b4c      	ldr	r3, [pc, #304]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cd6:	230c      	movs	r3, #12
 8001cd8:	4013      	ands	r3, r2
 8001cda:	2b0c      	cmp	r3, #12
 8001cdc:	d014      	beq.n	8001d08 <HAL_RCC_GetSysClockFreq+0x40>
 8001cde:	d900      	bls.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x1a>
 8001ce0:	e07b      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x112>
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d002      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0x24>
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d00b      	beq.n	8001d02 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cea:	e076      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001cec:	4b44      	ldr	r3, [pc, #272]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2210      	movs	r2, #16
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d002      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001cf6:	4b43      	ldr	r3, [pc, #268]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001cf8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001cfa:	e07c      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001cfc:	4b42      	ldr	r3, [pc, #264]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x140>)
 8001cfe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d00:	e079      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d02:	4b42      	ldr	r3, [pc, #264]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x144>)
 8001d04:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d06:	e076      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0a:	0c9a      	lsrs	r2, r3, #18
 8001d0c:	230f      	movs	r3, #15
 8001d0e:	401a      	ands	r2, r3
 8001d10:	4b3f      	ldr	r3, [pc, #252]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x148>)
 8001d12:	5c9b      	ldrb	r3, [r3, r2]
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d18:	0d9a      	lsrs	r2, r3, #22
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	3301      	adds	r3, #1
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d22:	4b37      	ldr	r3, [pc, #220]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	025b      	lsls	r3, r3, #9
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d01a      	beq.n	8001d64 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	4a35      	ldr	r2, [pc, #212]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x144>)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	69b8      	ldr	r0, [r7, #24]
 8001d3c:	69f9      	ldr	r1, [r7, #28]
 8001d3e:	f7fe fa8f 	bl	8000260 <__aeabi_lmul>
 8001d42:	0002      	movs	r2, r0
 8001d44:	000b      	movs	r3, r1
 8001d46:	0010      	movs	r0, r2
 8001d48:	0019      	movs	r1, r3
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f7fe fa63 	bl	8000220 <__aeabi_uldivmod>
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	000b      	movs	r3, r1
 8001d5e:	0013      	movs	r3, r2
 8001d60:	637b      	str	r3, [r7, #52]	; 0x34
 8001d62:	e037      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d64:	4b26      	ldr	r3, [pc, #152]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2210      	movs	r2, #16
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d01a      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4a23      	ldr	r2, [pc, #140]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	68b8      	ldr	r0, [r7, #8]
 8001d7c:	68f9      	ldr	r1, [r7, #12]
 8001d7e:	f7fe fa6f 	bl	8000260 <__aeabi_lmul>
 8001d82:	0002      	movs	r2, r0
 8001d84:	000b      	movs	r3, r1
 8001d86:	0010      	movs	r0, r2
 8001d88:	0019      	movs	r1, r3
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	603b      	str	r3, [r7, #0]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f7fe fa43 	bl	8000220 <__aeabi_uldivmod>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	000b      	movs	r3, r1
 8001d9e:	0013      	movs	r3, r2
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
 8001da2:	e017      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da6:	0018      	movs	r0, r3
 8001da8:	2300      	movs	r3, #0
 8001daa:	0019      	movs	r1, r3
 8001dac:	4a16      	ldr	r2, [pc, #88]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x140>)
 8001dae:	2300      	movs	r3, #0
 8001db0:	f7fe fa56 	bl	8000260 <__aeabi_lmul>
 8001db4:	0002      	movs	r2, r0
 8001db6:	000b      	movs	r3, r1
 8001db8:	0010      	movs	r0, r2
 8001dba:	0019      	movs	r1, r3
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	001c      	movs	r4, r3
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	001d      	movs	r5, r3
 8001dc4:	0022      	movs	r2, r4
 8001dc6:	002b      	movs	r3, r5
 8001dc8:	f7fe fa2a 	bl	8000220 <__aeabi_uldivmod>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	000b      	movs	r3, r1
 8001dd0:	0013      	movs	r3, r2
 8001dd2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dd8:	e00d      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	0b5b      	lsrs	r3, r3, #13
 8001de0:	2207      	movs	r2, #7
 8001de2:	4013      	ands	r3, r2
 8001de4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	3301      	adds	r3, #1
 8001dea:	2280      	movs	r2, #128	; 0x80
 8001dec:	0212      	lsls	r2, r2, #8
 8001dee:	409a      	lsls	r2, r3
 8001df0:	0013      	movs	r3, r2
 8001df2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001df4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001df8:	0018      	movs	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b00e      	add	sp, #56	; 0x38
 8001dfe:	bdb0      	pop	{r4, r5, r7, pc}
 8001e00:	40021000 	.word	0x40021000
 8001e04:	003d0900 	.word	0x003d0900
 8001e08:	00f42400 	.word	0x00f42400
 8001e0c:	007a1200 	.word	0x007a1200
 8001e10:	0800309c 	.word	0x0800309c

08001e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e18:	4b02      	ldr	r3, [pc, #8]	; (8001e24 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	20000000 	.word	0x20000000

08001e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e2c:	f7ff fff2 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e30:	0001      	movs	r1, r0
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	2207      	movs	r2, #7
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e3e:	5cd3      	ldrb	r3, [r2, r3]
 8001e40:	40d9      	lsrs	r1, r3
 8001e42:	000b      	movs	r3, r1
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08003094 	.word	0x08003094

08001e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e58:	f7ff ffdc 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e5c:	0001      	movs	r1, r0
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	0adb      	lsrs	r3, r3, #11
 8001e64:	2207      	movs	r2, #7
 8001e66:	4013      	ands	r3, r2
 8001e68:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e6a:	5cd3      	ldrb	r3, [r2, r3]
 8001e6c:	40d9      	lsrs	r1, r3
 8001e6e:	000b      	movs	r3, r1
}
 8001e70:	0018      	movs	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	08003094 	.word	0x08003094

08001e80 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001e88:	2317      	movs	r3, #23
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2220      	movs	r2, #32
 8001e96:	4013      	ands	r3, r2
 8001e98:	d106      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d100      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001ea6:	e104      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ea8:	4bb1      	ldr	r3, [pc, #708]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001eaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	055b      	lsls	r3, r3, #21
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d10a      	bne.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb4:	4bae      	ldr	r3, [pc, #696]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eb8:	4bad      	ldr	r3, [pc, #692]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001eba:	2180      	movs	r1, #128	; 0x80
 8001ebc:	0549      	lsls	r1, r1, #21
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001ec2:	2317      	movs	r3, #23
 8001ec4:	18fb      	adds	r3, r7, r3
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eca:	4baa      	ldr	r3, [pc, #680]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d11a      	bne.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed6:	4ba7      	ldr	r3, [pc, #668]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4ba6      	ldr	r3, [pc, #664]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001edc:	2180      	movs	r1, #128	; 0x80
 8001ede:	0049      	lsls	r1, r1, #1
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ee4:	f7fe fd94 	bl	8000a10 <HAL_GetTick>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eec:	e008      	b.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eee:	f7fe fd8f 	bl	8000a10 <HAL_GetTick>
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b64      	cmp	r3, #100	; 0x64
 8001efa:	d901      	bls.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e133      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f00:	4b9c      	ldr	r3, [pc, #624]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001f0c:	4b98      	ldr	r3, [pc, #608]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	23c0      	movs	r3, #192	; 0xc0
 8001f12:	039b      	lsls	r3, r3, #14
 8001f14:	4013      	ands	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	23c0      	movs	r3, #192	; 0xc0
 8001f1e:	039b      	lsls	r3, r3, #14
 8001f20:	4013      	ands	r3, r2
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d107      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	23c0      	movs	r3, #192	; 0xc0
 8001f2e:	039b      	lsls	r3, r3, #14
 8001f30:	4013      	ands	r3, r2
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d013      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	23c0      	movs	r3, #192	; 0xc0
 8001f3e:	029b      	lsls	r3, r3, #10
 8001f40:	401a      	ands	r2, r3
 8001f42:	23c0      	movs	r3, #192	; 0xc0
 8001f44:	029b      	lsls	r3, r3, #10
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d10a      	bne.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001f4a:	4b89      	ldr	r3, [pc, #548]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	029b      	lsls	r3, r3, #10
 8001f52:	401a      	ands	r2, r3
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	029b      	lsls	r3, r3, #10
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e103      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001f60:	4b83      	ldr	r3, [pc, #524]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f64:	23c0      	movs	r3, #192	; 0xc0
 8001f66:	029b      	lsls	r3, r3, #10
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d049      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	23c0      	movs	r3, #192	; 0xc0
 8001f78:	029b      	lsls	r3, r3, #10
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d004      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2220      	movs	r2, #32
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d10d      	bne.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	23c0      	movs	r3, #192	; 0xc0
 8001f92:	029b      	lsls	r3, r3, #10
 8001f94:	4013      	ands	r3, r2
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d034      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d02e      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001fa8:	4b71      	ldr	r3, [pc, #452]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fac:	4a72      	ldr	r2, [pc, #456]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fb2:	4b6f      	ldr	r3, [pc, #444]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fb6:	4b6e      	ldr	r3, [pc, #440]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fb8:	2180      	movs	r1, #128	; 0x80
 8001fba:	0309      	lsls	r1, r1, #12
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fc0:	4b6b      	ldr	r3, [pc, #428]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fc4:	4b6a      	ldr	r3, [pc, #424]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fc6:	496d      	ldr	r1, [pc, #436]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001fc8:	400a      	ands	r2, r1
 8001fca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001fcc:	4b68      	ldr	r3, [pc, #416]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d014      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7fe fd18 	bl	8000a10 <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fe4:	e009      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7fe fd13 	bl	8000a10 <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	4a63      	ldr	r2, [pc, #396]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e0b6      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ffa:	4b5d      	ldr	r3, [pc, #372]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ffc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4013      	ands	r3, r2
 8002004:	d0ef      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	4013      	ands	r3, r2
 8002010:	d01f      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	23c0      	movs	r3, #192	; 0xc0
 8002018:	029b      	lsls	r3, r3, #10
 800201a:	401a      	ands	r2, r3
 800201c:	23c0      	movs	r3, #192	; 0xc0
 800201e:	029b      	lsls	r3, r3, #10
 8002020:	429a      	cmp	r2, r3
 8002022:	d10c      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002024:	4b52      	ldr	r3, [pc, #328]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a56      	ldr	r2, [pc, #344]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800202a:	4013      	ands	r3, r2
 800202c:	0019      	movs	r1, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	23c0      	movs	r3, #192	; 0xc0
 8002034:	039b      	lsls	r3, r3, #14
 8002036:	401a      	ands	r2, r3
 8002038:	4b4d      	ldr	r3, [pc, #308]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800203a:	430a      	orrs	r2, r1
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	4b4c      	ldr	r3, [pc, #304]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002040:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	23c0      	movs	r3, #192	; 0xc0
 8002048:	029b      	lsls	r3, r3, #10
 800204a:	401a      	ands	r2, r3
 800204c:	4b48      	ldr	r3, [pc, #288]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800204e:	430a      	orrs	r2, r1
 8002050:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2220      	movs	r2, #32
 8002058:	4013      	ands	r3, r2
 800205a:	d01f      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	23c0      	movs	r3, #192	; 0xc0
 8002062:	029b      	lsls	r3, r3, #10
 8002064:	401a      	ands	r2, r3
 8002066:	23c0      	movs	r3, #192	; 0xc0
 8002068:	029b      	lsls	r3, r3, #10
 800206a:	429a      	cmp	r2, r3
 800206c:	d10c      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800206e:	4b40      	ldr	r3, [pc, #256]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a44      	ldr	r2, [pc, #272]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002074:	4013      	ands	r3, r2
 8002076:	0019      	movs	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	23c0      	movs	r3, #192	; 0xc0
 800207e:	039b      	lsls	r3, r3, #14
 8002080:	401a      	ands	r2, r3
 8002082:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002084:	430a      	orrs	r2, r1
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	4b39      	ldr	r3, [pc, #228]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800208a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	23c0      	movs	r3, #192	; 0xc0
 8002092:	029b      	lsls	r3, r3, #10
 8002094:	401a      	ands	r2, r3
 8002096:	4b36      	ldr	r3, [pc, #216]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002098:	430a      	orrs	r2, r1
 800209a:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800209c:	2317      	movs	r3, #23
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d105      	bne.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a6:	4b32      	ldr	r3, [pc, #200]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020aa:	4b31      	ldr	r3, [pc, #196]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020ac:	4936      	ldr	r1, [pc, #216]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020ae:	400a      	ands	r2, r1
 80020b0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2201      	movs	r2, #1
 80020b8:	4013      	ands	r3, r2
 80020ba:	d009      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020bc:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c0:	2203      	movs	r2, #3
 80020c2:	4393      	bics	r3, r2
 80020c4:	0019      	movs	r1, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	4b29      	ldr	r3, [pc, #164]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020cc:	430a      	orrs	r2, r1
 80020ce:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2202      	movs	r2, #2
 80020d6:	4013      	ands	r3, r2
 80020d8:	d009      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020da:	4b25      	ldr	r3, [pc, #148]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020de:	220c      	movs	r2, #12
 80020e0:	4393      	bics	r3, r2
 80020e2:	0019      	movs	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	4b21      	ldr	r3, [pc, #132]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020ea:	430a      	orrs	r2, r1
 80020ec:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2204      	movs	r2, #4
 80020f4:	4013      	ands	r3, r2
 80020f6:	d009      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020f8:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fc:	4a23      	ldr	r2, [pc, #140]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80020fe:	4013      	ands	r3, r2
 8002100:	0019      	movs	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	4b1a      	ldr	r3, [pc, #104]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002108:	430a      	orrs	r2, r1
 800210a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2208      	movs	r2, #8
 8002112:	4013      	ands	r3, r2
 8002114:	d009      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002116:	4b16      	ldr	r3, [pc, #88]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211a:	4a1d      	ldr	r2, [pc, #116]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800211c:	4013      	ands	r3, r2
 800211e:	0019      	movs	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	699a      	ldr	r2, [r3, #24]
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002126:	430a      	orrs	r2, r1
 8002128:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2240      	movs	r2, #64	; 0x40
 8002130:	4013      	ands	r3, r2
 8002132:	d009      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002134:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002138:	4a16      	ldr	r2, [pc, #88]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800213a:	4013      	ands	r3, r2
 800213c:	0019      	movs	r1, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1a      	ldr	r2, [r3, #32]
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002144:	430a      	orrs	r2, r1
 8002146:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2280      	movs	r2, #128	; 0x80
 800214e:	4013      	ands	r3, r2
 8002150:	d009      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002152:	4b07      	ldr	r3, [pc, #28]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	4a10      	ldr	r2, [pc, #64]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002158:	4013      	ands	r3, r2
 800215a:	0019      	movs	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69da      	ldr	r2, [r3, #28]
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002162:	430a      	orrs	r2, r1
 8002164:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b006      	add	sp, #24
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000
 8002174:	40007000 	.word	0x40007000
 8002178:	fffcffff 	.word	0xfffcffff
 800217c:	fff7ffff 	.word	0xfff7ffff
 8002180:	00001388 	.word	0x00001388
 8002184:	ffcfffff 	.word	0xffcfffff
 8002188:	efffffff 	.word	0xefffffff
 800218c:	fffff3ff 	.word	0xfffff3ff
 8002190:	ffffcfff 	.word	0xffffcfff
 8002194:	fbffffff 	.word	0xfbffffff
 8002198:	fff3ffff 	.word	0xfff3ffff

0800219c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e044      	b.n	8002238 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d107      	bne.n	80021c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2278      	movs	r2, #120	; 0x78
 80021ba:	2100      	movs	r1, #0
 80021bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	0018      	movs	r0, r3
 80021c2:	f7fe fac5 	bl	8000750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2224      	movs	r2, #36	; 0x24
 80021ca:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2101      	movs	r1, #1
 80021d8:	438a      	bics	r2, r1
 80021da:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	0018      	movs	r0, r3
 80021e0:	f000 f8aa 	bl	8002338 <UART_SetConfig>
 80021e4:	0003      	movs	r3, r0
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e024      	b.n	8002238 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	0018      	movs	r0, r3
 80021fa:	f000 fb21 	bl	8002840 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	490d      	ldr	r1, [pc, #52]	; (8002240 <HAL_UART_Init+0xa4>)
 800220a:	400a      	ands	r2, r1
 800220c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	212a      	movs	r1, #42	; 0x2a
 800221a:	438a      	bics	r2, r1
 800221c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2101      	movs	r1, #1
 800222a:	430a      	orrs	r2, r1
 800222c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	0018      	movs	r0, r3
 8002232:	f000 fbb9 	bl	80029a8 <UART_CheckIdleState>
 8002236:	0003      	movs	r3, r0
}
 8002238:	0018      	movs	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	b002      	add	sp, #8
 800223e:	bd80      	pop	{r7, pc}
 8002240:	ffffb7ff 	.word	0xffffb7ff

08002244 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	1dbb      	adds	r3, r7, #6
 8002250:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2280      	movs	r2, #128	; 0x80
 8002256:	589b      	ldr	r3, [r3, r2]
 8002258:	2b20      	cmp	r3, #32
 800225a:	d14a      	bne.n	80022f2 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_UART_Receive_DMA+0x26>
 8002262:	1dbb      	adds	r3, r7, #6
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e042      	b.n	80022f4 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	015b      	lsls	r3, r3, #5
 8002276:	429a      	cmp	r2, r3
 8002278:	d109      	bne.n	800228e <HAL_UART_Receive_DMA+0x4a>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d105      	bne.n	800228e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2201      	movs	r2, #1
 8002286:	4013      	ands	r3, r2
 8002288:	d001      	beq.n	800228e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e032      	b.n	80022f4 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a18      	ldr	r2, [pc, #96]	; (80022fc <HAL_UART_Receive_DMA+0xb8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d020      	beq.n	80022e0 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	041b      	lsls	r3, r3, #16
 80022a8:	4013      	ands	r3, r2
 80022aa:	d019      	beq.n	80022e0 <HAL_UART_Receive_DMA+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ac:	f3ef 8310 	mrs	r3, PRIMASK
 80022b0:	613b      	str	r3, [r7, #16]
  return(result);
 80022b2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	2301      	movs	r3, #1
 80022b8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f383 8810 	msr	PRIMASK, r3
}
 80022c0:	46c0      	nop			; (mov r8, r8)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2180      	movs	r1, #128	; 0x80
 80022ce:	04c9      	lsls	r1, r1, #19
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	f383 8810 	msr	PRIMASK, r3
}
 80022de:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80022e0:	1dbb      	adds	r3, r7, #6
 80022e2:	881a      	ldrh	r2, [r3, #0]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	0018      	movs	r0, r3
 80022ea:	f000 fc6f 	bl	8002bcc <UART_Start_Receive_DMA>
 80022ee:	0003      	movs	r3, r0
 80022f0:	e000      	b.n	80022f4 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80022f2:	2302      	movs	r3, #2
  }
}
 80022f4:	0018      	movs	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b008      	add	sp, #32
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40004800 	.word	0x40004800

08002300 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002308:	46c0      	nop			; (mov r8, r8)
 800230a:	46bd      	mov	sp, r7
 800230c:	b002      	add	sp, #8
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002318:	46c0      	nop			; (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	b002      	add	sp, #8
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	000a      	movs	r2, r1
 800232a:	1cbb      	adds	r3, r7, #2
 800232c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	46bd      	mov	sp, r7
 8002332:	b002      	add	sp, #8
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002338:	b5b0      	push	{r4, r5, r7, lr}
 800233a:	b08e      	sub	sp, #56	; 0x38
 800233c:	af00      	add	r7, sp, #0
 800233e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002340:	231a      	movs	r3, #26
 8002342:	2218      	movs	r2, #24
 8002344:	189b      	adds	r3, r3, r2
 8002346:	19db      	adds	r3, r3, r7
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	431a      	orrs	r2, r3
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	431a      	orrs	r2, r3
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	4313      	orrs	r3, r2
 8002362:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4ac6      	ldr	r2, [pc, #792]	; (8002684 <UART_SetConfig+0x34c>)
 800236c:	4013      	ands	r3, r2
 800236e:	0019      	movs	r1, r3
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002376:	430a      	orrs	r2, r1
 8002378:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	4ac1      	ldr	r2, [pc, #772]	; (8002688 <UART_SetConfig+0x350>)
 8002382:	4013      	ands	r3, r2
 8002384:	0019      	movs	r1, r3
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4abb      	ldr	r2, [pc, #748]	; (800268c <UART_SetConfig+0x354>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d004      	beq.n	80023ac <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023a8:	4313      	orrs	r3, r2
 80023aa:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	4ab7      	ldr	r2, [pc, #732]	; (8002690 <UART_SetConfig+0x358>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	0019      	movs	r1, r3
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023be:	430a      	orrs	r2, r1
 80023c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4ab3      	ldr	r2, [pc, #716]	; (8002694 <UART_SetConfig+0x35c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d131      	bne.n	8002430 <UART_SetConfig+0xf8>
 80023cc:	4bb2      	ldr	r3, [pc, #712]	; (8002698 <UART_SetConfig+0x360>)
 80023ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d0:	2203      	movs	r2, #3
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d01d      	beq.n	8002414 <UART_SetConfig+0xdc>
 80023d8:	d823      	bhi.n	8002422 <UART_SetConfig+0xea>
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d00c      	beq.n	80023f8 <UART_SetConfig+0xc0>
 80023de:	d820      	bhi.n	8002422 <UART_SetConfig+0xea>
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <UART_SetConfig+0xb2>
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d00e      	beq.n	8002406 <UART_SetConfig+0xce>
 80023e8:	e01b      	b.n	8002422 <UART_SetConfig+0xea>
 80023ea:	231b      	movs	r3, #27
 80023ec:	2218      	movs	r2, #24
 80023ee:	189b      	adds	r3, r3, r2
 80023f0:	19db      	adds	r3, r3, r7
 80023f2:	2201      	movs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]
 80023f6:	e09c      	b.n	8002532 <UART_SetConfig+0x1fa>
 80023f8:	231b      	movs	r3, #27
 80023fa:	2218      	movs	r2, #24
 80023fc:	189b      	adds	r3, r3, r2
 80023fe:	19db      	adds	r3, r3, r7
 8002400:	2202      	movs	r2, #2
 8002402:	701a      	strb	r2, [r3, #0]
 8002404:	e095      	b.n	8002532 <UART_SetConfig+0x1fa>
 8002406:	231b      	movs	r3, #27
 8002408:	2218      	movs	r2, #24
 800240a:	189b      	adds	r3, r3, r2
 800240c:	19db      	adds	r3, r3, r7
 800240e:	2204      	movs	r2, #4
 8002410:	701a      	strb	r2, [r3, #0]
 8002412:	e08e      	b.n	8002532 <UART_SetConfig+0x1fa>
 8002414:	231b      	movs	r3, #27
 8002416:	2218      	movs	r2, #24
 8002418:	189b      	adds	r3, r3, r2
 800241a:	19db      	adds	r3, r3, r7
 800241c:	2208      	movs	r2, #8
 800241e:	701a      	strb	r2, [r3, #0]
 8002420:	e087      	b.n	8002532 <UART_SetConfig+0x1fa>
 8002422:	231b      	movs	r3, #27
 8002424:	2218      	movs	r2, #24
 8002426:	189b      	adds	r3, r3, r2
 8002428:	19db      	adds	r3, r3, r7
 800242a:	2210      	movs	r2, #16
 800242c:	701a      	strb	r2, [r3, #0]
 800242e:	e080      	b.n	8002532 <UART_SetConfig+0x1fa>
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a99      	ldr	r2, [pc, #612]	; (800269c <UART_SetConfig+0x364>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d131      	bne.n	800249e <UART_SetConfig+0x166>
 800243a:	4b97      	ldr	r3, [pc, #604]	; (8002698 <UART_SetConfig+0x360>)
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	220c      	movs	r2, #12
 8002440:	4013      	ands	r3, r2
 8002442:	2b0c      	cmp	r3, #12
 8002444:	d01d      	beq.n	8002482 <UART_SetConfig+0x14a>
 8002446:	d823      	bhi.n	8002490 <UART_SetConfig+0x158>
 8002448:	2b08      	cmp	r3, #8
 800244a:	d00c      	beq.n	8002466 <UART_SetConfig+0x12e>
 800244c:	d820      	bhi.n	8002490 <UART_SetConfig+0x158>
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <UART_SetConfig+0x120>
 8002452:	2b04      	cmp	r3, #4
 8002454:	d00e      	beq.n	8002474 <UART_SetConfig+0x13c>
 8002456:	e01b      	b.n	8002490 <UART_SetConfig+0x158>
 8002458:	231b      	movs	r3, #27
 800245a:	2218      	movs	r2, #24
 800245c:	189b      	adds	r3, r3, r2
 800245e:	19db      	adds	r3, r3, r7
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
 8002464:	e065      	b.n	8002532 <UART_SetConfig+0x1fa>
 8002466:	231b      	movs	r3, #27
 8002468:	2218      	movs	r2, #24
 800246a:	189b      	adds	r3, r3, r2
 800246c:	19db      	adds	r3, r3, r7
 800246e:	2202      	movs	r2, #2
 8002470:	701a      	strb	r2, [r3, #0]
 8002472:	e05e      	b.n	8002532 <UART_SetConfig+0x1fa>
 8002474:	231b      	movs	r3, #27
 8002476:	2218      	movs	r2, #24
 8002478:	189b      	adds	r3, r3, r2
 800247a:	19db      	adds	r3, r3, r7
 800247c:	2204      	movs	r2, #4
 800247e:	701a      	strb	r2, [r3, #0]
 8002480:	e057      	b.n	8002532 <UART_SetConfig+0x1fa>
 8002482:	231b      	movs	r3, #27
 8002484:	2218      	movs	r2, #24
 8002486:	189b      	adds	r3, r3, r2
 8002488:	19db      	adds	r3, r3, r7
 800248a:	2208      	movs	r2, #8
 800248c:	701a      	strb	r2, [r3, #0]
 800248e:	e050      	b.n	8002532 <UART_SetConfig+0x1fa>
 8002490:	231b      	movs	r3, #27
 8002492:	2218      	movs	r2, #24
 8002494:	189b      	adds	r3, r3, r2
 8002496:	19db      	adds	r3, r3, r7
 8002498:	2210      	movs	r2, #16
 800249a:	701a      	strb	r2, [r3, #0]
 800249c:	e049      	b.n	8002532 <UART_SetConfig+0x1fa>
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a7a      	ldr	r2, [pc, #488]	; (800268c <UART_SetConfig+0x354>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d13e      	bne.n	8002526 <UART_SetConfig+0x1ee>
 80024a8:	4b7b      	ldr	r3, [pc, #492]	; (8002698 <UART_SetConfig+0x360>)
 80024aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024ac:	23c0      	movs	r3, #192	; 0xc0
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	4013      	ands	r3, r2
 80024b2:	22c0      	movs	r2, #192	; 0xc0
 80024b4:	0112      	lsls	r2, r2, #4
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d027      	beq.n	800250a <UART_SetConfig+0x1d2>
 80024ba:	22c0      	movs	r2, #192	; 0xc0
 80024bc:	0112      	lsls	r2, r2, #4
 80024be:	4293      	cmp	r3, r2
 80024c0:	d82a      	bhi.n	8002518 <UART_SetConfig+0x1e0>
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	0112      	lsls	r2, r2, #4
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d011      	beq.n	80024ee <UART_SetConfig+0x1b6>
 80024ca:	2280      	movs	r2, #128	; 0x80
 80024cc:	0112      	lsls	r2, r2, #4
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d822      	bhi.n	8002518 <UART_SetConfig+0x1e0>
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d004      	beq.n	80024e0 <UART_SetConfig+0x1a8>
 80024d6:	2280      	movs	r2, #128	; 0x80
 80024d8:	00d2      	lsls	r2, r2, #3
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00e      	beq.n	80024fc <UART_SetConfig+0x1c4>
 80024de:	e01b      	b.n	8002518 <UART_SetConfig+0x1e0>
 80024e0:	231b      	movs	r3, #27
 80024e2:	2218      	movs	r2, #24
 80024e4:	189b      	adds	r3, r3, r2
 80024e6:	19db      	adds	r3, r3, r7
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
 80024ec:	e021      	b.n	8002532 <UART_SetConfig+0x1fa>
 80024ee:	231b      	movs	r3, #27
 80024f0:	2218      	movs	r2, #24
 80024f2:	189b      	adds	r3, r3, r2
 80024f4:	19db      	adds	r3, r3, r7
 80024f6:	2202      	movs	r2, #2
 80024f8:	701a      	strb	r2, [r3, #0]
 80024fa:	e01a      	b.n	8002532 <UART_SetConfig+0x1fa>
 80024fc:	231b      	movs	r3, #27
 80024fe:	2218      	movs	r2, #24
 8002500:	189b      	adds	r3, r3, r2
 8002502:	19db      	adds	r3, r3, r7
 8002504:	2204      	movs	r2, #4
 8002506:	701a      	strb	r2, [r3, #0]
 8002508:	e013      	b.n	8002532 <UART_SetConfig+0x1fa>
 800250a:	231b      	movs	r3, #27
 800250c:	2218      	movs	r2, #24
 800250e:	189b      	adds	r3, r3, r2
 8002510:	19db      	adds	r3, r3, r7
 8002512:	2208      	movs	r2, #8
 8002514:	701a      	strb	r2, [r3, #0]
 8002516:	e00c      	b.n	8002532 <UART_SetConfig+0x1fa>
 8002518:	231b      	movs	r3, #27
 800251a:	2218      	movs	r2, #24
 800251c:	189b      	adds	r3, r3, r2
 800251e:	19db      	adds	r3, r3, r7
 8002520:	2210      	movs	r2, #16
 8002522:	701a      	strb	r2, [r3, #0]
 8002524:	e005      	b.n	8002532 <UART_SetConfig+0x1fa>
 8002526:	231b      	movs	r3, #27
 8002528:	2218      	movs	r2, #24
 800252a:	189b      	adds	r3, r3, r2
 800252c:	19db      	adds	r3, r3, r7
 800252e:	2210      	movs	r2, #16
 8002530:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a55      	ldr	r2, [pc, #340]	; (800268c <UART_SetConfig+0x354>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d000      	beq.n	800253e <UART_SetConfig+0x206>
 800253c:	e084      	b.n	8002648 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800253e:	231b      	movs	r3, #27
 8002540:	2218      	movs	r2, #24
 8002542:	189b      	adds	r3, r3, r2
 8002544:	19db      	adds	r3, r3, r7
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b08      	cmp	r3, #8
 800254a:	d01d      	beq.n	8002588 <UART_SetConfig+0x250>
 800254c:	dc20      	bgt.n	8002590 <UART_SetConfig+0x258>
 800254e:	2b04      	cmp	r3, #4
 8002550:	d015      	beq.n	800257e <UART_SetConfig+0x246>
 8002552:	dc1d      	bgt.n	8002590 <UART_SetConfig+0x258>
 8002554:	2b00      	cmp	r3, #0
 8002556:	d002      	beq.n	800255e <UART_SetConfig+0x226>
 8002558:	2b02      	cmp	r3, #2
 800255a:	d005      	beq.n	8002568 <UART_SetConfig+0x230>
 800255c:	e018      	b.n	8002590 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800255e:	f7ff fc63 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 8002562:	0003      	movs	r3, r0
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002566:	e01c      	b.n	80025a2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002568:	4b4b      	ldr	r3, [pc, #300]	; (8002698 <UART_SetConfig+0x360>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2210      	movs	r2, #16
 800256e:	4013      	ands	r3, r2
 8002570:	d002      	beq.n	8002578 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002572:	4b4b      	ldr	r3, [pc, #300]	; (80026a0 <UART_SetConfig+0x368>)
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002576:	e014      	b.n	80025a2 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002578:	4b4a      	ldr	r3, [pc, #296]	; (80026a4 <UART_SetConfig+0x36c>)
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800257c:	e011      	b.n	80025a2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800257e:	f7ff fba3 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8002582:	0003      	movs	r3, r0
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002586:	e00c      	b.n	80025a2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	021b      	lsls	r3, r3, #8
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800258e:	e008      	b.n	80025a2 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002594:	231a      	movs	r3, #26
 8002596:	2218      	movs	r2, #24
 8002598:	189b      	adds	r3, r3, r2
 800259a:	19db      	adds	r3, r3, r7
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]
        break;
 80025a0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80025a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d100      	bne.n	80025aa <UART_SetConfig+0x272>
 80025a8:	e132      	b.n	8002810 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	0013      	movs	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	189b      	adds	r3, r3, r2
 80025b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d305      	bcc.n	80025c6 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80025c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d906      	bls.n	80025d4 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80025c6:	231a      	movs	r3, #26
 80025c8:	2218      	movs	r2, #24
 80025ca:	189b      	adds	r3, r3, r2
 80025cc:	19db      	adds	r3, r3, r7
 80025ce:	2201      	movs	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
 80025d2:	e11d      	b.n	8002810 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80025d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	6939      	ldr	r1, [r7, #16]
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	000b      	movs	r3, r1
 80025e2:	0e1b      	lsrs	r3, r3, #24
 80025e4:	0010      	movs	r0, r2
 80025e6:	0205      	lsls	r5, r0, #8
 80025e8:	431d      	orrs	r5, r3
 80025ea:	000b      	movs	r3, r1
 80025ec:	021c      	lsls	r4, r3, #8
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	085b      	lsrs	r3, r3, #1
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	68b8      	ldr	r0, [r7, #8]
 80025fc:	68f9      	ldr	r1, [r7, #12]
 80025fe:	1900      	adds	r0, r0, r4
 8002600:	4169      	adcs	r1, r5
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	2300      	movs	r3, #0
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f7fd fe06 	bl	8000220 <__aeabi_uldivmod>
 8002614:	0002      	movs	r2, r0
 8002616:	000b      	movs	r3, r1
 8002618:	0013      	movs	r3, r2
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800261c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800261e:	23c0      	movs	r3, #192	; 0xc0
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	429a      	cmp	r2, r3
 8002624:	d309      	bcc.n	800263a <UART_SetConfig+0x302>
 8002626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002628:	2380      	movs	r3, #128	; 0x80
 800262a:	035b      	lsls	r3, r3, #13
 800262c:	429a      	cmp	r2, r3
 800262e:	d204      	bcs.n	800263a <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002636:	60da      	str	r2, [r3, #12]
 8002638:	e0ea      	b.n	8002810 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 800263a:	231a      	movs	r3, #26
 800263c:	2218      	movs	r2, #24
 800263e:	189b      	adds	r3, r3, r2
 8002640:	19db      	adds	r3, r3, r7
 8002642:	2201      	movs	r2, #1
 8002644:	701a      	strb	r2, [r3, #0]
 8002646:	e0e3      	b.n	8002810 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	69da      	ldr	r2, [r3, #28]
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	429a      	cmp	r2, r3
 8002652:	d000      	beq.n	8002656 <UART_SetConfig+0x31e>
 8002654:	e085      	b.n	8002762 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002656:	231b      	movs	r3, #27
 8002658:	2218      	movs	r2, #24
 800265a:	189b      	adds	r3, r3, r2
 800265c:	19db      	adds	r3, r3, r7
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d837      	bhi.n	80026d4 <UART_SetConfig+0x39c>
 8002664:	009a      	lsls	r2, r3, #2
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <UART_SetConfig+0x370>)
 8002668:	18d3      	adds	r3, r2, r3
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800266e:	f7ff fbdb 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 8002672:	0003      	movs	r3, r0
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002676:	e036      	b.n	80026e6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002678:	f7ff fbec 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 800267c:	0003      	movs	r3, r0
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002680:	e031      	b.n	80026e6 <UART_SetConfig+0x3ae>
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	efff69f3 	.word	0xefff69f3
 8002688:	ffffcfff 	.word	0xffffcfff
 800268c:	40004800 	.word	0x40004800
 8002690:	fffff4ff 	.word	0xfffff4ff
 8002694:	40013800 	.word	0x40013800
 8002698:	40021000 	.word	0x40021000
 800269c:	40004400 	.word	0x40004400
 80026a0:	003d0900 	.word	0x003d0900
 80026a4:	00f42400 	.word	0x00f42400
 80026a8:	080030a8 	.word	0x080030a8
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026ac:	4b60      	ldr	r3, [pc, #384]	; (8002830 <UART_SetConfig+0x4f8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2210      	movs	r2, #16
 80026b2:	4013      	ands	r3, r2
 80026b4:	d002      	beq.n	80026bc <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80026b6:	4b5f      	ldr	r3, [pc, #380]	; (8002834 <UART_SetConfig+0x4fc>)
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80026ba:	e014      	b.n	80026e6 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80026bc:	4b5e      	ldr	r3, [pc, #376]	; (8002838 <UART_SetConfig+0x500>)
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80026c0:	e011      	b.n	80026e6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026c2:	f7ff fb01 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 80026c6:	0003      	movs	r3, r0
 80026c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80026ca:	e00c      	b.n	80026e6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80026d2:	e008      	b.n	80026e6 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80026d8:	231a      	movs	r3, #26
 80026da:	2218      	movs	r2, #24
 80026dc:	189b      	adds	r3, r3, r2
 80026de:	19db      	adds	r3, r3, r7
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]
        break;
 80026e4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d100      	bne.n	80026ee <UART_SetConfig+0x3b6>
 80026ec:	e090      	b.n	8002810 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	005a      	lsls	r2, r3, #1
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	085b      	lsrs	r3, r3, #1
 80026f8:	18d2      	adds	r2, r2, r3
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	0019      	movs	r1, r3
 8002700:	0010      	movs	r0, r2
 8002702:	f7fd fd01 	bl	8000108 <__udivsi3>
 8002706:	0003      	movs	r3, r0
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800270a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270c:	2b0f      	cmp	r3, #15
 800270e:	d921      	bls.n	8002754 <UART_SetConfig+0x41c>
 8002710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	025b      	lsls	r3, r3, #9
 8002716:	429a      	cmp	r2, r3
 8002718:	d21c      	bcs.n	8002754 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	b29a      	uxth	r2, r3
 800271e:	200e      	movs	r0, #14
 8002720:	2418      	movs	r4, #24
 8002722:	1903      	adds	r3, r0, r4
 8002724:	19db      	adds	r3, r3, r7
 8002726:	210f      	movs	r1, #15
 8002728:	438a      	bics	r2, r1
 800272a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800272c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272e:	085b      	lsrs	r3, r3, #1
 8002730:	b29b      	uxth	r3, r3
 8002732:	2207      	movs	r2, #7
 8002734:	4013      	ands	r3, r2
 8002736:	b299      	uxth	r1, r3
 8002738:	1903      	adds	r3, r0, r4
 800273a:	19db      	adds	r3, r3, r7
 800273c:	1902      	adds	r2, r0, r4
 800273e:	19d2      	adds	r2, r2, r7
 8002740:	8812      	ldrh	r2, [r2, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	1902      	adds	r2, r0, r4
 800274c:	19d2      	adds	r2, r2, r7
 800274e:	8812      	ldrh	r2, [r2, #0]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	e05d      	b.n	8002810 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002754:	231a      	movs	r3, #26
 8002756:	2218      	movs	r2, #24
 8002758:	189b      	adds	r3, r3, r2
 800275a:	19db      	adds	r3, r3, r7
 800275c:	2201      	movs	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]
 8002760:	e056      	b.n	8002810 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002762:	231b      	movs	r3, #27
 8002764:	2218      	movs	r2, #24
 8002766:	189b      	adds	r3, r3, r2
 8002768:	19db      	adds	r3, r3, r7
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b08      	cmp	r3, #8
 800276e:	d822      	bhi.n	80027b6 <UART_SetConfig+0x47e>
 8002770:	009a      	lsls	r2, r3, #2
 8002772:	4b32      	ldr	r3, [pc, #200]	; (800283c <UART_SetConfig+0x504>)
 8002774:	18d3      	adds	r3, r2, r3
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800277a:	f7ff fb55 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 800277e:	0003      	movs	r3, r0
 8002780:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002782:	e021      	b.n	80027c8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002784:	f7ff fb66 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 8002788:	0003      	movs	r3, r0
 800278a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800278c:	e01c      	b.n	80027c8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800278e:	4b28      	ldr	r3, [pc, #160]	; (8002830 <UART_SetConfig+0x4f8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2210      	movs	r2, #16
 8002794:	4013      	ands	r3, r2
 8002796:	d002      	beq.n	800279e <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002798:	4b26      	ldr	r3, [pc, #152]	; (8002834 <UART_SetConfig+0x4fc>)
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800279c:	e014      	b.n	80027c8 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 800279e:	4b26      	ldr	r3, [pc, #152]	; (8002838 <UART_SetConfig+0x500>)
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027a2:	e011      	b.n	80027c8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027a4:	f7ff fa90 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 80027a8:	0003      	movs	r3, r0
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027ac:	e00c      	b.n	80027c8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027b4:	e008      	b.n	80027c8 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80027ba:	231a      	movs	r3, #26
 80027bc:	2218      	movs	r2, #24
 80027be:	189b      	adds	r3, r3, r2
 80027c0:	19db      	adds	r3, r3, r7
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]
        break;
 80027c6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80027c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d020      	beq.n	8002810 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	085a      	lsrs	r2, r3, #1
 80027d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d6:	18d2      	adds	r2, r2, r3
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	0019      	movs	r1, r3
 80027de:	0010      	movs	r0, r2
 80027e0:	f7fd fc92 	bl	8000108 <__udivsi3>
 80027e4:	0003      	movs	r3, r0
 80027e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	2b0f      	cmp	r3, #15
 80027ec:	d90a      	bls.n	8002804 <UART_SetConfig+0x4cc>
 80027ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	025b      	lsls	r3, r3, #9
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d205      	bcs.n	8002804 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80027f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	e005      	b.n	8002810 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002804:	231a      	movs	r3, #26
 8002806:	2218      	movs	r2, #24
 8002808:	189b      	adds	r3, r3, r2
 800280a:	19db      	adds	r3, r3, r7
 800280c:	2201      	movs	r2, #1
 800280e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	2200      	movs	r2, #0
 8002814:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	2200      	movs	r2, #0
 800281a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800281c:	231a      	movs	r3, #26
 800281e:	2218      	movs	r2, #24
 8002820:	189b      	adds	r3, r3, r2
 8002822:	19db      	adds	r3, r3, r7
 8002824:	781b      	ldrb	r3, [r3, #0]
}
 8002826:	0018      	movs	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	b00e      	add	sp, #56	; 0x38
 800282c:	bdb0      	pop	{r4, r5, r7, pc}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	40021000 	.word	0x40021000
 8002834:	003d0900 	.word	0x003d0900
 8002838:	00f42400 	.word	0x00f42400
 800283c:	080030cc 	.word	0x080030cc

08002840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	2201      	movs	r2, #1
 800284e:	4013      	ands	r3, r2
 8002850:	d00b      	beq.n	800286a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4a4a      	ldr	r2, [pc, #296]	; (8002984 <UART_AdvFeatureConfig+0x144>)
 800285a:	4013      	ands	r3, r2
 800285c:	0019      	movs	r1, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	2202      	movs	r2, #2
 8002870:	4013      	ands	r3, r2
 8002872:	d00b      	beq.n	800288c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4a43      	ldr	r2, [pc, #268]	; (8002988 <UART_AdvFeatureConfig+0x148>)
 800287c:	4013      	ands	r3, r2
 800287e:	0019      	movs	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	2204      	movs	r2, #4
 8002892:	4013      	ands	r3, r2
 8002894:	d00b      	beq.n	80028ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4a3b      	ldr	r2, [pc, #236]	; (800298c <UART_AdvFeatureConfig+0x14c>)
 800289e:	4013      	ands	r3, r2
 80028a0:	0019      	movs	r1, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	2208      	movs	r2, #8
 80028b4:	4013      	ands	r3, r2
 80028b6:	d00b      	beq.n	80028d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4a34      	ldr	r2, [pc, #208]	; (8002990 <UART_AdvFeatureConfig+0x150>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	2210      	movs	r2, #16
 80028d6:	4013      	ands	r3, r2
 80028d8:	d00b      	beq.n	80028f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4a2c      	ldr	r2, [pc, #176]	; (8002994 <UART_AdvFeatureConfig+0x154>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	0019      	movs	r1, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	2220      	movs	r2, #32
 80028f8:	4013      	ands	r3, r2
 80028fa:	d00b      	beq.n	8002914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	4a25      	ldr	r2, [pc, #148]	; (8002998 <UART_AdvFeatureConfig+0x158>)
 8002904:	4013      	ands	r3, r2
 8002906:	0019      	movs	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	2240      	movs	r2, #64	; 0x40
 800291a:	4013      	ands	r3, r2
 800291c:	d01d      	beq.n	800295a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	4a1d      	ldr	r2, [pc, #116]	; (800299c <UART_AdvFeatureConfig+0x15c>)
 8002926:	4013      	ands	r3, r2
 8002928:	0019      	movs	r1, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	035b      	lsls	r3, r3, #13
 800293e:	429a      	cmp	r2, r3
 8002940:	d10b      	bne.n	800295a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4a15      	ldr	r2, [pc, #84]	; (80029a0 <UART_AdvFeatureConfig+0x160>)
 800294a:	4013      	ands	r3, r2
 800294c:	0019      	movs	r1, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	2280      	movs	r2, #128	; 0x80
 8002960:	4013      	ands	r3, r2
 8002962:	d00b      	beq.n	800297c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	4a0e      	ldr	r2, [pc, #56]	; (80029a4 <UART_AdvFeatureConfig+0x164>)
 800296c:	4013      	ands	r3, r2
 800296e:	0019      	movs	r1, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	605a      	str	r2, [r3, #4]
  }
}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	b002      	add	sp, #8
 8002982:	bd80      	pop	{r7, pc}
 8002984:	fffdffff 	.word	0xfffdffff
 8002988:	fffeffff 	.word	0xfffeffff
 800298c:	fffbffff 	.word	0xfffbffff
 8002990:	ffff7fff 	.word	0xffff7fff
 8002994:	ffffefff 	.word	0xffffefff
 8002998:	ffffdfff 	.word	0xffffdfff
 800299c:	ffefffff 	.word	0xffefffff
 80029a0:	ff9fffff 	.word	0xff9fffff
 80029a4:	fff7ffff 	.word	0xfff7ffff

080029a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b092      	sub	sp, #72	; 0x48
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2284      	movs	r2, #132	; 0x84
 80029b4:	2100      	movs	r1, #0
 80029b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029b8:	f7fe f82a 	bl	8000a10 <HAL_GetTick>
 80029bc:	0003      	movs	r3, r0
 80029be:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2208      	movs	r2, #8
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d12c      	bne.n	8002a28 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d0:	2280      	movs	r2, #128	; 0x80
 80029d2:	0391      	lsls	r1, r2, #14
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4a46      	ldr	r2, [pc, #280]	; (8002af0 <UART_CheckIdleState+0x148>)
 80029d8:	9200      	str	r2, [sp, #0]
 80029da:	2200      	movs	r2, #0
 80029dc:	f000 f88c 	bl	8002af8 <UART_WaitOnFlagUntilTimeout>
 80029e0:	1e03      	subs	r3, r0, #0
 80029e2:	d021      	beq.n	8002a28 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029e4:	f3ef 8310 	mrs	r3, PRIMASK
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80029ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80029ee:	2301      	movs	r3, #1
 80029f0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f4:	f383 8810 	msr	PRIMASK, r3
}
 80029f8:	46c0      	nop			; (mov r8, r8)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2180      	movs	r1, #128	; 0x80
 8002a06:	438a      	bics	r2, r1
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	f383 8810 	msr	PRIMASK, r3
}
 8002a14:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2278      	movs	r2, #120	; 0x78
 8002a20:	2100      	movs	r1, #0
 8002a22:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e05f      	b.n	8002ae8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2204      	movs	r2, #4
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d146      	bne.n	8002ac4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a38:	2280      	movs	r2, #128	; 0x80
 8002a3a:	03d1      	lsls	r1, r2, #15
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	4a2c      	ldr	r2, [pc, #176]	; (8002af0 <UART_CheckIdleState+0x148>)
 8002a40:	9200      	str	r2, [sp, #0]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f000 f858 	bl	8002af8 <UART_WaitOnFlagUntilTimeout>
 8002a48:	1e03      	subs	r3, r0, #0
 8002a4a:	d03b      	beq.n	8002ac4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a50:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a52:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a54:	637b      	str	r3, [r7, #52]	; 0x34
 8002a56:	2301      	movs	r3, #1
 8002a58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	f383 8810 	msr	PRIMASK, r3
}
 8002a60:	46c0      	nop			; (mov r8, r8)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4921      	ldr	r1, [pc, #132]	; (8002af4 <UART_CheckIdleState+0x14c>)
 8002a6e:	400a      	ands	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f383 8810 	msr	PRIMASK, r3
}
 8002a7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a82:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a84:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a86:	633b      	str	r3, [r7, #48]	; 0x30
 8002a88:	2301      	movs	r3, #1
 8002a8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f383 8810 	msr	PRIMASK, r3
}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	438a      	bics	r2, r1
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	f383 8810 	msr	PRIMASK, r3
}
 8002aae:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2280      	movs	r2, #128	; 0x80
 8002ab4:	2120      	movs	r1, #32
 8002ab6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2278      	movs	r2, #120	; 0x78
 8002abc:	2100      	movs	r1, #0
 8002abe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e011      	b.n	8002ae8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2280      	movs	r2, #128	; 0x80
 8002ace:	2120      	movs	r1, #32
 8002ad0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2278      	movs	r2, #120	; 0x78
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	0018      	movs	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b010      	add	sp, #64	; 0x40
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	01ffffff 	.word	0x01ffffff
 8002af4:	fffffedf 	.word	0xfffffedf

08002af8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	1dfb      	adds	r3, r7, #7
 8002b06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b08:	e04b      	b.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	d048      	beq.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b10:	f7fd ff7e 	bl	8000a10 <HAL_GetTick>
 8002b14:	0002      	movs	r2, r0
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d302      	bcc.n	8002b26 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e04b      	b.n	8002bc2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2204      	movs	r2, #4
 8002b32:	4013      	ands	r3, r2
 8002b34:	d035      	beq.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d111      	bne.n	8002b68 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2208      	movs	r2, #8
 8002b4a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f000 f900 	bl	8002d54 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2284      	movs	r2, #132	; 0x84
 8002b58:	2108      	movs	r1, #8
 8002b5a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2278      	movs	r2, #120	; 0x78
 8002b60:	2100      	movs	r1, #0
 8002b62:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e02c      	b.n	8002bc2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69da      	ldr	r2, [r3, #28]
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	401a      	ands	r2, r3
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d112      	bne.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2280      	movs	r2, #128	; 0x80
 8002b82:	0112      	lsls	r2, r2, #4
 8002b84:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f000 f8e3 	bl	8002d54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2284      	movs	r2, #132	; 0x84
 8002b92:	2120      	movs	r1, #32
 8002b94:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2278      	movs	r2, #120	; 0x78
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e00f      	b.n	8002bc2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	4013      	ands	r3, r2
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	425a      	negs	r2, r3
 8002bb2:	4153      	adcs	r3, r2
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	001a      	movs	r2, r3
 8002bb8:	1dfb      	adds	r3, r7, #7
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d0a4      	beq.n	8002b0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	b004      	add	sp, #16
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b090      	sub	sp, #64	; 0x40
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	1dbb      	adds	r3, r7, #6
 8002bd8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1dba      	adds	r2, r7, #6
 8002be4:	2158      	movs	r1, #88	; 0x58
 8002be6:	8812      	ldrh	r2, [r2, #0]
 8002be8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2284      	movs	r2, #132	; 0x84
 8002bee:	2100      	movs	r1, #0
 8002bf0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2280      	movs	r2, #128	; 0x80
 8002bf6:	2122      	movs	r1, #34	; 0x22
 8002bf8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d028      	beq.n	8002c54 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c06:	4a3e      	ldr	r2, [pc, #248]	; (8002d00 <UART_Start_Receive_DMA+0x134>)
 8002c08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0e:	4a3d      	ldr	r2, [pc, #244]	; (8002d04 <UART_Start_Receive_DMA+0x138>)
 8002c10:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c16:	4a3c      	ldr	r2, [pc, #240]	; (8002d08 <UART_Start_Receive_DMA+0x13c>)
 8002c18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1e:	2200      	movs	r2, #0
 8002c20:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	3324      	adds	r3, #36	; 0x24
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c32:	001a      	movs	r2, r3
 8002c34:	1dbb      	adds	r3, r7, #6
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	f7fe f84a 	bl	8000cd0 <HAL_DMA_Start_IT>
 8002c3c:	1e03      	subs	r3, r0, #0
 8002c3e:	d009      	beq.n	8002c54 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2284      	movs	r2, #132	; 0x84
 8002c44:	2110      	movs	r1, #16
 8002c46:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2280      	movs	r2, #128	; 0x80
 8002c4c:	2120      	movs	r1, #32
 8002c4e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e050      	b.n	8002cf6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d019      	beq.n	8002c90 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c66:	2301      	movs	r3, #1
 8002c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6c:	f383 8810 	msr	PRIMASK, r3
}
 8002c70:	46c0      	nop			; (mov r8, r8)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2180      	movs	r1, #128	; 0x80
 8002c7e:	0049      	lsls	r1, r1, #1
 8002c80:	430a      	orrs	r2, r1
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c86:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8a:	f383 8810 	msr	PRIMASK, r3
}
 8002c8e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c90:	f3ef 8310 	mrs	r3, PRIMASK
 8002c94:	613b      	str	r3, [r7, #16]
  return(result);
 8002c96:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c98:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f383 8810 	msr	PRIMASK, r3
}
 8002ca4:	46c0      	nop			; (mov r8, r8)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	609a      	str	r2, [r3, #8]
 8002cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f383 8810 	msr	PRIMASK, r3
}
 8002cc0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8002cc6:	61fb      	str	r3, [r7, #28]
  return(result);
 8002cc8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cca:	637b      	str	r3, [r7, #52]	; 0x34
 8002ccc:	2301      	movs	r3, #1
 8002cce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	f383 8810 	msr	PRIMASK, r3
}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2140      	movs	r1, #64	; 0x40
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	f383 8810 	msr	PRIMASK, r3
}
 8002cf2:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b010      	add	sp, #64	; 0x40
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	08002e1d 	.word	0x08002e1d
 8002d04:	08002f4d 	.word	0x08002f4d
 8002d08:	08002f8f 	.word	0x08002f8f

08002d0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d14:	f3ef 8310 	mrs	r3, PRIMASK
 8002d18:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d1a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	2301      	movs	r3, #1
 8002d20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f383 8810 	msr	PRIMASK, r3
}
 8002d28:	46c0      	nop			; (mov r8, r8)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	21c0      	movs	r1, #192	; 0xc0
 8002d36:	438a      	bics	r2, r1
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f383 8810 	msr	PRIMASK, r3
}
 8002d44:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b006      	add	sp, #24
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08e      	sub	sp, #56	; 0x38
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d60:	617b      	str	r3, [r7, #20]
  return(result);
 8002d62:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d64:	637b      	str	r3, [r7, #52]	; 0x34
 8002d66:	2301      	movs	r3, #1
 8002d68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	f383 8810 	msr	PRIMASK, r3
}
 8002d70:	46c0      	nop			; (mov r8, r8)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4926      	ldr	r1, [pc, #152]	; (8002e18 <UART_EndRxTransfer+0xc4>)
 8002d7e:	400a      	ands	r2, r1
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	f383 8810 	msr	PRIMASK, r3
}
 8002d8c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d92:	623b      	str	r3, [r7, #32]
  return(result);
 8002d94:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d96:	633b      	str	r3, [r7, #48]	; 0x30
 8002d98:	2301      	movs	r3, #1
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	f383 8810 	msr	PRIMASK, r3
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2101      	movs	r1, #1
 8002db0:	438a      	bics	r2, r1
 8002db2:	609a      	str	r2, [r3, #8]
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dba:	f383 8810 	msr	PRIMASK, r3
}
 8002dbe:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d118      	bne.n	8002dfa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8002dcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f383 8810 	msr	PRIMASK, r3
}
 8002ddc:	46c0      	nop			; (mov r8, r8)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2110      	movs	r1, #16
 8002dea:	438a      	bics	r2, r1
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f383 8810 	msr	PRIMASK, r3
}
 8002df8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2280      	movs	r2, #128	; 0x80
 8002dfe:	2120      	movs	r1, #32
 8002e00:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b00e      	add	sp, #56	; 0x38
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	fffffedf 	.word	0xfffffedf

08002e1c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b094      	sub	sp, #80	; 0x50
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2220      	movs	r2, #32
 8002e32:	4013      	ands	r3, r2
 8002e34:	d16f      	bne.n	8002f16 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8002e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e38:	225a      	movs	r2, #90	; 0x5a
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e42:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e44:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e46:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e48:	2301      	movs	r3, #1
 8002e4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f383 8810 	msr	PRIMASK, r3
}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	493a      	ldr	r1, [pc, #232]	; (8002f48 <UART_DMAReceiveCplt+0x12c>)
 8002e60:	400a      	ands	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	f383 8810 	msr	PRIMASK, r3
}
 8002e6e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e70:	f3ef 8310 	mrs	r3, PRIMASK
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e78:	647b      	str	r3, [r7, #68]	; 0x44
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	f383 8810 	msr	PRIMASK, r3
}
 8002e84:	46c0      	nop			; (mov r8, r8)
 8002e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2101      	movs	r1, #1
 8002e92:	438a      	bics	r2, r1
 8002e94:	609a      	str	r2, [r3, #8]
 8002e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ea0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eaa:	643b      	str	r3, [r7, #64]	; 0x40
 8002eac:	2301      	movs	r3, #1
 8002eae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb2:	f383 8810 	msr	PRIMASK, r3
}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2140      	movs	r1, #64	; 0x40
 8002ec4:	438a      	bics	r2, r1
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ece:	f383 8810 	msr	PRIMASK, r3
}
 8002ed2:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed6:	2280      	movs	r2, #128	; 0x80
 8002ed8:	2120      	movs	r1, #32
 8002eda:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d118      	bne.n	8002f16 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ee8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002eea:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eee:	2301      	movs	r3, #1
 8002ef0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f383 8810 	msr	PRIMASK, r3
}
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2110      	movs	r1, #16
 8002f06:	438a      	bics	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f383 8810 	msr	PRIMASK, r3
}
 8002f14:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f18:	2200      	movs	r2, #0
 8002f1a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d108      	bne.n	8002f36 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f26:	2258      	movs	r2, #88	; 0x58
 8002f28:	5a9a      	ldrh	r2, [r3, r2]
 8002f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f2c:	0011      	movs	r1, r2
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f7ff f9f6 	bl	8002320 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f34:	e003      	b.n	8002f3e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8002f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f7ff f9e1 	bl	8002300 <HAL_UART_RxCpltCallback>
}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	46bd      	mov	sp, r7
 8002f42:	b014      	add	sp, #80	; 0x50
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	fffffeff 	.word	0xfffffeff

08002f4c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d10a      	bne.n	8002f7e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2258      	movs	r2, #88	; 0x58
 8002f6c:	5a9b      	ldrh	r3, [r3, r2]
 8002f6e:	085b      	lsrs	r3, r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	0011      	movs	r1, r2
 8002f76:	0018      	movs	r0, r3
 8002f78:	f7ff f9d2 	bl	8002320 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f7c:	e003      	b.n	8002f86 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f7fd fbbb 	bl	80006fc <HAL_UART_RxHalfCpltCallback>
}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b004      	add	sp, #16
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b086      	sub	sp, #24
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fa0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2280      	movs	r2, #128	; 0x80
 8002fa6:	589b      	ldr	r3, [r3, r2]
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2280      	movs	r2, #128	; 0x80
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b80      	cmp	r3, #128	; 0x80
 8002fb6:	d10a      	bne.n	8002fce <UART_DMAError+0x40>
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b21      	cmp	r3, #33	; 0x21
 8002fbc:	d107      	bne.n	8002fce <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2252      	movs	r2, #82	; 0x52
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7ff fe9f 	bl	8002d0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2240      	movs	r2, #64	; 0x40
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	d10a      	bne.n	8002ff2 <UART_DMAError+0x64>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b22      	cmp	r3, #34	; 0x22
 8002fe0:	d107      	bne.n	8002ff2 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	225a      	movs	r2, #90	; 0x5a
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	0018      	movs	r0, r3
 8002fee:	f7ff feb1 	bl	8002d54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2284      	movs	r2, #132	; 0x84
 8002ff6:	589b      	ldr	r3, [r3, r2]
 8002ff8:	2210      	movs	r2, #16
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2184      	movs	r1, #132	; 0x84
 8003000:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	0018      	movs	r0, r3
 8003006:	f7ff f983 	bl	8002310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	46bd      	mov	sp, r7
 800300e:	b006      	add	sp, #24
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <__libc_init_array>:
 8003014:	b570      	push	{r4, r5, r6, lr}
 8003016:	2600      	movs	r6, #0
 8003018:	4d0c      	ldr	r5, [pc, #48]	; (800304c <__libc_init_array+0x38>)
 800301a:	4c0d      	ldr	r4, [pc, #52]	; (8003050 <__libc_init_array+0x3c>)
 800301c:	1b64      	subs	r4, r4, r5
 800301e:	10a4      	asrs	r4, r4, #2
 8003020:	42a6      	cmp	r6, r4
 8003022:	d109      	bne.n	8003038 <__libc_init_array+0x24>
 8003024:	2600      	movs	r6, #0
 8003026:	f000 f821 	bl	800306c <_init>
 800302a:	4d0a      	ldr	r5, [pc, #40]	; (8003054 <__libc_init_array+0x40>)
 800302c:	4c0a      	ldr	r4, [pc, #40]	; (8003058 <__libc_init_array+0x44>)
 800302e:	1b64      	subs	r4, r4, r5
 8003030:	10a4      	asrs	r4, r4, #2
 8003032:	42a6      	cmp	r6, r4
 8003034:	d105      	bne.n	8003042 <__libc_init_array+0x2e>
 8003036:	bd70      	pop	{r4, r5, r6, pc}
 8003038:	00b3      	lsls	r3, r6, #2
 800303a:	58eb      	ldr	r3, [r5, r3]
 800303c:	4798      	blx	r3
 800303e:	3601      	adds	r6, #1
 8003040:	e7ee      	b.n	8003020 <__libc_init_array+0xc>
 8003042:	00b3      	lsls	r3, r6, #2
 8003044:	58eb      	ldr	r3, [r5, r3]
 8003046:	4798      	blx	r3
 8003048:	3601      	adds	r6, #1
 800304a:	e7f2      	b.n	8003032 <__libc_init_array+0x1e>
 800304c:	080030f8 	.word	0x080030f8
 8003050:	080030f8 	.word	0x080030f8
 8003054:	080030f8 	.word	0x080030f8
 8003058:	080030fc 	.word	0x080030fc

0800305c <memset>:
 800305c:	0003      	movs	r3, r0
 800305e:	1882      	adds	r2, r0, r2
 8003060:	4293      	cmp	r3, r2
 8003062:	d100      	bne.n	8003066 <memset+0xa>
 8003064:	4770      	bx	lr
 8003066:	7019      	strb	r1, [r3, #0]
 8003068:	3301      	adds	r3, #1
 800306a:	e7f9      	b.n	8003060 <memset+0x4>

0800306c <_init>:
 800306c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003072:	bc08      	pop	{r3}
 8003074:	469e      	mov	lr, r3
 8003076:	4770      	bx	lr

08003078 <_fini>:
 8003078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307e:	bc08      	pop	{r3}
 8003080:	469e      	mov	lr, r3
 8003082:	4770      	bx	lr
