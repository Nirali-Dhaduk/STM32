
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004780  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08004840  08004840  00014840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004984  08004984  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004984  08004984  00014984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800498c  0800498c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800498c  0800498c  0001498c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004990  08004990  00014990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000070  08004a04  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08004a04  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b880  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c43  00000000  00000000  0002b918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0002d560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  0002def0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015287  00000000  00000000  0002e7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1d9  00000000  00000000  00043a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f26a  00000000  00000000  0004fc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cee92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a08  00000000  00000000  000ceee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004828 	.word	0x08004828

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004828 	.word	0x08004828

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	469b      	mov	fp, r3
 8000306:	d433      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000308:	465a      	mov	r2, fp
 800030a:	4653      	mov	r3, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83a      	bhi.n	8000392 <__udivmoddi4+0xc2>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e078      	b.n	8000414 <__udivmoddi4+0x144>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e075      	b.n	800041a <__udivmoddi4+0x14a>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e028      	b.n	800039a <__udivmoddi4+0xca>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	2320      	movs	r3, #32
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	40da      	lsrs	r2, r3
 800037a:	4641      	mov	r1, r8
 800037c:	0013      	movs	r3, r2
 800037e:	464a      	mov	r2, r9
 8000380:	408a      	lsls	r2, r1
 8000382:	0017      	movs	r7, r2
 8000384:	4642      	mov	r2, r8
 8000386:	431f      	orrs	r7, r3
 8000388:	4653      	mov	r3, sl
 800038a:	4093      	lsls	r3, r2
 800038c:	001e      	movs	r6, r3
 800038e:	42af      	cmp	r7, r5
 8000390:	d9c4      	bls.n	800031c <__udivmoddi4+0x4c>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0d9      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4646      	mov	r6, r8
 80003a8:	087b      	lsrs	r3, r7, #1
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xfa>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xe4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xfe>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0x108>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xdc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xfa>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	465b      	mov	r3, fp
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db24      	blt.n	8000430 <__udivmoddi4+0x160>
 80003e6:	002b      	movs	r3, r5
 80003e8:	465a      	mov	r2, fp
 80003ea:	4644      	mov	r4, r8
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	465b      	mov	r3, fp
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2a      	blt.n	8000452 <__udivmoddi4+0x182>
 80003fc:	0026      	movs	r6, r4
 80003fe:	409e      	lsls	r6, r3
 8000400:	0033      	movs	r3, r6
 8000402:	0026      	movs	r6, r4
 8000404:	4647      	mov	r7, r8
 8000406:	40be      	lsls	r6, r7
 8000408:	0032      	movs	r2, r6
 800040a:	1a80      	subs	r0, r0, r2
 800040c:	4199      	sbcs	r1, r3
 800040e:	9000      	str	r0, [sp, #0]
 8000410:	9101      	str	r1, [sp, #4]
 8000412:	e79f      	b.n	8000354 <__udivmoddi4+0x84>
 8000414:	42a3      	cmp	r3, r4
 8000416:	d8bc      	bhi.n	8000392 <__udivmoddi4+0xc2>
 8000418:	e783      	b.n	8000322 <__udivmoddi4+0x52>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	2100      	movs	r1, #0
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	9201      	str	r2, [sp, #4]
 8000428:	2201      	movs	r2, #1
 800042a:	40da      	lsrs	r2, r3
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	e786      	b.n	800033e <__udivmoddi4+0x6e>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	4646      	mov	r6, r8
 800043a:	409a      	lsls	r2, r3
 800043c:	0023      	movs	r3, r4
 800043e:	40f3      	lsrs	r3, r6
 8000440:	4644      	mov	r4, r8
 8000442:	4313      	orrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	dad4      	bge.n	80003fc <__udivmoddi4+0x12c>
 8000452:	4642      	mov	r2, r8
 8000454:	002f      	movs	r7, r5
 8000456:	2320      	movs	r3, #32
 8000458:	0026      	movs	r6, r4
 800045a:	4097      	lsls	r7, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	40de      	lsrs	r6, r3
 8000460:	003b      	movs	r3, r7
 8000462:	4333      	orrs	r3, r6
 8000464:	e7cd      	b.n	8000402 <__udivmoddi4+0x132>
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b083      	sub	sp, #12
 80004c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c2:	f000 fb9d 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c6:	f000 f85f 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ca:	f000 f9a5 	bl	8000818 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004ce:	f000 f973 	bl	80007b8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80004d2:	f000 f8d3 	bl	800067c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80004d6:	4924      	ldr	r1, [pc, #144]	; (8000568 <main+0xac>)
 80004d8:	4b24      	ldr	r3, [pc, #144]	; (800056c <main+0xb0>)
 80004da:	2200      	movs	r2, #0
 80004dc:	0018      	movs	r0, r3
 80004de:	f001 ff51 	bl	8002384 <HAL_RTC_GetTime>
  		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80004e2:	4923      	ldr	r1, [pc, #140]	; (8000570 <main+0xb4>)
 80004e4:	4b21      	ldr	r3, [pc, #132]	; (800056c <main+0xb0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	0018      	movs	r0, r3
 80004ea:	f002 f83d 	bl	8002568 <HAL_RTC_GetDate>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80004ee:	491e      	ldr	r1, [pc, #120]	; (8000568 <main+0xac>)
 80004f0:	4b1e      	ldr	r3, [pc, #120]	; (800056c <main+0xb0>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 ff45 	bl	8002384 <HAL_RTC_GetTime>
			  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80004fa:	491d      	ldr	r1, [pc, #116]	; (8000570 <main+0xb4>)
 80004fc:	4b1b      	ldr	r3, [pc, #108]	; (800056c <main+0xb0>)
 80004fe:	2200      	movs	r2, #0
 8000500:	0018      	movs	r0, r3
 8000502:	f002 f831 	bl	8002568 <HAL_RTC_GetDate>

			  sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <main+0xac>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	001a      	movs	r2, r3
 800050c:	4b16      	ldr	r3, [pc, #88]	; (8000568 <main+0xac>)
 800050e:	785b      	ldrb	r3, [r3, #1]
 8000510:	001c      	movs	r4, r3
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <main+0xac>)
 8000514:	789b      	ldrb	r3, [r3, #2]
 8000516:	4917      	ldr	r1, [pc, #92]	; (8000574 <main+0xb8>)
 8000518:	4817      	ldr	r0, [pc, #92]	; (8000578 <main+0xbc>)
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	0023      	movs	r3, r4
 800051e:	f003 f951 	bl	80037c4 <siprintf>
			  sprintf(date,"Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 8000522:	4b13      	ldr	r3, [pc, #76]	; (8000570 <main+0xb4>)
 8000524:	789b      	ldrb	r3, [r3, #2]
 8000526:	001a      	movs	r2, r3
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <main+0xb4>)
 800052a:	785b      	ldrb	r3, [r3, #1]
 800052c:	001c      	movs	r4, r3
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <main+0xb4>)
 8000530:	78db      	ldrb	r3, [r3, #3]
 8000532:	4912      	ldr	r1, [pc, #72]	; (800057c <main+0xc0>)
 8000534:	4812      	ldr	r0, [pc, #72]	; (8000580 <main+0xc4>)
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	0023      	movs	r3, r4
 800053a:	f003 f943 	bl	80037c4 <siprintf>


			  HAL_UART_Transmit(&huart1, (uint8_t *)date, sizeof(date), 300);
 800053e:	2396      	movs	r3, #150	; 0x96
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	490f      	ldr	r1, [pc, #60]	; (8000580 <main+0xc4>)
 8000544:	480f      	ldr	r0, [pc, #60]	; (8000584 <main+0xc8>)
 8000546:	221e      	movs	r2, #30
 8000548:	f002 fb40 	bl	8002bcc <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, (uint8_t *)time, sizeof(time), 300);
 800054c:	2396      	movs	r3, #150	; 0x96
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	4909      	ldr	r1, [pc, #36]	; (8000578 <main+0xbc>)
 8000552:	480c      	ldr	r0, [pc, #48]	; (8000584 <main+0xc8>)
 8000554:	221e      	movs	r2, #30
 8000556:	f002 fb39 	bl	8002bcc <HAL_UART_Transmit>
			  HAL_Delay(1000);
 800055a:	23fa      	movs	r3, #250	; 0xfa
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	0018      	movs	r0, r3
 8000560:	f000 fbbe 	bl	8000ce0 <HAL_Delay>
		  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000564:	e7c3      	b.n	80004ee <main+0x32>
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	2000008c 	.word	0x2000008c
 800056c:	200000a4 	.word	0x200000a4
 8000570:	200000a0 	.word	0x200000a0
 8000574:	08004840 	.word	0x08004840
 8000578:	20000170 	.word	0x20000170
 800057c:	08004858 	.word	0x08004858
 8000580:	20000150 	.word	0x20000150
 8000584:	200000c8 	.word	0x200000c8

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b09d      	sub	sp, #116	; 0x74
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	2438      	movs	r4, #56	; 0x38
 8000590:	193b      	adds	r3, r7, r4
 8000592:	0018      	movs	r0, r3
 8000594:	2338      	movs	r3, #56	; 0x38
 8000596:	001a      	movs	r2, r3
 8000598:	2100      	movs	r1, #0
 800059a:	f003 f88f 	bl	80036bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059e:	2324      	movs	r3, #36	; 0x24
 80005a0:	18fb      	adds	r3, r7, r3
 80005a2:	0018      	movs	r0, r3
 80005a4:	2314      	movs	r3, #20
 80005a6:	001a      	movs	r2, r3
 80005a8:	2100      	movs	r1, #0
 80005aa:	f003 f887 	bl	80036bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ae:	003b      	movs	r3, r7
 80005b0:	0018      	movs	r0, r3
 80005b2:	2324      	movs	r3, #36	; 0x24
 80005b4:	001a      	movs	r2, r3
 80005b6:	2100      	movs	r1, #0
 80005b8:	f003 f880 	bl	80036bc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <SystemClock_Config+0xec>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a2d      	ldr	r2, [pc, #180]	; (8000678 <SystemClock_Config+0xf0>)
 80005c2:	401a      	ands	r2, r3
 80005c4:	4b2b      	ldr	r3, [pc, #172]	; (8000674 <SystemClock_Config+0xec>)
 80005c6:	2180      	movs	r1, #128	; 0x80
 80005c8:	0109      	lsls	r1, r1, #4
 80005ca:	430a      	orrs	r2, r1
 80005cc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005ce:	0021      	movs	r1, r4
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	220a      	movs	r2, #10
 80005d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2201      	movs	r2, #1
 80005da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2210      	movs	r2, #16
 80005e0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2201      	movs	r2, #1
 80005e6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2202      	movs	r2, #2
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	02d2      	lsls	r2, r2, #11
 80005fa:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	03d2      	lsls	r2, r2, #15
 8000602:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	187b      	adds	r3, r7, r1
 8000606:	0018      	movs	r0, r3
 8000608:	f000 fe00 	bl	800120c <HAL_RCC_OscConfig>
 800060c:	1e03      	subs	r3, r0, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000610:	f000 f98e 	bl	8000930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	2124      	movs	r1, #36	; 0x24
 8000616:	187b      	adds	r3, r7, r1
 8000618:	220f      	movs	r2, #15
 800061a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2203      	movs	r2, #3
 8000620:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2101      	movs	r1, #1
 8000638:	0018      	movs	r0, r3
 800063a:	f001 f9ab 	bl	8001994 <HAL_RCC_ClockConfig>
 800063e:	1e03      	subs	r3, r0, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000642:	f000 f975 	bl	8000930 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8000646:	003b      	movs	r3, r7
 8000648:	2221      	movs	r2, #33	; 0x21
 800064a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800064c:	003b      	movs	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000652:	003b      	movs	r3, r7
 8000654:	2280      	movs	r2, #128	; 0x80
 8000656:	0292      	lsls	r2, r2, #10
 8000658:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800065a:	003b      	movs	r3, r7
 800065c:	0018      	movs	r0, r3
 800065e:	f001 fbbd 	bl	8001ddc <HAL_RCCEx_PeriphCLKConfig>
 8000662:	1e03      	subs	r3, r0, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000666:	f000 f963 	bl	8000930 <Error_Handler>
  }
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b01d      	add	sp, #116	; 0x74
 8000670:	bd90      	pop	{r4, r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40007000 	.word	0x40007000
 8000678:	ffffe7ff 	.word	0xffffe7ff

0800067c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b090      	sub	sp, #64	; 0x40
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000682:	232c      	movs	r3, #44	; 0x2c
 8000684:	18fb      	adds	r3, r7, r3
 8000686:	0018      	movs	r0, r3
 8000688:	2314      	movs	r3, #20
 800068a:	001a      	movs	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	f003 f815 	bl	80036bc <memset>
  RTC_DateTypeDef sDate = {0};
 8000692:	2328      	movs	r3, #40	; 0x28
 8000694:	18fb      	adds	r3, r7, r3
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800069a:	003b      	movs	r3, r7
 800069c:	0018      	movs	r0, r3
 800069e:	2328      	movs	r3, #40	; 0x28
 80006a0:	001a      	movs	r2, r3
 80006a2:	2100      	movs	r1, #0
 80006a4:	f003 f80a 	bl	80036bc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006a8:	4b41      	ldr	r3, [pc, #260]	; (80007b0 <MX_RTC_Init+0x134>)
 80006aa:	4a42      	ldr	r2, [pc, #264]	; (80007b4 <MX_RTC_Init+0x138>)
 80006ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006ae:	4b40      	ldr	r3, [pc, #256]	; (80007b0 <MX_RTC_Init+0x134>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006b4:	4b3e      	ldr	r3, [pc, #248]	; (80007b0 <MX_RTC_Init+0x134>)
 80006b6:	227f      	movs	r2, #127	; 0x7f
 80006b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006ba:	4b3d      	ldr	r3, [pc, #244]	; (80007b0 <MX_RTC_Init+0x134>)
 80006bc:	22ff      	movs	r2, #255	; 0xff
 80006be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006c0:	4b3b      	ldr	r3, [pc, #236]	; (80007b0 <MX_RTC_Init+0x134>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006c6:	4b3a      	ldr	r3, [pc, #232]	; (80007b0 <MX_RTC_Init+0x134>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006cc:	4b38      	ldr	r3, [pc, #224]	; (80007b0 <MX_RTC_Init+0x134>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006d2:	4b37      	ldr	r3, [pc, #220]	; (80007b0 <MX_RTC_Init+0x134>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006d8:	4b35      	ldr	r3, [pc, #212]	; (80007b0 <MX_RTC_Init+0x134>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 fd0c 	bl	80020f8 <HAL_RTC_Init>
 80006e0:	1e03      	subs	r3, r0, #0
 80006e2:	d001      	beq.n	80006e8 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80006e4:	f000 f924 	bl	8000930 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x14;
 80006e8:	212c      	movs	r1, #44	; 0x2c
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2214      	movs	r2, #20
 80006ee:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x16;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2216      	movs	r2, #22
 80006f4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x1;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2201      	movs	r2, #1
 80006fa:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000708:	1879      	adds	r1, r7, r1
 800070a:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <MX_RTC_Init+0x134>)
 800070c:	2201      	movs	r2, #1
 800070e:	0018      	movs	r0, r3
 8000710:	f001 fd8e 	bl	8002230 <HAL_RTC_SetTime>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000718:	f000 f90a 	bl	8000930 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800071c:	2128      	movs	r1, #40	; 0x28
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2206      	movs	r2, #6
 8000722:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2206      	movs	r2, #6
 8000728:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x10;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2210      	movs	r2, #16
 800072e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x23;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2223      	movs	r2, #35	; 0x23
 8000734:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000736:	1879      	adds	r1, r7, r1
 8000738:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_RTC_Init+0x134>)
 800073a:	2201      	movs	r2, #1
 800073c:	0018      	movs	r0, r3
 800073e:	f001 fe7f 	bl	8002440 <HAL_RTC_SetDate>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000746:	f000 f8f3 	bl	8000930 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x14;
 800074a:	003b      	movs	r3, r7
 800074c:	2214      	movs	r2, #20
 800074e:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x16;
 8000750:	003b      	movs	r3, r7
 8000752:	2216      	movs	r2, #22
 8000754:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 8000756:	003b      	movs	r3, r7
 8000758:	2210      	movs	r2, #16
 800075a:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800075c:	003b      	movs	r3, r7
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000762:	003b      	movs	r3, r7
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000768:	003b      	movs	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_MINUTES;
 800076e:	003b      	movs	r3, r7
 8000770:	2280      	movs	r2, #128	; 0x80
 8000772:	0212      	lsls	r2, r2, #8
 8000774:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000776:	003b      	movs	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800077c:	003b      	movs	r3, r7
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x10;
 8000782:	003b      	movs	r3, r7
 8000784:	2220      	movs	r2, #32
 8000786:	2110      	movs	r1, #16
 8000788:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800078a:	003b      	movs	r3, r7
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000792:	0039      	movs	r1, r7
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_RTC_Init+0x134>)
 8000796:	2201      	movs	r2, #1
 8000798:	0018      	movs	r0, r3
 800079a:	f001 ff35 	bl	8002608 <HAL_RTC_SetAlarm_IT>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d001      	beq.n	80007a6 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 80007a2:	f000 f8c5 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	b010      	add	sp, #64	; 0x40
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	200000a4 	.word	0x200000a4
 80007b4:	40002800 	.word	0x40002800

080007b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007be:	4a15      	ldr	r2, [pc, #84]	; (8000814 <MX_USART1_UART_Init+0x5c>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007c4:	22e1      	movs	r2, #225	; 0xe1
 80007c6:	0252      	lsls	r2, r2, #9
 80007c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007fa:	4b05      	ldr	r3, [pc, #20]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007fc:	0018      	movs	r0, r3
 80007fe:	f002 f991 	bl	8002b24 <HAL_UART_Init>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000806:	f000 f893 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200000c8 	.word	0x200000c8
 8000814:	40013800 	.word	0x40013800

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b08b      	sub	sp, #44	; 0x2c
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	2414      	movs	r4, #20
 8000820:	193b      	adds	r3, r7, r4
 8000822:	0018      	movs	r0, r3
 8000824:	2314      	movs	r3, #20
 8000826:	001a      	movs	r2, r3
 8000828:	2100      	movs	r1, #0
 800082a:	f002 ff47 	bl	80036bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	4b33      	ldr	r3, [pc, #204]	; (80008fc <MX_GPIO_Init+0xe4>)
 8000830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000832:	4b32      	ldr	r3, [pc, #200]	; (80008fc <MX_GPIO_Init+0xe4>)
 8000834:	2104      	movs	r1, #4
 8000836:	430a      	orrs	r2, r1
 8000838:	62da      	str	r2, [r3, #44]	; 0x2c
 800083a:	4b30      	ldr	r3, [pc, #192]	; (80008fc <MX_GPIO_Init+0xe4>)
 800083c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083e:	2204      	movs	r2, #4
 8000840:	4013      	ands	r3, r2
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <MX_GPIO_Init+0xe4>)
 8000848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800084a:	4b2c      	ldr	r3, [pc, #176]	; (80008fc <MX_GPIO_Init+0xe4>)
 800084c:	2180      	movs	r1, #128	; 0x80
 800084e:	430a      	orrs	r2, r1
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
 8000852:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <MX_GPIO_Init+0xe4>)
 8000854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	4013      	ands	r3, r2
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b27      	ldr	r3, [pc, #156]	; (80008fc <MX_GPIO_Init+0xe4>)
 8000860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000862:	4b26      	ldr	r3, [pc, #152]	; (80008fc <MX_GPIO_Init+0xe4>)
 8000864:	2101      	movs	r1, #1
 8000866:	430a      	orrs	r2, r1
 8000868:	62da      	str	r2, [r3, #44]	; 0x2c
 800086a:	4b24      	ldr	r3, [pc, #144]	; (80008fc <MX_GPIO_Init+0xe4>)
 800086c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086e:	2201      	movs	r2, #1
 8000870:	4013      	ands	r3, r2
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4b21      	ldr	r3, [pc, #132]	; (80008fc <MX_GPIO_Init+0xe4>)
 8000878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800087a:	4b20      	ldr	r3, [pc, #128]	; (80008fc <MX_GPIO_Init+0xe4>)
 800087c:	2102      	movs	r1, #2
 800087e:	430a      	orrs	r2, r1
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <MX_GPIO_Init+0xe4>)
 8000884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000886:	2202      	movs	r2, #2
 8000888:	4013      	ands	r3, r2
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_RED_LED_GPIO_Port, BSP_RED_LED_Pin, GPIO_PIN_RESET);
 800088e:	23a0      	movs	r3, #160	; 0xa0
 8000890:	05db      	lsls	r3, r3, #23
 8000892:	2200      	movs	r2, #0
 8000894:	2120      	movs	r1, #32
 8000896:	0018      	movs	r0, r3
 8000898:	f000 fc9a 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin, GPIO_PIN_RESET);
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_GPIO_Init+0xe8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	2110      	movs	r1, #16
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 fc94 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_RED_LED_Pin */
  GPIO_InitStruct.Pin = BSP_RED_LED_Pin;
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	2220      	movs	r2, #32
 80008ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	2201      	movs	r2, #1
 80008b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_RED_LED_GPIO_Port, &GPIO_InitStruct);
 80008c0:	193a      	adds	r2, r7, r4
 80008c2:	23a0      	movs	r3, #160	; 0xa0
 80008c4:	05db      	lsls	r3, r3, #23
 80008c6:	0011      	movs	r1, r2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 fb0b 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_GREEN_LED_Pin */
  GPIO_InitStruct.Pin = BSP_GREEN_LED_Pin;
 80008ce:	0021      	movs	r1, r4
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2210      	movs	r2, #16
 80008d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2201      	movs	r2, #1
 80008da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2200      	movs	r2, #0
 80008e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <MX_GPIO_Init+0xe8>)
 80008ec:	0019      	movs	r1, r3
 80008ee:	0010      	movs	r0, r2
 80008f0:	f000 faf8 	bl	8000ee4 <HAL_GPIO_Init>

}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b00b      	add	sp, #44	; 0x2c
 80008fa:	bd90      	pop	{r4, r7, pc}
 80008fc:	40021000 	.word	0x40021000
 8000900:	50000400 	.word	0x50000400

08000904 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin);
	HAL_GPIO_WritePin(BSP_RED_LED_GPIO_Port, BSP_RED_LED_Pin, GPIO_PIN_SET);
 800090c:	23a0      	movs	r3, #160	; 0xa0
 800090e:	05db      	lsls	r3, r3, #23
 8000910:	2201      	movs	r2, #1
 8000912:	2120      	movs	r1, #32
 8000914:	0018      	movs	r0, r3
 8000916:	f000 fc5b 	bl	80011d0 <HAL_GPIO_WritePin>
	printf("hello world!\r\n");
 800091a:	4b04      	ldr	r3, [pc, #16]	; (800092c <HAL_RTC_AlarmAEventCallback+0x28>)
 800091c:	0018      	movs	r0, r3
 800091e:	f002 ff47 	bl	80037b0 <puts>
}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b002      	add	sp, #8
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	08004870 	.word	0x08004870

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000938:	e7fe      	b.n	8000938 <Error_Handler+0x8>
	...

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <HAL_MspInit+0x24>)
 8000942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_MspInit+0x24>)
 8000946:	2101      	movs	r1, #1
 8000948:	430a      	orrs	r2, r1
 800094a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <HAL_MspInit+0x24>)
 800094e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <HAL_MspInit+0x24>)
 8000952:	2180      	movs	r1, #128	; 0x80
 8000954:	0549      	lsls	r1, r1, #21
 8000956:	430a      	orrs	r2, r1
 8000958:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0a      	ldr	r2, [pc, #40]	; (800099c <HAL_RTC_MspInit+0x38>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d10e      	bne.n	8000994 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <HAL_RTC_MspInit+0x3c>)
 8000978:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_RTC_MspInit+0x3c>)
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	02c9      	lsls	r1, r1, #11
 8000980:	430a      	orrs	r2, r1
 8000982:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	2100      	movs	r1, #0
 8000988:	2002      	movs	r0, #2
 800098a:	f000 fa79 	bl	8000e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800098e:	2002      	movs	r0, #2
 8000990:	f000 fa8b 	bl	8000eaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b002      	add	sp, #8
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40002800 	.word	0x40002800
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b089      	sub	sp, #36	; 0x24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	240c      	movs	r4, #12
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	0018      	movs	r0, r3
 80009b2:	2314      	movs	r3, #20
 80009b4:	001a      	movs	r2, r3
 80009b6:	2100      	movs	r1, #0
 80009b8:	f002 fe80 	bl	80036bc <memset>
  if(huart->Instance==USART1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a18      	ldr	r2, [pc, #96]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d12a      	bne.n	8000a1c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <HAL_UART_MspInit+0x84>)
 80009c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_UART_MspInit+0x84>)
 80009cc:	2180      	movs	r1, #128	; 0x80
 80009ce:	01c9      	lsls	r1, r1, #7
 80009d0:	430a      	orrs	r2, r1
 80009d2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <HAL_UART_MspInit+0x84>)
 80009d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <HAL_UART_MspInit+0x84>)
 80009da:	2101      	movs	r1, #1
 80009dc:	430a      	orrs	r2, r1
 80009de:	62da      	str	r2, [r3, #44]	; 0x2c
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_UART_MspInit+0x84>)
 80009e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e4:	2201      	movs	r2, #1
 80009e6:	4013      	ands	r3, r2
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	22c0      	movs	r2, #192	; 0xc0
 80009f0:	00d2      	lsls	r2, r2, #3
 80009f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	0021      	movs	r1, r4
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2202      	movs	r2, #2
 80009fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2203      	movs	r2, #3
 8000a06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	187a      	adds	r2, r7, r1
 8000a10:	23a0      	movs	r3, #160	; 0xa0
 8000a12:	05db      	lsls	r3, r3, #23
 8000a14:	0011      	movs	r1, r2
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 fa64 	bl	8000ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b009      	add	sp, #36	; 0x24
 8000a22:	bd90      	pop	{r4, r7, pc}
 8000a24:	40013800 	.word	0x40013800
 8000a28:	40021000 	.word	0x40021000

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <NMI_Handler+0x4>

08000a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <HardFault_Handler+0x4>

08000a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a50:	f000 f92a 	bl	8000ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <RTC_IRQHandler+0x14>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f001 ff32 	bl	80028cc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000a68:	46c0      	nop			; (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	200000a4 	.word	0x200000a4

08000a74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	e00a      	b.n	8000a9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a86:	e000      	b.n	8000a8a <_read+0x16>
 8000a88:	bf00      	nop
 8000a8a:	0001      	movs	r1, r0
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	1c5a      	adds	r2, r3, #1
 8000a90:	60ba      	str	r2, [r7, #8]
 8000a92:	b2ca      	uxtb	r2, r1
 8000a94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	dbf0      	blt.n	8000a86 <_read+0x12>
  }

  return len;
 8000aa4:	687b      	ldr	r3, [r7, #4]
}
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b006      	add	sp, #24
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }

	HAL_UART_Transmit(&huart1,(uint8_t *)ptr,len,1000);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	23fa      	movs	r3, #250	; 0xfa
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	68b9      	ldr	r1, [r7, #8]
 8000ac6:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <_write+0x28>)
 8000ac8:	f002 f880 	bl	8002bcc <HAL_UART_Transmit>

  return len;
 8000acc:	687b      	ldr	r3, [r7, #4]
}
 8000ace:	0018      	movs	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b004      	add	sp, #16
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	200000c8 	.word	0x200000c8

08000adc <_close>:

int _close(int file)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	425b      	negs	r3, r3
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b002      	add	sp, #8
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	2280      	movs	r2, #128	; 0x80
 8000afe:	0192      	lsls	r2, r2, #6
 8000b00:	605a      	str	r2, [r3, #4]
  return 0;
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	0018      	movs	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b002      	add	sp, #8
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <_isatty>:

int _isatty(int file)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b14:	2301      	movs	r3, #1
}
 8000b16:	0018      	movs	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b084      	sub	sp, #16
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b2a:	2300      	movs	r3, #0
}
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b004      	add	sp, #16
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b3c:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <_sbrk+0x5c>)
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <_sbrk+0x60>)
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <_sbrk+0x64>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <_sbrk+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	18d3      	adds	r3, r2, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d207      	bcs.n	8000b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b64:	f002 fd80 	bl	8003668 <__errno>
 8000b68:	0003      	movs	r3, r0
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	425b      	negs	r3, r3
 8000b72:	e009      	b.n	8000b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	18d2      	adds	r2, r2, r3
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <_sbrk+0x64>)
 8000b84:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b86:	68fb      	ldr	r3, [r7, #12]
}
 8000b88:	0018      	movs	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b006      	add	sp, #24
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20002000 	.word	0x20002000
 8000b94:	00000400 	.word	0x00000400
 8000b98:	20000190 	.word	0x20000190
 8000b9c:	200001a8 	.word	0x200001a8

08000ba0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000bac:	480d      	ldr	r0, [pc, #52]	; (8000be4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bae:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb0:	f7ff fff6 	bl	8000ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bb6:	490d      	ldr	r1, [pc, #52]	; (8000bec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <LoopForever+0xe>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	; (8000bf8 <LoopForever+0x16>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bda:	f002 fd4b 	bl	8003674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fc6d 	bl	80004bc <main>

08000be2 <LoopForever>:

LoopForever:
    b LoopForever
 8000be2:	e7fe      	b.n	8000be2 <LoopForever>
  ldr   r0, =_estack
 8000be4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bf0:	08004994 	.word	0x08004994
  ldr r2, =_sbss
 8000bf4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bf8:	200001a8 	.word	0x200001a8

08000bfc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC1_COMP_IRQHandler>
	...

08000c00 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <HAL_Init+0x3c>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <HAL_Init+0x3c>)
 8000c12:	2140      	movs	r1, #64	; 0x40
 8000c14:	430a      	orrs	r2, r1
 8000c16:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f000 f811 	bl	8000c40 <HAL_InitTick>
 8000c1e:	1e03      	subs	r3, r0, #0
 8000c20:	d003      	beq.n	8000c2a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
 8000c28:	e001      	b.n	8000c2e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c2a:	f7ff fe87 	bl	800093c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
}
 8000c32:	0018      	movs	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b002      	add	sp, #8
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	40022000 	.word	0x40022000

08000c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <HAL_InitTick+0x5c>)
 8000c4a:	681c      	ldr	r4, [r3, #0]
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_InitTick+0x60>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	0019      	movs	r1, r3
 8000c52:	23fa      	movs	r3, #250	; 0xfa
 8000c54:	0098      	lsls	r0, r3, #2
 8000c56:	f7ff fa61 	bl	800011c <__udivsi3>
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	0020      	movs	r0, r4
 8000c60:	f7ff fa5c 	bl	800011c <__udivsi3>
 8000c64:	0003      	movs	r3, r0
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 f92f 	bl	8000eca <HAL_SYSTICK_Config>
 8000c6c:	1e03      	subs	r3, r0, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e00f      	b.n	8000c94 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d80b      	bhi.n	8000c92 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	425b      	negs	r3, r3
 8000c80:	2200      	movs	r2, #0
 8000c82:	0018      	movs	r0, r3
 8000c84:	f000 f8fc 	bl	8000e80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_InitTick+0x64>)
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e000      	b.n	8000c94 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	0018      	movs	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b003      	add	sp, #12
 8000c9a:	bd90      	pop	{r4, r7, pc}
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <HAL_IncTick+0x1c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	001a      	movs	r2, r3
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	18d2      	adds	r2, r2, r3
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cba:	601a      	str	r2, [r3, #0]
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	20000194 	.word	0x20000194

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b02      	ldr	r3, [pc, #8]	; (8000cdc <HAL_GetTick+0x10>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	20000194 	.word	0x20000194

08000ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce8:	f7ff fff0 	bl	8000ccc <HAL_GetTick>
 8000cec:	0003      	movs	r3, r0
 8000cee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	d005      	beq.n	8000d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_Delay+0x44>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	001a      	movs	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	189b      	adds	r3, r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	f7ff ffe0 	bl	8000ccc <HAL_GetTick>
 8000d0c:	0002      	movs	r2, r0
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d8f7      	bhi.n	8000d08 <HAL_Delay+0x28>
  {
  }
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b004      	add	sp, #16
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	20000008 	.word	0x20000008

08000d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	0002      	movs	r2, r0
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d34:	1dfb      	adds	r3, r7, #7
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b7f      	cmp	r3, #127	; 0x7f
 8000d3a:	d809      	bhi.n	8000d50 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3c:	1dfb      	adds	r3, r7, #7
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	001a      	movs	r2, r3
 8000d42:	231f      	movs	r3, #31
 8000d44:	401a      	ands	r2, r3
 8000d46:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <__NVIC_EnableIRQ+0x30>)
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4091      	lsls	r1, r2
 8000d4c:	000a      	movs	r2, r1
 8000d4e:	601a      	str	r2, [r3, #0]
  }
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b002      	add	sp, #8
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	e000e100 	.word	0xe000e100

08000d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	0002      	movs	r2, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d70:	d828      	bhi.n	8000dc4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d72:	4a2f      	ldr	r2, [pc, #188]	; (8000e30 <__NVIC_SetPriority+0xd4>)
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	b25b      	sxtb	r3, r3
 8000d7a:	089b      	lsrs	r3, r3, #2
 8000d7c:	33c0      	adds	r3, #192	; 0xc0
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	589b      	ldr	r3, [r3, r2]
 8000d82:	1dfa      	adds	r2, r7, #7
 8000d84:	7812      	ldrb	r2, [r2, #0]
 8000d86:	0011      	movs	r1, r2
 8000d88:	2203      	movs	r2, #3
 8000d8a:	400a      	ands	r2, r1
 8000d8c:	00d2      	lsls	r2, r2, #3
 8000d8e:	21ff      	movs	r1, #255	; 0xff
 8000d90:	4091      	lsls	r1, r2
 8000d92:	000a      	movs	r2, r1
 8000d94:	43d2      	mvns	r2, r2
 8000d96:	401a      	ands	r2, r3
 8000d98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	019b      	lsls	r3, r3, #6
 8000d9e:	22ff      	movs	r2, #255	; 0xff
 8000da0:	401a      	ands	r2, r3
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	0018      	movs	r0, r3
 8000da8:	2303      	movs	r3, #3
 8000daa:	4003      	ands	r3, r0
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db0:	481f      	ldr	r0, [pc, #124]	; (8000e30 <__NVIC_SetPriority+0xd4>)
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b25b      	sxtb	r3, r3
 8000db8:	089b      	lsrs	r3, r3, #2
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	33c0      	adds	r3, #192	; 0xc0
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dc2:	e031      	b.n	8000e28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	; (8000e34 <__NVIC_SetPriority+0xd8>)
 8000dc6:	1dfb      	adds	r3, r7, #7
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	0019      	movs	r1, r3
 8000dcc:	230f      	movs	r3, #15
 8000dce:	400b      	ands	r3, r1
 8000dd0:	3b08      	subs	r3, #8
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	3306      	adds	r3, #6
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	18d3      	adds	r3, r2, r3
 8000dda:	3304      	adds	r3, #4
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	1dfa      	adds	r2, r7, #7
 8000de0:	7812      	ldrb	r2, [r2, #0]
 8000de2:	0011      	movs	r1, r2
 8000de4:	2203      	movs	r2, #3
 8000de6:	400a      	ands	r2, r1
 8000de8:	00d2      	lsls	r2, r2, #3
 8000dea:	21ff      	movs	r1, #255	; 0xff
 8000dec:	4091      	lsls	r1, r2
 8000dee:	000a      	movs	r2, r1
 8000df0:	43d2      	mvns	r2, r2
 8000df2:	401a      	ands	r2, r3
 8000df4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	019b      	lsls	r3, r3, #6
 8000dfa:	22ff      	movs	r2, #255	; 0xff
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	0018      	movs	r0, r3
 8000e04:	2303      	movs	r3, #3
 8000e06:	4003      	ands	r3, r0
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e0c:	4809      	ldr	r0, [pc, #36]	; (8000e34 <__NVIC_SetPriority+0xd8>)
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	001c      	movs	r4, r3
 8000e14:	230f      	movs	r3, #15
 8000e16:	4023      	ands	r3, r4
 8000e18:	3b08      	subs	r3, #8
 8000e1a:	089b      	lsrs	r3, r3, #2
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	3306      	adds	r3, #6
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	18c3      	adds	r3, r0, r3
 8000e24:	3304      	adds	r3, #4
 8000e26:	601a      	str	r2, [r3, #0]
}
 8000e28:	46c0      	nop			; (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b003      	add	sp, #12
 8000e2e:	bd90      	pop	{r4, r7, pc}
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	1e5a      	subs	r2, r3, #1
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	045b      	lsls	r3, r3, #17
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d301      	bcc.n	8000e50 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e010      	b.n	8000e72 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <SysTick_Config+0x44>)
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	3a01      	subs	r2, #1
 8000e56:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e58:	2301      	movs	r3, #1
 8000e5a:	425b      	negs	r3, r3
 8000e5c:	2103      	movs	r1, #3
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f7ff ff7c 	bl	8000d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <SysTick_Config+0x44>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <SysTick_Config+0x44>)
 8000e6c:	2207      	movs	r2, #7
 8000e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	0018      	movs	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b002      	add	sp, #8
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	e000e010 	.word	0xe000e010

08000e80 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	210f      	movs	r1, #15
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	1c02      	adds	r2, r0, #0
 8000e90:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	0011      	movs	r1, r2
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f7ff ff5d 	bl	8000d5c <__NVIC_SetPriority>
}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b004      	add	sp, #16
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	0002      	movs	r2, r0
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb6:	1dfb      	adds	r3, r7, #7
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b25b      	sxtb	r3, r3
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f7ff ff33 	bl	8000d28 <__NVIC_EnableIRQ>
}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b002      	add	sp, #8
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f7ff ffaf 	bl	8000e38 <SysTick_Config>
 8000eda:	0003      	movs	r3, r0
}
 8000edc:	0018      	movs	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b002      	add	sp, #8
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000efa:	e14f      	b.n	800119c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2101      	movs	r1, #1
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	4091      	lsls	r1, r2
 8000f06:	000a      	movs	r2, r1
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d100      	bne.n	8000f14 <HAL_GPIO_Init+0x30>
 8000f12:	e140      	b.n	8001196 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2203      	movs	r2, #3
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d005      	beq.n	8000f2c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2203      	movs	r2, #3
 8000f26:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d130      	bne.n	8000f8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	409a      	lsls	r2, r3
 8000f3a:	0013      	movs	r3, r2
 8000f3c:	43da      	mvns	r2, r3
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	68da      	ldr	r2, [r3, #12]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	0013      	movs	r3, r2
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f62:	2201      	movs	r2, #1
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
 8000f68:	0013      	movs	r3, r2
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	091b      	lsrs	r3, r3, #4
 8000f78:	2201      	movs	r2, #1
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	0013      	movs	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2203      	movs	r2, #3
 8000f94:	4013      	ands	r3, r2
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d017      	beq.n	8000fca <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	409a      	lsls	r2, r3
 8000fa8:	0013      	movs	r3, r2
 8000faa:	43da      	mvns	r2, r3
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	689a      	ldr	r2, [r3, #8]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	0013      	movs	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2203      	movs	r2, #3
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d123      	bne.n	800101e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	08da      	lsrs	r2, r3, #3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3208      	adds	r2, #8
 8000fde:	0092      	lsls	r2, r2, #2
 8000fe0:	58d3      	ldr	r3, [r2, r3]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	2207      	movs	r2, #7
 8000fe8:	4013      	ands	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	220f      	movs	r2, #15
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	0013      	movs	r3, r2
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	691a      	ldr	r2, [r3, #16]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	2107      	movs	r1, #7
 8001002:	400b      	ands	r3, r1
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	409a      	lsls	r2, r3
 8001008:	0013      	movs	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	08da      	lsrs	r2, r3, #3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3208      	adds	r2, #8
 8001018:	0092      	lsls	r2, r2, #2
 800101a:	6939      	ldr	r1, [r7, #16]
 800101c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	409a      	lsls	r2, r3
 800102c:	0013      	movs	r3, r2
 800102e:	43da      	mvns	r2, r3
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2203      	movs	r2, #3
 800103c:	401a      	ands	r2, r3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	409a      	lsls	r2, r3
 8001044:	0013      	movs	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	23c0      	movs	r3, #192	; 0xc0
 8001058:	029b      	lsls	r3, r3, #10
 800105a:	4013      	ands	r3, r2
 800105c:	d100      	bne.n	8001060 <HAL_GPIO_Init+0x17c>
 800105e:	e09a      	b.n	8001196 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001060:	4b54      	ldr	r3, [pc, #336]	; (80011b4 <HAL_GPIO_Init+0x2d0>)
 8001062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001064:	4b53      	ldr	r3, [pc, #332]	; (80011b4 <HAL_GPIO_Init+0x2d0>)
 8001066:	2101      	movs	r1, #1
 8001068:	430a      	orrs	r2, r1
 800106a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800106c:	4a52      	ldr	r2, [pc, #328]	; (80011b8 <HAL_GPIO_Init+0x2d4>)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	089b      	lsrs	r3, r3, #2
 8001072:	3302      	adds	r3, #2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	589b      	ldr	r3, [r3, r2]
 8001078:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	2203      	movs	r2, #3
 800107e:	4013      	ands	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	220f      	movs	r2, #15
 8001084:	409a      	lsls	r2, r3
 8001086:	0013      	movs	r3, r2
 8001088:	43da      	mvns	r2, r3
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	23a0      	movs	r3, #160	; 0xa0
 8001094:	05db      	lsls	r3, r3, #23
 8001096:	429a      	cmp	r2, r3
 8001098:	d019      	beq.n	80010ce <HAL_GPIO_Init+0x1ea>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a47      	ldr	r2, [pc, #284]	; (80011bc <HAL_GPIO_Init+0x2d8>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d013      	beq.n	80010ca <HAL_GPIO_Init+0x1e6>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a46      	ldr	r2, [pc, #280]	; (80011c0 <HAL_GPIO_Init+0x2dc>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d00d      	beq.n	80010c6 <HAL_GPIO_Init+0x1e2>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a45      	ldr	r2, [pc, #276]	; (80011c4 <HAL_GPIO_Init+0x2e0>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d007      	beq.n	80010c2 <HAL_GPIO_Init+0x1de>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a44      	ldr	r2, [pc, #272]	; (80011c8 <HAL_GPIO_Init+0x2e4>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d101      	bne.n	80010be <HAL_GPIO_Init+0x1da>
 80010ba:	2305      	movs	r3, #5
 80010bc:	e008      	b.n	80010d0 <HAL_GPIO_Init+0x1ec>
 80010be:	2306      	movs	r3, #6
 80010c0:	e006      	b.n	80010d0 <HAL_GPIO_Init+0x1ec>
 80010c2:	2303      	movs	r3, #3
 80010c4:	e004      	b.n	80010d0 <HAL_GPIO_Init+0x1ec>
 80010c6:	2302      	movs	r3, #2
 80010c8:	e002      	b.n	80010d0 <HAL_GPIO_Init+0x1ec>
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <HAL_GPIO_Init+0x1ec>
 80010ce:	2300      	movs	r3, #0
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	2103      	movs	r1, #3
 80010d4:	400a      	ands	r2, r1
 80010d6:	0092      	lsls	r2, r2, #2
 80010d8:	4093      	lsls	r3, r2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e0:	4935      	ldr	r1, [pc, #212]	; (80011b8 <HAL_GPIO_Init+0x2d4>)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	3302      	adds	r3, #2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ee:	4b37      	ldr	r3, [pc, #220]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43da      	mvns	r2, r3
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	035b      	lsls	r3, r3, #13
 8001106:	4013      	ands	r3, r2
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001112:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001118:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	43da      	mvns	r2, r3
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	039b      	lsls	r3, r3, #14
 8001130:	4013      	ands	r3, r2
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800113c:	4b23      	ldr	r3, [pc, #140]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	43da      	mvns	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	029b      	lsls	r3, r3, #10
 800115a:	4013      	ands	r3, r2
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	43da      	mvns	r2, r3
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	025b      	lsls	r3, r3, #9
 8001184:	4013      	ands	r3, r2
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	3301      	adds	r3, #1
 800119a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	40da      	lsrs	r2, r3
 80011a4:	1e13      	subs	r3, r2, #0
 80011a6:	d000      	beq.n	80011aa <HAL_GPIO_Init+0x2c6>
 80011a8:	e6a8      	b.n	8000efc <HAL_GPIO_Init+0x18>
  }
}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b006      	add	sp, #24
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40010000 	.word	0x40010000
 80011bc:	50000400 	.word	0x50000400
 80011c0:	50000800 	.word	0x50000800
 80011c4:	50000c00 	.word	0x50000c00
 80011c8:	50001c00 	.word	0x50001c00
 80011cc:	40010400 	.word	0x40010400

080011d0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	0008      	movs	r0, r1
 80011da:	0011      	movs	r1, r2
 80011dc:	1cbb      	adds	r3, r7, #2
 80011de:	1c02      	adds	r2, r0, #0
 80011e0:	801a      	strh	r2, [r3, #0]
 80011e2:	1c7b      	adds	r3, r7, #1
 80011e4:	1c0a      	adds	r2, r1, #0
 80011e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011e8:	1c7b      	adds	r3, r7, #1
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d004      	beq.n	80011fa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011f0:	1cbb      	adds	r3, r7, #2
 80011f2:	881a      	ldrh	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80011f8:	e003      	b.n	8001202 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80011fa:	1cbb      	adds	r3, r7, #2
 80011fc:	881a      	ldrh	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	46bd      	mov	sp, r7
 8001206:	b002      	add	sp, #8
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800120c:	b5b0      	push	{r4, r5, r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d102      	bne.n	8001220 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	f000 fbaf 	bl	800197e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001220:	4bcf      	ldr	r3, [pc, #828]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	220c      	movs	r2, #12
 8001226:	4013      	ands	r3, r2
 8001228:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800122a:	4bcd      	ldr	r3, [pc, #820]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	025b      	lsls	r3, r3, #9
 8001232:	4013      	ands	r3, r2
 8001234:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2201      	movs	r2, #1
 800123c:	4013      	ands	r3, r2
 800123e:	d100      	bne.n	8001242 <HAL_RCC_OscConfig+0x36>
 8001240:	e07e      	b.n	8001340 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	2b08      	cmp	r3, #8
 8001246:	d007      	beq.n	8001258 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	2b0c      	cmp	r3, #12
 800124c:	d112      	bne.n	8001274 <HAL_RCC_OscConfig+0x68>
 800124e:	69fa      	ldr	r2, [r7, #28]
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	025b      	lsls	r3, r3, #9
 8001254:	429a      	cmp	r2, r3
 8001256:	d10d      	bne.n	8001274 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001258:	4bc1      	ldr	r3, [pc, #772]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	2380      	movs	r3, #128	; 0x80
 800125e:	029b      	lsls	r3, r3, #10
 8001260:	4013      	ands	r3, r2
 8001262:	d100      	bne.n	8001266 <HAL_RCC_OscConfig+0x5a>
 8001264:	e06b      	b.n	800133e <HAL_RCC_OscConfig+0x132>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d167      	bne.n	800133e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	f000 fb85 	bl	800197e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	025b      	lsls	r3, r3, #9
 800127c:	429a      	cmp	r2, r3
 800127e:	d107      	bne.n	8001290 <HAL_RCC_OscConfig+0x84>
 8001280:	4bb7      	ldr	r3, [pc, #732]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4bb6      	ldr	r3, [pc, #728]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 8001286:	2180      	movs	r1, #128	; 0x80
 8001288:	0249      	lsls	r1, r1, #9
 800128a:	430a      	orrs	r2, r1
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	e027      	b.n	80012e0 <HAL_RCC_OscConfig+0xd4>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	23a0      	movs	r3, #160	; 0xa0
 8001296:	02db      	lsls	r3, r3, #11
 8001298:	429a      	cmp	r2, r3
 800129a:	d10e      	bne.n	80012ba <HAL_RCC_OscConfig+0xae>
 800129c:	4bb0      	ldr	r3, [pc, #704]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4baf      	ldr	r3, [pc, #700]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 80012a2:	2180      	movs	r1, #128	; 0x80
 80012a4:	02c9      	lsls	r1, r1, #11
 80012a6:	430a      	orrs	r2, r1
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	4bad      	ldr	r3, [pc, #692]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4bac      	ldr	r3, [pc, #688]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 80012b0:	2180      	movs	r1, #128	; 0x80
 80012b2:	0249      	lsls	r1, r1, #9
 80012b4:	430a      	orrs	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	e012      	b.n	80012e0 <HAL_RCC_OscConfig+0xd4>
 80012ba:	4ba9      	ldr	r3, [pc, #676]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4ba8      	ldr	r3, [pc, #672]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 80012c0:	49a8      	ldr	r1, [pc, #672]	; (8001564 <HAL_RCC_OscConfig+0x358>)
 80012c2:	400a      	ands	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	4ba6      	ldr	r3, [pc, #664]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	025b      	lsls	r3, r3, #9
 80012ce:	4013      	ands	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4ba2      	ldr	r3, [pc, #648]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4ba1      	ldr	r3, [pc, #644]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 80012da:	49a3      	ldr	r1, [pc, #652]	; (8001568 <HAL_RCC_OscConfig+0x35c>)
 80012dc:	400a      	ands	r2, r1
 80012de:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d015      	beq.n	8001314 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fcf0 	bl	8000ccc <HAL_GetTick>
 80012ec:	0003      	movs	r3, r0
 80012ee:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012f0:	e009      	b.n	8001306 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f2:	f7ff fceb 	bl	8000ccc <HAL_GetTick>
 80012f6:	0002      	movs	r2, r0
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b64      	cmp	r3, #100	; 0x64
 80012fe:	d902      	bls.n	8001306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	f000 fb3c 	bl	800197e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001306:	4b96      	ldr	r3, [pc, #600]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	029b      	lsls	r3, r3, #10
 800130e:	4013      	ands	r3, r2
 8001310:	d0ef      	beq.n	80012f2 <HAL_RCC_OscConfig+0xe6>
 8001312:	e015      	b.n	8001340 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fcda 	bl	8000ccc <HAL_GetTick>
 8001318:	0003      	movs	r3, r0
 800131a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131e:	f7ff fcd5 	bl	8000ccc <HAL_GetTick>
 8001322:	0002      	movs	r2, r0
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b64      	cmp	r3, #100	; 0x64
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e326      	b.n	800197e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001330:	4b8b      	ldr	r3, [pc, #556]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	029b      	lsls	r3, r3, #10
 8001338:	4013      	ands	r3, r2
 800133a:	d1f0      	bne.n	800131e <HAL_RCC_OscConfig+0x112>
 800133c:	e000      	b.n	8001340 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2202      	movs	r2, #2
 8001346:	4013      	ands	r3, r2
 8001348:	d100      	bne.n	800134c <HAL_RCC_OscConfig+0x140>
 800134a:	e08b      	b.n	8001464 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	2b04      	cmp	r3, #4
 8001356:	d005      	beq.n	8001364 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	2b0c      	cmp	r3, #12
 800135c:	d13e      	bne.n	80013dc <HAL_RCC_OscConfig+0x1d0>
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d13b      	bne.n	80013dc <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001364:	4b7e      	ldr	r3, [pc, #504]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2204      	movs	r2, #4
 800136a:	4013      	ands	r3, r2
 800136c:	d004      	beq.n	8001378 <HAL_RCC_OscConfig+0x16c>
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e302      	b.n	800197e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001378:	4b79      	ldr	r3, [pc, #484]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4a7b      	ldr	r2, [pc, #492]	; (800156c <HAL_RCC_OscConfig+0x360>)
 800137e:	4013      	ands	r3, r2
 8001380:	0019      	movs	r1, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	021a      	lsls	r2, r3, #8
 8001388:	4b75      	ldr	r3, [pc, #468]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 800138a:	430a      	orrs	r2, r1
 800138c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800138e:	4b74      	ldr	r3, [pc, #464]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2209      	movs	r2, #9
 8001394:	4393      	bics	r3, r2
 8001396:	0019      	movs	r1, r3
 8001398:	4b71      	ldr	r3, [pc, #452]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	430a      	orrs	r2, r1
 800139e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013a0:	f000 fc40 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 80013a4:	0001      	movs	r1, r0
 80013a6:	4b6e      	ldr	r3, [pc, #440]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	091b      	lsrs	r3, r3, #4
 80013ac:	220f      	movs	r2, #15
 80013ae:	4013      	ands	r3, r2
 80013b0:	4a6f      	ldr	r2, [pc, #444]	; (8001570 <HAL_RCC_OscConfig+0x364>)
 80013b2:	5cd3      	ldrb	r3, [r2, r3]
 80013b4:	000a      	movs	r2, r1
 80013b6:	40da      	lsrs	r2, r3
 80013b8:	4b6e      	ldr	r3, [pc, #440]	; (8001574 <HAL_RCC_OscConfig+0x368>)
 80013ba:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80013bc:	4b6e      	ldr	r3, [pc, #440]	; (8001578 <HAL_RCC_OscConfig+0x36c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2513      	movs	r5, #19
 80013c2:	197c      	adds	r4, r7, r5
 80013c4:	0018      	movs	r0, r3
 80013c6:	f7ff fc3b 	bl	8000c40 <HAL_InitTick>
 80013ca:	0003      	movs	r3, r0
 80013cc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80013ce:	197b      	adds	r3, r7, r5
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d046      	beq.n	8001464 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80013d6:	197b      	adds	r3, r7, r5
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	e2d0      	b.n	800197e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d027      	beq.n	8001432 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013e2:	4b5f      	ldr	r3, [pc, #380]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2209      	movs	r2, #9
 80013e8:	4393      	bics	r3, r2
 80013ea:	0019      	movs	r1, r3
 80013ec:	4b5c      	ldr	r3, [pc, #368]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	430a      	orrs	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fc6a 	bl	8000ccc <HAL_GetTick>
 80013f8:	0003      	movs	r3, r0
 80013fa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013fe:	f7ff fc65 	bl	8000ccc <HAL_GetTick>
 8001402:	0002      	movs	r2, r0
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e2b6      	b.n	800197e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001410:	4b53      	ldr	r3, [pc, #332]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2204      	movs	r2, #4
 8001416:	4013      	ands	r3, r2
 8001418:	d0f1      	beq.n	80013fe <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141a:	4b51      	ldr	r3, [pc, #324]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	4a53      	ldr	r2, [pc, #332]	; (800156c <HAL_RCC_OscConfig+0x360>)
 8001420:	4013      	ands	r3, r2
 8001422:	0019      	movs	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	021a      	lsls	r2, r3, #8
 800142a:	4b4d      	ldr	r3, [pc, #308]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 800142c:	430a      	orrs	r2, r1
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	e018      	b.n	8001464 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001432:	4b4b      	ldr	r3, [pc, #300]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4b4a      	ldr	r3, [pc, #296]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 8001438:	2101      	movs	r1, #1
 800143a:	438a      	bics	r2, r1
 800143c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143e:	f7ff fc45 	bl	8000ccc <HAL_GetTick>
 8001442:	0003      	movs	r3, r0
 8001444:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001448:	f7ff fc40 	bl	8000ccc <HAL_GetTick>
 800144c:	0002      	movs	r2, r0
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e291      	b.n	800197e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800145a:	4b41      	ldr	r3, [pc, #260]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2204      	movs	r2, #4
 8001460:	4013      	ands	r3, r2
 8001462:	d1f1      	bne.n	8001448 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2210      	movs	r2, #16
 800146a:	4013      	ands	r3, r2
 800146c:	d100      	bne.n	8001470 <HAL_RCC_OscConfig+0x264>
 800146e:	e0a1      	b.n	80015b4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d140      	bne.n	80014f8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001476:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4013      	ands	r3, r2
 8001480:	d005      	beq.n	800148e <HAL_RCC_OscConfig+0x282>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e277      	b.n	800197e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800148e:	4b34      	ldr	r3, [pc, #208]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	4a3a      	ldr	r2, [pc, #232]	; (800157c <HAL_RCC_OscConfig+0x370>)
 8001494:	4013      	ands	r3, r2
 8001496:	0019      	movs	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800149c:	4b30      	ldr	r3, [pc, #192]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 800149e:	430a      	orrs	r2, r1
 80014a0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014a2:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	0a19      	lsrs	r1, r3, #8
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	061a      	lsls	r2, r3, #24
 80014b0:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 80014b2:	430a      	orrs	r2, r1
 80014b4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ba:	0b5b      	lsrs	r3, r3, #13
 80014bc:	3301      	adds	r3, #1
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	0212      	lsls	r2, r2, #8
 80014c2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	091b      	lsrs	r3, r3, #4
 80014ca:	210f      	movs	r1, #15
 80014cc:	400b      	ands	r3, r1
 80014ce:	4928      	ldr	r1, [pc, #160]	; (8001570 <HAL_RCC_OscConfig+0x364>)
 80014d0:	5ccb      	ldrb	r3, [r1, r3]
 80014d2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014d4:	4b27      	ldr	r3, [pc, #156]	; (8001574 <HAL_RCC_OscConfig+0x368>)
 80014d6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80014d8:	4b27      	ldr	r3, [pc, #156]	; (8001578 <HAL_RCC_OscConfig+0x36c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2513      	movs	r5, #19
 80014de:	197c      	adds	r4, r7, r5
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff fbad 	bl	8000c40 <HAL_InitTick>
 80014e6:	0003      	movs	r3, r0
 80014e8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80014ea:	197b      	adds	r3, r7, r5
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d060      	beq.n	80015b4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80014f2:	197b      	adds	r3, r7, r5
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	e242      	b.n	800197e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d03f      	beq.n	8001580 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001500:	4b17      	ldr	r3, [pc, #92]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b16      	ldr	r3, [pc, #88]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 8001506:	2180      	movs	r1, #128	; 0x80
 8001508:	0049      	lsls	r1, r1, #1
 800150a:	430a      	orrs	r2, r1
 800150c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150e:	f7ff fbdd 	bl	8000ccc <HAL_GetTick>
 8001512:	0003      	movs	r3, r0
 8001514:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001518:	f7ff fbd8 	bl	8000ccc <HAL_GetTick>
 800151c:	0002      	movs	r2, r0
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e229      	b.n	800197e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4013      	ands	r3, r2
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <HAL_RCC_OscConfig+0x370>)
 800153c:	4013      	ands	r3, r2
 800153e:	0019      	movs	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 8001546:	430a      	orrs	r2, r1
 8001548:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	0a19      	lsrs	r1, r3, #8
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	061a      	lsls	r2, r3, #24
 8001558:	4b01      	ldr	r3, [pc, #4]	; (8001560 <HAL_RCC_OscConfig+0x354>)
 800155a:	430a      	orrs	r2, r1
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	e029      	b.n	80015b4 <HAL_RCC_OscConfig+0x3a8>
 8001560:	40021000 	.word	0x40021000
 8001564:	fffeffff 	.word	0xfffeffff
 8001568:	fffbffff 	.word	0xfffbffff
 800156c:	ffffe0ff 	.word	0xffffe0ff
 8001570:	08004880 	.word	0x08004880
 8001574:	20000000 	.word	0x20000000
 8001578:	20000004 	.word	0x20000004
 800157c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001580:	4bbd      	ldr	r3, [pc, #756]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4bbc      	ldr	r3, [pc, #752]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 8001586:	49bd      	ldr	r1, [pc, #756]	; (800187c <HAL_RCC_OscConfig+0x670>)
 8001588:	400a      	ands	r2, r1
 800158a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fb9e 	bl	8000ccc <HAL_GetTick>
 8001590:	0003      	movs	r3, r0
 8001592:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001596:	f7ff fb99 	bl	8000ccc <HAL_GetTick>
 800159a:	0002      	movs	r2, r0
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e1ea      	b.n	800197e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015a8:	4bb3      	ldr	r3, [pc, #716]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4013      	ands	r3, r2
 80015b2:	d1f0      	bne.n	8001596 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2208      	movs	r2, #8
 80015ba:	4013      	ands	r3, r2
 80015bc:	d036      	beq.n	800162c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d019      	beq.n	80015fa <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c6:	4bac      	ldr	r3, [pc, #688]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 80015c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015ca:	4bab      	ldr	r3, [pc, #684]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 80015cc:	2101      	movs	r1, #1
 80015ce:	430a      	orrs	r2, r1
 80015d0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d2:	f7ff fb7b 	bl	8000ccc <HAL_GetTick>
 80015d6:	0003      	movs	r3, r0
 80015d8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015dc:	f7ff fb76 	bl	8000ccc <HAL_GetTick>
 80015e0:	0002      	movs	r2, r0
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e1c7      	b.n	800197e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015ee:	4ba2      	ldr	r3, [pc, #648]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 80015f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015f2:	2202      	movs	r2, #2
 80015f4:	4013      	ands	r3, r2
 80015f6:	d0f1      	beq.n	80015dc <HAL_RCC_OscConfig+0x3d0>
 80015f8:	e018      	b.n	800162c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015fa:	4b9f      	ldr	r3, [pc, #636]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 80015fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015fe:	4b9e      	ldr	r3, [pc, #632]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 8001600:	2101      	movs	r1, #1
 8001602:	438a      	bics	r2, r1
 8001604:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001606:	f7ff fb61 	bl	8000ccc <HAL_GetTick>
 800160a:	0003      	movs	r3, r0
 800160c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001610:	f7ff fb5c 	bl	8000ccc <HAL_GetTick>
 8001614:	0002      	movs	r2, r0
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e1ad      	b.n	800197e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001622:	4b95      	ldr	r3, [pc, #596]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 8001624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001626:	2202      	movs	r2, #2
 8001628:	4013      	ands	r3, r2
 800162a:	d1f1      	bne.n	8001610 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2204      	movs	r2, #4
 8001632:	4013      	ands	r3, r2
 8001634:	d100      	bne.n	8001638 <HAL_RCC_OscConfig+0x42c>
 8001636:	e0ae      	b.n	8001796 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001638:	2027      	movs	r0, #39	; 0x27
 800163a:	183b      	adds	r3, r7, r0
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001640:	4b8d      	ldr	r3, [pc, #564]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 8001642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	055b      	lsls	r3, r3, #21
 8001648:	4013      	ands	r3, r2
 800164a:	d109      	bne.n	8001660 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800164c:	4b8a      	ldr	r3, [pc, #552]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 800164e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001650:	4b89      	ldr	r3, [pc, #548]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 8001652:	2180      	movs	r1, #128	; 0x80
 8001654:	0549      	lsls	r1, r1, #21
 8001656:	430a      	orrs	r2, r1
 8001658:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800165a:	183b      	adds	r3, r7, r0
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001660:	4b87      	ldr	r3, [pc, #540]	; (8001880 <HAL_RCC_OscConfig+0x674>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4013      	ands	r3, r2
 800166a:	d11a      	bne.n	80016a2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800166c:	4b84      	ldr	r3, [pc, #528]	; (8001880 <HAL_RCC_OscConfig+0x674>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b83      	ldr	r3, [pc, #524]	; (8001880 <HAL_RCC_OscConfig+0x674>)
 8001672:	2180      	movs	r1, #128	; 0x80
 8001674:	0049      	lsls	r1, r1, #1
 8001676:	430a      	orrs	r2, r1
 8001678:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800167a:	f7ff fb27 	bl	8000ccc <HAL_GetTick>
 800167e:	0003      	movs	r3, r0
 8001680:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001684:	f7ff fb22 	bl	8000ccc <HAL_GetTick>
 8001688:	0002      	movs	r2, r0
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	; 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e173      	b.n	800197e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001696:	4b7a      	ldr	r3, [pc, #488]	; (8001880 <HAL_RCC_OscConfig+0x674>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4013      	ands	r3, r2
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d107      	bne.n	80016be <HAL_RCC_OscConfig+0x4b2>
 80016ae:	4b72      	ldr	r3, [pc, #456]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 80016b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016b2:	4b71      	ldr	r3, [pc, #452]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 80016b4:	2180      	movs	r1, #128	; 0x80
 80016b6:	0049      	lsls	r1, r1, #1
 80016b8:	430a      	orrs	r2, r1
 80016ba:	651a      	str	r2, [r3, #80]	; 0x50
 80016bc:	e031      	b.n	8001722 <HAL_RCC_OscConfig+0x516>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x4d4>
 80016c6:	4b6c      	ldr	r3, [pc, #432]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 80016c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ca:	4b6b      	ldr	r3, [pc, #428]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 80016cc:	496b      	ldr	r1, [pc, #428]	; (800187c <HAL_RCC_OscConfig+0x670>)
 80016ce:	400a      	ands	r2, r1
 80016d0:	651a      	str	r2, [r3, #80]	; 0x50
 80016d2:	4b69      	ldr	r3, [pc, #420]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 80016d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016d6:	4b68      	ldr	r3, [pc, #416]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 80016d8:	496a      	ldr	r1, [pc, #424]	; (8001884 <HAL_RCC_OscConfig+0x678>)
 80016da:	400a      	ands	r2, r1
 80016dc:	651a      	str	r2, [r3, #80]	; 0x50
 80016de:	e020      	b.n	8001722 <HAL_RCC_OscConfig+0x516>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	23a0      	movs	r3, #160	; 0xa0
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d10e      	bne.n	800170a <HAL_RCC_OscConfig+0x4fe>
 80016ec:	4b62      	ldr	r3, [pc, #392]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 80016ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016f0:	4b61      	ldr	r3, [pc, #388]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	00c9      	lsls	r1, r1, #3
 80016f6:	430a      	orrs	r2, r1
 80016f8:	651a      	str	r2, [r3, #80]	; 0x50
 80016fa:	4b5f      	ldr	r3, [pc, #380]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 80016fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016fe:	4b5e      	ldr	r3, [pc, #376]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 8001700:	2180      	movs	r1, #128	; 0x80
 8001702:	0049      	lsls	r1, r1, #1
 8001704:	430a      	orrs	r2, r1
 8001706:	651a      	str	r2, [r3, #80]	; 0x50
 8001708:	e00b      	b.n	8001722 <HAL_RCC_OscConfig+0x516>
 800170a:	4b5b      	ldr	r3, [pc, #364]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 800170c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800170e:	4b5a      	ldr	r3, [pc, #360]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 8001710:	495a      	ldr	r1, [pc, #360]	; (800187c <HAL_RCC_OscConfig+0x670>)
 8001712:	400a      	ands	r2, r1
 8001714:	651a      	str	r2, [r3, #80]	; 0x50
 8001716:	4b58      	ldr	r3, [pc, #352]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 8001718:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800171a:	4b57      	ldr	r3, [pc, #348]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 800171c:	4959      	ldr	r1, [pc, #356]	; (8001884 <HAL_RCC_OscConfig+0x678>)
 800171e:	400a      	ands	r2, r1
 8001720:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d015      	beq.n	8001756 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172a:	f7ff facf 	bl	8000ccc <HAL_GetTick>
 800172e:	0003      	movs	r3, r0
 8001730:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001732:	e009      	b.n	8001748 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001734:	f7ff faca 	bl	8000ccc <HAL_GetTick>
 8001738:	0002      	movs	r2, r0
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	4a52      	ldr	r2, [pc, #328]	; (8001888 <HAL_RCC_OscConfig+0x67c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e11a      	b.n	800197e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001748:	4b4b      	ldr	r3, [pc, #300]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 800174a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4013      	ands	r3, r2
 8001752:	d0ef      	beq.n	8001734 <HAL_RCC_OscConfig+0x528>
 8001754:	e014      	b.n	8001780 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001756:	f7ff fab9 	bl	8000ccc <HAL_GetTick>
 800175a:	0003      	movs	r3, r0
 800175c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800175e:	e009      	b.n	8001774 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001760:	f7ff fab4 	bl	8000ccc <HAL_GetTick>
 8001764:	0002      	movs	r2, r0
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	4a47      	ldr	r2, [pc, #284]	; (8001888 <HAL_RCC_OscConfig+0x67c>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e104      	b.n	800197e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001774:	4b40      	ldr	r3, [pc, #256]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 8001776:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4013      	ands	r3, r2
 800177e:	d1ef      	bne.n	8001760 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001780:	2327      	movs	r3, #39	; 0x27
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d105      	bne.n	8001796 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800178a:	4b3b      	ldr	r3, [pc, #236]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 800178c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800178e:	4b3a      	ldr	r3, [pc, #232]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 8001790:	493e      	ldr	r1, [pc, #248]	; (800188c <HAL_RCC_OscConfig+0x680>)
 8001792:	400a      	ands	r2, r1
 8001794:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2220      	movs	r2, #32
 800179c:	4013      	ands	r3, r2
 800179e:	d049      	beq.n	8001834 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d026      	beq.n	80017f6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80017a8:	4b33      	ldr	r3, [pc, #204]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	4b32      	ldr	r3, [pc, #200]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 80017ae:	2101      	movs	r1, #1
 80017b0:	430a      	orrs	r2, r1
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	4b30      	ldr	r3, [pc, #192]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 80017b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b8:	4b2f      	ldr	r3, [pc, #188]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 80017ba:	2101      	movs	r1, #1
 80017bc:	430a      	orrs	r2, r1
 80017be:	635a      	str	r2, [r3, #52]	; 0x34
 80017c0:	4b33      	ldr	r3, [pc, #204]	; (8001890 <HAL_RCC_OscConfig+0x684>)
 80017c2:	6a1a      	ldr	r2, [r3, #32]
 80017c4:	4b32      	ldr	r3, [pc, #200]	; (8001890 <HAL_RCC_OscConfig+0x684>)
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	0189      	lsls	r1, r1, #6
 80017ca:	430a      	orrs	r2, r1
 80017cc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ce:	f7ff fa7d 	bl	8000ccc <HAL_GetTick>
 80017d2:	0003      	movs	r3, r0
 80017d4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017d8:	f7ff fa78 	bl	8000ccc <HAL_GetTick>
 80017dc:	0002      	movs	r2, r0
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e0c9      	b.n	800197e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2202      	movs	r2, #2
 80017f0:	4013      	ands	r3, r2
 80017f2:	d0f1      	beq.n	80017d8 <HAL_RCC_OscConfig+0x5cc>
 80017f4:	e01e      	b.n	8001834 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 80017fc:	2101      	movs	r1, #1
 80017fe:	438a      	bics	r2, r1
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	4b23      	ldr	r3, [pc, #140]	; (8001890 <HAL_RCC_OscConfig+0x684>)
 8001804:	6a1a      	ldr	r2, [r3, #32]
 8001806:	4b22      	ldr	r3, [pc, #136]	; (8001890 <HAL_RCC_OscConfig+0x684>)
 8001808:	4922      	ldr	r1, [pc, #136]	; (8001894 <HAL_RCC_OscConfig+0x688>)
 800180a:	400a      	ands	r2, r1
 800180c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180e:	f7ff fa5d 	bl	8000ccc <HAL_GetTick>
 8001812:	0003      	movs	r3, r0
 8001814:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001818:	f7ff fa58 	bl	8000ccc <HAL_GetTick>
 800181c:	0002      	movs	r2, r0
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e0a9      	b.n	800197e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2202      	movs	r2, #2
 8001830:	4013      	ands	r3, r2
 8001832:	d1f1      	bne.n	8001818 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001838:	2b00      	cmp	r3, #0
 800183a:	d100      	bne.n	800183e <HAL_RCC_OscConfig+0x632>
 800183c:	e09e      	b.n	800197c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800183e:	6a3b      	ldr	r3, [r7, #32]
 8001840:	2b0c      	cmp	r3, #12
 8001842:	d100      	bne.n	8001846 <HAL_RCC_OscConfig+0x63a>
 8001844:	e077      	b.n	8001936 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	2b02      	cmp	r3, #2
 800184c:	d158      	bne.n	8001900 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_RCC_OscConfig+0x66c>)
 8001854:	4910      	ldr	r1, [pc, #64]	; (8001898 <HAL_RCC_OscConfig+0x68c>)
 8001856:	400a      	ands	r2, r1
 8001858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185a:	f7ff fa37 	bl	8000ccc <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001862:	e01b      	b.n	800189c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff fa32 	bl	8000ccc <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d914      	bls.n	800189c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e083      	b.n	800197e <HAL_RCC_OscConfig+0x772>
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	40021000 	.word	0x40021000
 800187c:	fffffeff 	.word	0xfffffeff
 8001880:	40007000 	.word	0x40007000
 8001884:	fffffbff 	.word	0xfffffbff
 8001888:	00001388 	.word	0x00001388
 800188c:	efffffff 	.word	0xefffffff
 8001890:	40010000 	.word	0x40010000
 8001894:	ffffdfff 	.word	0xffffdfff
 8001898:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800189c:	4b3a      	ldr	r3, [pc, #232]	; (8001988 <HAL_RCC_OscConfig+0x77c>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	049b      	lsls	r3, r3, #18
 80018a4:	4013      	ands	r3, r2
 80018a6:	d1dd      	bne.n	8001864 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a8:	4b37      	ldr	r3, [pc, #220]	; (8001988 <HAL_RCC_OscConfig+0x77c>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	4a37      	ldr	r2, [pc, #220]	; (800198c <HAL_RCC_OscConfig+0x780>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	0019      	movs	r1, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c0:	431a      	orrs	r2, r3
 80018c2:	4b31      	ldr	r3, [pc, #196]	; (8001988 <HAL_RCC_OscConfig+0x77c>)
 80018c4:	430a      	orrs	r2, r1
 80018c6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c8:	4b2f      	ldr	r3, [pc, #188]	; (8001988 <HAL_RCC_OscConfig+0x77c>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b2e      	ldr	r3, [pc, #184]	; (8001988 <HAL_RCC_OscConfig+0x77c>)
 80018ce:	2180      	movs	r1, #128	; 0x80
 80018d0:	0449      	lsls	r1, r1, #17
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7ff f9f9 	bl	8000ccc <HAL_GetTick>
 80018da:	0003      	movs	r3, r0
 80018dc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e0:	f7ff f9f4 	bl	8000ccc <HAL_GetTick>
 80018e4:	0002      	movs	r2, r0
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e045      	b.n	800197e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018f2:	4b25      	ldr	r3, [pc, #148]	; (8001988 <HAL_RCC_OscConfig+0x77c>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	049b      	lsls	r3, r3, #18
 80018fa:	4013      	ands	r3, r2
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x6d4>
 80018fe:	e03d      	b.n	800197c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001900:	4b21      	ldr	r3, [pc, #132]	; (8001988 <HAL_RCC_OscConfig+0x77c>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b20      	ldr	r3, [pc, #128]	; (8001988 <HAL_RCC_OscConfig+0x77c>)
 8001906:	4922      	ldr	r1, [pc, #136]	; (8001990 <HAL_RCC_OscConfig+0x784>)
 8001908:	400a      	ands	r2, r1
 800190a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff f9de 	bl	8000ccc <HAL_GetTick>
 8001910:	0003      	movs	r3, r0
 8001912:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001916:	f7ff f9d9 	bl	8000ccc <HAL_GetTick>
 800191a:	0002      	movs	r2, r0
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e02a      	b.n	800197e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001928:	4b17      	ldr	r3, [pc, #92]	; (8001988 <HAL_RCC_OscConfig+0x77c>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	049b      	lsls	r3, r3, #18
 8001930:	4013      	ands	r3, r2
 8001932:	d1f0      	bne.n	8001916 <HAL_RCC_OscConfig+0x70a>
 8001934:	e022      	b.n	800197c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e01d      	b.n	800197e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_RCC_OscConfig+0x77c>)
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	025b      	lsls	r3, r3, #9
 800194e:	401a      	ands	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001954:	429a      	cmp	r2, r3
 8001956:	d10f      	bne.n	8001978 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001958:	69fa      	ldr	r2, [r7, #28]
 800195a:	23f0      	movs	r3, #240	; 0xf0
 800195c:	039b      	lsls	r3, r3, #14
 800195e:	401a      	ands	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001964:	429a      	cmp	r2, r3
 8001966:	d107      	bne.n	8001978 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001968:	69fa      	ldr	r2, [r7, #28]
 800196a:	23c0      	movs	r3, #192	; 0xc0
 800196c:	041b      	lsls	r3, r3, #16
 800196e:	401a      	ands	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d001      	beq.n	800197c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	0018      	movs	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	b00a      	add	sp, #40	; 0x28
 8001984:	bdb0      	pop	{r4, r5, r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	40021000 	.word	0x40021000
 800198c:	ff02ffff 	.word	0xff02ffff
 8001990:	feffffff 	.word	0xfeffffff

08001994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001994:	b5b0      	push	{r4, r5, r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e128      	b.n	8001bfa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019a8:	4b96      	ldr	r3, [pc, #600]	; (8001c04 <HAL_RCC_ClockConfig+0x270>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2201      	movs	r2, #1
 80019ae:	4013      	ands	r3, r2
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d91e      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b93      	ldr	r3, [pc, #588]	; (8001c04 <HAL_RCC_ClockConfig+0x270>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2201      	movs	r2, #1
 80019bc:	4393      	bics	r3, r2
 80019be:	0019      	movs	r1, r3
 80019c0:	4b90      	ldr	r3, [pc, #576]	; (8001c04 <HAL_RCC_ClockConfig+0x270>)
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019c8:	f7ff f980 	bl	8000ccc <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d0:	e009      	b.n	80019e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d2:	f7ff f97b 	bl	8000ccc <HAL_GetTick>
 80019d6:	0002      	movs	r2, r0
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	4a8a      	ldr	r2, [pc, #552]	; (8001c08 <HAL_RCC_ClockConfig+0x274>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e109      	b.n	8001bfa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e6:	4b87      	ldr	r3, [pc, #540]	; (8001c04 <HAL_RCC_ClockConfig+0x270>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2201      	movs	r2, #1
 80019ec:	4013      	ands	r3, r2
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d1ee      	bne.n	80019d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2202      	movs	r2, #2
 80019fa:	4013      	ands	r3, r2
 80019fc:	d009      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019fe:	4b83      	ldr	r3, [pc, #524]	; (8001c0c <HAL_RCC_ClockConfig+0x278>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	22f0      	movs	r2, #240	; 0xf0
 8001a04:	4393      	bics	r3, r2
 8001a06:	0019      	movs	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	4b7f      	ldr	r3, [pc, #508]	; (8001c0c <HAL_RCC_ClockConfig+0x278>)
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2201      	movs	r2, #1
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d100      	bne.n	8001a1e <HAL_RCC_ClockConfig+0x8a>
 8001a1c:	e089      	b.n	8001b32 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d107      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a26:	4b79      	ldr	r3, [pc, #484]	; (8001c0c <HAL_RCC_ClockConfig+0x278>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	029b      	lsls	r3, r3, #10
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d120      	bne.n	8001a74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e0e1      	b.n	8001bfa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d107      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a3e:	4b73      	ldr	r3, [pc, #460]	; (8001c0c <HAL_RCC_ClockConfig+0x278>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	049b      	lsls	r3, r3, #18
 8001a46:	4013      	ands	r3, r2
 8001a48:	d114      	bne.n	8001a74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e0d5      	b.n	8001bfa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d106      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a56:	4b6d      	ldr	r3, [pc, #436]	; (8001c0c <HAL_RCC_ClockConfig+0x278>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2204      	movs	r2, #4
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d109      	bne.n	8001a74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0ca      	b.n	8001bfa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a64:	4b69      	ldr	r3, [pc, #420]	; (8001c0c <HAL_RCC_ClockConfig+0x278>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0c2      	b.n	8001bfa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a74:	4b65      	ldr	r3, [pc, #404]	; (8001c0c <HAL_RCC_ClockConfig+0x278>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	2203      	movs	r2, #3
 8001a7a:	4393      	bics	r3, r2
 8001a7c:	0019      	movs	r1, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	4b62      	ldr	r3, [pc, #392]	; (8001c0c <HAL_RCC_ClockConfig+0x278>)
 8001a84:	430a      	orrs	r2, r1
 8001a86:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a88:	f7ff f920 	bl	8000ccc <HAL_GetTick>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d111      	bne.n	8001abc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a98:	e009      	b.n	8001aae <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9a:	f7ff f917 	bl	8000ccc <HAL_GetTick>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	4a58      	ldr	r2, [pc, #352]	; (8001c08 <HAL_RCC_ClockConfig+0x274>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e0a5      	b.n	8001bfa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aae:	4b57      	ldr	r3, [pc, #348]	; (8001c0c <HAL_RCC_ClockConfig+0x278>)
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d1ef      	bne.n	8001a9a <HAL_RCC_ClockConfig+0x106>
 8001aba:	e03a      	b.n	8001b32 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	d111      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac4:	e009      	b.n	8001ada <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac6:	f7ff f901 	bl	8000ccc <HAL_GetTick>
 8001aca:	0002      	movs	r2, r0
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	4a4d      	ldr	r2, [pc, #308]	; (8001c08 <HAL_RCC_ClockConfig+0x274>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e08f      	b.n	8001bfa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ada:	4b4c      	ldr	r3, [pc, #304]	; (8001c0c <HAL_RCC_ClockConfig+0x278>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	220c      	movs	r2, #12
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b0c      	cmp	r3, #12
 8001ae4:	d1ef      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0x132>
 8001ae6:	e024      	b.n	8001b32 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d11b      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001af0:	e009      	b.n	8001b06 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af2:	f7ff f8eb 	bl	8000ccc <HAL_GetTick>
 8001af6:	0002      	movs	r2, r0
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	4a42      	ldr	r2, [pc, #264]	; (8001c08 <HAL_RCC_ClockConfig+0x274>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e079      	b.n	8001bfa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b06:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <HAL_RCC_ClockConfig+0x278>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d1ef      	bne.n	8001af2 <HAL_RCC_ClockConfig+0x15e>
 8001b12:	e00e      	b.n	8001b32 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b14:	f7ff f8da 	bl	8000ccc <HAL_GetTick>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	4a3a      	ldr	r2, [pc, #232]	; (8001c08 <HAL_RCC_ClockConfig+0x274>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e068      	b.n	8001bfa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b28:	4b38      	ldr	r3, [pc, #224]	; (8001c0c <HAL_RCC_ClockConfig+0x278>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	220c      	movs	r2, #12
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b32:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <HAL_RCC_ClockConfig+0x270>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2201      	movs	r2, #1
 8001b38:	4013      	ands	r3, r2
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d21e      	bcs.n	8001b7e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b40:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <HAL_RCC_ClockConfig+0x270>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2201      	movs	r2, #1
 8001b46:	4393      	bics	r3, r2
 8001b48:	0019      	movs	r1, r3
 8001b4a:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <HAL_RCC_ClockConfig+0x270>)
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b52:	f7ff f8bb 	bl	8000ccc <HAL_GetTick>
 8001b56:	0003      	movs	r3, r0
 8001b58:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5a:	e009      	b.n	8001b70 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5c:	f7ff f8b6 	bl	8000ccc <HAL_GetTick>
 8001b60:	0002      	movs	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	4a28      	ldr	r2, [pc, #160]	; (8001c08 <HAL_RCC_ClockConfig+0x274>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e044      	b.n	8001bfa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b70:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <HAL_RCC_ClockConfig+0x270>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2201      	movs	r2, #1
 8001b76:	4013      	ands	r3, r2
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d1ee      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2204      	movs	r2, #4
 8001b84:	4013      	ands	r3, r2
 8001b86:	d009      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b88:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <HAL_RCC_ClockConfig+0x278>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4a20      	ldr	r2, [pc, #128]	; (8001c10 <HAL_RCC_ClockConfig+0x27c>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	0019      	movs	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_RCC_ClockConfig+0x278>)
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2208      	movs	r2, #8
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d00a      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ba6:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <HAL_RCC_ClockConfig+0x278>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	4a1a      	ldr	r2, [pc, #104]	; (8001c14 <HAL_RCC_ClockConfig+0x280>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	0019      	movs	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	00da      	lsls	r2, r3, #3
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <HAL_RCC_ClockConfig+0x278>)
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bbc:	f000 f832 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8001bc0:	0001      	movs	r1, r0
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_RCC_ClockConfig+0x278>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	091b      	lsrs	r3, r3, #4
 8001bc8:	220f      	movs	r2, #15
 8001bca:	4013      	ands	r3, r2
 8001bcc:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <HAL_RCC_ClockConfig+0x284>)
 8001bce:	5cd3      	ldrb	r3, [r2, r3]
 8001bd0:	000a      	movs	r2, r1
 8001bd2:	40da      	lsrs	r2, r3
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <HAL_RCC_ClockConfig+0x288>)
 8001bd6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <HAL_RCC_ClockConfig+0x28c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	250b      	movs	r5, #11
 8001bde:	197c      	adds	r4, r7, r5
 8001be0:	0018      	movs	r0, r3
 8001be2:	f7ff f82d 	bl	8000c40 <HAL_InitTick>
 8001be6:	0003      	movs	r3, r0
 8001be8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001bea:	197b      	adds	r3, r7, r5
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001bf2:	197b      	adds	r3, r7, r5
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	e000      	b.n	8001bfa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b004      	add	sp, #16
 8001c00:	bdb0      	pop	{r4, r5, r7, pc}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	40022000 	.word	0x40022000
 8001c08:	00001388 	.word	0x00001388
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	fffff8ff 	.word	0xfffff8ff
 8001c14:	ffffc7ff 	.word	0xffffc7ff
 8001c18:	08004880 	.word	0x08004880
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	20000004 	.word	0x20000004

08001c24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c24:	b5b0      	push	{r4, r5, r7, lr}
 8001c26:	b08e      	sub	sp, #56	; 0x38
 8001c28:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c2a:	4b4c      	ldr	r3, [pc, #304]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x138>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c32:	230c      	movs	r3, #12
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b0c      	cmp	r3, #12
 8001c38:	d014      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x40>
 8001c3a:	d900      	bls.n	8001c3e <HAL_RCC_GetSysClockFreq+0x1a>
 8001c3c:	e07b      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x112>
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d002      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0x24>
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d00b      	beq.n	8001c5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c46:	e076      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c48:	4b44      	ldr	r3, [pc, #272]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x138>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2210      	movs	r2, #16
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d002      	beq.n	8001c58 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c52:	4b43      	ldr	r3, [pc, #268]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c54:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c56:	e07c      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001c58:	4b42      	ldr	r3, [pc, #264]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c5c:	e079      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c5e:	4b42      	ldr	r3, [pc, #264]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x144>)
 8001c60:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c62:	e076      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c66:	0c9a      	lsrs	r2, r3, #18
 8001c68:	230f      	movs	r3, #15
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	4b3f      	ldr	r3, [pc, #252]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x148>)
 8001c6e:	5c9b      	ldrb	r3, [r3, r2]
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c74:	0d9a      	lsrs	r2, r3, #22
 8001c76:	2303      	movs	r3, #3
 8001c78:	4013      	ands	r3, r2
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c7e:	4b37      	ldr	r3, [pc, #220]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x138>)
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	025b      	lsls	r3, r3, #9
 8001c86:	4013      	ands	r3, r2
 8001c88:	d01a      	beq.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8c:	61bb      	str	r3, [r7, #24]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	4a35      	ldr	r2, [pc, #212]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x144>)
 8001c94:	2300      	movs	r3, #0
 8001c96:	69b8      	ldr	r0, [r7, #24]
 8001c98:	69f9      	ldr	r1, [r7, #28]
 8001c9a:	f7fe faeb 	bl	8000274 <__aeabi_lmul>
 8001c9e:	0002      	movs	r2, r0
 8001ca0:	000b      	movs	r3, r1
 8001ca2:	0010      	movs	r0, r2
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f7fe fabf 	bl	8000234 <__aeabi_uldivmod>
 8001cb6:	0002      	movs	r2, r0
 8001cb8:	000b      	movs	r3, r1
 8001cba:	0013      	movs	r3, r2
 8001cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8001cbe:	e037      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001cc0:	4b26      	ldr	r3, [pc, #152]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x138>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d01a      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4a23      	ldr	r2, [pc, #140]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	68b8      	ldr	r0, [r7, #8]
 8001cd8:	68f9      	ldr	r1, [r7, #12]
 8001cda:	f7fe facb 	bl	8000274 <__aeabi_lmul>
 8001cde:	0002      	movs	r2, r0
 8001ce0:	000b      	movs	r3, r1
 8001ce2:	0010      	movs	r0, r2
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	603b      	str	r3, [r7, #0]
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f7fe fa9f 	bl	8000234 <__aeabi_uldivmod>
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	000b      	movs	r3, r1
 8001cfa:	0013      	movs	r3, r2
 8001cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8001cfe:	e017      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d02:	0018      	movs	r0, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	0019      	movs	r1, r3
 8001d08:	4a16      	ldr	r2, [pc, #88]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f7fe fab2 	bl	8000274 <__aeabi_lmul>
 8001d10:	0002      	movs	r2, r0
 8001d12:	000b      	movs	r3, r1
 8001d14:	0010      	movs	r0, r2
 8001d16:	0019      	movs	r1, r3
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	001d      	movs	r5, r3
 8001d20:	0022      	movs	r2, r4
 8001d22:	002b      	movs	r3, r5
 8001d24:	f7fe fa86 	bl	8000234 <__aeabi_uldivmod>
 8001d28:	0002      	movs	r2, r0
 8001d2a:	000b      	movs	r3, r1
 8001d2c:	0013      	movs	r3, r2
 8001d2e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d34:	e00d      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x138>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	0b5b      	lsrs	r3, r3, #13
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	4013      	ands	r3, r2
 8001d40:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	3301      	adds	r3, #1
 8001d46:	2280      	movs	r2, #128	; 0x80
 8001d48:	0212      	lsls	r2, r2, #8
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	0013      	movs	r3, r2
 8001d4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d50:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d54:	0018      	movs	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b00e      	add	sp, #56	; 0x38
 8001d5a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	003d0900 	.word	0x003d0900
 8001d64:	00f42400 	.word	0x00f42400
 8001d68:	007a1200 	.word	0x007a1200
 8001d6c:	08004898 	.word	0x08004898

08001d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d74:	4b02      	ldr	r3, [pc, #8]	; (8001d80 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	0018      	movs	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	20000000 	.word	0x20000000

08001d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d88:	f7ff fff2 	bl	8001d70 <HAL_RCC_GetHCLKFreq>
 8001d8c:	0001      	movs	r1, r0
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	0a1b      	lsrs	r3, r3, #8
 8001d94:	2207      	movs	r2, #7
 8001d96:	4013      	ands	r3, r2
 8001d98:	4a04      	ldr	r2, [pc, #16]	; (8001dac <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d9a:	5cd3      	ldrb	r3, [r2, r3]
 8001d9c:	40d9      	lsrs	r1, r3
 8001d9e:	000b      	movs	r3, r1
}
 8001da0:	0018      	movs	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	40021000 	.word	0x40021000
 8001dac:	08004890 	.word	0x08004890

08001db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001db4:	f7ff ffdc 	bl	8001d70 <HAL_RCC_GetHCLKFreq>
 8001db8:	0001      	movs	r1, r0
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	0adb      	lsrs	r3, r3, #11
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	4a04      	ldr	r2, [pc, #16]	; (8001dd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dc6:	5cd3      	ldrb	r3, [r2, r3]
 8001dc8:	40d9      	lsrs	r1, r3
 8001dca:	000b      	movs	r3, r1
}
 8001dcc:	0018      	movs	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	08004890 	.word	0x08004890

08001ddc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001de4:	2317      	movs	r3, #23
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2220      	movs	r2, #32
 8001df2:	4013      	ands	r3, r2
 8001df4:	d106      	bne.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	2380      	movs	r3, #128	; 0x80
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d100      	bne.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001e02:	e104      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e04:	4bb1      	ldr	r3, [pc, #708]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	055b      	lsls	r3, r3, #21
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d10a      	bne.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e10:	4bae      	ldr	r3, [pc, #696]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e14:	4bad      	ldr	r3, [pc, #692]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e16:	2180      	movs	r1, #128	; 0x80
 8001e18:	0549      	lsls	r1, r1, #21
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001e1e:	2317      	movs	r3, #23
 8001e20:	18fb      	adds	r3, r7, r3
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e26:	4baa      	ldr	r3, [pc, #680]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d11a      	bne.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e32:	4ba7      	ldr	r3, [pc, #668]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	4ba6      	ldr	r3, [pc, #664]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e38:	2180      	movs	r1, #128	; 0x80
 8001e3a:	0049      	lsls	r1, r1, #1
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e40:	f7fe ff44 	bl	8000ccc <HAL_GetTick>
 8001e44:	0003      	movs	r3, r0
 8001e46:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e48:	e008      	b.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4a:	f7fe ff3f 	bl	8000ccc <HAL_GetTick>
 8001e4e:	0002      	movs	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b64      	cmp	r3, #100	; 0x64
 8001e56:	d901      	bls.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e133      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5c:	4b9c      	ldr	r3, [pc, #624]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4013      	ands	r3, r2
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001e68:	4b98      	ldr	r3, [pc, #608]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	23c0      	movs	r3, #192	; 0xc0
 8001e6e:	039b      	lsls	r3, r3, #14
 8001e70:	4013      	ands	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	23c0      	movs	r3, #192	; 0xc0
 8001e7a:	039b      	lsls	r3, r3, #14
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d107      	bne.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	23c0      	movs	r3, #192	; 0xc0
 8001e8a:	039b      	lsls	r3, r3, #14
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d013      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	23c0      	movs	r3, #192	; 0xc0
 8001e9a:	029b      	lsls	r3, r3, #10
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	23c0      	movs	r3, #192	; 0xc0
 8001ea0:	029b      	lsls	r3, r3, #10
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d10a      	bne.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001ea6:	4b89      	ldr	r3, [pc, #548]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	029b      	lsls	r3, r3, #10
 8001eae:	401a      	ands	r2, r3
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	029b      	lsls	r3, r3, #10
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e103      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001ebc:	4b83      	ldr	r3, [pc, #524]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ebe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ec0:	23c0      	movs	r3, #192	; 0xc0
 8001ec2:	029b      	lsls	r3, r3, #10
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d049      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	23c0      	movs	r3, #192	; 0xc0
 8001ed4:	029b      	lsls	r3, r3, #10
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d004      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d10d      	bne.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	23c0      	movs	r3, #192	; 0xc0
 8001eee:	029b      	lsls	r3, r3, #10
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d034      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	4013      	ands	r3, r2
 8001f02:	d02e      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001f04:	4b71      	ldr	r3, [pc, #452]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f08:	4a72      	ldr	r2, [pc, #456]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f0e:	4b6f      	ldr	r3, [pc, #444]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f12:	4b6e      	ldr	r3, [pc, #440]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f14:	2180      	movs	r1, #128	; 0x80
 8001f16:	0309      	lsls	r1, r1, #12
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f1c:	4b6b      	ldr	r3, [pc, #428]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f20:	4b6a      	ldr	r3, [pc, #424]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f22:	496d      	ldr	r1, [pc, #436]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001f24:	400a      	ands	r2, r1
 8001f26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001f28:	4b68      	ldr	r3, [pc, #416]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4013      	ands	r3, r2
 8001f36:	d014      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7fe fec8 	bl	8000ccc <HAL_GetTick>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f40:	e009      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7fe fec3 	bl	8000ccc <HAL_GetTick>
 8001f46:	0002      	movs	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	4a63      	ldr	r2, [pc, #396]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e0b6      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f56:	4b5d      	ldr	r3, [pc, #372]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d0ef      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d01f      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	23c0      	movs	r3, #192	; 0xc0
 8001f74:	029b      	lsls	r3, r3, #10
 8001f76:	401a      	ands	r2, r3
 8001f78:	23c0      	movs	r3, #192	; 0xc0
 8001f7a:	029b      	lsls	r3, r3, #10
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d10c      	bne.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001f80:	4b52      	ldr	r3, [pc, #328]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a56      	ldr	r2, [pc, #344]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	23c0      	movs	r3, #192	; 0xc0
 8001f90:	039b      	lsls	r3, r3, #14
 8001f92:	401a      	ands	r2, r3
 8001f94:	4b4d      	ldr	r3, [pc, #308]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f96:	430a      	orrs	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	4b4c      	ldr	r3, [pc, #304]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f9c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	23c0      	movs	r3, #192	; 0xc0
 8001fa4:	029b      	lsls	r3, r3, #10
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	4b48      	ldr	r3, [pc, #288]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001faa:	430a      	orrs	r2, r1
 8001fac:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d01f      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	23c0      	movs	r3, #192	; 0xc0
 8001fbe:	029b      	lsls	r3, r3, #10
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	23c0      	movs	r3, #192	; 0xc0
 8001fc4:	029b      	lsls	r3, r3, #10
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001fca:	4b40      	ldr	r3, [pc, #256]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a44      	ldr	r2, [pc, #272]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	23c0      	movs	r3, #192	; 0xc0
 8001fda:	039b      	lsls	r3, r3, #14
 8001fdc:	401a      	ands	r2, r3
 8001fde:	4b3b      	ldr	r3, [pc, #236]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	4b39      	ldr	r3, [pc, #228]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fe6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	23c0      	movs	r3, #192	; 0xc0
 8001fee:	029b      	lsls	r3, r3, #10
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	4b36      	ldr	r3, [pc, #216]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ff8:	2317      	movs	r3, #23
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d105      	bne.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002002:	4b32      	ldr	r3, [pc, #200]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002006:	4b31      	ldr	r3, [pc, #196]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002008:	4936      	ldr	r1, [pc, #216]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800200a:	400a      	ands	r2, r1
 800200c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2201      	movs	r2, #1
 8002014:	4013      	ands	r3, r2
 8002016:	d009      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002018:	4b2c      	ldr	r3, [pc, #176]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800201a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201c:	2203      	movs	r2, #3
 800201e:	4393      	bics	r3, r2
 8002020:	0019      	movs	r1, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	4b29      	ldr	r3, [pc, #164]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002028:	430a      	orrs	r2, r1
 800202a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2202      	movs	r2, #2
 8002032:	4013      	ands	r3, r2
 8002034:	d009      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002036:	4b25      	ldr	r3, [pc, #148]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203a:	220c      	movs	r2, #12
 800203c:	4393      	bics	r3, r2
 800203e:	0019      	movs	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	4b21      	ldr	r3, [pc, #132]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002046:	430a      	orrs	r2, r1
 8002048:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2204      	movs	r2, #4
 8002050:	4013      	ands	r3, r2
 8002052:	d009      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002054:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002058:	4a23      	ldr	r2, [pc, #140]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800205a:	4013      	ands	r3, r2
 800205c:	0019      	movs	r1, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695a      	ldr	r2, [r3, #20]
 8002062:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002064:	430a      	orrs	r2, r1
 8002066:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2208      	movs	r2, #8
 800206e:	4013      	ands	r3, r2
 8002070:	d009      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002072:	4b16      	ldr	r3, [pc, #88]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002076:	4a1d      	ldr	r2, [pc, #116]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002078:	4013      	ands	r3, r2
 800207a:	0019      	movs	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699a      	ldr	r2, [r3, #24]
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002082:	430a      	orrs	r2, r1
 8002084:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2240      	movs	r2, #64	; 0x40
 800208c:	4013      	ands	r3, r2
 800208e:	d009      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002090:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002094:	4a16      	ldr	r2, [pc, #88]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002096:	4013      	ands	r3, r2
 8002098:	0019      	movs	r1, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1a      	ldr	r2, [r3, #32]
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020a0:	430a      	orrs	r2, r1
 80020a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2280      	movs	r2, #128	; 0x80
 80020aa:	4013      	ands	r3, r2
 80020ac:	d009      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80020ae:	4b07      	ldr	r3, [pc, #28]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b2:	4a10      	ldr	r2, [pc, #64]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	0019      	movs	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69da      	ldr	r2, [r3, #28]
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020be:	430a      	orrs	r2, r1
 80020c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	0018      	movs	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b006      	add	sp, #24
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40007000 	.word	0x40007000
 80020d4:	fffcffff 	.word	0xfffcffff
 80020d8:	fff7ffff 	.word	0xfff7ffff
 80020dc:	00001388 	.word	0x00001388
 80020e0:	ffcfffff 	.word	0xffcfffff
 80020e4:	efffffff 	.word	0xefffffff
 80020e8:	fffff3ff 	.word	0xfffff3ff
 80020ec:	ffffcfff 	.word	0xffffcfff
 80020f0:	fbffffff 	.word	0xfbffffff
 80020f4:	fff3ffff 	.word	0xfff3ffff

080020f8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80020f8:	b5b0      	push	{r4, r5, r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002100:	230f      	movs	r3, #15
 8002102:	18fb      	adds	r3, r7, r3
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e088      	b.n	8002224 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2221      	movs	r2, #33	; 0x21
 8002116:	5c9b      	ldrb	r3, [r3, r2]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d107      	bne.n	800212e <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2220      	movs	r2, #32
 8002122:	2100      	movs	r1, #0
 8002124:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	0018      	movs	r0, r3
 800212a:	f7fe fc1b 	bl	8000964 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2221      	movs	r2, #33	; 0x21
 8002132:	2102      	movs	r1, #2
 8002134:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2210      	movs	r2, #16
 800213e:	4013      	ands	r3, r2
 8002140:	2b10      	cmp	r3, #16
 8002142:	d05f      	beq.n	8002204 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	22ca      	movs	r2, #202	; 0xca
 800214a:	625a      	str	r2, [r3, #36]	; 0x24
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2253      	movs	r2, #83	; 0x53
 8002152:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002154:	250f      	movs	r5, #15
 8002156:	197c      	adds	r4, r7, r5
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	0018      	movs	r0, r3
 800215c:	f000 fc2c 	bl	80029b8 <RTC_EnterInitMode>
 8002160:	0003      	movs	r3, r0
 8002162:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002164:	0028      	movs	r0, r5
 8002166:	183b      	adds	r3, r7, r0
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d12c      	bne.n	80021c8 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	492c      	ldr	r1, [pc, #176]	; (800222c <HAL_RTC_Init+0x134>)
 800217a:	400a      	ands	r2, r1
 800217c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6899      	ldr	r1, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68d2      	ldr	r2, [r2, #12]
 80021a4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6919      	ldr	r1, [r3, #16]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	041a      	lsls	r2, r3, #16
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80021ba:	183c      	adds	r4, r7, r0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	0018      	movs	r0, r3
 80021c0:	f000 fc3e 	bl	8002a40 <RTC_ExitInitMode>
 80021c4:	0003      	movs	r3, r0
 80021c6:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80021c8:	230f      	movs	r3, #15
 80021ca:	18fb      	adds	r3, r7, r3
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d113      	bne.n	80021fa <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2103      	movs	r1, #3
 80021de:	438a      	bics	r2, r1
 80021e0:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69da      	ldr	r2, [r3, #28]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	22ff      	movs	r2, #255	; 0xff
 8002200:	625a      	str	r2, [r3, #36]	; 0x24
 8002202:	e003      	b.n	800220c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002204:	230f      	movs	r3, #15
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800220c:	230f      	movs	r3, #15
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d103      	bne.n	800221e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2221      	movs	r2, #33	; 0x21
 800221a:	2101      	movs	r1, #1
 800221c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800221e:	230f      	movs	r3, #15
 8002220:	18fb      	adds	r3, r7, r3
 8002222:	781b      	ldrb	r3, [r3, #0]
}
 8002224:	0018      	movs	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	b004      	add	sp, #16
 800222a:	bdb0      	pop	{r4, r5, r7, pc}
 800222c:	ff8fffbf 	.word	0xff8fffbf

08002230 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002230:	b5b0      	push	{r4, r5, r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2220      	movs	r2, #32
 8002244:	5c9b      	ldrb	r3, [r3, r2]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_RTC_SetTime+0x1e>
 800224a:	2302      	movs	r3, #2
 800224c:	e092      	b.n	8002374 <HAL_RTC_SetTime+0x144>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2220      	movs	r2, #32
 8002252:	2101      	movs	r1, #1
 8002254:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2221      	movs	r2, #33	; 0x21
 800225a:	2102      	movs	r1, #2
 800225c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d125      	bne.n	80022b0 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2240      	movs	r2, #64	; 0x40
 800226c:	4013      	ands	r3, r2
 800226e:	d102      	bne.n	8002276 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2200      	movs	r2, #0
 8002274:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	0018      	movs	r0, r3
 800227c:	f000 fc0a 	bl	8002a94 <RTC_ByteToBcd2>
 8002280:	0003      	movs	r3, r0
 8002282:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	785b      	ldrb	r3, [r3, #1]
 8002288:	0018      	movs	r0, r3
 800228a:	f000 fc03 	bl	8002a94 <RTC_ByteToBcd2>
 800228e:	0003      	movs	r3, r0
 8002290:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002292:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	789b      	ldrb	r3, [r3, #2]
 8002298:	0018      	movs	r0, r3
 800229a:	f000 fbfb 	bl	8002a94 <RTC_ByteToBcd2>
 800229e:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80022a0:	0022      	movs	r2, r4
 80022a2:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	78db      	ldrb	r3, [r3, #3]
 80022a8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80022aa:	4313      	orrs	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	e017      	b.n	80022e0 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2240      	movs	r2, #64	; 0x40
 80022b8:	4013      	ands	r3, r2
 80022ba:	d102      	bne.n	80022c2 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2200      	movs	r2, #0
 80022c0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	785b      	ldrb	r3, [r3, #1]
 80022cc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80022ce:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80022d4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	78db      	ldrb	r3, [r3, #3]
 80022da:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80022dc:	4313      	orrs	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	22ca      	movs	r2, #202	; 0xca
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2253      	movs	r2, #83	; 0x53
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80022f0:	2513      	movs	r5, #19
 80022f2:	197c      	adds	r4, r7, r5
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	0018      	movs	r0, r3
 80022f8:	f000 fb5e 	bl	80029b8 <RTC_EnterInitMode>
 80022fc:	0003      	movs	r3, r0
 80022fe:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002300:	0028      	movs	r0, r5
 8002302:	183b      	adds	r3, r7, r0
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d120      	bne.n	800234c <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	491a      	ldr	r1, [pc, #104]	; (800237c <HAL_RTC_SetTime+0x14c>)
 8002312:	400a      	ands	r2, r1
 8002314:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4917      	ldr	r1, [pc, #92]	; (8002380 <HAL_RTC_SetTime+0x150>)
 8002322:	400a      	ands	r2, r1
 8002324:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6899      	ldr	r1, [r3, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	431a      	orrs	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800233e:	183c      	adds	r4, r7, r0
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	0018      	movs	r0, r3
 8002344:	f000 fb7c 	bl	8002a40 <RTC_ExitInitMode>
 8002348:	0003      	movs	r3, r0
 800234a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 800234c:	2313      	movs	r3, #19
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d103      	bne.n	800235e <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2221      	movs	r2, #33	; 0x21
 800235a:	2101      	movs	r1, #1
 800235c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	22ff      	movs	r2, #255	; 0xff
 8002364:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2220      	movs	r2, #32
 800236a:	2100      	movs	r1, #0
 800236c:	5499      	strb	r1, [r3, r2]

  return status;
 800236e:	2313      	movs	r3, #19
 8002370:	18fb      	adds	r3, r7, r3
 8002372:	781b      	ldrb	r3, [r3, #0]
}
 8002374:	0018      	movs	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	b006      	add	sp, #24
 800237a:	bdb0      	pop	{r4, r5, r7, pc}
 800237c:	007f7f7f 	.word	0x007f7f7f
 8002380:	fffbffff 	.word	0xfffbffff

08002384 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	045b      	lsls	r3, r3, #17
 80023a6:	0c5a      	lsrs	r2, r3, #17
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a22      	ldr	r2, [pc, #136]	; (800243c <HAL_RTC_GetTime+0xb8>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	0c1b      	lsrs	r3, r3, #16
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	223f      	movs	r2, #63	; 0x3f
 80023c0:	4013      	ands	r3, r2
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	227f      	movs	r2, #127	; 0x7f
 80023d0:	4013      	ands	r3, r2
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	227f      	movs	r2, #127	; 0x7f
 80023de:	4013      	ands	r3, r2
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	0d9b      	lsrs	r3, r3, #22
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2201      	movs	r2, #1
 80023ee:	4013      	ands	r3, r2
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d11a      	bne.n	8002432 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	0018      	movs	r0, r3
 8002402:	f000 fb68 	bl	8002ad6 <RTC_Bcd2ToByte>
 8002406:	0003      	movs	r3, r0
 8002408:	001a      	movs	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	785b      	ldrb	r3, [r3, #1]
 8002412:	0018      	movs	r0, r3
 8002414:	f000 fb5f 	bl	8002ad6 <RTC_Bcd2ToByte>
 8002418:	0003      	movs	r3, r0
 800241a:	001a      	movs	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	789b      	ldrb	r3, [r3, #2]
 8002424:	0018      	movs	r0, r3
 8002426:	f000 fb56 	bl	8002ad6 <RTC_Bcd2ToByte>
 800242a:	0003      	movs	r3, r0
 800242c:	001a      	movs	r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	0018      	movs	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	b006      	add	sp, #24
 800243a:	bd80      	pop	{r7, pc}
 800243c:	007f7f7f 	.word	0x007f7f7f

08002440 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002440:	b5b0      	push	{r4, r5, r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	5c9b      	ldrb	r3, [r3, r2]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_RTC_SetDate+0x1e>
 800245a:	2302      	movs	r3, #2
 800245c:	e07e      	b.n	800255c <HAL_RTC_SetDate+0x11c>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2220      	movs	r2, #32
 8002462:	2101      	movs	r1, #1
 8002464:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2221      	movs	r2, #33	; 0x21
 800246a:	2102      	movs	r1, #2
 800246c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10e      	bne.n	8002492 <HAL_RTC_SetDate+0x52>
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	785b      	ldrb	r3, [r3, #1]
 8002478:	001a      	movs	r2, r3
 800247a:	2310      	movs	r3, #16
 800247c:	4013      	ands	r3, r2
 800247e:	d008      	beq.n	8002492 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	785b      	ldrb	r3, [r3, #1]
 8002484:	2210      	movs	r2, #16
 8002486:	4393      	bics	r3, r2
 8002488:	b2db      	uxtb	r3, r3
 800248a:	330a      	adds	r3, #10
 800248c:	b2da      	uxtb	r2, r3
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d11c      	bne.n	80024d2 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	78db      	ldrb	r3, [r3, #3]
 800249c:	0018      	movs	r0, r3
 800249e:	f000 faf9 	bl	8002a94 <RTC_ByteToBcd2>
 80024a2:	0003      	movs	r3, r0
 80024a4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	785b      	ldrb	r3, [r3, #1]
 80024aa:	0018      	movs	r0, r3
 80024ac:	f000 faf2 	bl	8002a94 <RTC_ByteToBcd2>
 80024b0:	0003      	movs	r3, r0
 80024b2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80024b4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	789b      	ldrb	r3, [r3, #2]
 80024ba:	0018      	movs	r0, r3
 80024bc:	f000 faea 	bl	8002a94 <RTC_ByteToBcd2>
 80024c0:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80024c2:	0022      	movs	r2, r4
 80024c4:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80024cc:	4313      	orrs	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	e00e      	b.n	80024f0 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	78db      	ldrb	r3, [r3, #3]
 80024d6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	785b      	ldrb	r3, [r3, #1]
 80024dc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80024de:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80024e4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80024ec:	4313      	orrs	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	22ca      	movs	r2, #202	; 0xca
 80024f6:	625a      	str	r2, [r3, #36]	; 0x24
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2253      	movs	r2, #83	; 0x53
 80024fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002500:	2513      	movs	r5, #19
 8002502:	197c      	adds	r4, r7, r5
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	0018      	movs	r0, r3
 8002508:	f000 fa56 	bl	80029b8 <RTC_EnterInitMode>
 800250c:	0003      	movs	r3, r0
 800250e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002510:	0028      	movs	r0, r5
 8002512:	183b      	adds	r3, r7, r0
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10c      	bne.n	8002534 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4910      	ldr	r1, [pc, #64]	; (8002564 <HAL_RTC_SetDate+0x124>)
 8002522:	400a      	ands	r2, r1
 8002524:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002526:	183c      	adds	r4, r7, r0
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	0018      	movs	r0, r3
 800252c:	f000 fa88 	bl	8002a40 <RTC_ExitInitMode>
 8002530:	0003      	movs	r3, r0
 8002532:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002534:	2313      	movs	r3, #19
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d103      	bne.n	8002546 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2221      	movs	r2, #33	; 0x21
 8002542:	2101      	movs	r1, #1
 8002544:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	22ff      	movs	r2, #255	; 0xff
 800254c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2220      	movs	r2, #32
 8002552:	2100      	movs	r1, #0
 8002554:	5499      	strb	r1, [r3, r2]

  return status;
 8002556:	2313      	movs	r3, #19
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	781b      	ldrb	r3, [r3, #0]
}
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	b006      	add	sp, #24
 8002562:	bdb0      	pop	{r4, r5, r7, pc}
 8002564:	00ffff3f 	.word	0x00ffff3f

08002568 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4a21      	ldr	r2, [pc, #132]	; (8002604 <HAL_RTC_GetDate+0x9c>)
 8002580:	4013      	ands	r3, r2
 8002582:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	0c1b      	lsrs	r3, r3, #16
 8002588:	b2da      	uxtb	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	b2db      	uxtb	r3, r3
 8002594:	221f      	movs	r2, #31
 8002596:	4013      	ands	r3, r2
 8002598:	b2da      	uxtb	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	223f      	movs	r2, #63	; 0x3f
 80025a4:	4013      	ands	r3, r2
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	0b5b      	lsrs	r3, r3, #13
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2207      	movs	r2, #7
 80025b4:	4013      	ands	r3, r2
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d11a      	bne.n	80025f8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	78db      	ldrb	r3, [r3, #3]
 80025c6:	0018      	movs	r0, r3
 80025c8:	f000 fa85 	bl	8002ad6 <RTC_Bcd2ToByte>
 80025cc:	0003      	movs	r3, r0
 80025ce:	001a      	movs	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	785b      	ldrb	r3, [r3, #1]
 80025d8:	0018      	movs	r0, r3
 80025da:	f000 fa7c 	bl	8002ad6 <RTC_Bcd2ToByte>
 80025de:	0003      	movs	r3, r0
 80025e0:	001a      	movs	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	789b      	ldrb	r3, [r3, #2]
 80025ea:	0018      	movs	r0, r3
 80025ec:	f000 fa73 	bl	8002ad6 <RTC_Bcd2ToByte>
 80025f0:	0003      	movs	r3, r0
 80025f2:	001a      	movs	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	0018      	movs	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b006      	add	sp, #24
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	00ffff3f 	.word	0x00ffff3f

08002608 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b089      	sub	sp, #36	; 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002614:	4ba7      	ldr	r3, [pc, #668]	; (80028b4 <HAL_RTC_SetAlarm_IT+0x2ac>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	22fa      	movs	r2, #250	; 0xfa
 800261a:	01d1      	lsls	r1, r2, #7
 800261c:	0018      	movs	r0, r3
 800261e:	f7fd fd7d 	bl	800011c <__udivsi3>
 8002622:	0003      	movs	r3, r0
 8002624:	001a      	movs	r2, r3
 8002626:	0013      	movs	r3, r2
 8002628:	015b      	lsls	r3, r3, #5
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	189b      	adds	r3, r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2220      	movs	r2, #32
 8002640:	5c9b      	ldrb	r3, [r3, r2]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_RTC_SetAlarm_IT+0x42>
 8002646:	2302      	movs	r3, #2
 8002648:	e130      	b.n	80028ac <HAL_RTC_SetAlarm_IT+0x2a4>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2220      	movs	r2, #32
 800264e:	2101      	movs	r1, #1
 8002650:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2221      	movs	r2, #33	; 0x21
 8002656:	2102      	movs	r1, #2
 8002658:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d136      	bne.n	80026ce <HAL_RTC_SetAlarm_IT+0xc6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2240      	movs	r2, #64	; 0x40
 8002668:	4013      	ands	r3, r2
 800266a:	d102      	bne.n	8002672 <HAL_RTC_SetAlarm_IT+0x6a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2200      	movs	r2, #0
 8002670:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	0018      	movs	r0, r3
 8002678:	f000 fa0c 	bl	8002a94 <RTC_ByteToBcd2>
 800267c:	0003      	movs	r3, r0
 800267e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	785b      	ldrb	r3, [r3, #1]
 8002684:	0018      	movs	r0, r3
 8002686:	f000 fa05 	bl	8002a94 <RTC_ByteToBcd2>
 800268a:	0003      	movs	r3, r0
 800268c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800268e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	789b      	ldrb	r3, [r3, #2]
 8002694:	0018      	movs	r0, r3
 8002696:	f000 f9fd 	bl	8002a94 <RTC_ByteToBcd2>
 800269a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800269c:	0022      	movs	r2, r4
 800269e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	78db      	ldrb	r3, [r3, #3]
 80026a4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80026a6:	431a      	orrs	r2, r3
 80026a8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2220      	movs	r2, #32
 80026ae:	5c9b      	ldrb	r3, [r3, r2]
 80026b0:	0018      	movs	r0, r3
 80026b2:	f000 f9ef 	bl	8002a94 <RTC_ByteToBcd2>
 80026b6:	0003      	movs	r3, r0
 80026b8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80026ba:	0022      	movs	r2, r4
 80026bc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80026c2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61fb      	str	r3, [r7, #28]
 80026cc:	e022      	b.n	8002714 <HAL_RTC_SetAlarm_IT+0x10c>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2240      	movs	r2, #64	; 0x40
 80026d6:	4013      	ands	r3, r2
 80026d8:	d102      	bne.n	80026e0 <HAL_RTC_SetAlarm_IT+0xd8>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2200      	movs	r2, #0
 80026de:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	785b      	ldrb	r3, [r3, #1]
 80026ea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80026ec:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80026f2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	78db      	ldrb	r3, [r3, #3]
 80026f8:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80026fa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2120      	movs	r1, #32
 8002700:	5c5b      	ldrb	r3, [r3, r1]
 8002702:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002704:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800270a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002710:	4313      	orrs	r3, r2
 8002712:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	22ca      	movs	r2, #202	; 0xca
 8002726:	625a      	str	r2, [r3, #36]	; 0x24
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2253      	movs	r2, #83	; 0x53
 800272e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	429a      	cmp	r2, r3
 800273a:	d146      	bne.n	80027ca <HAL_RTC_SetAlarm_IT+0x1c2>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	495c      	ldr	r1, [pc, #368]	; (80028b8 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8002748:	400a      	ands	r2, r1
 800274a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	22ff      	movs	r2, #255	; 0xff
 8002754:	401a      	ands	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4958      	ldr	r1, [pc, #352]	; (80028bc <HAL_RTC_SetAlarm_IT+0x2b4>)
 800275c:	430a      	orrs	r2, r1
 800275e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	3b01      	subs	r3, #1
 8002764:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10d      	bne.n	8002788 <HAL_RTC_SetAlarm_IT+0x180>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	22ff      	movs	r2, #255	; 0xff
 8002772:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2221      	movs	r2, #33	; 0x21
 8002778:	2103      	movs	r1, #3
 800277a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2220      	movs	r2, #32
 8002780:	2100      	movs	r1, #0
 8002782:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e091      	b.n	80028ac <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	2201      	movs	r2, #1
 8002790:	4013      	ands	r3, r2
 8002792:	d0e5      	beq.n	8002760 <HAL_RTC_SetAlarm_IT+0x158>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	69fa      	ldr	r2, [r7, #28]
 800279a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2180      	movs	r1, #128	; 0x80
 80027b0:	0049      	lsls	r1, r1, #1
 80027b2:	430a      	orrs	r2, r1
 80027b4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2180      	movs	r1, #128	; 0x80
 80027c2:	0149      	lsls	r1, r1, #5
 80027c4:	430a      	orrs	r2, r1
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	e055      	b.n	8002876 <HAL_RTC_SetAlarm_IT+0x26e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	493a      	ldr	r1, [pc, #232]	; (80028c0 <HAL_RTC_SetAlarm_IT+0x2b8>)
 80027d6:	400a      	ands	r2, r1
 80027d8:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	22ff      	movs	r2, #255	; 0xff
 80027e2:	401a      	ands	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4936      	ldr	r1, [pc, #216]	; (80028c4 <HAL_RTC_SetAlarm_IT+0x2bc>)
 80027ea:	430a      	orrs	r2, r1
 80027ec:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80027ee:	4b31      	ldr	r3, [pc, #196]	; (80028b4 <HAL_RTC_SetAlarm_IT+0x2ac>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	22fa      	movs	r2, #250	; 0xfa
 80027f4:	01d1      	lsls	r1, r2, #7
 80027f6:	0018      	movs	r0, r3
 80027f8:	f7fd fc90 	bl	800011c <__udivsi3>
 80027fc:	0003      	movs	r3, r0
 80027fe:	001a      	movs	r2, r3
 8002800:	0013      	movs	r3, r2
 8002802:	015b      	lsls	r3, r3, #5
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	189b      	adds	r3, r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	3b01      	subs	r3, #1
 8002812:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10d      	bne.n	8002836 <HAL_RTC_SetAlarm_IT+0x22e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	22ff      	movs	r2, #255	; 0xff
 8002820:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2221      	movs	r2, #33	; 0x21
 8002826:	2103      	movs	r1, #3
 8002828:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2220      	movs	r2, #32
 800282e:	2100      	movs	r1, #0
 8002830:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e03a      	b.n	80028ac <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2202      	movs	r2, #2
 800283e:	4013      	ands	r3, r2
 8002840:	d0e5      	beq.n	800280e <HAL_RTC_SetAlarm_IT+0x206>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2180      	movs	r1, #128	; 0x80
 800285e:	0089      	lsls	r1, r1, #2
 8002860:	430a      	orrs	r2, r1
 8002862:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2180      	movs	r1, #128	; 0x80
 8002870:	0189      	lsls	r1, r1, #6
 8002872:	430a      	orrs	r2, r1
 8002874:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002876:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <HAL_RTC_SetAlarm_IT+0x2c0>)
 800287c:	2180      	movs	r1, #128	; 0x80
 800287e:	0289      	lsls	r1, r1, #10
 8002880:	430a      	orrs	r2, r1
 8002882:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002884:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <HAL_RTC_SetAlarm_IT+0x2c0>)
 800288a:	2180      	movs	r1, #128	; 0x80
 800288c:	0289      	lsls	r1, r1, #10
 800288e:	430a      	orrs	r2, r1
 8002890:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	22ff      	movs	r2, #255	; 0xff
 8002898:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2221      	movs	r2, #33	; 0x21
 800289e:	2101      	movs	r1, #1
 80028a0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2220      	movs	r2, #32
 80028a6:	2100      	movs	r1, #0
 80028a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	0018      	movs	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b009      	add	sp, #36	; 0x24
 80028b2:	bd90      	pop	{r4, r7, pc}
 80028b4:	20000000 	.word	0x20000000
 80028b8:	fffffeff 	.word	0xfffffeff
 80028bc:	fffffe7f 	.word	0xfffffe7f
 80028c0:	fffffdff 	.word	0xfffffdff
 80028c4:	fffffd7f 	.word	0xfffffd7f
 80028c8:	40010400 	.word	0x40010400

080028cc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80028d4:	4b21      	ldr	r3, [pc, #132]	; (800295c <HAL_RTC_AlarmIRQHandler+0x90>)
 80028d6:	2280      	movs	r2, #128	; 0x80
 80028d8:	0292      	lsls	r2, r2, #10
 80028da:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	015b      	lsls	r3, r3, #5
 80028e6:	4013      	ands	r3, r2
 80028e8:	d014      	beq.n	8002914 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	4013      	ands	r3, r2
 80028f6:	d00d      	beq.n	8002914 <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	22ff      	movs	r2, #255	; 0xff
 8002900:	401a      	ands	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4916      	ldr	r1, [pc, #88]	; (8002960 <HAL_RTC_AlarmIRQHandler+0x94>)
 8002908:	430a      	orrs	r2, r1
 800290a:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	0018      	movs	r0, r3
 8002910:	f7fd fff8 	bl	8000904 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	019b      	lsls	r3, r3, #6
 800291e:	4013      	ands	r3, r2
 8002920:	d014      	beq.n	800294c <HAL_RTC_AlarmIRQHandler+0x80>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4013      	ands	r3, r2
 800292e:	d00d      	beq.n	800294c <HAL_RTC_AlarmIRQHandler+0x80>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	22ff      	movs	r2, #255	; 0xff
 8002938:	401a      	ands	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4909      	ldr	r1, [pc, #36]	; (8002964 <HAL_RTC_AlarmIRQHandler+0x98>)
 8002940:	430a      	orrs	r2, r1
 8002942:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	0018      	movs	r0, r3
 8002948:	f000 f8e4 	bl	8002b14 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2221      	movs	r2, #33	; 0x21
 8002950:	2101      	movs	r1, #1
 8002952:	5499      	strb	r1, [r3, r2]
}
 8002954:	46c0      	nop			; (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	b002      	add	sp, #8
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40010400 	.word	0x40010400
 8002960:	fffffe7f 	.word	0xfffffe7f
 8002964:	fffffd7f 	.word	0xfffffd7f

08002968 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0e      	ldr	r2, [pc, #56]	; (80029b4 <HAL_RTC_WaitForSynchro+0x4c>)
 800297a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800297c:	f7fe f9a6 	bl	8000ccc <HAL_GetTick>
 8002980:	0003      	movs	r3, r0
 8002982:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002984:	e00a      	b.n	800299c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002986:	f7fe f9a1 	bl	8000ccc <HAL_GetTick>
 800298a:	0002      	movs	r2, r0
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	1ad2      	subs	r2, r2, r3
 8002990:	23fa      	movs	r3, #250	; 0xfa
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	429a      	cmp	r2, r3
 8002996:	d901      	bls.n	800299c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e006      	b.n	80029aa <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	2220      	movs	r2, #32
 80029a4:	4013      	ands	r3, r2
 80029a6:	d0ee      	beq.n	8002986 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	0018      	movs	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b004      	add	sp, #16
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	00017f5f 	.word	0x00017f5f

080029b8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80029c4:	230f      	movs	r3, #15
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	2240      	movs	r2, #64	; 0x40
 80029d4:	4013      	ands	r3, r2
 80029d6:	d12c      	bne.n	8002a32 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2180      	movs	r1, #128	; 0x80
 80029e4:	430a      	orrs	r2, r1
 80029e6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029e8:	f7fe f970 	bl	8000ccc <HAL_GetTick>
 80029ec:	0003      	movs	r3, r0
 80029ee:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80029f0:	e014      	b.n	8002a1c <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80029f2:	f7fe f96b 	bl	8000ccc <HAL_GetTick>
 80029f6:	0002      	movs	r2, r0
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	1ad2      	subs	r2, r2, r3
 80029fc:	200f      	movs	r0, #15
 80029fe:	183b      	adds	r3, r7, r0
 8002a00:	1839      	adds	r1, r7, r0
 8002a02:	7809      	ldrb	r1, [r1, #0]
 8002a04:	7019      	strb	r1, [r3, #0]
 8002a06:	23fa      	movs	r3, #250	; 0xfa
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d906      	bls.n	8002a1c <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2221      	movs	r2, #33	; 0x21
 8002a12:	2104      	movs	r1, #4
 8002a14:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8002a16:	183b      	adds	r3, r7, r0
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	2240      	movs	r2, #64	; 0x40
 8002a24:	4013      	ands	r3, r2
 8002a26:	d104      	bne.n	8002a32 <RTC_EnterInitMode+0x7a>
 8002a28:	230f      	movs	r3, #15
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d1df      	bne.n	80029f2 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002a32:	230f      	movs	r3, #15
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	781b      	ldrb	r3, [r3, #0]
}
 8002a38:	0018      	movs	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b004      	add	sp, #16
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a40:	b590      	push	{r4, r7, lr}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a48:	240f      	movs	r4, #15
 8002a4a:	193b      	adds	r3, r7, r4
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2180      	movs	r1, #128	; 0x80
 8002a5c:	438a      	bics	r2, r1
 8002a5e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2220      	movs	r2, #32
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d10c      	bne.n	8002a86 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f7ff ff7a 	bl	8002968 <HAL_RTC_WaitForSynchro>
 8002a74:	1e03      	subs	r3, r0, #0
 8002a76:	d006      	beq.n	8002a86 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2221      	movs	r2, #33	; 0x21
 8002a7c:	2104      	movs	r1, #4
 8002a7e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002a80:	193b      	adds	r3, r7, r4
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002a86:	230f      	movs	r3, #15
 8002a88:	18fb      	adds	r3, r7, r3
 8002a8a:	781b      	ldrb	r3, [r3, #0]
}
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b005      	add	sp, #20
 8002a92:	bd90      	pop	{r4, r7, pc}

08002a94 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	1dfb      	adds	r3, r7, #7
 8002a9e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002aa4:	e007      	b.n	8002ab6 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002aac:	1dfb      	adds	r3, r7, #7
 8002aae:	1dfa      	adds	r2, r7, #7
 8002ab0:	7812      	ldrb	r2, [r2, #0]
 8002ab2:	3a0a      	subs	r2, #10
 8002ab4:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8002ab6:	1dfb      	adds	r3, r7, #7
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b09      	cmp	r3, #9
 8002abc:	d8f3      	bhi.n	8002aa6 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	1dfb      	adds	r3, r7, #7
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	b2db      	uxtb	r3, r3
}
 8002ace:	0018      	movs	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b004      	add	sp, #16
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	0002      	movs	r2, r0
 8002ade:	1dfb      	adds	r3, r7, #7
 8002ae0:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002ae6:	1dfb      	adds	r3, r7, #7
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	091b      	lsrs	r3, r3, #4
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	001a      	movs	r2, r3
 8002af0:	0013      	movs	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	189b      	adds	r3, r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	1dfb      	adds	r3, r7, #7
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	210f      	movs	r1, #15
 8002b04:	400b      	ands	r3, r1
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	18d3      	adds	r3, r2, r3
 8002b0a:	b2db      	uxtb	r3, r3
}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b004      	add	sp, #16
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002b1c:	46c0      	nop			; (mov r8, r8)
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b002      	add	sp, #8
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e044      	b.n	8002bc0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d107      	bne.n	8002b4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2278      	movs	r2, #120	; 0x78
 8002b42:	2100      	movs	r1, #0
 8002b44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f7fd ff2b 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2224      	movs	r2, #36	; 0x24
 8002b52:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2101      	movs	r1, #1
 8002b60:	438a      	bics	r2, r1
 8002b62:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	0018      	movs	r0, r3
 8002b68:	f000 f8d0 	bl	8002d0c <UART_SetConfig>
 8002b6c:	0003      	movs	r3, r0
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e024      	b.n	8002bc0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 fb47 	bl	8003214 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	490d      	ldr	r1, [pc, #52]	; (8002bc8 <HAL_UART_Init+0xa4>)
 8002b92:	400a      	ands	r2, r1
 8002b94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	212a      	movs	r1, #42	; 0x2a
 8002ba2:	438a      	bics	r2, r1
 8002ba4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f000 fbdf 	bl	800337c <UART_CheckIdleState>
 8002bbe:	0003      	movs	r3, r0
}
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	b002      	add	sp, #8
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	ffffb7ff 	.word	0xffffb7ff

08002bcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08a      	sub	sp, #40	; 0x28
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	1dbb      	adds	r3, r7, #6
 8002bda:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002be0:	2b20      	cmp	r3, #32
 8002be2:	d000      	beq.n	8002be6 <HAL_UART_Transmit+0x1a>
 8002be4:	e08c      	b.n	8002d00 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_UART_Transmit+0x28>
 8002bec:	1dbb      	adds	r3, r7, #6
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e084      	b.n	8002d02 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	015b      	lsls	r3, r3, #5
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d109      	bne.n	8002c18 <HAL_UART_Transmit+0x4c>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d105      	bne.n	8002c18 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4013      	ands	r3, r2
 8002c12:	d001      	beq.n	8002c18 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e074      	b.n	8002d02 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2284      	movs	r2, #132	; 0x84
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2221      	movs	r2, #33	; 0x21
 8002c24:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c26:	f7fe f851 	bl	8000ccc <HAL_GetTick>
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1dba      	adds	r2, r7, #6
 8002c32:	2150      	movs	r1, #80	; 0x50
 8002c34:	8812      	ldrh	r2, [r2, #0]
 8002c36:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	1dba      	adds	r2, r7, #6
 8002c3c:	2152      	movs	r1, #82	; 0x52
 8002c3e:	8812      	ldrh	r2, [r2, #0]
 8002c40:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	015b      	lsls	r3, r3, #5
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d108      	bne.n	8002c60 <HAL_UART_Transmit+0x94>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d104      	bne.n	8002c60 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	e003      	b.n	8002c68 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c68:	e02f      	b.n	8002cca <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	0013      	movs	r3, r2
 8002c74:	2200      	movs	r2, #0
 8002c76:	2180      	movs	r1, #128	; 0x80
 8002c78:	f000 fc28 	bl	80034cc <UART_WaitOnFlagUntilTimeout>
 8002c7c:	1e03      	subs	r3, r0, #0
 8002c7e:	d004      	beq.n	8002c8a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2220      	movs	r2, #32
 8002c84:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e03b      	b.n	8002d02 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10b      	bne.n	8002ca8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	001a      	movs	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	05d2      	lsls	r2, r2, #23
 8002c9c:	0dd2      	lsrs	r2, r2, #23
 8002c9e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	3302      	adds	r3, #2
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	e007      	b.n	8002cb8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	781a      	ldrb	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2252      	movs	r2, #82	; 0x52
 8002cbc:	5a9b      	ldrh	r3, [r3, r2]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b299      	uxth	r1, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2252      	movs	r2, #82	; 0x52
 8002cc8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2252      	movs	r2, #82	; 0x52
 8002cce:	5a9b      	ldrh	r3, [r3, r2]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1c9      	bne.n	8002c6a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	0013      	movs	r3, r2
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2140      	movs	r1, #64	; 0x40
 8002ce4:	f000 fbf2 	bl	80034cc <UART_WaitOnFlagUntilTimeout>
 8002ce8:	1e03      	subs	r3, r0, #0
 8002cea:	d004      	beq.n	8002cf6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e005      	b.n	8002d02 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e000      	b.n	8002d02 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002d00:	2302      	movs	r3, #2
  }
}
 8002d02:	0018      	movs	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b008      	add	sp, #32
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d0c:	b5b0      	push	{r4, r5, r7, lr}
 8002d0e:	b08e      	sub	sp, #56	; 0x38
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d14:	231a      	movs	r3, #26
 8002d16:	2218      	movs	r2, #24
 8002d18:	189b      	adds	r3, r3, r2
 8002d1a:	19db      	adds	r3, r3, r7
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4ac6      	ldr	r2, [pc, #792]	; (8003058 <UART_SetConfig+0x34c>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	0019      	movs	r1, r3
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4ac1      	ldr	r2, [pc, #772]	; (800305c <UART_SetConfig+0x350>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	0019      	movs	r1, r3
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4abb      	ldr	r2, [pc, #748]	; (8003060 <UART_SetConfig+0x354>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d004      	beq.n	8002d80 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	4ab7      	ldr	r2, [pc, #732]	; (8003064 <UART_SetConfig+0x358>)
 8002d88:	4013      	ands	r3, r2
 8002d8a:	0019      	movs	r1, r3
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d92:	430a      	orrs	r2, r1
 8002d94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4ab3      	ldr	r2, [pc, #716]	; (8003068 <UART_SetConfig+0x35c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d131      	bne.n	8002e04 <UART_SetConfig+0xf8>
 8002da0:	4bb2      	ldr	r3, [pc, #712]	; (800306c <UART_SetConfig+0x360>)
 8002da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da4:	2203      	movs	r2, #3
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d01d      	beq.n	8002de8 <UART_SetConfig+0xdc>
 8002dac:	d823      	bhi.n	8002df6 <UART_SetConfig+0xea>
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d00c      	beq.n	8002dcc <UART_SetConfig+0xc0>
 8002db2:	d820      	bhi.n	8002df6 <UART_SetConfig+0xea>
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <UART_SetConfig+0xb2>
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d00e      	beq.n	8002dda <UART_SetConfig+0xce>
 8002dbc:	e01b      	b.n	8002df6 <UART_SetConfig+0xea>
 8002dbe:	231b      	movs	r3, #27
 8002dc0:	2218      	movs	r2, #24
 8002dc2:	189b      	adds	r3, r3, r2
 8002dc4:	19db      	adds	r3, r3, r7
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	e09c      	b.n	8002f06 <UART_SetConfig+0x1fa>
 8002dcc:	231b      	movs	r3, #27
 8002dce:	2218      	movs	r2, #24
 8002dd0:	189b      	adds	r3, r3, r2
 8002dd2:	19db      	adds	r3, r3, r7
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	701a      	strb	r2, [r3, #0]
 8002dd8:	e095      	b.n	8002f06 <UART_SetConfig+0x1fa>
 8002dda:	231b      	movs	r3, #27
 8002ddc:	2218      	movs	r2, #24
 8002dde:	189b      	adds	r3, r3, r2
 8002de0:	19db      	adds	r3, r3, r7
 8002de2:	2204      	movs	r2, #4
 8002de4:	701a      	strb	r2, [r3, #0]
 8002de6:	e08e      	b.n	8002f06 <UART_SetConfig+0x1fa>
 8002de8:	231b      	movs	r3, #27
 8002dea:	2218      	movs	r2, #24
 8002dec:	189b      	adds	r3, r3, r2
 8002dee:	19db      	adds	r3, r3, r7
 8002df0:	2208      	movs	r2, #8
 8002df2:	701a      	strb	r2, [r3, #0]
 8002df4:	e087      	b.n	8002f06 <UART_SetConfig+0x1fa>
 8002df6:	231b      	movs	r3, #27
 8002df8:	2218      	movs	r2, #24
 8002dfa:	189b      	adds	r3, r3, r2
 8002dfc:	19db      	adds	r3, r3, r7
 8002dfe:	2210      	movs	r2, #16
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	e080      	b.n	8002f06 <UART_SetConfig+0x1fa>
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a99      	ldr	r2, [pc, #612]	; (8003070 <UART_SetConfig+0x364>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d131      	bne.n	8002e72 <UART_SetConfig+0x166>
 8002e0e:	4b97      	ldr	r3, [pc, #604]	; (800306c <UART_SetConfig+0x360>)
 8002e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e12:	220c      	movs	r2, #12
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b0c      	cmp	r3, #12
 8002e18:	d01d      	beq.n	8002e56 <UART_SetConfig+0x14a>
 8002e1a:	d823      	bhi.n	8002e64 <UART_SetConfig+0x158>
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d00c      	beq.n	8002e3a <UART_SetConfig+0x12e>
 8002e20:	d820      	bhi.n	8002e64 <UART_SetConfig+0x158>
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <UART_SetConfig+0x120>
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d00e      	beq.n	8002e48 <UART_SetConfig+0x13c>
 8002e2a:	e01b      	b.n	8002e64 <UART_SetConfig+0x158>
 8002e2c:	231b      	movs	r3, #27
 8002e2e:	2218      	movs	r2, #24
 8002e30:	189b      	adds	r3, r3, r2
 8002e32:	19db      	adds	r3, r3, r7
 8002e34:	2200      	movs	r2, #0
 8002e36:	701a      	strb	r2, [r3, #0]
 8002e38:	e065      	b.n	8002f06 <UART_SetConfig+0x1fa>
 8002e3a:	231b      	movs	r3, #27
 8002e3c:	2218      	movs	r2, #24
 8002e3e:	189b      	adds	r3, r3, r2
 8002e40:	19db      	adds	r3, r3, r7
 8002e42:	2202      	movs	r2, #2
 8002e44:	701a      	strb	r2, [r3, #0]
 8002e46:	e05e      	b.n	8002f06 <UART_SetConfig+0x1fa>
 8002e48:	231b      	movs	r3, #27
 8002e4a:	2218      	movs	r2, #24
 8002e4c:	189b      	adds	r3, r3, r2
 8002e4e:	19db      	adds	r3, r3, r7
 8002e50:	2204      	movs	r2, #4
 8002e52:	701a      	strb	r2, [r3, #0]
 8002e54:	e057      	b.n	8002f06 <UART_SetConfig+0x1fa>
 8002e56:	231b      	movs	r3, #27
 8002e58:	2218      	movs	r2, #24
 8002e5a:	189b      	adds	r3, r3, r2
 8002e5c:	19db      	adds	r3, r3, r7
 8002e5e:	2208      	movs	r2, #8
 8002e60:	701a      	strb	r2, [r3, #0]
 8002e62:	e050      	b.n	8002f06 <UART_SetConfig+0x1fa>
 8002e64:	231b      	movs	r3, #27
 8002e66:	2218      	movs	r2, #24
 8002e68:	189b      	adds	r3, r3, r2
 8002e6a:	19db      	adds	r3, r3, r7
 8002e6c:	2210      	movs	r2, #16
 8002e6e:	701a      	strb	r2, [r3, #0]
 8002e70:	e049      	b.n	8002f06 <UART_SetConfig+0x1fa>
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a7a      	ldr	r2, [pc, #488]	; (8003060 <UART_SetConfig+0x354>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d13e      	bne.n	8002efa <UART_SetConfig+0x1ee>
 8002e7c:	4b7b      	ldr	r3, [pc, #492]	; (800306c <UART_SetConfig+0x360>)
 8002e7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e80:	23c0      	movs	r3, #192	; 0xc0
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	4013      	ands	r3, r2
 8002e86:	22c0      	movs	r2, #192	; 0xc0
 8002e88:	0112      	lsls	r2, r2, #4
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d027      	beq.n	8002ede <UART_SetConfig+0x1d2>
 8002e8e:	22c0      	movs	r2, #192	; 0xc0
 8002e90:	0112      	lsls	r2, r2, #4
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d82a      	bhi.n	8002eec <UART_SetConfig+0x1e0>
 8002e96:	2280      	movs	r2, #128	; 0x80
 8002e98:	0112      	lsls	r2, r2, #4
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d011      	beq.n	8002ec2 <UART_SetConfig+0x1b6>
 8002e9e:	2280      	movs	r2, #128	; 0x80
 8002ea0:	0112      	lsls	r2, r2, #4
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d822      	bhi.n	8002eec <UART_SetConfig+0x1e0>
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d004      	beq.n	8002eb4 <UART_SetConfig+0x1a8>
 8002eaa:	2280      	movs	r2, #128	; 0x80
 8002eac:	00d2      	lsls	r2, r2, #3
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00e      	beq.n	8002ed0 <UART_SetConfig+0x1c4>
 8002eb2:	e01b      	b.n	8002eec <UART_SetConfig+0x1e0>
 8002eb4:	231b      	movs	r3, #27
 8002eb6:	2218      	movs	r2, #24
 8002eb8:	189b      	adds	r3, r3, r2
 8002eba:	19db      	adds	r3, r3, r7
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	701a      	strb	r2, [r3, #0]
 8002ec0:	e021      	b.n	8002f06 <UART_SetConfig+0x1fa>
 8002ec2:	231b      	movs	r3, #27
 8002ec4:	2218      	movs	r2, #24
 8002ec6:	189b      	adds	r3, r3, r2
 8002ec8:	19db      	adds	r3, r3, r7
 8002eca:	2202      	movs	r2, #2
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	e01a      	b.n	8002f06 <UART_SetConfig+0x1fa>
 8002ed0:	231b      	movs	r3, #27
 8002ed2:	2218      	movs	r2, #24
 8002ed4:	189b      	adds	r3, r3, r2
 8002ed6:	19db      	adds	r3, r3, r7
 8002ed8:	2204      	movs	r2, #4
 8002eda:	701a      	strb	r2, [r3, #0]
 8002edc:	e013      	b.n	8002f06 <UART_SetConfig+0x1fa>
 8002ede:	231b      	movs	r3, #27
 8002ee0:	2218      	movs	r2, #24
 8002ee2:	189b      	adds	r3, r3, r2
 8002ee4:	19db      	adds	r3, r3, r7
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	e00c      	b.n	8002f06 <UART_SetConfig+0x1fa>
 8002eec:	231b      	movs	r3, #27
 8002eee:	2218      	movs	r2, #24
 8002ef0:	189b      	adds	r3, r3, r2
 8002ef2:	19db      	adds	r3, r3, r7
 8002ef4:	2210      	movs	r2, #16
 8002ef6:	701a      	strb	r2, [r3, #0]
 8002ef8:	e005      	b.n	8002f06 <UART_SetConfig+0x1fa>
 8002efa:	231b      	movs	r3, #27
 8002efc:	2218      	movs	r2, #24
 8002efe:	189b      	adds	r3, r3, r2
 8002f00:	19db      	adds	r3, r3, r7
 8002f02:	2210      	movs	r2, #16
 8002f04:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a55      	ldr	r2, [pc, #340]	; (8003060 <UART_SetConfig+0x354>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d000      	beq.n	8002f12 <UART_SetConfig+0x206>
 8002f10:	e084      	b.n	800301c <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f12:	231b      	movs	r3, #27
 8002f14:	2218      	movs	r2, #24
 8002f16:	189b      	adds	r3, r3, r2
 8002f18:	19db      	adds	r3, r3, r7
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d01d      	beq.n	8002f5c <UART_SetConfig+0x250>
 8002f20:	dc20      	bgt.n	8002f64 <UART_SetConfig+0x258>
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d015      	beq.n	8002f52 <UART_SetConfig+0x246>
 8002f26:	dc1d      	bgt.n	8002f64 <UART_SetConfig+0x258>
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <UART_SetConfig+0x226>
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d005      	beq.n	8002f3c <UART_SetConfig+0x230>
 8002f30:	e018      	b.n	8002f64 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f32:	f7fe ff27 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 8002f36:	0003      	movs	r3, r0
 8002f38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f3a:	e01c      	b.n	8002f76 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f3c:	4b4b      	ldr	r3, [pc, #300]	; (800306c <UART_SetConfig+0x360>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2210      	movs	r2, #16
 8002f42:	4013      	ands	r3, r2
 8002f44:	d002      	beq.n	8002f4c <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002f46:	4b4b      	ldr	r3, [pc, #300]	; (8003074 <UART_SetConfig+0x368>)
 8002f48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002f4a:	e014      	b.n	8002f76 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002f4c:	4b4a      	ldr	r3, [pc, #296]	; (8003078 <UART_SetConfig+0x36c>)
 8002f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f50:	e011      	b.n	8002f76 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f52:	f7fe fe67 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8002f56:	0003      	movs	r3, r0
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f5a:	e00c      	b.n	8002f76 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	021b      	lsls	r3, r3, #8
 8002f60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f62:	e008      	b.n	8002f76 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002f68:	231a      	movs	r3, #26
 8002f6a:	2218      	movs	r2, #24
 8002f6c:	189b      	adds	r3, r3, r2
 8002f6e:	19db      	adds	r3, r3, r7
 8002f70:	2201      	movs	r2, #1
 8002f72:	701a      	strb	r2, [r3, #0]
        break;
 8002f74:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d100      	bne.n	8002f7e <UART_SetConfig+0x272>
 8002f7c:	e132      	b.n	80031e4 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	0013      	movs	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	189b      	adds	r3, r3, r2
 8002f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d305      	bcc.n	8002f9a <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d906      	bls.n	8002fa8 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002f9a:	231a      	movs	r3, #26
 8002f9c:	2218      	movs	r2, #24
 8002f9e:	189b      	adds	r3, r3, r2
 8002fa0:	19db      	adds	r3, r3, r7
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	701a      	strb	r2, [r3, #0]
 8002fa6:	e11d      	b.n	80031e4 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002faa:	613b      	str	r3, [r7, #16]
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	6939      	ldr	r1, [r7, #16]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	000b      	movs	r3, r1
 8002fb6:	0e1b      	lsrs	r3, r3, #24
 8002fb8:	0010      	movs	r0, r2
 8002fba:	0205      	lsls	r5, r0, #8
 8002fbc:	431d      	orrs	r5, r3
 8002fbe:	000b      	movs	r3, r1
 8002fc0:	021c      	lsls	r4, r3, #8
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	085b      	lsrs	r3, r3, #1
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	68b8      	ldr	r0, [r7, #8]
 8002fd0:	68f9      	ldr	r1, [r7, #12]
 8002fd2:	1900      	adds	r0, r0, r4
 8002fd4:	4169      	adcs	r1, r5
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f7fd f926 	bl	8000234 <__aeabi_uldivmod>
 8002fe8:	0002      	movs	r2, r0
 8002fea:	000b      	movs	r3, r1
 8002fec:	0013      	movs	r3, r2
 8002fee:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ff2:	23c0      	movs	r3, #192	; 0xc0
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d309      	bcc.n	800300e <UART_SetConfig+0x302>
 8002ffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	035b      	lsls	r3, r3, #13
 8003000:	429a      	cmp	r2, r3
 8003002:	d204      	bcs.n	800300e <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800300a:	60da      	str	r2, [r3, #12]
 800300c:	e0ea      	b.n	80031e4 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 800300e:	231a      	movs	r3, #26
 8003010:	2218      	movs	r2, #24
 8003012:	189b      	adds	r3, r3, r2
 8003014:	19db      	adds	r3, r3, r7
 8003016:	2201      	movs	r2, #1
 8003018:	701a      	strb	r2, [r3, #0]
 800301a:	e0e3      	b.n	80031e4 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	429a      	cmp	r2, r3
 8003026:	d000      	beq.n	800302a <UART_SetConfig+0x31e>
 8003028:	e085      	b.n	8003136 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800302a:	231b      	movs	r3, #27
 800302c:	2218      	movs	r2, #24
 800302e:	189b      	adds	r3, r3, r2
 8003030:	19db      	adds	r3, r3, r7
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b08      	cmp	r3, #8
 8003036:	d837      	bhi.n	80030a8 <UART_SetConfig+0x39c>
 8003038:	009a      	lsls	r2, r3, #2
 800303a:	4b10      	ldr	r3, [pc, #64]	; (800307c <UART_SetConfig+0x370>)
 800303c:	18d3      	adds	r3, r2, r3
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003042:	f7fe fe9f 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 8003046:	0003      	movs	r3, r0
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800304a:	e036      	b.n	80030ba <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800304c:	f7fe feb0 	bl	8001db0 <HAL_RCC_GetPCLK2Freq>
 8003050:	0003      	movs	r3, r0
 8003052:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003054:	e031      	b.n	80030ba <UART_SetConfig+0x3ae>
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	efff69f3 	.word	0xefff69f3
 800305c:	ffffcfff 	.word	0xffffcfff
 8003060:	40004800 	.word	0x40004800
 8003064:	fffff4ff 	.word	0xfffff4ff
 8003068:	40013800 	.word	0x40013800
 800306c:	40021000 	.word	0x40021000
 8003070:	40004400 	.word	0x40004400
 8003074:	003d0900 	.word	0x003d0900
 8003078:	00f42400 	.word	0x00f42400
 800307c:	080048a4 	.word	0x080048a4
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003080:	4b60      	ldr	r3, [pc, #384]	; (8003204 <UART_SetConfig+0x4f8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2210      	movs	r2, #16
 8003086:	4013      	ands	r3, r2
 8003088:	d002      	beq.n	8003090 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800308a:	4b5f      	ldr	r3, [pc, #380]	; (8003208 <UART_SetConfig+0x4fc>)
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800308e:	e014      	b.n	80030ba <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8003090:	4b5e      	ldr	r3, [pc, #376]	; (800320c <UART_SetConfig+0x500>)
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003094:	e011      	b.n	80030ba <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003096:	f7fe fdc5 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 800309a:	0003      	movs	r3, r0
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800309e:	e00c      	b.n	80030ba <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	021b      	lsls	r3, r3, #8
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030a6:	e008      	b.n	80030ba <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80030ac:	231a      	movs	r3, #26
 80030ae:	2218      	movs	r2, #24
 80030b0:	189b      	adds	r3, r3, r2
 80030b2:	19db      	adds	r3, r3, r7
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
        break;
 80030b8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d100      	bne.n	80030c2 <UART_SetConfig+0x3b6>
 80030c0:	e090      	b.n	80031e4 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c4:	005a      	lsls	r2, r3, #1
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	085b      	lsrs	r3, r3, #1
 80030cc:	18d2      	adds	r2, r2, r3
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	0019      	movs	r1, r3
 80030d4:	0010      	movs	r0, r2
 80030d6:	f7fd f821 	bl	800011c <__udivsi3>
 80030da:	0003      	movs	r3, r0
 80030dc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e0:	2b0f      	cmp	r3, #15
 80030e2:	d921      	bls.n	8003128 <UART_SetConfig+0x41c>
 80030e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030e6:	2380      	movs	r3, #128	; 0x80
 80030e8:	025b      	lsls	r3, r3, #9
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d21c      	bcs.n	8003128 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	200e      	movs	r0, #14
 80030f4:	2418      	movs	r4, #24
 80030f6:	1903      	adds	r3, r0, r4
 80030f8:	19db      	adds	r3, r3, r7
 80030fa:	210f      	movs	r1, #15
 80030fc:	438a      	bics	r2, r1
 80030fe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003102:	085b      	lsrs	r3, r3, #1
 8003104:	b29b      	uxth	r3, r3
 8003106:	2207      	movs	r2, #7
 8003108:	4013      	ands	r3, r2
 800310a:	b299      	uxth	r1, r3
 800310c:	1903      	adds	r3, r0, r4
 800310e:	19db      	adds	r3, r3, r7
 8003110:	1902      	adds	r2, r0, r4
 8003112:	19d2      	adds	r2, r2, r7
 8003114:	8812      	ldrh	r2, [r2, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	1902      	adds	r2, r0, r4
 8003120:	19d2      	adds	r2, r2, r7
 8003122:	8812      	ldrh	r2, [r2, #0]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	e05d      	b.n	80031e4 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003128:	231a      	movs	r3, #26
 800312a:	2218      	movs	r2, #24
 800312c:	189b      	adds	r3, r3, r2
 800312e:	19db      	adds	r3, r3, r7
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
 8003134:	e056      	b.n	80031e4 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003136:	231b      	movs	r3, #27
 8003138:	2218      	movs	r2, #24
 800313a:	189b      	adds	r3, r3, r2
 800313c:	19db      	adds	r3, r3, r7
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b08      	cmp	r3, #8
 8003142:	d822      	bhi.n	800318a <UART_SetConfig+0x47e>
 8003144:	009a      	lsls	r2, r3, #2
 8003146:	4b32      	ldr	r3, [pc, #200]	; (8003210 <UART_SetConfig+0x504>)
 8003148:	18d3      	adds	r3, r2, r3
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800314e:	f7fe fe19 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 8003152:	0003      	movs	r3, r0
 8003154:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003156:	e021      	b.n	800319c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003158:	f7fe fe2a 	bl	8001db0 <HAL_RCC_GetPCLK2Freq>
 800315c:	0003      	movs	r3, r0
 800315e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003160:	e01c      	b.n	800319c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003162:	4b28      	ldr	r3, [pc, #160]	; (8003204 <UART_SetConfig+0x4f8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2210      	movs	r2, #16
 8003168:	4013      	ands	r3, r2
 800316a:	d002      	beq.n	8003172 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800316c:	4b26      	ldr	r3, [pc, #152]	; (8003208 <UART_SetConfig+0x4fc>)
 800316e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003170:	e014      	b.n	800319c <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8003172:	4b26      	ldr	r3, [pc, #152]	; (800320c <UART_SetConfig+0x500>)
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003176:	e011      	b.n	800319c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003178:	f7fe fd54 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 800317c:	0003      	movs	r3, r0
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003180:	e00c      	b.n	800319c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003188:	e008      	b.n	800319c <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800318e:	231a      	movs	r3, #26
 8003190:	2218      	movs	r2, #24
 8003192:	189b      	adds	r3, r3, r2
 8003194:	19db      	adds	r3, r3, r7
 8003196:	2201      	movs	r2, #1
 8003198:	701a      	strb	r2, [r3, #0]
        break;
 800319a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d020      	beq.n	80031e4 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	085a      	lsrs	r2, r3, #1
 80031a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031aa:	18d2      	adds	r2, r2, r3
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	0019      	movs	r1, r3
 80031b2:	0010      	movs	r0, r2
 80031b4:	f7fc ffb2 	bl	800011c <__udivsi3>
 80031b8:	0003      	movs	r3, r0
 80031ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031be:	2b0f      	cmp	r3, #15
 80031c0:	d90a      	bls.n	80031d8 <UART_SetConfig+0x4cc>
 80031c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	025b      	lsls	r3, r3, #9
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d205      	bcs.n	80031d8 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	e005      	b.n	80031e4 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80031d8:	231a      	movs	r3, #26
 80031da:	2218      	movs	r2, #24
 80031dc:	189b      	adds	r3, r3, r2
 80031de:	19db      	adds	r3, r3, r7
 80031e0:	2201      	movs	r2, #1
 80031e2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	2200      	movs	r2, #0
 80031e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	2200      	movs	r2, #0
 80031ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80031f0:	231a      	movs	r3, #26
 80031f2:	2218      	movs	r2, #24
 80031f4:	189b      	adds	r3, r3, r2
 80031f6:	19db      	adds	r3, r3, r7
 80031f8:	781b      	ldrb	r3, [r3, #0]
}
 80031fa:	0018      	movs	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b00e      	add	sp, #56	; 0x38
 8003200:	bdb0      	pop	{r4, r5, r7, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	40021000 	.word	0x40021000
 8003208:	003d0900 	.word	0x003d0900
 800320c:	00f42400 	.word	0x00f42400
 8003210:	080048c8 	.word	0x080048c8

08003214 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	2201      	movs	r2, #1
 8003222:	4013      	ands	r3, r2
 8003224:	d00b      	beq.n	800323e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	4a4a      	ldr	r2, [pc, #296]	; (8003358 <UART_AdvFeatureConfig+0x144>)
 800322e:	4013      	ands	r3, r2
 8003230:	0019      	movs	r1, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	2202      	movs	r2, #2
 8003244:	4013      	ands	r3, r2
 8003246:	d00b      	beq.n	8003260 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	4a43      	ldr	r2, [pc, #268]	; (800335c <UART_AdvFeatureConfig+0x148>)
 8003250:	4013      	ands	r3, r2
 8003252:	0019      	movs	r1, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	2204      	movs	r2, #4
 8003266:	4013      	ands	r3, r2
 8003268:	d00b      	beq.n	8003282 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	4a3b      	ldr	r2, [pc, #236]	; (8003360 <UART_AdvFeatureConfig+0x14c>)
 8003272:	4013      	ands	r3, r2
 8003274:	0019      	movs	r1, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	2208      	movs	r2, #8
 8003288:	4013      	ands	r3, r2
 800328a:	d00b      	beq.n	80032a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	4a34      	ldr	r2, [pc, #208]	; (8003364 <UART_AdvFeatureConfig+0x150>)
 8003294:	4013      	ands	r3, r2
 8003296:	0019      	movs	r1, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	2210      	movs	r2, #16
 80032aa:	4013      	ands	r3, r2
 80032ac:	d00b      	beq.n	80032c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	4a2c      	ldr	r2, [pc, #176]	; (8003368 <UART_AdvFeatureConfig+0x154>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	0019      	movs	r1, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	2220      	movs	r2, #32
 80032cc:	4013      	ands	r3, r2
 80032ce:	d00b      	beq.n	80032e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	4a25      	ldr	r2, [pc, #148]	; (800336c <UART_AdvFeatureConfig+0x158>)
 80032d8:	4013      	ands	r3, r2
 80032da:	0019      	movs	r1, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	2240      	movs	r2, #64	; 0x40
 80032ee:	4013      	ands	r3, r2
 80032f0:	d01d      	beq.n	800332e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4a1d      	ldr	r2, [pc, #116]	; (8003370 <UART_AdvFeatureConfig+0x15c>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	0019      	movs	r1, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800330e:	2380      	movs	r3, #128	; 0x80
 8003310:	035b      	lsls	r3, r3, #13
 8003312:	429a      	cmp	r2, r3
 8003314:	d10b      	bne.n	800332e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	4a15      	ldr	r2, [pc, #84]	; (8003374 <UART_AdvFeatureConfig+0x160>)
 800331e:	4013      	ands	r3, r2
 8003320:	0019      	movs	r1, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	2280      	movs	r2, #128	; 0x80
 8003334:	4013      	ands	r3, r2
 8003336:	d00b      	beq.n	8003350 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4a0e      	ldr	r2, [pc, #56]	; (8003378 <UART_AdvFeatureConfig+0x164>)
 8003340:	4013      	ands	r3, r2
 8003342:	0019      	movs	r1, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	605a      	str	r2, [r3, #4]
  }
}
 8003350:	46c0      	nop			; (mov r8, r8)
 8003352:	46bd      	mov	sp, r7
 8003354:	b002      	add	sp, #8
 8003356:	bd80      	pop	{r7, pc}
 8003358:	fffdffff 	.word	0xfffdffff
 800335c:	fffeffff 	.word	0xfffeffff
 8003360:	fffbffff 	.word	0xfffbffff
 8003364:	ffff7fff 	.word	0xffff7fff
 8003368:	ffffefff 	.word	0xffffefff
 800336c:	ffffdfff 	.word	0xffffdfff
 8003370:	ffefffff 	.word	0xffefffff
 8003374:	ff9fffff 	.word	0xff9fffff
 8003378:	fff7ffff 	.word	0xfff7ffff

0800337c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b092      	sub	sp, #72	; 0x48
 8003380:	af02      	add	r7, sp, #8
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2284      	movs	r2, #132	; 0x84
 8003388:	2100      	movs	r1, #0
 800338a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800338c:	f7fd fc9e 	bl	8000ccc <HAL_GetTick>
 8003390:	0003      	movs	r3, r0
 8003392:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2208      	movs	r2, #8
 800339c:	4013      	ands	r3, r2
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d12c      	bne.n	80033fc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a4:	2280      	movs	r2, #128	; 0x80
 80033a6:	0391      	lsls	r1, r2, #14
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	4a46      	ldr	r2, [pc, #280]	; (80034c4 <UART_CheckIdleState+0x148>)
 80033ac:	9200      	str	r2, [sp, #0]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f000 f88c 	bl	80034cc <UART_WaitOnFlagUntilTimeout>
 80033b4:	1e03      	subs	r3, r0, #0
 80033b6:	d021      	beq.n	80033fc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033b8:	f3ef 8310 	mrs	r3, PRIMASK
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80033c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80033c2:	2301      	movs	r3, #1
 80033c4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c8:	f383 8810 	msr	PRIMASK, r3
}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2180      	movs	r1, #128	; 0x80
 80033da:	438a      	bics	r2, r1
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e4:	f383 8810 	msr	PRIMASK, r3
}
 80033e8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2278      	movs	r2, #120	; 0x78
 80033f4:	2100      	movs	r1, #0
 80033f6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e05f      	b.n	80034bc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2204      	movs	r2, #4
 8003404:	4013      	ands	r3, r2
 8003406:	2b04      	cmp	r3, #4
 8003408:	d146      	bne.n	8003498 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800340a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800340c:	2280      	movs	r2, #128	; 0x80
 800340e:	03d1      	lsls	r1, r2, #15
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	4a2c      	ldr	r2, [pc, #176]	; (80034c4 <UART_CheckIdleState+0x148>)
 8003414:	9200      	str	r2, [sp, #0]
 8003416:	2200      	movs	r2, #0
 8003418:	f000 f858 	bl	80034cc <UART_WaitOnFlagUntilTimeout>
 800341c:	1e03      	subs	r3, r0, #0
 800341e:	d03b      	beq.n	8003498 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003420:	f3ef 8310 	mrs	r3, PRIMASK
 8003424:	60fb      	str	r3, [r7, #12]
  return(result);
 8003426:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003428:	637b      	str	r3, [r7, #52]	; 0x34
 800342a:	2301      	movs	r3, #1
 800342c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f383 8810 	msr	PRIMASK, r3
}
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4921      	ldr	r1, [pc, #132]	; (80034c8 <UART_CheckIdleState+0x14c>)
 8003442:	400a      	ands	r2, r1
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003448:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f383 8810 	msr	PRIMASK, r3
}
 8003450:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003452:	f3ef 8310 	mrs	r3, PRIMASK
 8003456:	61bb      	str	r3, [r7, #24]
  return(result);
 8003458:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345a:	633b      	str	r3, [r7, #48]	; 0x30
 800345c:	2301      	movs	r3, #1
 800345e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f383 8810 	msr	PRIMASK, r3
}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2101      	movs	r1, #1
 8003474:	438a      	bics	r2, r1
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	f383 8810 	msr	PRIMASK, r3
}
 8003482:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2280      	movs	r2, #128	; 0x80
 8003488:	2120      	movs	r1, #32
 800348a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2278      	movs	r2, #120	; 0x78
 8003490:	2100      	movs	r1, #0
 8003492:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e011      	b.n	80034bc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2280      	movs	r2, #128	; 0x80
 80034a2:	2120      	movs	r1, #32
 80034a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2278      	movs	r2, #120	; 0x78
 80034b6:	2100      	movs	r1, #0
 80034b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	0018      	movs	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	b010      	add	sp, #64	; 0x40
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	01ffffff 	.word	0x01ffffff
 80034c8:	fffffedf 	.word	0xfffffedf

080034cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	1dfb      	adds	r3, r7, #7
 80034da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034dc:	e04b      	b.n	8003576 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	3301      	adds	r3, #1
 80034e2:	d048      	beq.n	8003576 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e4:	f7fd fbf2 	bl	8000ccc <HAL_GetTick>
 80034e8:	0002      	movs	r2, r0
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d302      	bcc.n	80034fa <UART_WaitOnFlagUntilTimeout+0x2e>
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e04b      	b.n	8003596 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2204      	movs	r2, #4
 8003506:	4013      	ands	r3, r2
 8003508:	d035      	beq.n	8003576 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	2208      	movs	r2, #8
 8003512:	4013      	ands	r3, r2
 8003514:	2b08      	cmp	r3, #8
 8003516:	d111      	bne.n	800353c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2208      	movs	r2, #8
 800351e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	0018      	movs	r0, r3
 8003524:	f000 f83c 	bl	80035a0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2284      	movs	r2, #132	; 0x84
 800352c:	2108      	movs	r1, #8
 800352e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2278      	movs	r2, #120	; 0x78
 8003534:	2100      	movs	r1, #0
 8003536:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e02c      	b.n	8003596 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69da      	ldr	r2, [r3, #28]
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	401a      	ands	r2, r3
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	429a      	cmp	r2, r3
 800354e:	d112      	bne.n	8003576 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2280      	movs	r2, #128	; 0x80
 8003556:	0112      	lsls	r2, r2, #4
 8003558:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	0018      	movs	r0, r3
 800355e:	f000 f81f 	bl	80035a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2284      	movs	r2, #132	; 0x84
 8003566:	2120      	movs	r1, #32
 8003568:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2278      	movs	r2, #120	; 0x78
 800356e:	2100      	movs	r1, #0
 8003570:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e00f      	b.n	8003596 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	4013      	ands	r3, r2
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	425a      	negs	r2, r3
 8003586:	4153      	adcs	r3, r2
 8003588:	b2db      	uxtb	r3, r3
 800358a:	001a      	movs	r2, r3
 800358c:	1dfb      	adds	r3, r7, #7
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d0a4      	beq.n	80034de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	0018      	movs	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	b004      	add	sp, #16
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08e      	sub	sp, #56	; 0x38
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a8:	f3ef 8310 	mrs	r3, PRIMASK
 80035ac:	617b      	str	r3, [r7, #20]
  return(result);
 80035ae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035b0:	637b      	str	r3, [r7, #52]	; 0x34
 80035b2:	2301      	movs	r3, #1
 80035b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	f383 8810 	msr	PRIMASK, r3
}
 80035bc:	46c0      	nop			; (mov r8, r8)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4926      	ldr	r1, [pc, #152]	; (8003664 <UART_EndRxTransfer+0xc4>)
 80035ca:	400a      	ands	r2, r1
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f383 8810 	msr	PRIMASK, r3
}
 80035d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035da:	f3ef 8310 	mrs	r3, PRIMASK
 80035de:	623b      	str	r3, [r7, #32]
  return(result);
 80035e0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e2:	633b      	str	r3, [r7, #48]	; 0x30
 80035e4:	2301      	movs	r3, #1
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	f383 8810 	msr	PRIMASK, r3
}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2101      	movs	r1, #1
 80035fc:	438a      	bics	r2, r1
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003602:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003606:	f383 8810 	msr	PRIMASK, r3
}
 800360a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003610:	2b01      	cmp	r3, #1
 8003612:	d118      	bne.n	8003646 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003614:	f3ef 8310 	mrs	r3, PRIMASK
 8003618:	60bb      	str	r3, [r7, #8]
  return(result);
 800361a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800361c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800361e:	2301      	movs	r3, #1
 8003620:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f383 8810 	msr	PRIMASK, r3
}
 8003628:	46c0      	nop			; (mov r8, r8)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2110      	movs	r1, #16
 8003636:	438a      	bics	r2, r1
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f383 8810 	msr	PRIMASK, r3
}
 8003644:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2280      	movs	r2, #128	; 0x80
 800364a:	2120      	movs	r1, #32
 800364c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	669a      	str	r2, [r3, #104]	; 0x68
}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	46bd      	mov	sp, r7
 800365e:	b00e      	add	sp, #56	; 0x38
 8003660:	bd80      	pop	{r7, pc}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	fffffedf 	.word	0xfffffedf

08003668 <__errno>:
 8003668:	4b01      	ldr	r3, [pc, #4]	; (8003670 <__errno+0x8>)
 800366a:	6818      	ldr	r0, [r3, #0]
 800366c:	4770      	bx	lr
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	2000000c 	.word	0x2000000c

08003674 <__libc_init_array>:
 8003674:	b570      	push	{r4, r5, r6, lr}
 8003676:	2600      	movs	r6, #0
 8003678:	4d0c      	ldr	r5, [pc, #48]	; (80036ac <__libc_init_array+0x38>)
 800367a:	4c0d      	ldr	r4, [pc, #52]	; (80036b0 <__libc_init_array+0x3c>)
 800367c:	1b64      	subs	r4, r4, r5
 800367e:	10a4      	asrs	r4, r4, #2
 8003680:	42a6      	cmp	r6, r4
 8003682:	d109      	bne.n	8003698 <__libc_init_array+0x24>
 8003684:	2600      	movs	r6, #0
 8003686:	f001 f8cf 	bl	8004828 <_init>
 800368a:	4d0a      	ldr	r5, [pc, #40]	; (80036b4 <__libc_init_array+0x40>)
 800368c:	4c0a      	ldr	r4, [pc, #40]	; (80036b8 <__libc_init_array+0x44>)
 800368e:	1b64      	subs	r4, r4, r5
 8003690:	10a4      	asrs	r4, r4, #2
 8003692:	42a6      	cmp	r6, r4
 8003694:	d105      	bne.n	80036a2 <__libc_init_array+0x2e>
 8003696:	bd70      	pop	{r4, r5, r6, pc}
 8003698:	00b3      	lsls	r3, r6, #2
 800369a:	58eb      	ldr	r3, [r5, r3]
 800369c:	4798      	blx	r3
 800369e:	3601      	adds	r6, #1
 80036a0:	e7ee      	b.n	8003680 <__libc_init_array+0xc>
 80036a2:	00b3      	lsls	r3, r6, #2
 80036a4:	58eb      	ldr	r3, [r5, r3]
 80036a6:	4798      	blx	r3
 80036a8:	3601      	adds	r6, #1
 80036aa:	e7f2      	b.n	8003692 <__libc_init_array+0x1e>
 80036ac:	0800498c 	.word	0x0800498c
 80036b0:	0800498c 	.word	0x0800498c
 80036b4:	0800498c 	.word	0x0800498c
 80036b8:	08004990 	.word	0x08004990

080036bc <memset>:
 80036bc:	0003      	movs	r3, r0
 80036be:	1882      	adds	r2, r0, r2
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d100      	bne.n	80036c6 <memset+0xa>
 80036c4:	4770      	bx	lr
 80036c6:	7019      	strb	r1, [r3, #0]
 80036c8:	3301      	adds	r3, #1
 80036ca:	e7f9      	b.n	80036c0 <memset+0x4>

080036cc <_puts_r>:
 80036cc:	b570      	push	{r4, r5, r6, lr}
 80036ce:	0005      	movs	r5, r0
 80036d0:	000e      	movs	r6, r1
 80036d2:	2800      	cmp	r0, #0
 80036d4:	d004      	beq.n	80036e0 <_puts_r+0x14>
 80036d6:	6983      	ldr	r3, [r0, #24]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <_puts_r+0x14>
 80036dc:	f000 fa8e 	bl	8003bfc <__sinit>
 80036e0:	69ab      	ldr	r3, [r5, #24]
 80036e2:	68ac      	ldr	r4, [r5, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d102      	bne.n	80036ee <_puts_r+0x22>
 80036e8:	0028      	movs	r0, r5
 80036ea:	f000 fa87 	bl	8003bfc <__sinit>
 80036ee:	4b2d      	ldr	r3, [pc, #180]	; (80037a4 <_puts_r+0xd8>)
 80036f0:	429c      	cmp	r4, r3
 80036f2:	d122      	bne.n	800373a <_puts_r+0x6e>
 80036f4:	686c      	ldr	r4, [r5, #4]
 80036f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036f8:	07db      	lsls	r3, r3, #31
 80036fa:	d405      	bmi.n	8003708 <_puts_r+0x3c>
 80036fc:	89a3      	ldrh	r3, [r4, #12]
 80036fe:	059b      	lsls	r3, r3, #22
 8003700:	d402      	bmi.n	8003708 <_puts_r+0x3c>
 8003702:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003704:	f000 fb1b 	bl	8003d3e <__retarget_lock_acquire_recursive>
 8003708:	89a3      	ldrh	r3, [r4, #12]
 800370a:	071b      	lsls	r3, r3, #28
 800370c:	d502      	bpl.n	8003714 <_puts_r+0x48>
 800370e:	6923      	ldr	r3, [r4, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d129      	bne.n	8003768 <_puts_r+0x9c>
 8003714:	0021      	movs	r1, r4
 8003716:	0028      	movs	r0, r5
 8003718:	f000 f8ca 	bl	80038b0 <__swsetup_r>
 800371c:	2800      	cmp	r0, #0
 800371e:	d023      	beq.n	8003768 <_puts_r+0x9c>
 8003720:	2501      	movs	r5, #1
 8003722:	426d      	negs	r5, r5
 8003724:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003726:	07db      	lsls	r3, r3, #31
 8003728:	d405      	bmi.n	8003736 <_puts_r+0x6a>
 800372a:	89a3      	ldrh	r3, [r4, #12]
 800372c:	059b      	lsls	r3, r3, #22
 800372e:	d402      	bmi.n	8003736 <_puts_r+0x6a>
 8003730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003732:	f000 fb05 	bl	8003d40 <__retarget_lock_release_recursive>
 8003736:	0028      	movs	r0, r5
 8003738:	bd70      	pop	{r4, r5, r6, pc}
 800373a:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <_puts_r+0xdc>)
 800373c:	429c      	cmp	r4, r3
 800373e:	d101      	bne.n	8003744 <_puts_r+0x78>
 8003740:	68ac      	ldr	r4, [r5, #8]
 8003742:	e7d8      	b.n	80036f6 <_puts_r+0x2a>
 8003744:	4b19      	ldr	r3, [pc, #100]	; (80037ac <_puts_r+0xe0>)
 8003746:	429c      	cmp	r4, r3
 8003748:	d1d5      	bne.n	80036f6 <_puts_r+0x2a>
 800374a:	68ec      	ldr	r4, [r5, #12]
 800374c:	e7d3      	b.n	80036f6 <_puts_r+0x2a>
 800374e:	3601      	adds	r6, #1
 8003750:	60a3      	str	r3, [r4, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	da04      	bge.n	8003760 <_puts_r+0x94>
 8003756:	69a2      	ldr	r2, [r4, #24]
 8003758:	429a      	cmp	r2, r3
 800375a:	dc16      	bgt.n	800378a <_puts_r+0xbe>
 800375c:	290a      	cmp	r1, #10
 800375e:	d014      	beq.n	800378a <_puts_r+0xbe>
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	6022      	str	r2, [r4, #0]
 8003766:	7019      	strb	r1, [r3, #0]
 8003768:	68a3      	ldr	r3, [r4, #8]
 800376a:	7831      	ldrb	r1, [r6, #0]
 800376c:	3b01      	subs	r3, #1
 800376e:	2900      	cmp	r1, #0
 8003770:	d1ed      	bne.n	800374e <_puts_r+0x82>
 8003772:	60a3      	str	r3, [r4, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	da0f      	bge.n	8003798 <_puts_r+0xcc>
 8003778:	0028      	movs	r0, r5
 800377a:	0022      	movs	r2, r4
 800377c:	310a      	adds	r1, #10
 800377e:	f000 f841 	bl	8003804 <__swbuf_r>
 8003782:	250a      	movs	r5, #10
 8003784:	1c43      	adds	r3, r0, #1
 8003786:	d1cd      	bne.n	8003724 <_puts_r+0x58>
 8003788:	e7ca      	b.n	8003720 <_puts_r+0x54>
 800378a:	0022      	movs	r2, r4
 800378c:	0028      	movs	r0, r5
 800378e:	f000 f839 	bl	8003804 <__swbuf_r>
 8003792:	1c43      	adds	r3, r0, #1
 8003794:	d1e8      	bne.n	8003768 <_puts_r+0x9c>
 8003796:	e7c3      	b.n	8003720 <_puts_r+0x54>
 8003798:	250a      	movs	r5, #10
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	6022      	str	r2, [r4, #0]
 80037a0:	701d      	strb	r5, [r3, #0]
 80037a2:	e7bf      	b.n	8003724 <_puts_r+0x58>
 80037a4:	08004910 	.word	0x08004910
 80037a8:	08004930 	.word	0x08004930
 80037ac:	080048f0 	.word	0x080048f0

080037b0 <puts>:
 80037b0:	b510      	push	{r4, lr}
 80037b2:	4b03      	ldr	r3, [pc, #12]	; (80037c0 <puts+0x10>)
 80037b4:	0001      	movs	r1, r0
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	f7ff ff88 	bl	80036cc <_puts_r>
 80037bc:	bd10      	pop	{r4, pc}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	2000000c 	.word	0x2000000c

080037c4 <siprintf>:
 80037c4:	b40e      	push	{r1, r2, r3}
 80037c6:	b500      	push	{lr}
 80037c8:	490b      	ldr	r1, [pc, #44]	; (80037f8 <siprintf+0x34>)
 80037ca:	b09c      	sub	sp, #112	; 0x70
 80037cc:	ab1d      	add	r3, sp, #116	; 0x74
 80037ce:	9002      	str	r0, [sp, #8]
 80037d0:	9006      	str	r0, [sp, #24]
 80037d2:	9107      	str	r1, [sp, #28]
 80037d4:	9104      	str	r1, [sp, #16]
 80037d6:	4809      	ldr	r0, [pc, #36]	; (80037fc <siprintf+0x38>)
 80037d8:	4909      	ldr	r1, [pc, #36]	; (8003800 <siprintf+0x3c>)
 80037da:	cb04      	ldmia	r3!, {r2}
 80037dc:	9105      	str	r1, [sp, #20]
 80037de:	6800      	ldr	r0, [r0, #0]
 80037e0:	a902      	add	r1, sp, #8
 80037e2:	9301      	str	r3, [sp, #4]
 80037e4:	f000 fc5e 	bl	80040a4 <_svfiprintf_r>
 80037e8:	2300      	movs	r3, #0
 80037ea:	9a02      	ldr	r2, [sp, #8]
 80037ec:	7013      	strb	r3, [r2, #0]
 80037ee:	b01c      	add	sp, #112	; 0x70
 80037f0:	bc08      	pop	{r3}
 80037f2:	b003      	add	sp, #12
 80037f4:	4718      	bx	r3
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	7fffffff 	.word	0x7fffffff
 80037fc:	2000000c 	.word	0x2000000c
 8003800:	ffff0208 	.word	0xffff0208

08003804 <__swbuf_r>:
 8003804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003806:	0005      	movs	r5, r0
 8003808:	000e      	movs	r6, r1
 800380a:	0014      	movs	r4, r2
 800380c:	2800      	cmp	r0, #0
 800380e:	d004      	beq.n	800381a <__swbuf_r+0x16>
 8003810:	6983      	ldr	r3, [r0, #24]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <__swbuf_r+0x16>
 8003816:	f000 f9f1 	bl	8003bfc <__sinit>
 800381a:	4b22      	ldr	r3, [pc, #136]	; (80038a4 <__swbuf_r+0xa0>)
 800381c:	429c      	cmp	r4, r3
 800381e:	d12e      	bne.n	800387e <__swbuf_r+0x7a>
 8003820:	686c      	ldr	r4, [r5, #4]
 8003822:	69a3      	ldr	r3, [r4, #24]
 8003824:	60a3      	str	r3, [r4, #8]
 8003826:	89a3      	ldrh	r3, [r4, #12]
 8003828:	071b      	lsls	r3, r3, #28
 800382a:	d532      	bpl.n	8003892 <__swbuf_r+0x8e>
 800382c:	6923      	ldr	r3, [r4, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d02f      	beq.n	8003892 <__swbuf_r+0x8e>
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	6922      	ldr	r2, [r4, #16]
 8003836:	b2f7      	uxtb	r7, r6
 8003838:	1a98      	subs	r0, r3, r2
 800383a:	6963      	ldr	r3, [r4, #20]
 800383c:	b2f6      	uxtb	r6, r6
 800383e:	4283      	cmp	r3, r0
 8003840:	dc05      	bgt.n	800384e <__swbuf_r+0x4a>
 8003842:	0021      	movs	r1, r4
 8003844:	0028      	movs	r0, r5
 8003846:	f000 f937 	bl	8003ab8 <_fflush_r>
 800384a:	2800      	cmp	r0, #0
 800384c:	d127      	bne.n	800389e <__swbuf_r+0x9a>
 800384e:	68a3      	ldr	r3, [r4, #8]
 8003850:	3001      	adds	r0, #1
 8003852:	3b01      	subs	r3, #1
 8003854:	60a3      	str	r3, [r4, #8]
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	6022      	str	r2, [r4, #0]
 800385c:	701f      	strb	r7, [r3, #0]
 800385e:	6963      	ldr	r3, [r4, #20]
 8003860:	4283      	cmp	r3, r0
 8003862:	d004      	beq.n	800386e <__swbuf_r+0x6a>
 8003864:	89a3      	ldrh	r3, [r4, #12]
 8003866:	07db      	lsls	r3, r3, #31
 8003868:	d507      	bpl.n	800387a <__swbuf_r+0x76>
 800386a:	2e0a      	cmp	r6, #10
 800386c:	d105      	bne.n	800387a <__swbuf_r+0x76>
 800386e:	0021      	movs	r1, r4
 8003870:	0028      	movs	r0, r5
 8003872:	f000 f921 	bl	8003ab8 <_fflush_r>
 8003876:	2800      	cmp	r0, #0
 8003878:	d111      	bne.n	800389e <__swbuf_r+0x9a>
 800387a:	0030      	movs	r0, r6
 800387c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800387e:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <__swbuf_r+0xa4>)
 8003880:	429c      	cmp	r4, r3
 8003882:	d101      	bne.n	8003888 <__swbuf_r+0x84>
 8003884:	68ac      	ldr	r4, [r5, #8]
 8003886:	e7cc      	b.n	8003822 <__swbuf_r+0x1e>
 8003888:	4b08      	ldr	r3, [pc, #32]	; (80038ac <__swbuf_r+0xa8>)
 800388a:	429c      	cmp	r4, r3
 800388c:	d1c9      	bne.n	8003822 <__swbuf_r+0x1e>
 800388e:	68ec      	ldr	r4, [r5, #12]
 8003890:	e7c7      	b.n	8003822 <__swbuf_r+0x1e>
 8003892:	0021      	movs	r1, r4
 8003894:	0028      	movs	r0, r5
 8003896:	f000 f80b 	bl	80038b0 <__swsetup_r>
 800389a:	2800      	cmp	r0, #0
 800389c:	d0c9      	beq.n	8003832 <__swbuf_r+0x2e>
 800389e:	2601      	movs	r6, #1
 80038a0:	4276      	negs	r6, r6
 80038a2:	e7ea      	b.n	800387a <__swbuf_r+0x76>
 80038a4:	08004910 	.word	0x08004910
 80038a8:	08004930 	.word	0x08004930
 80038ac:	080048f0 	.word	0x080048f0

080038b0 <__swsetup_r>:
 80038b0:	4b37      	ldr	r3, [pc, #220]	; (8003990 <__swsetup_r+0xe0>)
 80038b2:	b570      	push	{r4, r5, r6, lr}
 80038b4:	681d      	ldr	r5, [r3, #0]
 80038b6:	0006      	movs	r6, r0
 80038b8:	000c      	movs	r4, r1
 80038ba:	2d00      	cmp	r5, #0
 80038bc:	d005      	beq.n	80038ca <__swsetup_r+0x1a>
 80038be:	69ab      	ldr	r3, [r5, #24]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d102      	bne.n	80038ca <__swsetup_r+0x1a>
 80038c4:	0028      	movs	r0, r5
 80038c6:	f000 f999 	bl	8003bfc <__sinit>
 80038ca:	4b32      	ldr	r3, [pc, #200]	; (8003994 <__swsetup_r+0xe4>)
 80038cc:	429c      	cmp	r4, r3
 80038ce:	d10f      	bne.n	80038f0 <__swsetup_r+0x40>
 80038d0:	686c      	ldr	r4, [r5, #4]
 80038d2:	230c      	movs	r3, #12
 80038d4:	5ee2      	ldrsh	r2, [r4, r3]
 80038d6:	b293      	uxth	r3, r2
 80038d8:	0711      	lsls	r1, r2, #28
 80038da:	d42d      	bmi.n	8003938 <__swsetup_r+0x88>
 80038dc:	06d9      	lsls	r1, r3, #27
 80038de:	d411      	bmi.n	8003904 <__swsetup_r+0x54>
 80038e0:	2309      	movs	r3, #9
 80038e2:	2001      	movs	r0, #1
 80038e4:	6033      	str	r3, [r6, #0]
 80038e6:	3337      	adds	r3, #55	; 0x37
 80038e8:	4313      	orrs	r3, r2
 80038ea:	81a3      	strh	r3, [r4, #12]
 80038ec:	4240      	negs	r0, r0
 80038ee:	bd70      	pop	{r4, r5, r6, pc}
 80038f0:	4b29      	ldr	r3, [pc, #164]	; (8003998 <__swsetup_r+0xe8>)
 80038f2:	429c      	cmp	r4, r3
 80038f4:	d101      	bne.n	80038fa <__swsetup_r+0x4a>
 80038f6:	68ac      	ldr	r4, [r5, #8]
 80038f8:	e7eb      	b.n	80038d2 <__swsetup_r+0x22>
 80038fa:	4b28      	ldr	r3, [pc, #160]	; (800399c <__swsetup_r+0xec>)
 80038fc:	429c      	cmp	r4, r3
 80038fe:	d1e8      	bne.n	80038d2 <__swsetup_r+0x22>
 8003900:	68ec      	ldr	r4, [r5, #12]
 8003902:	e7e6      	b.n	80038d2 <__swsetup_r+0x22>
 8003904:	075b      	lsls	r3, r3, #29
 8003906:	d513      	bpl.n	8003930 <__swsetup_r+0x80>
 8003908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800390a:	2900      	cmp	r1, #0
 800390c:	d008      	beq.n	8003920 <__swsetup_r+0x70>
 800390e:	0023      	movs	r3, r4
 8003910:	3344      	adds	r3, #68	; 0x44
 8003912:	4299      	cmp	r1, r3
 8003914:	d002      	beq.n	800391c <__swsetup_r+0x6c>
 8003916:	0030      	movs	r0, r6
 8003918:	f000 fa80 	bl	8003e1c <_free_r>
 800391c:	2300      	movs	r3, #0
 800391e:	6363      	str	r3, [r4, #52]	; 0x34
 8003920:	2224      	movs	r2, #36	; 0x24
 8003922:	89a3      	ldrh	r3, [r4, #12]
 8003924:	4393      	bics	r3, r2
 8003926:	81a3      	strh	r3, [r4, #12]
 8003928:	2300      	movs	r3, #0
 800392a:	6063      	str	r3, [r4, #4]
 800392c:	6923      	ldr	r3, [r4, #16]
 800392e:	6023      	str	r3, [r4, #0]
 8003930:	2308      	movs	r3, #8
 8003932:	89a2      	ldrh	r2, [r4, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	81a3      	strh	r3, [r4, #12]
 8003938:	6923      	ldr	r3, [r4, #16]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10b      	bne.n	8003956 <__swsetup_r+0xa6>
 800393e:	21a0      	movs	r1, #160	; 0xa0
 8003940:	2280      	movs	r2, #128	; 0x80
 8003942:	89a3      	ldrh	r3, [r4, #12]
 8003944:	0089      	lsls	r1, r1, #2
 8003946:	0092      	lsls	r2, r2, #2
 8003948:	400b      	ands	r3, r1
 800394a:	4293      	cmp	r3, r2
 800394c:	d003      	beq.n	8003956 <__swsetup_r+0xa6>
 800394e:	0021      	movs	r1, r4
 8003950:	0030      	movs	r0, r6
 8003952:	f000 fa1f 	bl	8003d94 <__smakebuf_r>
 8003956:	220c      	movs	r2, #12
 8003958:	5ea3      	ldrsh	r3, [r4, r2]
 800395a:	2001      	movs	r0, #1
 800395c:	001a      	movs	r2, r3
 800395e:	b299      	uxth	r1, r3
 8003960:	4002      	ands	r2, r0
 8003962:	4203      	tst	r3, r0
 8003964:	d00f      	beq.n	8003986 <__swsetup_r+0xd6>
 8003966:	2200      	movs	r2, #0
 8003968:	60a2      	str	r2, [r4, #8]
 800396a:	6962      	ldr	r2, [r4, #20]
 800396c:	4252      	negs	r2, r2
 800396e:	61a2      	str	r2, [r4, #24]
 8003970:	2000      	movs	r0, #0
 8003972:	6922      	ldr	r2, [r4, #16]
 8003974:	4282      	cmp	r2, r0
 8003976:	d1ba      	bne.n	80038ee <__swsetup_r+0x3e>
 8003978:	060a      	lsls	r2, r1, #24
 800397a:	d5b8      	bpl.n	80038ee <__swsetup_r+0x3e>
 800397c:	2240      	movs	r2, #64	; 0x40
 800397e:	4313      	orrs	r3, r2
 8003980:	81a3      	strh	r3, [r4, #12]
 8003982:	3801      	subs	r0, #1
 8003984:	e7b3      	b.n	80038ee <__swsetup_r+0x3e>
 8003986:	0788      	lsls	r0, r1, #30
 8003988:	d400      	bmi.n	800398c <__swsetup_r+0xdc>
 800398a:	6962      	ldr	r2, [r4, #20]
 800398c:	60a2      	str	r2, [r4, #8]
 800398e:	e7ef      	b.n	8003970 <__swsetup_r+0xc0>
 8003990:	2000000c 	.word	0x2000000c
 8003994:	08004910 	.word	0x08004910
 8003998:	08004930 	.word	0x08004930
 800399c:	080048f0 	.word	0x080048f0

080039a0 <__sflush_r>:
 80039a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039a2:	898b      	ldrh	r3, [r1, #12]
 80039a4:	0005      	movs	r5, r0
 80039a6:	000c      	movs	r4, r1
 80039a8:	071a      	lsls	r2, r3, #28
 80039aa:	d45f      	bmi.n	8003a6c <__sflush_r+0xcc>
 80039ac:	684a      	ldr	r2, [r1, #4]
 80039ae:	2a00      	cmp	r2, #0
 80039b0:	dc04      	bgt.n	80039bc <__sflush_r+0x1c>
 80039b2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80039b4:	2a00      	cmp	r2, #0
 80039b6:	dc01      	bgt.n	80039bc <__sflush_r+0x1c>
 80039b8:	2000      	movs	r0, #0
 80039ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80039bc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80039be:	2f00      	cmp	r7, #0
 80039c0:	d0fa      	beq.n	80039b8 <__sflush_r+0x18>
 80039c2:	2200      	movs	r2, #0
 80039c4:	2180      	movs	r1, #128	; 0x80
 80039c6:	682e      	ldr	r6, [r5, #0]
 80039c8:	602a      	str	r2, [r5, #0]
 80039ca:	001a      	movs	r2, r3
 80039cc:	0149      	lsls	r1, r1, #5
 80039ce:	400a      	ands	r2, r1
 80039d0:	420b      	tst	r3, r1
 80039d2:	d034      	beq.n	8003a3e <__sflush_r+0x9e>
 80039d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039d6:	89a3      	ldrh	r3, [r4, #12]
 80039d8:	075b      	lsls	r3, r3, #29
 80039da:	d506      	bpl.n	80039ea <__sflush_r+0x4a>
 80039dc:	6863      	ldr	r3, [r4, #4]
 80039de:	1ac0      	subs	r0, r0, r3
 80039e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <__sflush_r+0x4a>
 80039e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039e8:	1ac0      	subs	r0, r0, r3
 80039ea:	0002      	movs	r2, r0
 80039ec:	6a21      	ldr	r1, [r4, #32]
 80039ee:	2300      	movs	r3, #0
 80039f0:	0028      	movs	r0, r5
 80039f2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80039f4:	47b8      	blx	r7
 80039f6:	89a1      	ldrh	r1, [r4, #12]
 80039f8:	1c43      	adds	r3, r0, #1
 80039fa:	d106      	bne.n	8003a0a <__sflush_r+0x6a>
 80039fc:	682b      	ldr	r3, [r5, #0]
 80039fe:	2b1d      	cmp	r3, #29
 8003a00:	d831      	bhi.n	8003a66 <__sflush_r+0xc6>
 8003a02:	4a2c      	ldr	r2, [pc, #176]	; (8003ab4 <__sflush_r+0x114>)
 8003a04:	40da      	lsrs	r2, r3
 8003a06:	07d3      	lsls	r3, r2, #31
 8003a08:	d52d      	bpl.n	8003a66 <__sflush_r+0xc6>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	6063      	str	r3, [r4, #4]
 8003a0e:	6923      	ldr	r3, [r4, #16]
 8003a10:	6023      	str	r3, [r4, #0]
 8003a12:	04cb      	lsls	r3, r1, #19
 8003a14:	d505      	bpl.n	8003a22 <__sflush_r+0x82>
 8003a16:	1c43      	adds	r3, r0, #1
 8003a18:	d102      	bne.n	8003a20 <__sflush_r+0x80>
 8003a1a:	682b      	ldr	r3, [r5, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d100      	bne.n	8003a22 <__sflush_r+0x82>
 8003a20:	6560      	str	r0, [r4, #84]	; 0x54
 8003a22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a24:	602e      	str	r6, [r5, #0]
 8003a26:	2900      	cmp	r1, #0
 8003a28:	d0c6      	beq.n	80039b8 <__sflush_r+0x18>
 8003a2a:	0023      	movs	r3, r4
 8003a2c:	3344      	adds	r3, #68	; 0x44
 8003a2e:	4299      	cmp	r1, r3
 8003a30:	d002      	beq.n	8003a38 <__sflush_r+0x98>
 8003a32:	0028      	movs	r0, r5
 8003a34:	f000 f9f2 	bl	8003e1c <_free_r>
 8003a38:	2000      	movs	r0, #0
 8003a3a:	6360      	str	r0, [r4, #52]	; 0x34
 8003a3c:	e7bd      	b.n	80039ba <__sflush_r+0x1a>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	0028      	movs	r0, r5
 8003a42:	6a21      	ldr	r1, [r4, #32]
 8003a44:	47b8      	blx	r7
 8003a46:	1c43      	adds	r3, r0, #1
 8003a48:	d1c5      	bne.n	80039d6 <__sflush_r+0x36>
 8003a4a:	682b      	ldr	r3, [r5, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0c2      	beq.n	80039d6 <__sflush_r+0x36>
 8003a50:	2b1d      	cmp	r3, #29
 8003a52:	d001      	beq.n	8003a58 <__sflush_r+0xb8>
 8003a54:	2b16      	cmp	r3, #22
 8003a56:	d101      	bne.n	8003a5c <__sflush_r+0xbc>
 8003a58:	602e      	str	r6, [r5, #0]
 8003a5a:	e7ad      	b.n	80039b8 <__sflush_r+0x18>
 8003a5c:	2340      	movs	r3, #64	; 0x40
 8003a5e:	89a2      	ldrh	r2, [r4, #12]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	81a3      	strh	r3, [r4, #12]
 8003a64:	e7a9      	b.n	80039ba <__sflush_r+0x1a>
 8003a66:	2340      	movs	r3, #64	; 0x40
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	e7fa      	b.n	8003a62 <__sflush_r+0xc2>
 8003a6c:	690f      	ldr	r7, [r1, #16]
 8003a6e:	2f00      	cmp	r7, #0
 8003a70:	d0a2      	beq.n	80039b8 <__sflush_r+0x18>
 8003a72:	680a      	ldr	r2, [r1, #0]
 8003a74:	600f      	str	r7, [r1, #0]
 8003a76:	1bd2      	subs	r2, r2, r7
 8003a78:	9201      	str	r2, [sp, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	079b      	lsls	r3, r3, #30
 8003a7e:	d100      	bne.n	8003a82 <__sflush_r+0xe2>
 8003a80:	694a      	ldr	r2, [r1, #20]
 8003a82:	60a2      	str	r2, [r4, #8]
 8003a84:	9b01      	ldr	r3, [sp, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	dc00      	bgt.n	8003a8c <__sflush_r+0xec>
 8003a8a:	e795      	b.n	80039b8 <__sflush_r+0x18>
 8003a8c:	003a      	movs	r2, r7
 8003a8e:	0028      	movs	r0, r5
 8003a90:	9b01      	ldr	r3, [sp, #4]
 8003a92:	6a21      	ldr	r1, [r4, #32]
 8003a94:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a96:	47b0      	blx	r6
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	dc06      	bgt.n	8003aaa <__sflush_r+0x10a>
 8003a9c:	2340      	movs	r3, #64	; 0x40
 8003a9e:	2001      	movs	r0, #1
 8003aa0:	89a2      	ldrh	r2, [r4, #12]
 8003aa2:	4240      	negs	r0, r0
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	81a3      	strh	r3, [r4, #12]
 8003aa8:	e787      	b.n	80039ba <__sflush_r+0x1a>
 8003aaa:	9b01      	ldr	r3, [sp, #4]
 8003aac:	183f      	adds	r7, r7, r0
 8003aae:	1a1b      	subs	r3, r3, r0
 8003ab0:	9301      	str	r3, [sp, #4]
 8003ab2:	e7e7      	b.n	8003a84 <__sflush_r+0xe4>
 8003ab4:	20400001 	.word	0x20400001

08003ab8 <_fflush_r>:
 8003ab8:	690b      	ldr	r3, [r1, #16]
 8003aba:	b570      	push	{r4, r5, r6, lr}
 8003abc:	0005      	movs	r5, r0
 8003abe:	000c      	movs	r4, r1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d102      	bne.n	8003aca <_fflush_r+0x12>
 8003ac4:	2500      	movs	r5, #0
 8003ac6:	0028      	movs	r0, r5
 8003ac8:	bd70      	pop	{r4, r5, r6, pc}
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d004      	beq.n	8003ad8 <_fflush_r+0x20>
 8003ace:	6983      	ldr	r3, [r0, #24]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <_fflush_r+0x20>
 8003ad4:	f000 f892 	bl	8003bfc <__sinit>
 8003ad8:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <_fflush_r+0x74>)
 8003ada:	429c      	cmp	r4, r3
 8003adc:	d11b      	bne.n	8003b16 <_fflush_r+0x5e>
 8003ade:	686c      	ldr	r4, [r5, #4]
 8003ae0:	220c      	movs	r2, #12
 8003ae2:	5ea3      	ldrsh	r3, [r4, r2]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0ed      	beq.n	8003ac4 <_fflush_r+0xc>
 8003ae8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003aea:	07d2      	lsls	r2, r2, #31
 8003aec:	d404      	bmi.n	8003af8 <_fflush_r+0x40>
 8003aee:	059b      	lsls	r3, r3, #22
 8003af0:	d402      	bmi.n	8003af8 <_fflush_r+0x40>
 8003af2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003af4:	f000 f923 	bl	8003d3e <__retarget_lock_acquire_recursive>
 8003af8:	0028      	movs	r0, r5
 8003afa:	0021      	movs	r1, r4
 8003afc:	f7ff ff50 	bl	80039a0 <__sflush_r>
 8003b00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b02:	0005      	movs	r5, r0
 8003b04:	07db      	lsls	r3, r3, #31
 8003b06:	d4de      	bmi.n	8003ac6 <_fflush_r+0xe>
 8003b08:	89a3      	ldrh	r3, [r4, #12]
 8003b0a:	059b      	lsls	r3, r3, #22
 8003b0c:	d4db      	bmi.n	8003ac6 <_fflush_r+0xe>
 8003b0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b10:	f000 f916 	bl	8003d40 <__retarget_lock_release_recursive>
 8003b14:	e7d7      	b.n	8003ac6 <_fflush_r+0xe>
 8003b16:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <_fflush_r+0x78>)
 8003b18:	429c      	cmp	r4, r3
 8003b1a:	d101      	bne.n	8003b20 <_fflush_r+0x68>
 8003b1c:	68ac      	ldr	r4, [r5, #8]
 8003b1e:	e7df      	b.n	8003ae0 <_fflush_r+0x28>
 8003b20:	4b04      	ldr	r3, [pc, #16]	; (8003b34 <_fflush_r+0x7c>)
 8003b22:	429c      	cmp	r4, r3
 8003b24:	d1dc      	bne.n	8003ae0 <_fflush_r+0x28>
 8003b26:	68ec      	ldr	r4, [r5, #12]
 8003b28:	e7da      	b.n	8003ae0 <_fflush_r+0x28>
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	08004910 	.word	0x08004910
 8003b30:	08004930 	.word	0x08004930
 8003b34:	080048f0 	.word	0x080048f0

08003b38 <std>:
 8003b38:	2300      	movs	r3, #0
 8003b3a:	b510      	push	{r4, lr}
 8003b3c:	0004      	movs	r4, r0
 8003b3e:	6003      	str	r3, [r0, #0]
 8003b40:	6043      	str	r3, [r0, #4]
 8003b42:	6083      	str	r3, [r0, #8]
 8003b44:	8181      	strh	r1, [r0, #12]
 8003b46:	6643      	str	r3, [r0, #100]	; 0x64
 8003b48:	0019      	movs	r1, r3
 8003b4a:	81c2      	strh	r2, [r0, #14]
 8003b4c:	6103      	str	r3, [r0, #16]
 8003b4e:	6143      	str	r3, [r0, #20]
 8003b50:	6183      	str	r3, [r0, #24]
 8003b52:	2208      	movs	r2, #8
 8003b54:	305c      	adds	r0, #92	; 0x5c
 8003b56:	f7ff fdb1 	bl	80036bc <memset>
 8003b5a:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <std+0x38>)
 8003b5c:	6224      	str	r4, [r4, #32]
 8003b5e:	6263      	str	r3, [r4, #36]	; 0x24
 8003b60:	4b04      	ldr	r3, [pc, #16]	; (8003b74 <std+0x3c>)
 8003b62:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b64:	4b04      	ldr	r3, [pc, #16]	; (8003b78 <std+0x40>)
 8003b66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b68:	4b04      	ldr	r3, [pc, #16]	; (8003b7c <std+0x44>)
 8003b6a:	6323      	str	r3, [r4, #48]	; 0x30
 8003b6c:	bd10      	pop	{r4, pc}
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	080045cd 	.word	0x080045cd
 8003b74:	080045f5 	.word	0x080045f5
 8003b78:	0800462d 	.word	0x0800462d
 8003b7c:	08004659 	.word	0x08004659

08003b80 <_cleanup_r>:
 8003b80:	b510      	push	{r4, lr}
 8003b82:	4902      	ldr	r1, [pc, #8]	; (8003b8c <_cleanup_r+0xc>)
 8003b84:	f000 f8ba 	bl	8003cfc <_fwalk_reent>
 8003b88:	bd10      	pop	{r4, pc}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	08003ab9 	.word	0x08003ab9

08003b90 <__sfmoreglue>:
 8003b90:	b570      	push	{r4, r5, r6, lr}
 8003b92:	2568      	movs	r5, #104	; 0x68
 8003b94:	1e4a      	subs	r2, r1, #1
 8003b96:	4355      	muls	r5, r2
 8003b98:	000e      	movs	r6, r1
 8003b9a:	0029      	movs	r1, r5
 8003b9c:	3174      	adds	r1, #116	; 0x74
 8003b9e:	f000 f9a9 	bl	8003ef4 <_malloc_r>
 8003ba2:	1e04      	subs	r4, r0, #0
 8003ba4:	d008      	beq.n	8003bb8 <__sfmoreglue+0x28>
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	002a      	movs	r2, r5
 8003baa:	6001      	str	r1, [r0, #0]
 8003bac:	6046      	str	r6, [r0, #4]
 8003bae:	300c      	adds	r0, #12
 8003bb0:	60a0      	str	r0, [r4, #8]
 8003bb2:	3268      	adds	r2, #104	; 0x68
 8003bb4:	f7ff fd82 	bl	80036bc <memset>
 8003bb8:	0020      	movs	r0, r4
 8003bba:	bd70      	pop	{r4, r5, r6, pc}

08003bbc <__sfp_lock_acquire>:
 8003bbc:	b510      	push	{r4, lr}
 8003bbe:	4802      	ldr	r0, [pc, #8]	; (8003bc8 <__sfp_lock_acquire+0xc>)
 8003bc0:	f000 f8bd 	bl	8003d3e <__retarget_lock_acquire_recursive>
 8003bc4:	bd10      	pop	{r4, pc}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	20000199 	.word	0x20000199

08003bcc <__sfp_lock_release>:
 8003bcc:	b510      	push	{r4, lr}
 8003bce:	4802      	ldr	r0, [pc, #8]	; (8003bd8 <__sfp_lock_release+0xc>)
 8003bd0:	f000 f8b6 	bl	8003d40 <__retarget_lock_release_recursive>
 8003bd4:	bd10      	pop	{r4, pc}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	20000199 	.word	0x20000199

08003bdc <__sinit_lock_acquire>:
 8003bdc:	b510      	push	{r4, lr}
 8003bde:	4802      	ldr	r0, [pc, #8]	; (8003be8 <__sinit_lock_acquire+0xc>)
 8003be0:	f000 f8ad 	bl	8003d3e <__retarget_lock_acquire_recursive>
 8003be4:	bd10      	pop	{r4, pc}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	2000019a 	.word	0x2000019a

08003bec <__sinit_lock_release>:
 8003bec:	b510      	push	{r4, lr}
 8003bee:	4802      	ldr	r0, [pc, #8]	; (8003bf8 <__sinit_lock_release+0xc>)
 8003bf0:	f000 f8a6 	bl	8003d40 <__retarget_lock_release_recursive>
 8003bf4:	bd10      	pop	{r4, pc}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	2000019a 	.word	0x2000019a

08003bfc <__sinit>:
 8003bfc:	b513      	push	{r0, r1, r4, lr}
 8003bfe:	0004      	movs	r4, r0
 8003c00:	f7ff ffec 	bl	8003bdc <__sinit_lock_acquire>
 8003c04:	69a3      	ldr	r3, [r4, #24]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <__sinit+0x14>
 8003c0a:	f7ff ffef 	bl	8003bec <__sinit_lock_release>
 8003c0e:	bd13      	pop	{r0, r1, r4, pc}
 8003c10:	64a3      	str	r3, [r4, #72]	; 0x48
 8003c12:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003c14:	6523      	str	r3, [r4, #80]	; 0x50
 8003c16:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <__sinit+0x68>)
 8003c18:	4a13      	ldr	r2, [pc, #76]	; (8003c68 <__sinit+0x6c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003c1e:	9301      	str	r3, [sp, #4]
 8003c20:	42a3      	cmp	r3, r4
 8003c22:	d101      	bne.n	8003c28 <__sinit+0x2c>
 8003c24:	2301      	movs	r3, #1
 8003c26:	61a3      	str	r3, [r4, #24]
 8003c28:	0020      	movs	r0, r4
 8003c2a:	f000 f81f 	bl	8003c6c <__sfp>
 8003c2e:	6060      	str	r0, [r4, #4]
 8003c30:	0020      	movs	r0, r4
 8003c32:	f000 f81b 	bl	8003c6c <__sfp>
 8003c36:	60a0      	str	r0, [r4, #8]
 8003c38:	0020      	movs	r0, r4
 8003c3a:	f000 f817 	bl	8003c6c <__sfp>
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2104      	movs	r1, #4
 8003c42:	60e0      	str	r0, [r4, #12]
 8003c44:	6860      	ldr	r0, [r4, #4]
 8003c46:	f7ff ff77 	bl	8003b38 <std>
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	2109      	movs	r1, #9
 8003c4e:	68a0      	ldr	r0, [r4, #8]
 8003c50:	f7ff ff72 	bl	8003b38 <std>
 8003c54:	2202      	movs	r2, #2
 8003c56:	2112      	movs	r1, #18
 8003c58:	68e0      	ldr	r0, [r4, #12]
 8003c5a:	f7ff ff6d 	bl	8003b38 <std>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	61a3      	str	r3, [r4, #24]
 8003c62:	e7d2      	b.n	8003c0a <__sinit+0xe>
 8003c64:	080048ec 	.word	0x080048ec
 8003c68:	08003b81 	.word	0x08003b81

08003c6c <__sfp>:
 8003c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6e:	0007      	movs	r7, r0
 8003c70:	f7ff ffa4 	bl	8003bbc <__sfp_lock_acquire>
 8003c74:	4b1f      	ldr	r3, [pc, #124]	; (8003cf4 <__sfp+0x88>)
 8003c76:	681e      	ldr	r6, [r3, #0]
 8003c78:	69b3      	ldr	r3, [r6, #24]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d102      	bne.n	8003c84 <__sfp+0x18>
 8003c7e:	0030      	movs	r0, r6
 8003c80:	f7ff ffbc 	bl	8003bfc <__sinit>
 8003c84:	3648      	adds	r6, #72	; 0x48
 8003c86:	68b4      	ldr	r4, [r6, #8]
 8003c88:	6873      	ldr	r3, [r6, #4]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	d504      	bpl.n	8003c98 <__sfp+0x2c>
 8003c8e:	6833      	ldr	r3, [r6, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d022      	beq.n	8003cda <__sfp+0x6e>
 8003c94:	6836      	ldr	r6, [r6, #0]
 8003c96:	e7f6      	b.n	8003c86 <__sfp+0x1a>
 8003c98:	220c      	movs	r2, #12
 8003c9a:	5ea5      	ldrsh	r5, [r4, r2]
 8003c9c:	2d00      	cmp	r5, #0
 8003c9e:	d11a      	bne.n	8003cd6 <__sfp+0x6a>
 8003ca0:	0020      	movs	r0, r4
 8003ca2:	4b15      	ldr	r3, [pc, #84]	; (8003cf8 <__sfp+0x8c>)
 8003ca4:	3058      	adds	r0, #88	; 0x58
 8003ca6:	60e3      	str	r3, [r4, #12]
 8003ca8:	6665      	str	r5, [r4, #100]	; 0x64
 8003caa:	f000 f847 	bl	8003d3c <__retarget_lock_init_recursive>
 8003cae:	f7ff ff8d 	bl	8003bcc <__sfp_lock_release>
 8003cb2:	0020      	movs	r0, r4
 8003cb4:	2208      	movs	r2, #8
 8003cb6:	0029      	movs	r1, r5
 8003cb8:	6025      	str	r5, [r4, #0]
 8003cba:	60a5      	str	r5, [r4, #8]
 8003cbc:	6065      	str	r5, [r4, #4]
 8003cbe:	6125      	str	r5, [r4, #16]
 8003cc0:	6165      	str	r5, [r4, #20]
 8003cc2:	61a5      	str	r5, [r4, #24]
 8003cc4:	305c      	adds	r0, #92	; 0x5c
 8003cc6:	f7ff fcf9 	bl	80036bc <memset>
 8003cca:	6365      	str	r5, [r4, #52]	; 0x34
 8003ccc:	63a5      	str	r5, [r4, #56]	; 0x38
 8003cce:	64a5      	str	r5, [r4, #72]	; 0x48
 8003cd0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003cd2:	0020      	movs	r0, r4
 8003cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cd6:	3468      	adds	r4, #104	; 0x68
 8003cd8:	e7d7      	b.n	8003c8a <__sfp+0x1e>
 8003cda:	2104      	movs	r1, #4
 8003cdc:	0038      	movs	r0, r7
 8003cde:	f7ff ff57 	bl	8003b90 <__sfmoreglue>
 8003ce2:	1e04      	subs	r4, r0, #0
 8003ce4:	6030      	str	r0, [r6, #0]
 8003ce6:	d1d5      	bne.n	8003c94 <__sfp+0x28>
 8003ce8:	f7ff ff70 	bl	8003bcc <__sfp_lock_release>
 8003cec:	230c      	movs	r3, #12
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	e7ef      	b.n	8003cd2 <__sfp+0x66>
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	080048ec 	.word	0x080048ec
 8003cf8:	ffff0001 	.word	0xffff0001

08003cfc <_fwalk_reent>:
 8003cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cfe:	0004      	movs	r4, r0
 8003d00:	0006      	movs	r6, r0
 8003d02:	2700      	movs	r7, #0
 8003d04:	9101      	str	r1, [sp, #4]
 8003d06:	3448      	adds	r4, #72	; 0x48
 8003d08:	6863      	ldr	r3, [r4, #4]
 8003d0a:	68a5      	ldr	r5, [r4, #8]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	9b00      	ldr	r3, [sp, #0]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	d504      	bpl.n	8003d20 <_fwalk_reent+0x24>
 8003d16:	6824      	ldr	r4, [r4, #0]
 8003d18:	2c00      	cmp	r4, #0
 8003d1a:	d1f5      	bne.n	8003d08 <_fwalk_reent+0xc>
 8003d1c:	0038      	movs	r0, r7
 8003d1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d20:	89ab      	ldrh	r3, [r5, #12]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d908      	bls.n	8003d38 <_fwalk_reent+0x3c>
 8003d26:	220e      	movs	r2, #14
 8003d28:	5eab      	ldrsh	r3, [r5, r2]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	d004      	beq.n	8003d38 <_fwalk_reent+0x3c>
 8003d2e:	0029      	movs	r1, r5
 8003d30:	0030      	movs	r0, r6
 8003d32:	9b01      	ldr	r3, [sp, #4]
 8003d34:	4798      	blx	r3
 8003d36:	4307      	orrs	r7, r0
 8003d38:	3568      	adds	r5, #104	; 0x68
 8003d3a:	e7e8      	b.n	8003d0e <_fwalk_reent+0x12>

08003d3c <__retarget_lock_init_recursive>:
 8003d3c:	4770      	bx	lr

08003d3e <__retarget_lock_acquire_recursive>:
 8003d3e:	4770      	bx	lr

08003d40 <__retarget_lock_release_recursive>:
 8003d40:	4770      	bx	lr
	...

08003d44 <__swhatbuf_r>:
 8003d44:	b570      	push	{r4, r5, r6, lr}
 8003d46:	000e      	movs	r6, r1
 8003d48:	001d      	movs	r5, r3
 8003d4a:	230e      	movs	r3, #14
 8003d4c:	5ec9      	ldrsh	r1, [r1, r3]
 8003d4e:	0014      	movs	r4, r2
 8003d50:	b096      	sub	sp, #88	; 0x58
 8003d52:	2900      	cmp	r1, #0
 8003d54:	da08      	bge.n	8003d68 <__swhatbuf_r+0x24>
 8003d56:	220c      	movs	r2, #12
 8003d58:	5eb3      	ldrsh	r3, [r6, r2]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	602a      	str	r2, [r5, #0]
 8003d5e:	061b      	lsls	r3, r3, #24
 8003d60:	d411      	bmi.n	8003d86 <__swhatbuf_r+0x42>
 8003d62:	2380      	movs	r3, #128	; 0x80
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	e00f      	b.n	8003d88 <__swhatbuf_r+0x44>
 8003d68:	466a      	mov	r2, sp
 8003d6a:	f000 fca1 	bl	80046b0 <_fstat_r>
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	dbf1      	blt.n	8003d56 <__swhatbuf_r+0x12>
 8003d72:	23f0      	movs	r3, #240	; 0xf0
 8003d74:	9901      	ldr	r1, [sp, #4]
 8003d76:	021b      	lsls	r3, r3, #8
 8003d78:	4019      	ands	r1, r3
 8003d7a:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <__swhatbuf_r+0x4c>)
 8003d7c:	18c9      	adds	r1, r1, r3
 8003d7e:	424b      	negs	r3, r1
 8003d80:	4159      	adcs	r1, r3
 8003d82:	6029      	str	r1, [r5, #0]
 8003d84:	e7ed      	b.n	8003d62 <__swhatbuf_r+0x1e>
 8003d86:	2340      	movs	r3, #64	; 0x40
 8003d88:	2000      	movs	r0, #0
 8003d8a:	6023      	str	r3, [r4, #0]
 8003d8c:	b016      	add	sp, #88	; 0x58
 8003d8e:	bd70      	pop	{r4, r5, r6, pc}
 8003d90:	ffffe000 	.word	0xffffe000

08003d94 <__smakebuf_r>:
 8003d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d96:	2602      	movs	r6, #2
 8003d98:	898b      	ldrh	r3, [r1, #12]
 8003d9a:	0005      	movs	r5, r0
 8003d9c:	000c      	movs	r4, r1
 8003d9e:	4233      	tst	r3, r6
 8003da0:	d006      	beq.n	8003db0 <__smakebuf_r+0x1c>
 8003da2:	0023      	movs	r3, r4
 8003da4:	3347      	adds	r3, #71	; 0x47
 8003da6:	6023      	str	r3, [r4, #0]
 8003da8:	6123      	str	r3, [r4, #16]
 8003daa:	2301      	movs	r3, #1
 8003dac:	6163      	str	r3, [r4, #20]
 8003dae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003db0:	466a      	mov	r2, sp
 8003db2:	ab01      	add	r3, sp, #4
 8003db4:	f7ff ffc6 	bl	8003d44 <__swhatbuf_r>
 8003db8:	9900      	ldr	r1, [sp, #0]
 8003dba:	0007      	movs	r7, r0
 8003dbc:	0028      	movs	r0, r5
 8003dbe:	f000 f899 	bl	8003ef4 <_malloc_r>
 8003dc2:	2800      	cmp	r0, #0
 8003dc4:	d108      	bne.n	8003dd8 <__smakebuf_r+0x44>
 8003dc6:	220c      	movs	r2, #12
 8003dc8:	5ea3      	ldrsh	r3, [r4, r2]
 8003dca:	059a      	lsls	r2, r3, #22
 8003dcc:	d4ef      	bmi.n	8003dae <__smakebuf_r+0x1a>
 8003dce:	2203      	movs	r2, #3
 8003dd0:	4393      	bics	r3, r2
 8003dd2:	431e      	orrs	r6, r3
 8003dd4:	81a6      	strh	r6, [r4, #12]
 8003dd6:	e7e4      	b.n	8003da2 <__smakebuf_r+0xe>
 8003dd8:	4b0f      	ldr	r3, [pc, #60]	; (8003e18 <__smakebuf_r+0x84>)
 8003dda:	62ab      	str	r3, [r5, #40]	; 0x28
 8003ddc:	2380      	movs	r3, #128	; 0x80
 8003dde:	89a2      	ldrh	r2, [r4, #12]
 8003de0:	6020      	str	r0, [r4, #0]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	81a3      	strh	r3, [r4, #12]
 8003de6:	9b00      	ldr	r3, [sp, #0]
 8003de8:	6120      	str	r0, [r4, #16]
 8003dea:	6163      	str	r3, [r4, #20]
 8003dec:	9b01      	ldr	r3, [sp, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00d      	beq.n	8003e0e <__smakebuf_r+0x7a>
 8003df2:	0028      	movs	r0, r5
 8003df4:	230e      	movs	r3, #14
 8003df6:	5ee1      	ldrsh	r1, [r4, r3]
 8003df8:	f000 fc6c 	bl	80046d4 <_isatty_r>
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	d006      	beq.n	8003e0e <__smakebuf_r+0x7a>
 8003e00:	2203      	movs	r2, #3
 8003e02:	89a3      	ldrh	r3, [r4, #12]
 8003e04:	4393      	bics	r3, r2
 8003e06:	001a      	movs	r2, r3
 8003e08:	2301      	movs	r3, #1
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	81a3      	strh	r3, [r4, #12]
 8003e0e:	89a0      	ldrh	r0, [r4, #12]
 8003e10:	4307      	orrs	r7, r0
 8003e12:	81a7      	strh	r7, [r4, #12]
 8003e14:	e7cb      	b.n	8003dae <__smakebuf_r+0x1a>
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	08003b81 	.word	0x08003b81

08003e1c <_free_r>:
 8003e1c:	b570      	push	{r4, r5, r6, lr}
 8003e1e:	0005      	movs	r5, r0
 8003e20:	2900      	cmp	r1, #0
 8003e22:	d010      	beq.n	8003e46 <_free_r+0x2a>
 8003e24:	1f0c      	subs	r4, r1, #4
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	da00      	bge.n	8003e2e <_free_r+0x12>
 8003e2c:	18e4      	adds	r4, r4, r3
 8003e2e:	0028      	movs	r0, r5
 8003e30:	f000 fc9e 	bl	8004770 <__malloc_lock>
 8003e34:	4a1d      	ldr	r2, [pc, #116]	; (8003eac <_free_r+0x90>)
 8003e36:	6813      	ldr	r3, [r2, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d105      	bne.n	8003e48 <_free_r+0x2c>
 8003e3c:	6063      	str	r3, [r4, #4]
 8003e3e:	6014      	str	r4, [r2, #0]
 8003e40:	0028      	movs	r0, r5
 8003e42:	f000 fc9d 	bl	8004780 <__malloc_unlock>
 8003e46:	bd70      	pop	{r4, r5, r6, pc}
 8003e48:	42a3      	cmp	r3, r4
 8003e4a:	d908      	bls.n	8003e5e <_free_r+0x42>
 8003e4c:	6821      	ldr	r1, [r4, #0]
 8003e4e:	1860      	adds	r0, r4, r1
 8003e50:	4283      	cmp	r3, r0
 8003e52:	d1f3      	bne.n	8003e3c <_free_r+0x20>
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	1841      	adds	r1, r0, r1
 8003e5a:	6021      	str	r1, [r4, #0]
 8003e5c:	e7ee      	b.n	8003e3c <_free_r+0x20>
 8003e5e:	001a      	movs	r2, r3
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <_free_r+0x4e>
 8003e66:	42a3      	cmp	r3, r4
 8003e68:	d9f9      	bls.n	8003e5e <_free_r+0x42>
 8003e6a:	6811      	ldr	r1, [r2, #0]
 8003e6c:	1850      	adds	r0, r2, r1
 8003e6e:	42a0      	cmp	r0, r4
 8003e70:	d10b      	bne.n	8003e8a <_free_r+0x6e>
 8003e72:	6820      	ldr	r0, [r4, #0]
 8003e74:	1809      	adds	r1, r1, r0
 8003e76:	1850      	adds	r0, r2, r1
 8003e78:	6011      	str	r1, [r2, #0]
 8003e7a:	4283      	cmp	r3, r0
 8003e7c:	d1e0      	bne.n	8003e40 <_free_r+0x24>
 8003e7e:	6818      	ldr	r0, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	1841      	adds	r1, r0, r1
 8003e84:	6011      	str	r1, [r2, #0]
 8003e86:	6053      	str	r3, [r2, #4]
 8003e88:	e7da      	b.n	8003e40 <_free_r+0x24>
 8003e8a:	42a0      	cmp	r0, r4
 8003e8c:	d902      	bls.n	8003e94 <_free_r+0x78>
 8003e8e:	230c      	movs	r3, #12
 8003e90:	602b      	str	r3, [r5, #0]
 8003e92:	e7d5      	b.n	8003e40 <_free_r+0x24>
 8003e94:	6821      	ldr	r1, [r4, #0]
 8003e96:	1860      	adds	r0, r4, r1
 8003e98:	4283      	cmp	r3, r0
 8003e9a:	d103      	bne.n	8003ea4 <_free_r+0x88>
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	1841      	adds	r1, r0, r1
 8003ea2:	6021      	str	r1, [r4, #0]
 8003ea4:	6063      	str	r3, [r4, #4]
 8003ea6:	6054      	str	r4, [r2, #4]
 8003ea8:	e7ca      	b.n	8003e40 <_free_r+0x24>
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	2000019c 	.word	0x2000019c

08003eb0 <sbrk_aligned>:
 8003eb0:	b570      	push	{r4, r5, r6, lr}
 8003eb2:	4e0f      	ldr	r6, [pc, #60]	; (8003ef0 <sbrk_aligned+0x40>)
 8003eb4:	000d      	movs	r5, r1
 8003eb6:	6831      	ldr	r1, [r6, #0]
 8003eb8:	0004      	movs	r4, r0
 8003eba:	2900      	cmp	r1, #0
 8003ebc:	d102      	bne.n	8003ec4 <sbrk_aligned+0x14>
 8003ebe:	f000 fb73 	bl	80045a8 <_sbrk_r>
 8003ec2:	6030      	str	r0, [r6, #0]
 8003ec4:	0029      	movs	r1, r5
 8003ec6:	0020      	movs	r0, r4
 8003ec8:	f000 fb6e 	bl	80045a8 <_sbrk_r>
 8003ecc:	1c43      	adds	r3, r0, #1
 8003ece:	d00a      	beq.n	8003ee6 <sbrk_aligned+0x36>
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	1cc5      	adds	r5, r0, #3
 8003ed4:	439d      	bics	r5, r3
 8003ed6:	42a8      	cmp	r0, r5
 8003ed8:	d007      	beq.n	8003eea <sbrk_aligned+0x3a>
 8003eda:	1a29      	subs	r1, r5, r0
 8003edc:	0020      	movs	r0, r4
 8003ede:	f000 fb63 	bl	80045a8 <_sbrk_r>
 8003ee2:	1c43      	adds	r3, r0, #1
 8003ee4:	d101      	bne.n	8003eea <sbrk_aligned+0x3a>
 8003ee6:	2501      	movs	r5, #1
 8003ee8:	426d      	negs	r5, r5
 8003eea:	0028      	movs	r0, r5
 8003eec:	bd70      	pop	{r4, r5, r6, pc}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	200001a0 	.word	0x200001a0

08003ef4 <_malloc_r>:
 8003ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ef6:	2203      	movs	r2, #3
 8003ef8:	1ccb      	adds	r3, r1, #3
 8003efa:	4393      	bics	r3, r2
 8003efc:	3308      	adds	r3, #8
 8003efe:	0006      	movs	r6, r0
 8003f00:	001f      	movs	r7, r3
 8003f02:	2b0c      	cmp	r3, #12
 8003f04:	d232      	bcs.n	8003f6c <_malloc_r+0x78>
 8003f06:	270c      	movs	r7, #12
 8003f08:	42b9      	cmp	r1, r7
 8003f0a:	d831      	bhi.n	8003f70 <_malloc_r+0x7c>
 8003f0c:	0030      	movs	r0, r6
 8003f0e:	f000 fc2f 	bl	8004770 <__malloc_lock>
 8003f12:	4d32      	ldr	r5, [pc, #200]	; (8003fdc <_malloc_r+0xe8>)
 8003f14:	682b      	ldr	r3, [r5, #0]
 8003f16:	001c      	movs	r4, r3
 8003f18:	2c00      	cmp	r4, #0
 8003f1a:	d12e      	bne.n	8003f7a <_malloc_r+0x86>
 8003f1c:	0039      	movs	r1, r7
 8003f1e:	0030      	movs	r0, r6
 8003f20:	f7ff ffc6 	bl	8003eb0 <sbrk_aligned>
 8003f24:	0004      	movs	r4, r0
 8003f26:	1c43      	adds	r3, r0, #1
 8003f28:	d11e      	bne.n	8003f68 <_malloc_r+0x74>
 8003f2a:	682c      	ldr	r4, [r5, #0]
 8003f2c:	0025      	movs	r5, r4
 8003f2e:	2d00      	cmp	r5, #0
 8003f30:	d14a      	bne.n	8003fc8 <_malloc_r+0xd4>
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	0029      	movs	r1, r5
 8003f36:	18e3      	adds	r3, r4, r3
 8003f38:	0030      	movs	r0, r6
 8003f3a:	9301      	str	r3, [sp, #4]
 8003f3c:	f000 fb34 	bl	80045a8 <_sbrk_r>
 8003f40:	9b01      	ldr	r3, [sp, #4]
 8003f42:	4283      	cmp	r3, r0
 8003f44:	d143      	bne.n	8003fce <_malloc_r+0xda>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	3703      	adds	r7, #3
 8003f4a:	1aff      	subs	r7, r7, r3
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	439f      	bics	r7, r3
 8003f50:	3708      	adds	r7, #8
 8003f52:	2f0c      	cmp	r7, #12
 8003f54:	d200      	bcs.n	8003f58 <_malloc_r+0x64>
 8003f56:	270c      	movs	r7, #12
 8003f58:	0039      	movs	r1, r7
 8003f5a:	0030      	movs	r0, r6
 8003f5c:	f7ff ffa8 	bl	8003eb0 <sbrk_aligned>
 8003f60:	1c43      	adds	r3, r0, #1
 8003f62:	d034      	beq.n	8003fce <_malloc_r+0xda>
 8003f64:	6823      	ldr	r3, [r4, #0]
 8003f66:	19df      	adds	r7, r3, r7
 8003f68:	6027      	str	r7, [r4, #0]
 8003f6a:	e013      	b.n	8003f94 <_malloc_r+0xa0>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	dacb      	bge.n	8003f08 <_malloc_r+0x14>
 8003f70:	230c      	movs	r3, #12
 8003f72:	2500      	movs	r5, #0
 8003f74:	6033      	str	r3, [r6, #0]
 8003f76:	0028      	movs	r0, r5
 8003f78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f7a:	6822      	ldr	r2, [r4, #0]
 8003f7c:	1bd1      	subs	r1, r2, r7
 8003f7e:	d420      	bmi.n	8003fc2 <_malloc_r+0xce>
 8003f80:	290b      	cmp	r1, #11
 8003f82:	d917      	bls.n	8003fb4 <_malloc_r+0xc0>
 8003f84:	19e2      	adds	r2, r4, r7
 8003f86:	6027      	str	r7, [r4, #0]
 8003f88:	42a3      	cmp	r3, r4
 8003f8a:	d111      	bne.n	8003fb0 <_malloc_r+0xbc>
 8003f8c:	602a      	str	r2, [r5, #0]
 8003f8e:	6863      	ldr	r3, [r4, #4]
 8003f90:	6011      	str	r1, [r2, #0]
 8003f92:	6053      	str	r3, [r2, #4]
 8003f94:	0030      	movs	r0, r6
 8003f96:	0025      	movs	r5, r4
 8003f98:	f000 fbf2 	bl	8004780 <__malloc_unlock>
 8003f9c:	2207      	movs	r2, #7
 8003f9e:	350b      	adds	r5, #11
 8003fa0:	1d23      	adds	r3, r4, #4
 8003fa2:	4395      	bics	r5, r2
 8003fa4:	1aea      	subs	r2, r5, r3
 8003fa6:	429d      	cmp	r5, r3
 8003fa8:	d0e5      	beq.n	8003f76 <_malloc_r+0x82>
 8003faa:	1b5b      	subs	r3, r3, r5
 8003fac:	50a3      	str	r3, [r4, r2]
 8003fae:	e7e2      	b.n	8003f76 <_malloc_r+0x82>
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	e7ec      	b.n	8003f8e <_malloc_r+0x9a>
 8003fb4:	6862      	ldr	r2, [r4, #4]
 8003fb6:	42a3      	cmp	r3, r4
 8003fb8:	d101      	bne.n	8003fbe <_malloc_r+0xca>
 8003fba:	602a      	str	r2, [r5, #0]
 8003fbc:	e7ea      	b.n	8003f94 <_malloc_r+0xa0>
 8003fbe:	605a      	str	r2, [r3, #4]
 8003fc0:	e7e8      	b.n	8003f94 <_malloc_r+0xa0>
 8003fc2:	0023      	movs	r3, r4
 8003fc4:	6864      	ldr	r4, [r4, #4]
 8003fc6:	e7a7      	b.n	8003f18 <_malloc_r+0x24>
 8003fc8:	002c      	movs	r4, r5
 8003fca:	686d      	ldr	r5, [r5, #4]
 8003fcc:	e7af      	b.n	8003f2e <_malloc_r+0x3a>
 8003fce:	230c      	movs	r3, #12
 8003fd0:	0030      	movs	r0, r6
 8003fd2:	6033      	str	r3, [r6, #0]
 8003fd4:	f000 fbd4 	bl	8004780 <__malloc_unlock>
 8003fd8:	e7cd      	b.n	8003f76 <_malloc_r+0x82>
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	2000019c 	.word	0x2000019c

08003fe0 <__ssputs_r>:
 8003fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fe2:	688e      	ldr	r6, [r1, #8]
 8003fe4:	b085      	sub	sp, #20
 8003fe6:	0007      	movs	r7, r0
 8003fe8:	000c      	movs	r4, r1
 8003fea:	9203      	str	r2, [sp, #12]
 8003fec:	9301      	str	r3, [sp, #4]
 8003fee:	429e      	cmp	r6, r3
 8003ff0:	d83c      	bhi.n	800406c <__ssputs_r+0x8c>
 8003ff2:	2390      	movs	r3, #144	; 0x90
 8003ff4:	898a      	ldrh	r2, [r1, #12]
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	421a      	tst	r2, r3
 8003ffa:	d034      	beq.n	8004066 <__ssputs_r+0x86>
 8003ffc:	6909      	ldr	r1, [r1, #16]
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	6960      	ldr	r0, [r4, #20]
 8004002:	1a5b      	subs	r3, r3, r1
 8004004:	9302      	str	r3, [sp, #8]
 8004006:	2303      	movs	r3, #3
 8004008:	4343      	muls	r3, r0
 800400a:	0fdd      	lsrs	r5, r3, #31
 800400c:	18ed      	adds	r5, r5, r3
 800400e:	9b01      	ldr	r3, [sp, #4]
 8004010:	9802      	ldr	r0, [sp, #8]
 8004012:	3301      	adds	r3, #1
 8004014:	181b      	adds	r3, r3, r0
 8004016:	106d      	asrs	r5, r5, #1
 8004018:	42ab      	cmp	r3, r5
 800401a:	d900      	bls.n	800401e <__ssputs_r+0x3e>
 800401c:	001d      	movs	r5, r3
 800401e:	0553      	lsls	r3, r2, #21
 8004020:	d532      	bpl.n	8004088 <__ssputs_r+0xa8>
 8004022:	0029      	movs	r1, r5
 8004024:	0038      	movs	r0, r7
 8004026:	f7ff ff65 	bl	8003ef4 <_malloc_r>
 800402a:	1e06      	subs	r6, r0, #0
 800402c:	d109      	bne.n	8004042 <__ssputs_r+0x62>
 800402e:	230c      	movs	r3, #12
 8004030:	603b      	str	r3, [r7, #0]
 8004032:	2340      	movs	r3, #64	; 0x40
 8004034:	2001      	movs	r0, #1
 8004036:	89a2      	ldrh	r2, [r4, #12]
 8004038:	4240      	negs	r0, r0
 800403a:	4313      	orrs	r3, r2
 800403c:	81a3      	strh	r3, [r4, #12]
 800403e:	b005      	add	sp, #20
 8004040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004042:	9a02      	ldr	r2, [sp, #8]
 8004044:	6921      	ldr	r1, [r4, #16]
 8004046:	f000 fb76 	bl	8004736 <memcpy>
 800404a:	89a3      	ldrh	r3, [r4, #12]
 800404c:	4a14      	ldr	r2, [pc, #80]	; (80040a0 <__ssputs_r+0xc0>)
 800404e:	401a      	ands	r2, r3
 8004050:	2380      	movs	r3, #128	; 0x80
 8004052:	4313      	orrs	r3, r2
 8004054:	81a3      	strh	r3, [r4, #12]
 8004056:	9b02      	ldr	r3, [sp, #8]
 8004058:	6126      	str	r6, [r4, #16]
 800405a:	18f6      	adds	r6, r6, r3
 800405c:	6026      	str	r6, [r4, #0]
 800405e:	6165      	str	r5, [r4, #20]
 8004060:	9e01      	ldr	r6, [sp, #4]
 8004062:	1aed      	subs	r5, r5, r3
 8004064:	60a5      	str	r5, [r4, #8]
 8004066:	9b01      	ldr	r3, [sp, #4]
 8004068:	429e      	cmp	r6, r3
 800406a:	d900      	bls.n	800406e <__ssputs_r+0x8e>
 800406c:	9e01      	ldr	r6, [sp, #4]
 800406e:	0032      	movs	r2, r6
 8004070:	9903      	ldr	r1, [sp, #12]
 8004072:	6820      	ldr	r0, [r4, #0]
 8004074:	f000 fb68 	bl	8004748 <memmove>
 8004078:	68a3      	ldr	r3, [r4, #8]
 800407a:	2000      	movs	r0, #0
 800407c:	1b9b      	subs	r3, r3, r6
 800407e:	60a3      	str	r3, [r4, #8]
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	199e      	adds	r6, r3, r6
 8004084:	6026      	str	r6, [r4, #0]
 8004086:	e7da      	b.n	800403e <__ssputs_r+0x5e>
 8004088:	002a      	movs	r2, r5
 800408a:	0038      	movs	r0, r7
 800408c:	f000 fb80 	bl	8004790 <_realloc_r>
 8004090:	1e06      	subs	r6, r0, #0
 8004092:	d1e0      	bne.n	8004056 <__ssputs_r+0x76>
 8004094:	0038      	movs	r0, r7
 8004096:	6921      	ldr	r1, [r4, #16]
 8004098:	f7ff fec0 	bl	8003e1c <_free_r>
 800409c:	e7c7      	b.n	800402e <__ssputs_r+0x4e>
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	fffffb7f 	.word	0xfffffb7f

080040a4 <_svfiprintf_r>:
 80040a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040a6:	b0a1      	sub	sp, #132	; 0x84
 80040a8:	9003      	str	r0, [sp, #12]
 80040aa:	001d      	movs	r5, r3
 80040ac:	898b      	ldrh	r3, [r1, #12]
 80040ae:	000f      	movs	r7, r1
 80040b0:	0016      	movs	r6, r2
 80040b2:	061b      	lsls	r3, r3, #24
 80040b4:	d511      	bpl.n	80040da <_svfiprintf_r+0x36>
 80040b6:	690b      	ldr	r3, [r1, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10e      	bne.n	80040da <_svfiprintf_r+0x36>
 80040bc:	2140      	movs	r1, #64	; 0x40
 80040be:	f7ff ff19 	bl	8003ef4 <_malloc_r>
 80040c2:	6038      	str	r0, [r7, #0]
 80040c4:	6138      	str	r0, [r7, #16]
 80040c6:	2800      	cmp	r0, #0
 80040c8:	d105      	bne.n	80040d6 <_svfiprintf_r+0x32>
 80040ca:	230c      	movs	r3, #12
 80040cc:	9a03      	ldr	r2, [sp, #12]
 80040ce:	3801      	subs	r0, #1
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	b021      	add	sp, #132	; 0x84
 80040d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040d6:	2340      	movs	r3, #64	; 0x40
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	2300      	movs	r3, #0
 80040dc:	ac08      	add	r4, sp, #32
 80040de:	6163      	str	r3, [r4, #20]
 80040e0:	3320      	adds	r3, #32
 80040e2:	7663      	strb	r3, [r4, #25]
 80040e4:	3310      	adds	r3, #16
 80040e6:	76a3      	strb	r3, [r4, #26]
 80040e8:	9507      	str	r5, [sp, #28]
 80040ea:	0035      	movs	r5, r6
 80040ec:	782b      	ldrb	r3, [r5, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <_svfiprintf_r+0x52>
 80040f2:	2b25      	cmp	r3, #37	; 0x25
 80040f4:	d147      	bne.n	8004186 <_svfiprintf_r+0xe2>
 80040f6:	1bab      	subs	r3, r5, r6
 80040f8:	9305      	str	r3, [sp, #20]
 80040fa:	42b5      	cmp	r5, r6
 80040fc:	d00c      	beq.n	8004118 <_svfiprintf_r+0x74>
 80040fe:	0032      	movs	r2, r6
 8004100:	0039      	movs	r1, r7
 8004102:	9803      	ldr	r0, [sp, #12]
 8004104:	f7ff ff6c 	bl	8003fe0 <__ssputs_r>
 8004108:	1c43      	adds	r3, r0, #1
 800410a:	d100      	bne.n	800410e <_svfiprintf_r+0x6a>
 800410c:	e0ae      	b.n	800426c <_svfiprintf_r+0x1c8>
 800410e:	6962      	ldr	r2, [r4, #20]
 8004110:	9b05      	ldr	r3, [sp, #20]
 8004112:	4694      	mov	ip, r2
 8004114:	4463      	add	r3, ip
 8004116:	6163      	str	r3, [r4, #20]
 8004118:	782b      	ldrb	r3, [r5, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d100      	bne.n	8004120 <_svfiprintf_r+0x7c>
 800411e:	e0a5      	b.n	800426c <_svfiprintf_r+0x1c8>
 8004120:	2201      	movs	r2, #1
 8004122:	2300      	movs	r3, #0
 8004124:	4252      	negs	r2, r2
 8004126:	6062      	str	r2, [r4, #4]
 8004128:	a904      	add	r1, sp, #16
 800412a:	3254      	adds	r2, #84	; 0x54
 800412c:	1852      	adds	r2, r2, r1
 800412e:	1c6e      	adds	r6, r5, #1
 8004130:	6023      	str	r3, [r4, #0]
 8004132:	60e3      	str	r3, [r4, #12]
 8004134:	60a3      	str	r3, [r4, #8]
 8004136:	7013      	strb	r3, [r2, #0]
 8004138:	65a3      	str	r3, [r4, #88]	; 0x58
 800413a:	2205      	movs	r2, #5
 800413c:	7831      	ldrb	r1, [r6, #0]
 800413e:	4854      	ldr	r0, [pc, #336]	; (8004290 <_svfiprintf_r+0x1ec>)
 8004140:	f000 faee 	bl	8004720 <memchr>
 8004144:	1c75      	adds	r5, r6, #1
 8004146:	2800      	cmp	r0, #0
 8004148:	d11f      	bne.n	800418a <_svfiprintf_r+0xe6>
 800414a:	6822      	ldr	r2, [r4, #0]
 800414c:	06d3      	lsls	r3, r2, #27
 800414e:	d504      	bpl.n	800415a <_svfiprintf_r+0xb6>
 8004150:	2353      	movs	r3, #83	; 0x53
 8004152:	a904      	add	r1, sp, #16
 8004154:	185b      	adds	r3, r3, r1
 8004156:	2120      	movs	r1, #32
 8004158:	7019      	strb	r1, [r3, #0]
 800415a:	0713      	lsls	r3, r2, #28
 800415c:	d504      	bpl.n	8004168 <_svfiprintf_r+0xc4>
 800415e:	2353      	movs	r3, #83	; 0x53
 8004160:	a904      	add	r1, sp, #16
 8004162:	185b      	adds	r3, r3, r1
 8004164:	212b      	movs	r1, #43	; 0x2b
 8004166:	7019      	strb	r1, [r3, #0]
 8004168:	7833      	ldrb	r3, [r6, #0]
 800416a:	2b2a      	cmp	r3, #42	; 0x2a
 800416c:	d016      	beq.n	800419c <_svfiprintf_r+0xf8>
 800416e:	0035      	movs	r5, r6
 8004170:	2100      	movs	r1, #0
 8004172:	200a      	movs	r0, #10
 8004174:	68e3      	ldr	r3, [r4, #12]
 8004176:	782a      	ldrb	r2, [r5, #0]
 8004178:	1c6e      	adds	r6, r5, #1
 800417a:	3a30      	subs	r2, #48	; 0x30
 800417c:	2a09      	cmp	r2, #9
 800417e:	d94e      	bls.n	800421e <_svfiprintf_r+0x17a>
 8004180:	2900      	cmp	r1, #0
 8004182:	d111      	bne.n	80041a8 <_svfiprintf_r+0x104>
 8004184:	e017      	b.n	80041b6 <_svfiprintf_r+0x112>
 8004186:	3501      	adds	r5, #1
 8004188:	e7b0      	b.n	80040ec <_svfiprintf_r+0x48>
 800418a:	4b41      	ldr	r3, [pc, #260]	; (8004290 <_svfiprintf_r+0x1ec>)
 800418c:	6822      	ldr	r2, [r4, #0]
 800418e:	1ac0      	subs	r0, r0, r3
 8004190:	2301      	movs	r3, #1
 8004192:	4083      	lsls	r3, r0
 8004194:	4313      	orrs	r3, r2
 8004196:	002e      	movs	r6, r5
 8004198:	6023      	str	r3, [r4, #0]
 800419a:	e7ce      	b.n	800413a <_svfiprintf_r+0x96>
 800419c:	9b07      	ldr	r3, [sp, #28]
 800419e:	1d19      	adds	r1, r3, #4
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	9107      	str	r1, [sp, #28]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	db01      	blt.n	80041ac <_svfiprintf_r+0x108>
 80041a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80041aa:	e004      	b.n	80041b6 <_svfiprintf_r+0x112>
 80041ac:	425b      	negs	r3, r3
 80041ae:	60e3      	str	r3, [r4, #12]
 80041b0:	2302      	movs	r3, #2
 80041b2:	4313      	orrs	r3, r2
 80041b4:	6023      	str	r3, [r4, #0]
 80041b6:	782b      	ldrb	r3, [r5, #0]
 80041b8:	2b2e      	cmp	r3, #46	; 0x2e
 80041ba:	d10a      	bne.n	80041d2 <_svfiprintf_r+0x12e>
 80041bc:	786b      	ldrb	r3, [r5, #1]
 80041be:	2b2a      	cmp	r3, #42	; 0x2a
 80041c0:	d135      	bne.n	800422e <_svfiprintf_r+0x18a>
 80041c2:	9b07      	ldr	r3, [sp, #28]
 80041c4:	3502      	adds	r5, #2
 80041c6:	1d1a      	adds	r2, r3, #4
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	9207      	str	r2, [sp, #28]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	db2b      	blt.n	8004228 <_svfiprintf_r+0x184>
 80041d0:	9309      	str	r3, [sp, #36]	; 0x24
 80041d2:	4e30      	ldr	r6, [pc, #192]	; (8004294 <_svfiprintf_r+0x1f0>)
 80041d4:	2203      	movs	r2, #3
 80041d6:	0030      	movs	r0, r6
 80041d8:	7829      	ldrb	r1, [r5, #0]
 80041da:	f000 faa1 	bl	8004720 <memchr>
 80041de:	2800      	cmp	r0, #0
 80041e0:	d006      	beq.n	80041f0 <_svfiprintf_r+0x14c>
 80041e2:	2340      	movs	r3, #64	; 0x40
 80041e4:	1b80      	subs	r0, r0, r6
 80041e6:	4083      	lsls	r3, r0
 80041e8:	6822      	ldr	r2, [r4, #0]
 80041ea:	3501      	adds	r5, #1
 80041ec:	4313      	orrs	r3, r2
 80041ee:	6023      	str	r3, [r4, #0]
 80041f0:	7829      	ldrb	r1, [r5, #0]
 80041f2:	2206      	movs	r2, #6
 80041f4:	4828      	ldr	r0, [pc, #160]	; (8004298 <_svfiprintf_r+0x1f4>)
 80041f6:	1c6e      	adds	r6, r5, #1
 80041f8:	7621      	strb	r1, [r4, #24]
 80041fa:	f000 fa91 	bl	8004720 <memchr>
 80041fe:	2800      	cmp	r0, #0
 8004200:	d03c      	beq.n	800427c <_svfiprintf_r+0x1d8>
 8004202:	4b26      	ldr	r3, [pc, #152]	; (800429c <_svfiprintf_r+0x1f8>)
 8004204:	2b00      	cmp	r3, #0
 8004206:	d125      	bne.n	8004254 <_svfiprintf_r+0x1b0>
 8004208:	2207      	movs	r2, #7
 800420a:	9b07      	ldr	r3, [sp, #28]
 800420c:	3307      	adds	r3, #7
 800420e:	4393      	bics	r3, r2
 8004210:	3308      	adds	r3, #8
 8004212:	9307      	str	r3, [sp, #28]
 8004214:	6963      	ldr	r3, [r4, #20]
 8004216:	9a04      	ldr	r2, [sp, #16]
 8004218:	189b      	adds	r3, r3, r2
 800421a:	6163      	str	r3, [r4, #20]
 800421c:	e765      	b.n	80040ea <_svfiprintf_r+0x46>
 800421e:	4343      	muls	r3, r0
 8004220:	0035      	movs	r5, r6
 8004222:	2101      	movs	r1, #1
 8004224:	189b      	adds	r3, r3, r2
 8004226:	e7a6      	b.n	8004176 <_svfiprintf_r+0xd2>
 8004228:	2301      	movs	r3, #1
 800422a:	425b      	negs	r3, r3
 800422c:	e7d0      	b.n	80041d0 <_svfiprintf_r+0x12c>
 800422e:	2300      	movs	r3, #0
 8004230:	200a      	movs	r0, #10
 8004232:	001a      	movs	r2, r3
 8004234:	3501      	adds	r5, #1
 8004236:	6063      	str	r3, [r4, #4]
 8004238:	7829      	ldrb	r1, [r5, #0]
 800423a:	1c6e      	adds	r6, r5, #1
 800423c:	3930      	subs	r1, #48	; 0x30
 800423e:	2909      	cmp	r1, #9
 8004240:	d903      	bls.n	800424a <_svfiprintf_r+0x1a6>
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0c5      	beq.n	80041d2 <_svfiprintf_r+0x12e>
 8004246:	9209      	str	r2, [sp, #36]	; 0x24
 8004248:	e7c3      	b.n	80041d2 <_svfiprintf_r+0x12e>
 800424a:	4342      	muls	r2, r0
 800424c:	0035      	movs	r5, r6
 800424e:	2301      	movs	r3, #1
 8004250:	1852      	adds	r2, r2, r1
 8004252:	e7f1      	b.n	8004238 <_svfiprintf_r+0x194>
 8004254:	ab07      	add	r3, sp, #28
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	003a      	movs	r2, r7
 800425a:	0021      	movs	r1, r4
 800425c:	4b10      	ldr	r3, [pc, #64]	; (80042a0 <_svfiprintf_r+0x1fc>)
 800425e:	9803      	ldr	r0, [sp, #12]
 8004260:	e000      	b.n	8004264 <_svfiprintf_r+0x1c0>
 8004262:	bf00      	nop
 8004264:	9004      	str	r0, [sp, #16]
 8004266:	9b04      	ldr	r3, [sp, #16]
 8004268:	3301      	adds	r3, #1
 800426a:	d1d3      	bne.n	8004214 <_svfiprintf_r+0x170>
 800426c:	89bb      	ldrh	r3, [r7, #12]
 800426e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004270:	065b      	lsls	r3, r3, #25
 8004272:	d400      	bmi.n	8004276 <_svfiprintf_r+0x1d2>
 8004274:	e72d      	b.n	80040d2 <_svfiprintf_r+0x2e>
 8004276:	2001      	movs	r0, #1
 8004278:	4240      	negs	r0, r0
 800427a:	e72a      	b.n	80040d2 <_svfiprintf_r+0x2e>
 800427c:	ab07      	add	r3, sp, #28
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	003a      	movs	r2, r7
 8004282:	0021      	movs	r1, r4
 8004284:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <_svfiprintf_r+0x1fc>)
 8004286:	9803      	ldr	r0, [sp, #12]
 8004288:	f000 f87c 	bl	8004384 <_printf_i>
 800428c:	e7ea      	b.n	8004264 <_svfiprintf_r+0x1c0>
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	08004950 	.word	0x08004950
 8004294:	08004956 	.word	0x08004956
 8004298:	0800495a 	.word	0x0800495a
 800429c:	00000000 	.word	0x00000000
 80042a0:	08003fe1 	.word	0x08003fe1

080042a4 <_printf_common>:
 80042a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042a6:	0015      	movs	r5, r2
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	688a      	ldr	r2, [r1, #8]
 80042ac:	690b      	ldr	r3, [r1, #16]
 80042ae:	000c      	movs	r4, r1
 80042b0:	9000      	str	r0, [sp, #0]
 80042b2:	4293      	cmp	r3, r2
 80042b4:	da00      	bge.n	80042b8 <_printf_common+0x14>
 80042b6:	0013      	movs	r3, r2
 80042b8:	0022      	movs	r2, r4
 80042ba:	602b      	str	r3, [r5, #0]
 80042bc:	3243      	adds	r2, #67	; 0x43
 80042be:	7812      	ldrb	r2, [r2, #0]
 80042c0:	2a00      	cmp	r2, #0
 80042c2:	d001      	beq.n	80042c8 <_printf_common+0x24>
 80042c4:	3301      	adds	r3, #1
 80042c6:	602b      	str	r3, [r5, #0]
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	069b      	lsls	r3, r3, #26
 80042cc:	d502      	bpl.n	80042d4 <_printf_common+0x30>
 80042ce:	682b      	ldr	r3, [r5, #0]
 80042d0:	3302      	adds	r3, #2
 80042d2:	602b      	str	r3, [r5, #0]
 80042d4:	6822      	ldr	r2, [r4, #0]
 80042d6:	2306      	movs	r3, #6
 80042d8:	0017      	movs	r7, r2
 80042da:	401f      	ands	r7, r3
 80042dc:	421a      	tst	r2, r3
 80042de:	d027      	beq.n	8004330 <_printf_common+0x8c>
 80042e0:	0023      	movs	r3, r4
 80042e2:	3343      	adds	r3, #67	; 0x43
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	1e5a      	subs	r2, r3, #1
 80042e8:	4193      	sbcs	r3, r2
 80042ea:	6822      	ldr	r2, [r4, #0]
 80042ec:	0692      	lsls	r2, r2, #26
 80042ee:	d430      	bmi.n	8004352 <_printf_common+0xae>
 80042f0:	0022      	movs	r2, r4
 80042f2:	9901      	ldr	r1, [sp, #4]
 80042f4:	9800      	ldr	r0, [sp, #0]
 80042f6:	9e08      	ldr	r6, [sp, #32]
 80042f8:	3243      	adds	r2, #67	; 0x43
 80042fa:	47b0      	blx	r6
 80042fc:	1c43      	adds	r3, r0, #1
 80042fe:	d025      	beq.n	800434c <_printf_common+0xa8>
 8004300:	2306      	movs	r3, #6
 8004302:	6820      	ldr	r0, [r4, #0]
 8004304:	682a      	ldr	r2, [r5, #0]
 8004306:	68e1      	ldr	r1, [r4, #12]
 8004308:	2500      	movs	r5, #0
 800430a:	4003      	ands	r3, r0
 800430c:	2b04      	cmp	r3, #4
 800430e:	d103      	bne.n	8004318 <_printf_common+0x74>
 8004310:	1a8d      	subs	r5, r1, r2
 8004312:	43eb      	mvns	r3, r5
 8004314:	17db      	asrs	r3, r3, #31
 8004316:	401d      	ands	r5, r3
 8004318:	68a3      	ldr	r3, [r4, #8]
 800431a:	6922      	ldr	r2, [r4, #16]
 800431c:	4293      	cmp	r3, r2
 800431e:	dd01      	ble.n	8004324 <_printf_common+0x80>
 8004320:	1a9b      	subs	r3, r3, r2
 8004322:	18ed      	adds	r5, r5, r3
 8004324:	2700      	movs	r7, #0
 8004326:	42bd      	cmp	r5, r7
 8004328:	d120      	bne.n	800436c <_printf_common+0xc8>
 800432a:	2000      	movs	r0, #0
 800432c:	e010      	b.n	8004350 <_printf_common+0xac>
 800432e:	3701      	adds	r7, #1
 8004330:	68e3      	ldr	r3, [r4, #12]
 8004332:	682a      	ldr	r2, [r5, #0]
 8004334:	1a9b      	subs	r3, r3, r2
 8004336:	42bb      	cmp	r3, r7
 8004338:	ddd2      	ble.n	80042e0 <_printf_common+0x3c>
 800433a:	0022      	movs	r2, r4
 800433c:	2301      	movs	r3, #1
 800433e:	9901      	ldr	r1, [sp, #4]
 8004340:	9800      	ldr	r0, [sp, #0]
 8004342:	9e08      	ldr	r6, [sp, #32]
 8004344:	3219      	adds	r2, #25
 8004346:	47b0      	blx	r6
 8004348:	1c43      	adds	r3, r0, #1
 800434a:	d1f0      	bne.n	800432e <_printf_common+0x8a>
 800434c:	2001      	movs	r0, #1
 800434e:	4240      	negs	r0, r0
 8004350:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004352:	2030      	movs	r0, #48	; 0x30
 8004354:	18e1      	adds	r1, r4, r3
 8004356:	3143      	adds	r1, #67	; 0x43
 8004358:	7008      	strb	r0, [r1, #0]
 800435a:	0021      	movs	r1, r4
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	3145      	adds	r1, #69	; 0x45
 8004360:	7809      	ldrb	r1, [r1, #0]
 8004362:	18a2      	adds	r2, r4, r2
 8004364:	3243      	adds	r2, #67	; 0x43
 8004366:	3302      	adds	r3, #2
 8004368:	7011      	strb	r1, [r2, #0]
 800436a:	e7c1      	b.n	80042f0 <_printf_common+0x4c>
 800436c:	0022      	movs	r2, r4
 800436e:	2301      	movs	r3, #1
 8004370:	9901      	ldr	r1, [sp, #4]
 8004372:	9800      	ldr	r0, [sp, #0]
 8004374:	9e08      	ldr	r6, [sp, #32]
 8004376:	321a      	adds	r2, #26
 8004378:	47b0      	blx	r6
 800437a:	1c43      	adds	r3, r0, #1
 800437c:	d0e6      	beq.n	800434c <_printf_common+0xa8>
 800437e:	3701      	adds	r7, #1
 8004380:	e7d1      	b.n	8004326 <_printf_common+0x82>
	...

08004384 <_printf_i>:
 8004384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004386:	b08b      	sub	sp, #44	; 0x2c
 8004388:	9206      	str	r2, [sp, #24]
 800438a:	000a      	movs	r2, r1
 800438c:	3243      	adds	r2, #67	; 0x43
 800438e:	9307      	str	r3, [sp, #28]
 8004390:	9005      	str	r0, [sp, #20]
 8004392:	9204      	str	r2, [sp, #16]
 8004394:	7e0a      	ldrb	r2, [r1, #24]
 8004396:	000c      	movs	r4, r1
 8004398:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800439a:	2a78      	cmp	r2, #120	; 0x78
 800439c:	d807      	bhi.n	80043ae <_printf_i+0x2a>
 800439e:	2a62      	cmp	r2, #98	; 0x62
 80043a0:	d809      	bhi.n	80043b6 <_printf_i+0x32>
 80043a2:	2a00      	cmp	r2, #0
 80043a4:	d100      	bne.n	80043a8 <_printf_i+0x24>
 80043a6:	e0c1      	b.n	800452c <_printf_i+0x1a8>
 80043a8:	2a58      	cmp	r2, #88	; 0x58
 80043aa:	d100      	bne.n	80043ae <_printf_i+0x2a>
 80043ac:	e08c      	b.n	80044c8 <_printf_i+0x144>
 80043ae:	0026      	movs	r6, r4
 80043b0:	3642      	adds	r6, #66	; 0x42
 80043b2:	7032      	strb	r2, [r6, #0]
 80043b4:	e022      	b.n	80043fc <_printf_i+0x78>
 80043b6:	0010      	movs	r0, r2
 80043b8:	3863      	subs	r0, #99	; 0x63
 80043ba:	2815      	cmp	r0, #21
 80043bc:	d8f7      	bhi.n	80043ae <_printf_i+0x2a>
 80043be:	f7fb fea3 	bl	8000108 <__gnu_thumb1_case_shi>
 80043c2:	0016      	.short	0x0016
 80043c4:	fff6001f 	.word	0xfff6001f
 80043c8:	fff6fff6 	.word	0xfff6fff6
 80043cc:	001ffff6 	.word	0x001ffff6
 80043d0:	fff6fff6 	.word	0xfff6fff6
 80043d4:	fff6fff6 	.word	0xfff6fff6
 80043d8:	003600a8 	.word	0x003600a8
 80043dc:	fff6009a 	.word	0xfff6009a
 80043e0:	00b9fff6 	.word	0x00b9fff6
 80043e4:	0036fff6 	.word	0x0036fff6
 80043e8:	fff6fff6 	.word	0xfff6fff6
 80043ec:	009e      	.short	0x009e
 80043ee:	0026      	movs	r6, r4
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	3642      	adds	r6, #66	; 0x42
 80043f4:	1d11      	adds	r1, r2, #4
 80043f6:	6019      	str	r1, [r3, #0]
 80043f8:	6813      	ldr	r3, [r2, #0]
 80043fa:	7033      	strb	r3, [r6, #0]
 80043fc:	2301      	movs	r3, #1
 80043fe:	e0a7      	b.n	8004550 <_printf_i+0x1cc>
 8004400:	6808      	ldr	r0, [r1, #0]
 8004402:	6819      	ldr	r1, [r3, #0]
 8004404:	1d0a      	adds	r2, r1, #4
 8004406:	0605      	lsls	r5, r0, #24
 8004408:	d50b      	bpl.n	8004422 <_printf_i+0x9e>
 800440a:	680d      	ldr	r5, [r1, #0]
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	2d00      	cmp	r5, #0
 8004410:	da03      	bge.n	800441a <_printf_i+0x96>
 8004412:	232d      	movs	r3, #45	; 0x2d
 8004414:	9a04      	ldr	r2, [sp, #16]
 8004416:	426d      	negs	r5, r5
 8004418:	7013      	strb	r3, [r2, #0]
 800441a:	4b61      	ldr	r3, [pc, #388]	; (80045a0 <_printf_i+0x21c>)
 800441c:	270a      	movs	r7, #10
 800441e:	9303      	str	r3, [sp, #12]
 8004420:	e01b      	b.n	800445a <_printf_i+0xd6>
 8004422:	680d      	ldr	r5, [r1, #0]
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	0641      	lsls	r1, r0, #25
 8004428:	d5f1      	bpl.n	800440e <_printf_i+0x8a>
 800442a:	b22d      	sxth	r5, r5
 800442c:	e7ef      	b.n	800440e <_printf_i+0x8a>
 800442e:	680d      	ldr	r5, [r1, #0]
 8004430:	6819      	ldr	r1, [r3, #0]
 8004432:	1d08      	adds	r0, r1, #4
 8004434:	6018      	str	r0, [r3, #0]
 8004436:	062e      	lsls	r6, r5, #24
 8004438:	d501      	bpl.n	800443e <_printf_i+0xba>
 800443a:	680d      	ldr	r5, [r1, #0]
 800443c:	e003      	b.n	8004446 <_printf_i+0xc2>
 800443e:	066d      	lsls	r5, r5, #25
 8004440:	d5fb      	bpl.n	800443a <_printf_i+0xb6>
 8004442:	680d      	ldr	r5, [r1, #0]
 8004444:	b2ad      	uxth	r5, r5
 8004446:	4b56      	ldr	r3, [pc, #344]	; (80045a0 <_printf_i+0x21c>)
 8004448:	2708      	movs	r7, #8
 800444a:	9303      	str	r3, [sp, #12]
 800444c:	2a6f      	cmp	r2, #111	; 0x6f
 800444e:	d000      	beq.n	8004452 <_printf_i+0xce>
 8004450:	3702      	adds	r7, #2
 8004452:	0023      	movs	r3, r4
 8004454:	2200      	movs	r2, #0
 8004456:	3343      	adds	r3, #67	; 0x43
 8004458:	701a      	strb	r2, [r3, #0]
 800445a:	6863      	ldr	r3, [r4, #4]
 800445c:	60a3      	str	r3, [r4, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	db03      	blt.n	800446a <_printf_i+0xe6>
 8004462:	2204      	movs	r2, #4
 8004464:	6821      	ldr	r1, [r4, #0]
 8004466:	4391      	bics	r1, r2
 8004468:	6021      	str	r1, [r4, #0]
 800446a:	2d00      	cmp	r5, #0
 800446c:	d102      	bne.n	8004474 <_printf_i+0xf0>
 800446e:	9e04      	ldr	r6, [sp, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00c      	beq.n	800448e <_printf_i+0x10a>
 8004474:	9e04      	ldr	r6, [sp, #16]
 8004476:	0028      	movs	r0, r5
 8004478:	0039      	movs	r1, r7
 800447a:	f7fb fed5 	bl	8000228 <__aeabi_uidivmod>
 800447e:	9b03      	ldr	r3, [sp, #12]
 8004480:	3e01      	subs	r6, #1
 8004482:	5c5b      	ldrb	r3, [r3, r1]
 8004484:	7033      	strb	r3, [r6, #0]
 8004486:	002b      	movs	r3, r5
 8004488:	0005      	movs	r5, r0
 800448a:	429f      	cmp	r7, r3
 800448c:	d9f3      	bls.n	8004476 <_printf_i+0xf2>
 800448e:	2f08      	cmp	r7, #8
 8004490:	d109      	bne.n	80044a6 <_printf_i+0x122>
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	07db      	lsls	r3, r3, #31
 8004496:	d506      	bpl.n	80044a6 <_printf_i+0x122>
 8004498:	6863      	ldr	r3, [r4, #4]
 800449a:	6922      	ldr	r2, [r4, #16]
 800449c:	4293      	cmp	r3, r2
 800449e:	dc02      	bgt.n	80044a6 <_printf_i+0x122>
 80044a0:	2330      	movs	r3, #48	; 0x30
 80044a2:	3e01      	subs	r6, #1
 80044a4:	7033      	strb	r3, [r6, #0]
 80044a6:	9b04      	ldr	r3, [sp, #16]
 80044a8:	1b9b      	subs	r3, r3, r6
 80044aa:	6123      	str	r3, [r4, #16]
 80044ac:	9b07      	ldr	r3, [sp, #28]
 80044ae:	0021      	movs	r1, r4
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	9805      	ldr	r0, [sp, #20]
 80044b4:	9b06      	ldr	r3, [sp, #24]
 80044b6:	aa09      	add	r2, sp, #36	; 0x24
 80044b8:	f7ff fef4 	bl	80042a4 <_printf_common>
 80044bc:	1c43      	adds	r3, r0, #1
 80044be:	d14c      	bne.n	800455a <_printf_i+0x1d6>
 80044c0:	2001      	movs	r0, #1
 80044c2:	4240      	negs	r0, r0
 80044c4:	b00b      	add	sp, #44	; 0x2c
 80044c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044c8:	3145      	adds	r1, #69	; 0x45
 80044ca:	700a      	strb	r2, [r1, #0]
 80044cc:	4a34      	ldr	r2, [pc, #208]	; (80045a0 <_printf_i+0x21c>)
 80044ce:	9203      	str	r2, [sp, #12]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	6821      	ldr	r1, [r4, #0]
 80044d4:	ca20      	ldmia	r2!, {r5}
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	0608      	lsls	r0, r1, #24
 80044da:	d516      	bpl.n	800450a <_printf_i+0x186>
 80044dc:	07cb      	lsls	r3, r1, #31
 80044de:	d502      	bpl.n	80044e6 <_printf_i+0x162>
 80044e0:	2320      	movs	r3, #32
 80044e2:	4319      	orrs	r1, r3
 80044e4:	6021      	str	r1, [r4, #0]
 80044e6:	2710      	movs	r7, #16
 80044e8:	2d00      	cmp	r5, #0
 80044ea:	d1b2      	bne.n	8004452 <_printf_i+0xce>
 80044ec:	2320      	movs	r3, #32
 80044ee:	6822      	ldr	r2, [r4, #0]
 80044f0:	439a      	bics	r2, r3
 80044f2:	6022      	str	r2, [r4, #0]
 80044f4:	e7ad      	b.n	8004452 <_printf_i+0xce>
 80044f6:	2220      	movs	r2, #32
 80044f8:	6809      	ldr	r1, [r1, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	6022      	str	r2, [r4, #0]
 80044fe:	0022      	movs	r2, r4
 8004500:	2178      	movs	r1, #120	; 0x78
 8004502:	3245      	adds	r2, #69	; 0x45
 8004504:	7011      	strb	r1, [r2, #0]
 8004506:	4a27      	ldr	r2, [pc, #156]	; (80045a4 <_printf_i+0x220>)
 8004508:	e7e1      	b.n	80044ce <_printf_i+0x14a>
 800450a:	0648      	lsls	r0, r1, #25
 800450c:	d5e6      	bpl.n	80044dc <_printf_i+0x158>
 800450e:	b2ad      	uxth	r5, r5
 8004510:	e7e4      	b.n	80044dc <_printf_i+0x158>
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	680d      	ldr	r5, [r1, #0]
 8004516:	1d10      	adds	r0, r2, #4
 8004518:	6949      	ldr	r1, [r1, #20]
 800451a:	6018      	str	r0, [r3, #0]
 800451c:	6813      	ldr	r3, [r2, #0]
 800451e:	062e      	lsls	r6, r5, #24
 8004520:	d501      	bpl.n	8004526 <_printf_i+0x1a2>
 8004522:	6019      	str	r1, [r3, #0]
 8004524:	e002      	b.n	800452c <_printf_i+0x1a8>
 8004526:	066d      	lsls	r5, r5, #25
 8004528:	d5fb      	bpl.n	8004522 <_printf_i+0x19e>
 800452a:	8019      	strh	r1, [r3, #0]
 800452c:	2300      	movs	r3, #0
 800452e:	9e04      	ldr	r6, [sp, #16]
 8004530:	6123      	str	r3, [r4, #16]
 8004532:	e7bb      	b.n	80044ac <_printf_i+0x128>
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	1d11      	adds	r1, r2, #4
 8004538:	6019      	str	r1, [r3, #0]
 800453a:	6816      	ldr	r6, [r2, #0]
 800453c:	2100      	movs	r1, #0
 800453e:	0030      	movs	r0, r6
 8004540:	6862      	ldr	r2, [r4, #4]
 8004542:	f000 f8ed 	bl	8004720 <memchr>
 8004546:	2800      	cmp	r0, #0
 8004548:	d001      	beq.n	800454e <_printf_i+0x1ca>
 800454a:	1b80      	subs	r0, r0, r6
 800454c:	6060      	str	r0, [r4, #4]
 800454e:	6863      	ldr	r3, [r4, #4]
 8004550:	6123      	str	r3, [r4, #16]
 8004552:	2300      	movs	r3, #0
 8004554:	9a04      	ldr	r2, [sp, #16]
 8004556:	7013      	strb	r3, [r2, #0]
 8004558:	e7a8      	b.n	80044ac <_printf_i+0x128>
 800455a:	6923      	ldr	r3, [r4, #16]
 800455c:	0032      	movs	r2, r6
 800455e:	9906      	ldr	r1, [sp, #24]
 8004560:	9805      	ldr	r0, [sp, #20]
 8004562:	9d07      	ldr	r5, [sp, #28]
 8004564:	47a8      	blx	r5
 8004566:	1c43      	adds	r3, r0, #1
 8004568:	d0aa      	beq.n	80044c0 <_printf_i+0x13c>
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	079b      	lsls	r3, r3, #30
 800456e:	d415      	bmi.n	800459c <_printf_i+0x218>
 8004570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004572:	68e0      	ldr	r0, [r4, #12]
 8004574:	4298      	cmp	r0, r3
 8004576:	daa5      	bge.n	80044c4 <_printf_i+0x140>
 8004578:	0018      	movs	r0, r3
 800457a:	e7a3      	b.n	80044c4 <_printf_i+0x140>
 800457c:	0022      	movs	r2, r4
 800457e:	2301      	movs	r3, #1
 8004580:	9906      	ldr	r1, [sp, #24]
 8004582:	9805      	ldr	r0, [sp, #20]
 8004584:	9e07      	ldr	r6, [sp, #28]
 8004586:	3219      	adds	r2, #25
 8004588:	47b0      	blx	r6
 800458a:	1c43      	adds	r3, r0, #1
 800458c:	d098      	beq.n	80044c0 <_printf_i+0x13c>
 800458e:	3501      	adds	r5, #1
 8004590:	68e3      	ldr	r3, [r4, #12]
 8004592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004594:	1a9b      	subs	r3, r3, r2
 8004596:	42ab      	cmp	r3, r5
 8004598:	dcf0      	bgt.n	800457c <_printf_i+0x1f8>
 800459a:	e7e9      	b.n	8004570 <_printf_i+0x1ec>
 800459c:	2500      	movs	r5, #0
 800459e:	e7f7      	b.n	8004590 <_printf_i+0x20c>
 80045a0:	08004961 	.word	0x08004961
 80045a4:	08004972 	.word	0x08004972

080045a8 <_sbrk_r>:
 80045a8:	2300      	movs	r3, #0
 80045aa:	b570      	push	{r4, r5, r6, lr}
 80045ac:	4d06      	ldr	r5, [pc, #24]	; (80045c8 <_sbrk_r+0x20>)
 80045ae:	0004      	movs	r4, r0
 80045b0:	0008      	movs	r0, r1
 80045b2:	602b      	str	r3, [r5, #0]
 80045b4:	f7fc fabe 	bl	8000b34 <_sbrk>
 80045b8:	1c43      	adds	r3, r0, #1
 80045ba:	d103      	bne.n	80045c4 <_sbrk_r+0x1c>
 80045bc:	682b      	ldr	r3, [r5, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d000      	beq.n	80045c4 <_sbrk_r+0x1c>
 80045c2:	6023      	str	r3, [r4, #0]
 80045c4:	bd70      	pop	{r4, r5, r6, pc}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	200001a4 	.word	0x200001a4

080045cc <__sread>:
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	000c      	movs	r4, r1
 80045d0:	250e      	movs	r5, #14
 80045d2:	5f49      	ldrsh	r1, [r1, r5]
 80045d4:	f000 f90c 	bl	80047f0 <_read_r>
 80045d8:	2800      	cmp	r0, #0
 80045da:	db03      	blt.n	80045e4 <__sread+0x18>
 80045dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80045de:	181b      	adds	r3, r3, r0
 80045e0:	6563      	str	r3, [r4, #84]	; 0x54
 80045e2:	bd70      	pop	{r4, r5, r6, pc}
 80045e4:	89a3      	ldrh	r3, [r4, #12]
 80045e6:	4a02      	ldr	r2, [pc, #8]	; (80045f0 <__sread+0x24>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	81a3      	strh	r3, [r4, #12]
 80045ec:	e7f9      	b.n	80045e2 <__sread+0x16>
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	ffffefff 	.word	0xffffefff

080045f4 <__swrite>:
 80045f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f6:	001f      	movs	r7, r3
 80045f8:	898b      	ldrh	r3, [r1, #12]
 80045fa:	0005      	movs	r5, r0
 80045fc:	000c      	movs	r4, r1
 80045fe:	0016      	movs	r6, r2
 8004600:	05db      	lsls	r3, r3, #23
 8004602:	d505      	bpl.n	8004610 <__swrite+0x1c>
 8004604:	230e      	movs	r3, #14
 8004606:	5ec9      	ldrsh	r1, [r1, r3]
 8004608:	2200      	movs	r2, #0
 800460a:	2302      	movs	r3, #2
 800460c:	f000 f874 	bl	80046f8 <_lseek_r>
 8004610:	89a3      	ldrh	r3, [r4, #12]
 8004612:	4a05      	ldr	r2, [pc, #20]	; (8004628 <__swrite+0x34>)
 8004614:	0028      	movs	r0, r5
 8004616:	4013      	ands	r3, r2
 8004618:	81a3      	strh	r3, [r4, #12]
 800461a:	0032      	movs	r2, r6
 800461c:	230e      	movs	r3, #14
 800461e:	5ee1      	ldrsh	r1, [r4, r3]
 8004620:	003b      	movs	r3, r7
 8004622:	f000 f81f 	bl	8004664 <_write_r>
 8004626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004628:	ffffefff 	.word	0xffffefff

0800462c <__sseek>:
 800462c:	b570      	push	{r4, r5, r6, lr}
 800462e:	000c      	movs	r4, r1
 8004630:	250e      	movs	r5, #14
 8004632:	5f49      	ldrsh	r1, [r1, r5]
 8004634:	f000 f860 	bl	80046f8 <_lseek_r>
 8004638:	89a3      	ldrh	r3, [r4, #12]
 800463a:	1c42      	adds	r2, r0, #1
 800463c:	d103      	bne.n	8004646 <__sseek+0x1a>
 800463e:	4a05      	ldr	r2, [pc, #20]	; (8004654 <__sseek+0x28>)
 8004640:	4013      	ands	r3, r2
 8004642:	81a3      	strh	r3, [r4, #12]
 8004644:	bd70      	pop	{r4, r5, r6, pc}
 8004646:	2280      	movs	r2, #128	; 0x80
 8004648:	0152      	lsls	r2, r2, #5
 800464a:	4313      	orrs	r3, r2
 800464c:	81a3      	strh	r3, [r4, #12]
 800464e:	6560      	str	r0, [r4, #84]	; 0x54
 8004650:	e7f8      	b.n	8004644 <__sseek+0x18>
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	ffffefff 	.word	0xffffefff

08004658 <__sclose>:
 8004658:	b510      	push	{r4, lr}
 800465a:	230e      	movs	r3, #14
 800465c:	5ec9      	ldrsh	r1, [r1, r3]
 800465e:	f000 f815 	bl	800468c <_close_r>
 8004662:	bd10      	pop	{r4, pc}

08004664 <_write_r>:
 8004664:	b570      	push	{r4, r5, r6, lr}
 8004666:	0004      	movs	r4, r0
 8004668:	0008      	movs	r0, r1
 800466a:	0011      	movs	r1, r2
 800466c:	001a      	movs	r2, r3
 800466e:	2300      	movs	r3, #0
 8004670:	4d05      	ldr	r5, [pc, #20]	; (8004688 <_write_r+0x24>)
 8004672:	602b      	str	r3, [r5, #0]
 8004674:	f7fc fa1c 	bl	8000ab0 <_write>
 8004678:	1c43      	adds	r3, r0, #1
 800467a:	d103      	bne.n	8004684 <_write_r+0x20>
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d000      	beq.n	8004684 <_write_r+0x20>
 8004682:	6023      	str	r3, [r4, #0]
 8004684:	bd70      	pop	{r4, r5, r6, pc}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	200001a4 	.word	0x200001a4

0800468c <_close_r>:
 800468c:	2300      	movs	r3, #0
 800468e:	b570      	push	{r4, r5, r6, lr}
 8004690:	4d06      	ldr	r5, [pc, #24]	; (80046ac <_close_r+0x20>)
 8004692:	0004      	movs	r4, r0
 8004694:	0008      	movs	r0, r1
 8004696:	602b      	str	r3, [r5, #0]
 8004698:	f7fc fa20 	bl	8000adc <_close>
 800469c:	1c43      	adds	r3, r0, #1
 800469e:	d103      	bne.n	80046a8 <_close_r+0x1c>
 80046a0:	682b      	ldr	r3, [r5, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d000      	beq.n	80046a8 <_close_r+0x1c>
 80046a6:	6023      	str	r3, [r4, #0]
 80046a8:	bd70      	pop	{r4, r5, r6, pc}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	200001a4 	.word	0x200001a4

080046b0 <_fstat_r>:
 80046b0:	2300      	movs	r3, #0
 80046b2:	b570      	push	{r4, r5, r6, lr}
 80046b4:	4d06      	ldr	r5, [pc, #24]	; (80046d0 <_fstat_r+0x20>)
 80046b6:	0004      	movs	r4, r0
 80046b8:	0008      	movs	r0, r1
 80046ba:	0011      	movs	r1, r2
 80046bc:	602b      	str	r3, [r5, #0]
 80046be:	f7fc fa17 	bl	8000af0 <_fstat>
 80046c2:	1c43      	adds	r3, r0, #1
 80046c4:	d103      	bne.n	80046ce <_fstat_r+0x1e>
 80046c6:	682b      	ldr	r3, [r5, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d000      	beq.n	80046ce <_fstat_r+0x1e>
 80046cc:	6023      	str	r3, [r4, #0]
 80046ce:	bd70      	pop	{r4, r5, r6, pc}
 80046d0:	200001a4 	.word	0x200001a4

080046d4 <_isatty_r>:
 80046d4:	2300      	movs	r3, #0
 80046d6:	b570      	push	{r4, r5, r6, lr}
 80046d8:	4d06      	ldr	r5, [pc, #24]	; (80046f4 <_isatty_r+0x20>)
 80046da:	0004      	movs	r4, r0
 80046dc:	0008      	movs	r0, r1
 80046de:	602b      	str	r3, [r5, #0]
 80046e0:	f7fc fa14 	bl	8000b0c <_isatty>
 80046e4:	1c43      	adds	r3, r0, #1
 80046e6:	d103      	bne.n	80046f0 <_isatty_r+0x1c>
 80046e8:	682b      	ldr	r3, [r5, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d000      	beq.n	80046f0 <_isatty_r+0x1c>
 80046ee:	6023      	str	r3, [r4, #0]
 80046f0:	bd70      	pop	{r4, r5, r6, pc}
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	200001a4 	.word	0x200001a4

080046f8 <_lseek_r>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	0004      	movs	r4, r0
 80046fc:	0008      	movs	r0, r1
 80046fe:	0011      	movs	r1, r2
 8004700:	001a      	movs	r2, r3
 8004702:	2300      	movs	r3, #0
 8004704:	4d05      	ldr	r5, [pc, #20]	; (800471c <_lseek_r+0x24>)
 8004706:	602b      	str	r3, [r5, #0]
 8004708:	f7fc fa09 	bl	8000b1e <_lseek>
 800470c:	1c43      	adds	r3, r0, #1
 800470e:	d103      	bne.n	8004718 <_lseek_r+0x20>
 8004710:	682b      	ldr	r3, [r5, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d000      	beq.n	8004718 <_lseek_r+0x20>
 8004716:	6023      	str	r3, [r4, #0]
 8004718:	bd70      	pop	{r4, r5, r6, pc}
 800471a:	46c0      	nop			; (mov r8, r8)
 800471c:	200001a4 	.word	0x200001a4

08004720 <memchr>:
 8004720:	b2c9      	uxtb	r1, r1
 8004722:	1882      	adds	r2, r0, r2
 8004724:	4290      	cmp	r0, r2
 8004726:	d101      	bne.n	800472c <memchr+0xc>
 8004728:	2000      	movs	r0, #0
 800472a:	4770      	bx	lr
 800472c:	7803      	ldrb	r3, [r0, #0]
 800472e:	428b      	cmp	r3, r1
 8004730:	d0fb      	beq.n	800472a <memchr+0xa>
 8004732:	3001      	adds	r0, #1
 8004734:	e7f6      	b.n	8004724 <memchr+0x4>

08004736 <memcpy>:
 8004736:	2300      	movs	r3, #0
 8004738:	b510      	push	{r4, lr}
 800473a:	429a      	cmp	r2, r3
 800473c:	d100      	bne.n	8004740 <memcpy+0xa>
 800473e:	bd10      	pop	{r4, pc}
 8004740:	5ccc      	ldrb	r4, [r1, r3]
 8004742:	54c4      	strb	r4, [r0, r3]
 8004744:	3301      	adds	r3, #1
 8004746:	e7f8      	b.n	800473a <memcpy+0x4>

08004748 <memmove>:
 8004748:	b510      	push	{r4, lr}
 800474a:	4288      	cmp	r0, r1
 800474c:	d902      	bls.n	8004754 <memmove+0xc>
 800474e:	188b      	adds	r3, r1, r2
 8004750:	4298      	cmp	r0, r3
 8004752:	d303      	bcc.n	800475c <memmove+0x14>
 8004754:	2300      	movs	r3, #0
 8004756:	e007      	b.n	8004768 <memmove+0x20>
 8004758:	5c8b      	ldrb	r3, [r1, r2]
 800475a:	5483      	strb	r3, [r0, r2]
 800475c:	3a01      	subs	r2, #1
 800475e:	d2fb      	bcs.n	8004758 <memmove+0x10>
 8004760:	bd10      	pop	{r4, pc}
 8004762:	5ccc      	ldrb	r4, [r1, r3]
 8004764:	54c4      	strb	r4, [r0, r3]
 8004766:	3301      	adds	r3, #1
 8004768:	429a      	cmp	r2, r3
 800476a:	d1fa      	bne.n	8004762 <memmove+0x1a>
 800476c:	e7f8      	b.n	8004760 <memmove+0x18>
	...

08004770 <__malloc_lock>:
 8004770:	b510      	push	{r4, lr}
 8004772:	4802      	ldr	r0, [pc, #8]	; (800477c <__malloc_lock+0xc>)
 8004774:	f7ff fae3 	bl	8003d3e <__retarget_lock_acquire_recursive>
 8004778:	bd10      	pop	{r4, pc}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	20000198 	.word	0x20000198

08004780 <__malloc_unlock>:
 8004780:	b510      	push	{r4, lr}
 8004782:	4802      	ldr	r0, [pc, #8]	; (800478c <__malloc_unlock+0xc>)
 8004784:	f7ff fadc 	bl	8003d40 <__retarget_lock_release_recursive>
 8004788:	bd10      	pop	{r4, pc}
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	20000198 	.word	0x20000198

08004790 <_realloc_r>:
 8004790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004792:	0007      	movs	r7, r0
 8004794:	000e      	movs	r6, r1
 8004796:	0014      	movs	r4, r2
 8004798:	2900      	cmp	r1, #0
 800479a:	d105      	bne.n	80047a8 <_realloc_r+0x18>
 800479c:	0011      	movs	r1, r2
 800479e:	f7ff fba9 	bl	8003ef4 <_malloc_r>
 80047a2:	0005      	movs	r5, r0
 80047a4:	0028      	movs	r0, r5
 80047a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047a8:	2a00      	cmp	r2, #0
 80047aa:	d103      	bne.n	80047b4 <_realloc_r+0x24>
 80047ac:	f7ff fb36 	bl	8003e1c <_free_r>
 80047b0:	0025      	movs	r5, r4
 80047b2:	e7f7      	b.n	80047a4 <_realloc_r+0x14>
 80047b4:	f000 f830 	bl	8004818 <_malloc_usable_size_r>
 80047b8:	9001      	str	r0, [sp, #4]
 80047ba:	4284      	cmp	r4, r0
 80047bc:	d803      	bhi.n	80047c6 <_realloc_r+0x36>
 80047be:	0035      	movs	r5, r6
 80047c0:	0843      	lsrs	r3, r0, #1
 80047c2:	42a3      	cmp	r3, r4
 80047c4:	d3ee      	bcc.n	80047a4 <_realloc_r+0x14>
 80047c6:	0021      	movs	r1, r4
 80047c8:	0038      	movs	r0, r7
 80047ca:	f7ff fb93 	bl	8003ef4 <_malloc_r>
 80047ce:	1e05      	subs	r5, r0, #0
 80047d0:	d0e8      	beq.n	80047a4 <_realloc_r+0x14>
 80047d2:	9b01      	ldr	r3, [sp, #4]
 80047d4:	0022      	movs	r2, r4
 80047d6:	429c      	cmp	r4, r3
 80047d8:	d900      	bls.n	80047dc <_realloc_r+0x4c>
 80047da:	001a      	movs	r2, r3
 80047dc:	0031      	movs	r1, r6
 80047de:	0028      	movs	r0, r5
 80047e0:	f7ff ffa9 	bl	8004736 <memcpy>
 80047e4:	0031      	movs	r1, r6
 80047e6:	0038      	movs	r0, r7
 80047e8:	f7ff fb18 	bl	8003e1c <_free_r>
 80047ec:	e7da      	b.n	80047a4 <_realloc_r+0x14>
	...

080047f0 <_read_r>:
 80047f0:	b570      	push	{r4, r5, r6, lr}
 80047f2:	0004      	movs	r4, r0
 80047f4:	0008      	movs	r0, r1
 80047f6:	0011      	movs	r1, r2
 80047f8:	001a      	movs	r2, r3
 80047fa:	2300      	movs	r3, #0
 80047fc:	4d05      	ldr	r5, [pc, #20]	; (8004814 <_read_r+0x24>)
 80047fe:	602b      	str	r3, [r5, #0]
 8004800:	f7fc f938 	bl	8000a74 <_read>
 8004804:	1c43      	adds	r3, r0, #1
 8004806:	d103      	bne.n	8004810 <_read_r+0x20>
 8004808:	682b      	ldr	r3, [r5, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d000      	beq.n	8004810 <_read_r+0x20>
 800480e:	6023      	str	r3, [r4, #0]
 8004810:	bd70      	pop	{r4, r5, r6, pc}
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	200001a4 	.word	0x200001a4

08004818 <_malloc_usable_size_r>:
 8004818:	1f0b      	subs	r3, r1, #4
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	1f18      	subs	r0, r3, #4
 800481e:	2b00      	cmp	r3, #0
 8004820:	da01      	bge.n	8004826 <_malloc_usable_size_r+0xe>
 8004822:	580b      	ldr	r3, [r1, r0]
 8004824:	18c0      	adds	r0, r0, r3
 8004826:	4770      	bx	lr

08004828 <_init>:
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482e:	bc08      	pop	{r3}
 8004830:	469e      	mov	lr, r3
 8004832:	4770      	bx	lr

08004834 <_fini>:
 8004834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483a:	bc08      	pop	{r3}
 800483c:	469e      	mov	lr, r3
 800483e:	4770      	bx	lr
