
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007530  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  080075f0  080075f0  000175f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077b0  080077b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080077b0  080077b0  000177b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077b8  080077b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077b8  080077b8  000177b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077bc  080077bc  000177bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080077c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000070  08007830  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08007830  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7f3  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002072  00000000  00000000  0002e88b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00030900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  00031560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014d36  00000000  00000000  000320e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001008c  00000000  00000000  00046e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f304  00000000  00000000  00056eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d61ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003368  00000000  00000000  000d6200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080075d8 	.word	0x080075d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080075d8 	.word	0x080075d8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f84c 	bl	8000310 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4647      	mov	r7, r8
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	4699      	mov	r9, r3
 8000290:	0c3b      	lsrs	r3, r7, #16
 8000292:	469c      	mov	ip, r3
 8000294:	0413      	lsls	r3, r2, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0400      	lsls	r0, r0, #16
 80002a0:	0c14      	lsrs	r4, r2, #16
 80002a2:	0c00      	lsrs	r0, r0, #16
 80002a4:	4345      	muls	r5, r0
 80002a6:	434b      	muls	r3, r1
 80002a8:	4360      	muls	r0, r4
 80002aa:	4361      	muls	r1, r4
 80002ac:	18c0      	adds	r0, r0, r3
 80002ae:	0c2c      	lsrs	r4, r5, #16
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4372      	muls	r2, r6
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	4463      	add	r3, ip
 80002ca:	042d      	lsls	r5, r5, #16
 80002cc:	0c2d      	lsrs	r5, r5, #16
 80002ce:	18c9      	adds	r1, r1, r3
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	1889      	adds	r1, r1, r2
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__aeabi_f2uiz>:
 80002e0:	219e      	movs	r1, #158	; 0x9e
 80002e2:	b510      	push	{r4, lr}
 80002e4:	05c9      	lsls	r1, r1, #23
 80002e6:	1c04      	adds	r4, r0, #0
 80002e8:	f002 fb60 	bl	80029ac <__aeabi_fcmpge>
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d103      	bne.n	80002f8 <__aeabi_f2uiz+0x18>
 80002f0:	1c20      	adds	r0, r4, #0
 80002f2:	f000 fd4b 	bl	8000d8c <__aeabi_f2iz>
 80002f6:	bd10      	pop	{r4, pc}
 80002f8:	219e      	movs	r1, #158	; 0x9e
 80002fa:	1c20      	adds	r0, r4, #0
 80002fc:	05c9      	lsls	r1, r1, #23
 80002fe:	f000 fb97 	bl	8000a30 <__aeabi_fsub>
 8000302:	f000 fd43 	bl	8000d8c <__aeabi_f2iz>
 8000306:	2380      	movs	r3, #128	; 0x80
 8000308:	061b      	lsls	r3, r3, #24
 800030a:	469c      	mov	ip, r3
 800030c:	4460      	add	r0, ip
 800030e:	e7f2      	b.n	80002f6 <__aeabi_f2uiz+0x16>

08000310 <__udivmoddi4>:
 8000310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000312:	4657      	mov	r7, sl
 8000314:	464e      	mov	r6, r9
 8000316:	4645      	mov	r5, r8
 8000318:	46de      	mov	lr, fp
 800031a:	b5e0      	push	{r5, r6, r7, lr}
 800031c:	0004      	movs	r4, r0
 800031e:	000d      	movs	r5, r1
 8000320:	4692      	mov	sl, r2
 8000322:	4699      	mov	r9, r3
 8000324:	b083      	sub	sp, #12
 8000326:	428b      	cmp	r3, r1
 8000328:	d830      	bhi.n	800038c <__udivmoddi4+0x7c>
 800032a:	d02d      	beq.n	8000388 <__udivmoddi4+0x78>
 800032c:	4649      	mov	r1, r9
 800032e:	4650      	mov	r0, sl
 8000330:	f002 fb64 	bl	80029fc <__clzdi2>
 8000334:	0029      	movs	r1, r5
 8000336:	0006      	movs	r6, r0
 8000338:	0020      	movs	r0, r4
 800033a:	f002 fb5f 	bl	80029fc <__clzdi2>
 800033e:	1a33      	subs	r3, r6, r0
 8000340:	4698      	mov	r8, r3
 8000342:	3b20      	subs	r3, #32
 8000344:	469b      	mov	fp, r3
 8000346:	d433      	bmi.n	80003b0 <__udivmoddi4+0xa0>
 8000348:	465a      	mov	r2, fp
 800034a:	4653      	mov	r3, sl
 800034c:	4093      	lsls	r3, r2
 800034e:	4642      	mov	r2, r8
 8000350:	001f      	movs	r7, r3
 8000352:	4653      	mov	r3, sl
 8000354:	4093      	lsls	r3, r2
 8000356:	001e      	movs	r6, r3
 8000358:	42af      	cmp	r7, r5
 800035a:	d83a      	bhi.n	80003d2 <__udivmoddi4+0xc2>
 800035c:	42af      	cmp	r7, r5
 800035e:	d100      	bne.n	8000362 <__udivmoddi4+0x52>
 8000360:	e078      	b.n	8000454 <__udivmoddi4+0x144>
 8000362:	465b      	mov	r3, fp
 8000364:	1ba4      	subs	r4, r4, r6
 8000366:	41bd      	sbcs	r5, r7
 8000368:	2b00      	cmp	r3, #0
 800036a:	da00      	bge.n	800036e <__udivmoddi4+0x5e>
 800036c:	e075      	b.n	800045a <__udivmoddi4+0x14a>
 800036e:	2200      	movs	r2, #0
 8000370:	2300      	movs	r3, #0
 8000372:	9200      	str	r2, [sp, #0]
 8000374:	9301      	str	r3, [sp, #4]
 8000376:	2301      	movs	r3, #1
 8000378:	465a      	mov	r2, fp
 800037a:	4093      	lsls	r3, r2
 800037c:	9301      	str	r3, [sp, #4]
 800037e:	2301      	movs	r3, #1
 8000380:	4642      	mov	r2, r8
 8000382:	4093      	lsls	r3, r2
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	e028      	b.n	80003da <__udivmoddi4+0xca>
 8000388:	4282      	cmp	r2, r0
 800038a:	d9cf      	bls.n	800032c <__udivmoddi4+0x1c>
 800038c:	2200      	movs	r2, #0
 800038e:	2300      	movs	r3, #0
 8000390:	9200      	str	r2, [sp, #0]
 8000392:	9301      	str	r3, [sp, #4]
 8000394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <__udivmoddi4+0x8e>
 800039a:	601c      	str	r4, [r3, #0]
 800039c:	605d      	str	r5, [r3, #4]
 800039e:	9800      	ldr	r0, [sp, #0]
 80003a0:	9901      	ldr	r1, [sp, #4]
 80003a2:	b003      	add	sp, #12
 80003a4:	bcf0      	pop	{r4, r5, r6, r7}
 80003a6:	46bb      	mov	fp, r7
 80003a8:	46b2      	mov	sl, r6
 80003aa:	46a9      	mov	r9, r5
 80003ac:	46a0      	mov	r8, r4
 80003ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b0:	4642      	mov	r2, r8
 80003b2:	2320      	movs	r3, #32
 80003b4:	1a9b      	subs	r3, r3, r2
 80003b6:	4652      	mov	r2, sl
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	4641      	mov	r1, r8
 80003bc:	0013      	movs	r3, r2
 80003be:	464a      	mov	r2, r9
 80003c0:	408a      	lsls	r2, r1
 80003c2:	0017      	movs	r7, r2
 80003c4:	4642      	mov	r2, r8
 80003c6:	431f      	orrs	r7, r3
 80003c8:	4653      	mov	r3, sl
 80003ca:	4093      	lsls	r3, r2
 80003cc:	001e      	movs	r6, r3
 80003ce:	42af      	cmp	r7, r5
 80003d0:	d9c4      	bls.n	800035c <__udivmoddi4+0x4c>
 80003d2:	2200      	movs	r2, #0
 80003d4:	2300      	movs	r3, #0
 80003d6:	9200      	str	r2, [sp, #0]
 80003d8:	9301      	str	r3, [sp, #4]
 80003da:	4643      	mov	r3, r8
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d0d9      	beq.n	8000394 <__udivmoddi4+0x84>
 80003e0:	07fb      	lsls	r3, r7, #31
 80003e2:	0872      	lsrs	r2, r6, #1
 80003e4:	431a      	orrs	r2, r3
 80003e6:	4646      	mov	r6, r8
 80003e8:	087b      	lsrs	r3, r7, #1
 80003ea:	e00e      	b.n	800040a <__udivmoddi4+0xfa>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	d101      	bne.n	80003f4 <__udivmoddi4+0xe4>
 80003f0:	42a2      	cmp	r2, r4
 80003f2:	d80c      	bhi.n	800040e <__udivmoddi4+0xfe>
 80003f4:	1aa4      	subs	r4, r4, r2
 80003f6:	419d      	sbcs	r5, r3
 80003f8:	2001      	movs	r0, #1
 80003fa:	1924      	adds	r4, r4, r4
 80003fc:	416d      	adcs	r5, r5
 80003fe:	2100      	movs	r1, #0
 8000400:	3e01      	subs	r6, #1
 8000402:	1824      	adds	r4, r4, r0
 8000404:	414d      	adcs	r5, r1
 8000406:	2e00      	cmp	r6, #0
 8000408:	d006      	beq.n	8000418 <__udivmoddi4+0x108>
 800040a:	42ab      	cmp	r3, r5
 800040c:	d9ee      	bls.n	80003ec <__udivmoddi4+0xdc>
 800040e:	3e01      	subs	r6, #1
 8000410:	1924      	adds	r4, r4, r4
 8000412:	416d      	adcs	r5, r5
 8000414:	2e00      	cmp	r6, #0
 8000416:	d1f8      	bne.n	800040a <__udivmoddi4+0xfa>
 8000418:	9800      	ldr	r0, [sp, #0]
 800041a:	9901      	ldr	r1, [sp, #4]
 800041c:	465b      	mov	r3, fp
 800041e:	1900      	adds	r0, r0, r4
 8000420:	4169      	adcs	r1, r5
 8000422:	2b00      	cmp	r3, #0
 8000424:	db24      	blt.n	8000470 <__udivmoddi4+0x160>
 8000426:	002b      	movs	r3, r5
 8000428:	465a      	mov	r2, fp
 800042a:	4644      	mov	r4, r8
 800042c:	40d3      	lsrs	r3, r2
 800042e:	002a      	movs	r2, r5
 8000430:	40e2      	lsrs	r2, r4
 8000432:	001c      	movs	r4, r3
 8000434:	465b      	mov	r3, fp
 8000436:	0015      	movs	r5, r2
 8000438:	2b00      	cmp	r3, #0
 800043a:	db2a      	blt.n	8000492 <__udivmoddi4+0x182>
 800043c:	0026      	movs	r6, r4
 800043e:	409e      	lsls	r6, r3
 8000440:	0033      	movs	r3, r6
 8000442:	0026      	movs	r6, r4
 8000444:	4647      	mov	r7, r8
 8000446:	40be      	lsls	r6, r7
 8000448:	0032      	movs	r2, r6
 800044a:	1a80      	subs	r0, r0, r2
 800044c:	4199      	sbcs	r1, r3
 800044e:	9000      	str	r0, [sp, #0]
 8000450:	9101      	str	r1, [sp, #4]
 8000452:	e79f      	b.n	8000394 <__udivmoddi4+0x84>
 8000454:	42a3      	cmp	r3, r4
 8000456:	d8bc      	bhi.n	80003d2 <__udivmoddi4+0xc2>
 8000458:	e783      	b.n	8000362 <__udivmoddi4+0x52>
 800045a:	4642      	mov	r2, r8
 800045c:	2320      	movs	r3, #32
 800045e:	2100      	movs	r1, #0
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	2200      	movs	r2, #0
 8000464:	9100      	str	r1, [sp, #0]
 8000466:	9201      	str	r2, [sp, #4]
 8000468:	2201      	movs	r2, #1
 800046a:	40da      	lsrs	r2, r3
 800046c:	9201      	str	r2, [sp, #4]
 800046e:	e786      	b.n	800037e <__udivmoddi4+0x6e>
 8000470:	4642      	mov	r2, r8
 8000472:	2320      	movs	r3, #32
 8000474:	1a9b      	subs	r3, r3, r2
 8000476:	002a      	movs	r2, r5
 8000478:	4646      	mov	r6, r8
 800047a:	409a      	lsls	r2, r3
 800047c:	0023      	movs	r3, r4
 800047e:	40f3      	lsrs	r3, r6
 8000480:	4644      	mov	r4, r8
 8000482:	4313      	orrs	r3, r2
 8000484:	002a      	movs	r2, r5
 8000486:	40e2      	lsrs	r2, r4
 8000488:	001c      	movs	r4, r3
 800048a:	465b      	mov	r3, fp
 800048c:	0015      	movs	r5, r2
 800048e:	2b00      	cmp	r3, #0
 8000490:	dad4      	bge.n	800043c <__udivmoddi4+0x12c>
 8000492:	4642      	mov	r2, r8
 8000494:	002f      	movs	r7, r5
 8000496:	2320      	movs	r3, #32
 8000498:	0026      	movs	r6, r4
 800049a:	4097      	lsls	r7, r2
 800049c:	1a9b      	subs	r3, r3, r2
 800049e:	40de      	lsrs	r6, r3
 80004a0:	003b      	movs	r3, r7
 80004a2:	4333      	orrs	r3, r6
 80004a4:	e7cd      	b.n	8000442 <__udivmoddi4+0x132>
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	46c6      	mov	lr, r8
 80004ac:	0243      	lsls	r3, r0, #9
 80004ae:	0a5b      	lsrs	r3, r3, #9
 80004b0:	024e      	lsls	r6, r1, #9
 80004b2:	0045      	lsls	r5, r0, #1
 80004b4:	004f      	lsls	r7, r1, #1
 80004b6:	00da      	lsls	r2, r3, #3
 80004b8:	0fc4      	lsrs	r4, r0, #31
 80004ba:	469c      	mov	ip, r3
 80004bc:	0a70      	lsrs	r0, r6, #9
 80004be:	4690      	mov	r8, r2
 80004c0:	b500      	push	{lr}
 80004c2:	0e2d      	lsrs	r5, r5, #24
 80004c4:	0e3f      	lsrs	r7, r7, #24
 80004c6:	0fc9      	lsrs	r1, r1, #31
 80004c8:	09b6      	lsrs	r6, r6, #6
 80004ca:	428c      	cmp	r4, r1
 80004cc:	d04b      	beq.n	8000566 <__aeabi_fadd+0xbe>
 80004ce:	1bea      	subs	r2, r5, r7
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	dd36      	ble.n	8000542 <__aeabi_fadd+0x9a>
 80004d4:	2f00      	cmp	r7, #0
 80004d6:	d061      	beq.n	800059c <__aeabi_fadd+0xf4>
 80004d8:	2dff      	cmp	r5, #255	; 0xff
 80004da:	d100      	bne.n	80004de <__aeabi_fadd+0x36>
 80004dc:	e0ad      	b.n	800063a <__aeabi_fadd+0x192>
 80004de:	2380      	movs	r3, #128	; 0x80
 80004e0:	04db      	lsls	r3, r3, #19
 80004e2:	431e      	orrs	r6, r3
 80004e4:	2a1b      	cmp	r2, #27
 80004e6:	dc00      	bgt.n	80004ea <__aeabi_fadd+0x42>
 80004e8:	e0d3      	b.n	8000692 <__aeabi_fadd+0x1ea>
 80004ea:	2001      	movs	r0, #1
 80004ec:	4643      	mov	r3, r8
 80004ee:	1a18      	subs	r0, r3, r0
 80004f0:	0143      	lsls	r3, r0, #5
 80004f2:	d400      	bmi.n	80004f6 <__aeabi_fadd+0x4e>
 80004f4:	e08c      	b.n	8000610 <__aeabi_fadd+0x168>
 80004f6:	0180      	lsls	r0, r0, #6
 80004f8:	0987      	lsrs	r7, r0, #6
 80004fa:	0038      	movs	r0, r7
 80004fc:	f002 fa60 	bl	80029c0 <__clzsi2>
 8000500:	3805      	subs	r0, #5
 8000502:	4087      	lsls	r7, r0
 8000504:	4285      	cmp	r5, r0
 8000506:	dc00      	bgt.n	800050a <__aeabi_fadd+0x62>
 8000508:	e0b6      	b.n	8000678 <__aeabi_fadd+0x1d0>
 800050a:	1a2d      	subs	r5, r5, r0
 800050c:	48b3      	ldr	r0, [pc, #716]	; (80007dc <__aeabi_fadd+0x334>)
 800050e:	4038      	ands	r0, r7
 8000510:	0743      	lsls	r3, r0, #29
 8000512:	d004      	beq.n	800051e <__aeabi_fadd+0x76>
 8000514:	230f      	movs	r3, #15
 8000516:	4003      	ands	r3, r0
 8000518:	2b04      	cmp	r3, #4
 800051a:	d000      	beq.n	800051e <__aeabi_fadd+0x76>
 800051c:	3004      	adds	r0, #4
 800051e:	0143      	lsls	r3, r0, #5
 8000520:	d400      	bmi.n	8000524 <__aeabi_fadd+0x7c>
 8000522:	e078      	b.n	8000616 <__aeabi_fadd+0x16e>
 8000524:	1c6a      	adds	r2, r5, #1
 8000526:	2dfe      	cmp	r5, #254	; 0xfe
 8000528:	d065      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800052a:	0180      	lsls	r0, r0, #6
 800052c:	0a43      	lsrs	r3, r0, #9
 800052e:	469c      	mov	ip, r3
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	4663      	mov	r3, ip
 8000534:	05d0      	lsls	r0, r2, #23
 8000536:	4318      	orrs	r0, r3
 8000538:	07e4      	lsls	r4, r4, #31
 800053a:	4320      	orrs	r0, r4
 800053c:	bc80      	pop	{r7}
 800053e:	46b8      	mov	r8, r7
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	2a00      	cmp	r2, #0
 8000544:	d035      	beq.n	80005b2 <__aeabi_fadd+0x10a>
 8000546:	1b7a      	subs	r2, r7, r5
 8000548:	2d00      	cmp	r5, #0
 800054a:	d000      	beq.n	800054e <__aeabi_fadd+0xa6>
 800054c:	e0af      	b.n	80006ae <__aeabi_fadd+0x206>
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_fadd+0xae>
 8000554:	e0a7      	b.n	80006a6 <__aeabi_fadd+0x1fe>
 8000556:	1e53      	subs	r3, r2, #1
 8000558:	2a01      	cmp	r2, #1
 800055a:	d100      	bne.n	800055e <__aeabi_fadd+0xb6>
 800055c:	e12f      	b.n	80007be <__aeabi_fadd+0x316>
 800055e:	2aff      	cmp	r2, #255	; 0xff
 8000560:	d069      	beq.n	8000636 <__aeabi_fadd+0x18e>
 8000562:	001a      	movs	r2, r3
 8000564:	e0aa      	b.n	80006bc <__aeabi_fadd+0x214>
 8000566:	1be9      	subs	r1, r5, r7
 8000568:	2900      	cmp	r1, #0
 800056a:	dd70      	ble.n	800064e <__aeabi_fadd+0x1a6>
 800056c:	2f00      	cmp	r7, #0
 800056e:	d037      	beq.n	80005e0 <__aeabi_fadd+0x138>
 8000570:	2dff      	cmp	r5, #255	; 0xff
 8000572:	d062      	beq.n	800063a <__aeabi_fadd+0x192>
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	04db      	lsls	r3, r3, #19
 8000578:	431e      	orrs	r6, r3
 800057a:	291b      	cmp	r1, #27
 800057c:	dc00      	bgt.n	8000580 <__aeabi_fadd+0xd8>
 800057e:	e0b0      	b.n	80006e2 <__aeabi_fadd+0x23a>
 8000580:	2001      	movs	r0, #1
 8000582:	4440      	add	r0, r8
 8000584:	0143      	lsls	r3, r0, #5
 8000586:	d543      	bpl.n	8000610 <__aeabi_fadd+0x168>
 8000588:	3501      	adds	r5, #1
 800058a:	2dff      	cmp	r5, #255	; 0xff
 800058c:	d033      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800058e:	2301      	movs	r3, #1
 8000590:	4a93      	ldr	r2, [pc, #588]	; (80007e0 <__aeabi_fadd+0x338>)
 8000592:	4003      	ands	r3, r0
 8000594:	0840      	lsrs	r0, r0, #1
 8000596:	4010      	ands	r0, r2
 8000598:	4318      	orrs	r0, r3
 800059a:	e7b9      	b.n	8000510 <__aeabi_fadd+0x68>
 800059c:	2e00      	cmp	r6, #0
 800059e:	d100      	bne.n	80005a2 <__aeabi_fadd+0xfa>
 80005a0:	e083      	b.n	80006aa <__aeabi_fadd+0x202>
 80005a2:	1e51      	subs	r1, r2, #1
 80005a4:	2a01      	cmp	r2, #1
 80005a6:	d100      	bne.n	80005aa <__aeabi_fadd+0x102>
 80005a8:	e0d8      	b.n	800075c <__aeabi_fadd+0x2b4>
 80005aa:	2aff      	cmp	r2, #255	; 0xff
 80005ac:	d045      	beq.n	800063a <__aeabi_fadd+0x192>
 80005ae:	000a      	movs	r2, r1
 80005b0:	e798      	b.n	80004e4 <__aeabi_fadd+0x3c>
 80005b2:	27fe      	movs	r7, #254	; 0xfe
 80005b4:	1c6a      	adds	r2, r5, #1
 80005b6:	4217      	tst	r7, r2
 80005b8:	d000      	beq.n	80005bc <__aeabi_fadd+0x114>
 80005ba:	e086      	b.n	80006ca <__aeabi_fadd+0x222>
 80005bc:	2d00      	cmp	r5, #0
 80005be:	d000      	beq.n	80005c2 <__aeabi_fadd+0x11a>
 80005c0:	e0b7      	b.n	8000732 <__aeabi_fadd+0x28a>
 80005c2:	4643      	mov	r3, r8
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0x122>
 80005c8:	e0f3      	b.n	80007b2 <__aeabi_fadd+0x30a>
 80005ca:	2200      	movs	r2, #0
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d0b0      	beq.n	8000532 <__aeabi_fadd+0x8a>
 80005d0:	1b98      	subs	r0, r3, r6
 80005d2:	0143      	lsls	r3, r0, #5
 80005d4:	d400      	bmi.n	80005d8 <__aeabi_fadd+0x130>
 80005d6:	e0fa      	b.n	80007ce <__aeabi_fadd+0x326>
 80005d8:	4643      	mov	r3, r8
 80005da:	000c      	movs	r4, r1
 80005dc:	1af0      	subs	r0, r6, r3
 80005de:	e797      	b.n	8000510 <__aeabi_fadd+0x68>
 80005e0:	2e00      	cmp	r6, #0
 80005e2:	d100      	bne.n	80005e6 <__aeabi_fadd+0x13e>
 80005e4:	e0c8      	b.n	8000778 <__aeabi_fadd+0x2d0>
 80005e6:	1e4a      	subs	r2, r1, #1
 80005e8:	2901      	cmp	r1, #1
 80005ea:	d100      	bne.n	80005ee <__aeabi_fadd+0x146>
 80005ec:	e0ae      	b.n	800074c <__aeabi_fadd+0x2a4>
 80005ee:	29ff      	cmp	r1, #255	; 0xff
 80005f0:	d023      	beq.n	800063a <__aeabi_fadd+0x192>
 80005f2:	0011      	movs	r1, r2
 80005f4:	e7c1      	b.n	800057a <__aeabi_fadd+0xd2>
 80005f6:	2300      	movs	r3, #0
 80005f8:	22ff      	movs	r2, #255	; 0xff
 80005fa:	469c      	mov	ip, r3
 80005fc:	e799      	b.n	8000532 <__aeabi_fadd+0x8a>
 80005fe:	21fe      	movs	r1, #254	; 0xfe
 8000600:	1c6a      	adds	r2, r5, #1
 8000602:	4211      	tst	r1, r2
 8000604:	d077      	beq.n	80006f6 <__aeabi_fadd+0x24e>
 8000606:	2aff      	cmp	r2, #255	; 0xff
 8000608:	d0f5      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800060a:	0015      	movs	r5, r2
 800060c:	4446      	add	r6, r8
 800060e:	0870      	lsrs	r0, r6, #1
 8000610:	0743      	lsls	r3, r0, #29
 8000612:	d000      	beq.n	8000616 <__aeabi_fadd+0x16e>
 8000614:	e77e      	b.n	8000514 <__aeabi_fadd+0x6c>
 8000616:	08c3      	lsrs	r3, r0, #3
 8000618:	2dff      	cmp	r5, #255	; 0xff
 800061a:	d00e      	beq.n	800063a <__aeabi_fadd+0x192>
 800061c:	025b      	lsls	r3, r3, #9
 800061e:	0a5b      	lsrs	r3, r3, #9
 8000620:	469c      	mov	ip, r3
 8000622:	b2ea      	uxtb	r2, r5
 8000624:	e785      	b.n	8000532 <__aeabi_fadd+0x8a>
 8000626:	2e00      	cmp	r6, #0
 8000628:	d007      	beq.n	800063a <__aeabi_fadd+0x192>
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	03d2      	lsls	r2, r2, #15
 800062e:	4213      	tst	r3, r2
 8000630:	d003      	beq.n	800063a <__aeabi_fadd+0x192>
 8000632:	4210      	tst	r0, r2
 8000634:	d101      	bne.n	800063a <__aeabi_fadd+0x192>
 8000636:	000c      	movs	r4, r1
 8000638:	0003      	movs	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0db      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800063e:	2080      	movs	r0, #128	; 0x80
 8000640:	03c0      	lsls	r0, r0, #15
 8000642:	4318      	orrs	r0, r3
 8000644:	0240      	lsls	r0, r0, #9
 8000646:	0a43      	lsrs	r3, r0, #9
 8000648:	469c      	mov	ip, r3
 800064a:	22ff      	movs	r2, #255	; 0xff
 800064c:	e771      	b.n	8000532 <__aeabi_fadd+0x8a>
 800064e:	2900      	cmp	r1, #0
 8000650:	d0d5      	beq.n	80005fe <__aeabi_fadd+0x156>
 8000652:	1b7a      	subs	r2, r7, r5
 8000654:	2d00      	cmp	r5, #0
 8000656:	d160      	bne.n	800071a <__aeabi_fadd+0x272>
 8000658:	4643      	mov	r3, r8
 800065a:	2b00      	cmp	r3, #0
 800065c:	d024      	beq.n	80006a8 <__aeabi_fadd+0x200>
 800065e:	1e53      	subs	r3, r2, #1
 8000660:	2a01      	cmp	r2, #1
 8000662:	d073      	beq.n	800074c <__aeabi_fadd+0x2a4>
 8000664:	2aff      	cmp	r2, #255	; 0xff
 8000666:	d0e7      	beq.n	8000638 <__aeabi_fadd+0x190>
 8000668:	001a      	movs	r2, r3
 800066a:	2a1b      	cmp	r2, #27
 800066c:	dc00      	bgt.n	8000670 <__aeabi_fadd+0x1c8>
 800066e:	e085      	b.n	800077c <__aeabi_fadd+0x2d4>
 8000670:	2001      	movs	r0, #1
 8000672:	003d      	movs	r5, r7
 8000674:	1980      	adds	r0, r0, r6
 8000676:	e785      	b.n	8000584 <__aeabi_fadd+0xdc>
 8000678:	2320      	movs	r3, #32
 800067a:	003a      	movs	r2, r7
 800067c:	1b45      	subs	r5, r0, r5
 800067e:	0038      	movs	r0, r7
 8000680:	3501      	adds	r5, #1
 8000682:	40ea      	lsrs	r2, r5
 8000684:	1b5d      	subs	r5, r3, r5
 8000686:	40a8      	lsls	r0, r5
 8000688:	1e43      	subs	r3, r0, #1
 800068a:	4198      	sbcs	r0, r3
 800068c:	2500      	movs	r5, #0
 800068e:	4310      	orrs	r0, r2
 8000690:	e73e      	b.n	8000510 <__aeabi_fadd+0x68>
 8000692:	2320      	movs	r3, #32
 8000694:	0030      	movs	r0, r6
 8000696:	1a9b      	subs	r3, r3, r2
 8000698:	0031      	movs	r1, r6
 800069a:	4098      	lsls	r0, r3
 800069c:	40d1      	lsrs	r1, r2
 800069e:	1e43      	subs	r3, r0, #1
 80006a0:	4198      	sbcs	r0, r3
 80006a2:	4308      	orrs	r0, r1
 80006a4:	e722      	b.n	80004ec <__aeabi_fadd+0x44>
 80006a6:	000c      	movs	r4, r1
 80006a8:	0003      	movs	r3, r0
 80006aa:	0015      	movs	r5, r2
 80006ac:	e7b4      	b.n	8000618 <__aeabi_fadd+0x170>
 80006ae:	2fff      	cmp	r7, #255	; 0xff
 80006b0:	d0c1      	beq.n	8000636 <__aeabi_fadd+0x18e>
 80006b2:	2380      	movs	r3, #128	; 0x80
 80006b4:	4640      	mov	r0, r8
 80006b6:	04db      	lsls	r3, r3, #19
 80006b8:	4318      	orrs	r0, r3
 80006ba:	4680      	mov	r8, r0
 80006bc:	2a1b      	cmp	r2, #27
 80006be:	dd51      	ble.n	8000764 <__aeabi_fadd+0x2bc>
 80006c0:	2001      	movs	r0, #1
 80006c2:	000c      	movs	r4, r1
 80006c4:	003d      	movs	r5, r7
 80006c6:	1a30      	subs	r0, r6, r0
 80006c8:	e712      	b.n	80004f0 <__aeabi_fadd+0x48>
 80006ca:	4643      	mov	r3, r8
 80006cc:	1b9f      	subs	r7, r3, r6
 80006ce:	017b      	lsls	r3, r7, #5
 80006d0:	d42b      	bmi.n	800072a <__aeabi_fadd+0x282>
 80006d2:	2f00      	cmp	r7, #0
 80006d4:	d000      	beq.n	80006d8 <__aeabi_fadd+0x230>
 80006d6:	e710      	b.n	80004fa <__aeabi_fadd+0x52>
 80006d8:	2300      	movs	r3, #0
 80006da:	2400      	movs	r4, #0
 80006dc:	2200      	movs	r2, #0
 80006de:	469c      	mov	ip, r3
 80006e0:	e727      	b.n	8000532 <__aeabi_fadd+0x8a>
 80006e2:	2320      	movs	r3, #32
 80006e4:	0032      	movs	r2, r6
 80006e6:	0030      	movs	r0, r6
 80006e8:	40ca      	lsrs	r2, r1
 80006ea:	1a59      	subs	r1, r3, r1
 80006ec:	4088      	lsls	r0, r1
 80006ee:	1e43      	subs	r3, r0, #1
 80006f0:	4198      	sbcs	r0, r3
 80006f2:	4310      	orrs	r0, r2
 80006f4:	e745      	b.n	8000582 <__aeabi_fadd+0xda>
 80006f6:	2d00      	cmp	r5, #0
 80006f8:	d14a      	bne.n	8000790 <__aeabi_fadd+0x2e8>
 80006fa:	4643      	mov	r3, r8
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d063      	beq.n	80007c8 <__aeabi_fadd+0x320>
 8000700:	2200      	movs	r2, #0
 8000702:	2e00      	cmp	r6, #0
 8000704:	d100      	bne.n	8000708 <__aeabi_fadd+0x260>
 8000706:	e714      	b.n	8000532 <__aeabi_fadd+0x8a>
 8000708:	0030      	movs	r0, r6
 800070a:	4440      	add	r0, r8
 800070c:	0143      	lsls	r3, r0, #5
 800070e:	d400      	bmi.n	8000712 <__aeabi_fadd+0x26a>
 8000710:	e77e      	b.n	8000610 <__aeabi_fadd+0x168>
 8000712:	4b32      	ldr	r3, [pc, #200]	; (80007dc <__aeabi_fadd+0x334>)
 8000714:	3501      	adds	r5, #1
 8000716:	4018      	ands	r0, r3
 8000718:	e77a      	b.n	8000610 <__aeabi_fadd+0x168>
 800071a:	2fff      	cmp	r7, #255	; 0xff
 800071c:	d08c      	beq.n	8000638 <__aeabi_fadd+0x190>
 800071e:	2380      	movs	r3, #128	; 0x80
 8000720:	4641      	mov	r1, r8
 8000722:	04db      	lsls	r3, r3, #19
 8000724:	4319      	orrs	r1, r3
 8000726:	4688      	mov	r8, r1
 8000728:	e79f      	b.n	800066a <__aeabi_fadd+0x1c2>
 800072a:	4643      	mov	r3, r8
 800072c:	000c      	movs	r4, r1
 800072e:	1af7      	subs	r7, r6, r3
 8000730:	e6e3      	b.n	80004fa <__aeabi_fadd+0x52>
 8000732:	4642      	mov	r2, r8
 8000734:	2a00      	cmp	r2, #0
 8000736:	d000      	beq.n	800073a <__aeabi_fadd+0x292>
 8000738:	e775      	b.n	8000626 <__aeabi_fadd+0x17e>
 800073a:	2e00      	cmp	r6, #0
 800073c:	d000      	beq.n	8000740 <__aeabi_fadd+0x298>
 800073e:	e77a      	b.n	8000636 <__aeabi_fadd+0x18e>
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	03db      	lsls	r3, r3, #15
 8000744:	2400      	movs	r4, #0
 8000746:	469c      	mov	ip, r3
 8000748:	22ff      	movs	r2, #255	; 0xff
 800074a:	e6f2      	b.n	8000532 <__aeabi_fadd+0x8a>
 800074c:	0030      	movs	r0, r6
 800074e:	4440      	add	r0, r8
 8000750:	2501      	movs	r5, #1
 8000752:	0143      	lsls	r3, r0, #5
 8000754:	d400      	bmi.n	8000758 <__aeabi_fadd+0x2b0>
 8000756:	e75b      	b.n	8000610 <__aeabi_fadd+0x168>
 8000758:	2502      	movs	r5, #2
 800075a:	e718      	b.n	800058e <__aeabi_fadd+0xe6>
 800075c:	4643      	mov	r3, r8
 800075e:	2501      	movs	r5, #1
 8000760:	1b98      	subs	r0, r3, r6
 8000762:	e6c5      	b.n	80004f0 <__aeabi_fadd+0x48>
 8000764:	2320      	movs	r3, #32
 8000766:	4644      	mov	r4, r8
 8000768:	4640      	mov	r0, r8
 800076a:	40d4      	lsrs	r4, r2
 800076c:	1a9a      	subs	r2, r3, r2
 800076e:	4090      	lsls	r0, r2
 8000770:	1e43      	subs	r3, r0, #1
 8000772:	4198      	sbcs	r0, r3
 8000774:	4320      	orrs	r0, r4
 8000776:	e7a4      	b.n	80006c2 <__aeabi_fadd+0x21a>
 8000778:	000d      	movs	r5, r1
 800077a:	e74d      	b.n	8000618 <__aeabi_fadd+0x170>
 800077c:	2320      	movs	r3, #32
 800077e:	4641      	mov	r1, r8
 8000780:	4640      	mov	r0, r8
 8000782:	40d1      	lsrs	r1, r2
 8000784:	1a9a      	subs	r2, r3, r2
 8000786:	4090      	lsls	r0, r2
 8000788:	1e43      	subs	r3, r0, #1
 800078a:	4198      	sbcs	r0, r3
 800078c:	4308      	orrs	r0, r1
 800078e:	e770      	b.n	8000672 <__aeabi_fadd+0x1ca>
 8000790:	4642      	mov	r2, r8
 8000792:	2a00      	cmp	r2, #0
 8000794:	d100      	bne.n	8000798 <__aeabi_fadd+0x2f0>
 8000796:	e74f      	b.n	8000638 <__aeabi_fadd+0x190>
 8000798:	2e00      	cmp	r6, #0
 800079a:	d100      	bne.n	800079e <__aeabi_fadd+0x2f6>
 800079c:	e74d      	b.n	800063a <__aeabi_fadd+0x192>
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	03d2      	lsls	r2, r2, #15
 80007a2:	4213      	tst	r3, r2
 80007a4:	d100      	bne.n	80007a8 <__aeabi_fadd+0x300>
 80007a6:	e748      	b.n	800063a <__aeabi_fadd+0x192>
 80007a8:	4210      	tst	r0, r2
 80007aa:	d000      	beq.n	80007ae <__aeabi_fadd+0x306>
 80007ac:	e745      	b.n	800063a <__aeabi_fadd+0x192>
 80007ae:	0003      	movs	r3, r0
 80007b0:	e743      	b.n	800063a <__aeabi_fadd+0x192>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	d090      	beq.n	80006d8 <__aeabi_fadd+0x230>
 80007b6:	000c      	movs	r4, r1
 80007b8:	4684      	mov	ip, r0
 80007ba:	2200      	movs	r2, #0
 80007bc:	e6b9      	b.n	8000532 <__aeabi_fadd+0x8a>
 80007be:	4643      	mov	r3, r8
 80007c0:	000c      	movs	r4, r1
 80007c2:	1af0      	subs	r0, r6, r3
 80007c4:	3501      	adds	r5, #1
 80007c6:	e693      	b.n	80004f0 <__aeabi_fadd+0x48>
 80007c8:	4684      	mov	ip, r0
 80007ca:	2200      	movs	r2, #0
 80007cc:	e6b1      	b.n	8000532 <__aeabi_fadd+0x8a>
 80007ce:	2800      	cmp	r0, #0
 80007d0:	d000      	beq.n	80007d4 <__aeabi_fadd+0x32c>
 80007d2:	e71d      	b.n	8000610 <__aeabi_fadd+0x168>
 80007d4:	2300      	movs	r3, #0
 80007d6:	2400      	movs	r4, #0
 80007d8:	469c      	mov	ip, r3
 80007da:	e6aa      	b.n	8000532 <__aeabi_fadd+0x8a>
 80007dc:	fbffffff 	.word	0xfbffffff
 80007e0:	7dffffff 	.word	0x7dffffff

080007e4 <__aeabi_fmul>:
 80007e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e6:	464f      	mov	r7, r9
 80007e8:	4646      	mov	r6, r8
 80007ea:	46d6      	mov	lr, sl
 80007ec:	0244      	lsls	r4, r0, #9
 80007ee:	0045      	lsls	r5, r0, #1
 80007f0:	b5c0      	push	{r6, r7, lr}
 80007f2:	0a64      	lsrs	r4, r4, #9
 80007f4:	1c0f      	adds	r7, r1, #0
 80007f6:	0e2d      	lsrs	r5, r5, #24
 80007f8:	0fc6      	lsrs	r6, r0, #31
 80007fa:	2d00      	cmp	r5, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_fmul+0x1c>
 80007fe:	e08d      	b.n	800091c <__aeabi_fmul+0x138>
 8000800:	2dff      	cmp	r5, #255	; 0xff
 8000802:	d100      	bne.n	8000806 <__aeabi_fmul+0x22>
 8000804:	e092      	b.n	800092c <__aeabi_fmul+0x148>
 8000806:	2300      	movs	r3, #0
 8000808:	2080      	movs	r0, #128	; 0x80
 800080a:	4699      	mov	r9, r3
 800080c:	469a      	mov	sl, r3
 800080e:	00e4      	lsls	r4, r4, #3
 8000810:	04c0      	lsls	r0, r0, #19
 8000812:	4304      	orrs	r4, r0
 8000814:	3d7f      	subs	r5, #127	; 0x7f
 8000816:	0278      	lsls	r0, r7, #9
 8000818:	0a43      	lsrs	r3, r0, #9
 800081a:	4698      	mov	r8, r3
 800081c:	007b      	lsls	r3, r7, #1
 800081e:	0e1b      	lsrs	r3, r3, #24
 8000820:	0fff      	lsrs	r7, r7, #31
 8000822:	2b00      	cmp	r3, #0
 8000824:	d100      	bne.n	8000828 <__aeabi_fmul+0x44>
 8000826:	e070      	b.n	800090a <__aeabi_fmul+0x126>
 8000828:	2bff      	cmp	r3, #255	; 0xff
 800082a:	d100      	bne.n	800082e <__aeabi_fmul+0x4a>
 800082c:	e086      	b.n	800093c <__aeabi_fmul+0x158>
 800082e:	4642      	mov	r2, r8
 8000830:	00d0      	lsls	r0, r2, #3
 8000832:	2280      	movs	r2, #128	; 0x80
 8000834:	3b7f      	subs	r3, #127	; 0x7f
 8000836:	18ed      	adds	r5, r5, r3
 8000838:	2300      	movs	r3, #0
 800083a:	04d2      	lsls	r2, r2, #19
 800083c:	4302      	orrs	r2, r0
 800083e:	4690      	mov	r8, r2
 8000840:	469c      	mov	ip, r3
 8000842:	0031      	movs	r1, r6
 8000844:	464b      	mov	r3, r9
 8000846:	4079      	eors	r1, r7
 8000848:	1c68      	adds	r0, r5, #1
 800084a:	2b0f      	cmp	r3, #15
 800084c:	d81c      	bhi.n	8000888 <__aeabi_fmul+0xa4>
 800084e:	4a76      	ldr	r2, [pc, #472]	; (8000a28 <__aeabi_fmul+0x244>)
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	58d3      	ldr	r3, [r2, r3]
 8000854:	469f      	mov	pc, r3
 8000856:	0039      	movs	r1, r7
 8000858:	4644      	mov	r4, r8
 800085a:	46e2      	mov	sl, ip
 800085c:	4653      	mov	r3, sl
 800085e:	2b02      	cmp	r3, #2
 8000860:	d00f      	beq.n	8000882 <__aeabi_fmul+0x9e>
 8000862:	2b03      	cmp	r3, #3
 8000864:	d100      	bne.n	8000868 <__aeabi_fmul+0x84>
 8000866:	e0d7      	b.n	8000a18 <__aeabi_fmul+0x234>
 8000868:	2b01      	cmp	r3, #1
 800086a:	d137      	bne.n	80008dc <__aeabi_fmul+0xf8>
 800086c:	2000      	movs	r0, #0
 800086e:	2400      	movs	r4, #0
 8000870:	05c0      	lsls	r0, r0, #23
 8000872:	4320      	orrs	r0, r4
 8000874:	07c9      	lsls	r1, r1, #31
 8000876:	4308      	orrs	r0, r1
 8000878:	bce0      	pop	{r5, r6, r7}
 800087a:	46ba      	mov	sl, r7
 800087c:	46b1      	mov	r9, r6
 800087e:	46a8      	mov	r8, r5
 8000880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000882:	20ff      	movs	r0, #255	; 0xff
 8000884:	2400      	movs	r4, #0
 8000886:	e7f3      	b.n	8000870 <__aeabi_fmul+0x8c>
 8000888:	0c26      	lsrs	r6, r4, #16
 800088a:	0424      	lsls	r4, r4, #16
 800088c:	0c22      	lsrs	r2, r4, #16
 800088e:	4644      	mov	r4, r8
 8000890:	0424      	lsls	r4, r4, #16
 8000892:	0c24      	lsrs	r4, r4, #16
 8000894:	4643      	mov	r3, r8
 8000896:	0027      	movs	r7, r4
 8000898:	0c1b      	lsrs	r3, r3, #16
 800089a:	4357      	muls	r7, r2
 800089c:	4374      	muls	r4, r6
 800089e:	435a      	muls	r2, r3
 80008a0:	435e      	muls	r6, r3
 80008a2:	1912      	adds	r2, r2, r4
 80008a4:	0c3b      	lsrs	r3, r7, #16
 80008a6:	189b      	adds	r3, r3, r2
 80008a8:	429c      	cmp	r4, r3
 80008aa:	d903      	bls.n	80008b4 <__aeabi_fmul+0xd0>
 80008ac:	2280      	movs	r2, #128	; 0x80
 80008ae:	0252      	lsls	r2, r2, #9
 80008b0:	4694      	mov	ip, r2
 80008b2:	4466      	add	r6, ip
 80008b4:	043f      	lsls	r7, r7, #16
 80008b6:	041a      	lsls	r2, r3, #16
 80008b8:	0c3f      	lsrs	r7, r7, #16
 80008ba:	19d2      	adds	r2, r2, r7
 80008bc:	0194      	lsls	r4, r2, #6
 80008be:	1e67      	subs	r7, r4, #1
 80008c0:	41bc      	sbcs	r4, r7
 80008c2:	0c1b      	lsrs	r3, r3, #16
 80008c4:	0e92      	lsrs	r2, r2, #26
 80008c6:	199b      	adds	r3, r3, r6
 80008c8:	4314      	orrs	r4, r2
 80008ca:	019b      	lsls	r3, r3, #6
 80008cc:	431c      	orrs	r4, r3
 80008ce:	011b      	lsls	r3, r3, #4
 80008d0:	d400      	bmi.n	80008d4 <__aeabi_fmul+0xf0>
 80008d2:	e09b      	b.n	8000a0c <__aeabi_fmul+0x228>
 80008d4:	2301      	movs	r3, #1
 80008d6:	0862      	lsrs	r2, r4, #1
 80008d8:	401c      	ands	r4, r3
 80008da:	4314      	orrs	r4, r2
 80008dc:	0002      	movs	r2, r0
 80008de:	327f      	adds	r2, #127	; 0x7f
 80008e0:	2a00      	cmp	r2, #0
 80008e2:	dd64      	ble.n	80009ae <__aeabi_fmul+0x1ca>
 80008e4:	0763      	lsls	r3, r4, #29
 80008e6:	d004      	beq.n	80008f2 <__aeabi_fmul+0x10e>
 80008e8:	230f      	movs	r3, #15
 80008ea:	4023      	ands	r3, r4
 80008ec:	2b04      	cmp	r3, #4
 80008ee:	d000      	beq.n	80008f2 <__aeabi_fmul+0x10e>
 80008f0:	3404      	adds	r4, #4
 80008f2:	0123      	lsls	r3, r4, #4
 80008f4:	d503      	bpl.n	80008fe <__aeabi_fmul+0x11a>
 80008f6:	0002      	movs	r2, r0
 80008f8:	4b4c      	ldr	r3, [pc, #304]	; (8000a2c <__aeabi_fmul+0x248>)
 80008fa:	3280      	adds	r2, #128	; 0x80
 80008fc:	401c      	ands	r4, r3
 80008fe:	2afe      	cmp	r2, #254	; 0xfe
 8000900:	dcbf      	bgt.n	8000882 <__aeabi_fmul+0x9e>
 8000902:	01a4      	lsls	r4, r4, #6
 8000904:	0a64      	lsrs	r4, r4, #9
 8000906:	b2d0      	uxtb	r0, r2
 8000908:	e7b2      	b.n	8000870 <__aeabi_fmul+0x8c>
 800090a:	4643      	mov	r3, r8
 800090c:	2b00      	cmp	r3, #0
 800090e:	d13d      	bne.n	800098c <__aeabi_fmul+0x1a8>
 8000910:	464a      	mov	r2, r9
 8000912:	3301      	adds	r3, #1
 8000914:	431a      	orrs	r2, r3
 8000916:	4691      	mov	r9, r2
 8000918:	469c      	mov	ip, r3
 800091a:	e792      	b.n	8000842 <__aeabi_fmul+0x5e>
 800091c:	2c00      	cmp	r4, #0
 800091e:	d129      	bne.n	8000974 <__aeabi_fmul+0x190>
 8000920:	2304      	movs	r3, #4
 8000922:	4699      	mov	r9, r3
 8000924:	3b03      	subs	r3, #3
 8000926:	2500      	movs	r5, #0
 8000928:	469a      	mov	sl, r3
 800092a:	e774      	b.n	8000816 <__aeabi_fmul+0x32>
 800092c:	2c00      	cmp	r4, #0
 800092e:	d11b      	bne.n	8000968 <__aeabi_fmul+0x184>
 8000930:	2308      	movs	r3, #8
 8000932:	4699      	mov	r9, r3
 8000934:	3b06      	subs	r3, #6
 8000936:	25ff      	movs	r5, #255	; 0xff
 8000938:	469a      	mov	sl, r3
 800093a:	e76c      	b.n	8000816 <__aeabi_fmul+0x32>
 800093c:	4643      	mov	r3, r8
 800093e:	35ff      	adds	r5, #255	; 0xff
 8000940:	2b00      	cmp	r3, #0
 8000942:	d10b      	bne.n	800095c <__aeabi_fmul+0x178>
 8000944:	2302      	movs	r3, #2
 8000946:	464a      	mov	r2, r9
 8000948:	431a      	orrs	r2, r3
 800094a:	4691      	mov	r9, r2
 800094c:	469c      	mov	ip, r3
 800094e:	e778      	b.n	8000842 <__aeabi_fmul+0x5e>
 8000950:	4653      	mov	r3, sl
 8000952:	0031      	movs	r1, r6
 8000954:	2b02      	cmp	r3, #2
 8000956:	d000      	beq.n	800095a <__aeabi_fmul+0x176>
 8000958:	e783      	b.n	8000862 <__aeabi_fmul+0x7e>
 800095a:	e792      	b.n	8000882 <__aeabi_fmul+0x9e>
 800095c:	2303      	movs	r3, #3
 800095e:	464a      	mov	r2, r9
 8000960:	431a      	orrs	r2, r3
 8000962:	4691      	mov	r9, r2
 8000964:	469c      	mov	ip, r3
 8000966:	e76c      	b.n	8000842 <__aeabi_fmul+0x5e>
 8000968:	230c      	movs	r3, #12
 800096a:	4699      	mov	r9, r3
 800096c:	3b09      	subs	r3, #9
 800096e:	25ff      	movs	r5, #255	; 0xff
 8000970:	469a      	mov	sl, r3
 8000972:	e750      	b.n	8000816 <__aeabi_fmul+0x32>
 8000974:	0020      	movs	r0, r4
 8000976:	f002 f823 	bl	80029c0 <__clzsi2>
 800097a:	2576      	movs	r5, #118	; 0x76
 800097c:	1f43      	subs	r3, r0, #5
 800097e:	409c      	lsls	r4, r3
 8000980:	2300      	movs	r3, #0
 8000982:	426d      	negs	r5, r5
 8000984:	4699      	mov	r9, r3
 8000986:	469a      	mov	sl, r3
 8000988:	1a2d      	subs	r5, r5, r0
 800098a:	e744      	b.n	8000816 <__aeabi_fmul+0x32>
 800098c:	4640      	mov	r0, r8
 800098e:	f002 f817 	bl	80029c0 <__clzsi2>
 8000992:	4642      	mov	r2, r8
 8000994:	1f43      	subs	r3, r0, #5
 8000996:	409a      	lsls	r2, r3
 8000998:	2300      	movs	r3, #0
 800099a:	1a2d      	subs	r5, r5, r0
 800099c:	4690      	mov	r8, r2
 800099e:	469c      	mov	ip, r3
 80009a0:	3d76      	subs	r5, #118	; 0x76
 80009a2:	e74e      	b.n	8000842 <__aeabi_fmul+0x5e>
 80009a4:	2480      	movs	r4, #128	; 0x80
 80009a6:	2100      	movs	r1, #0
 80009a8:	20ff      	movs	r0, #255	; 0xff
 80009aa:	03e4      	lsls	r4, r4, #15
 80009ac:	e760      	b.n	8000870 <__aeabi_fmul+0x8c>
 80009ae:	2301      	movs	r3, #1
 80009b0:	1a9b      	subs	r3, r3, r2
 80009b2:	2b1b      	cmp	r3, #27
 80009b4:	dd00      	ble.n	80009b8 <__aeabi_fmul+0x1d4>
 80009b6:	e759      	b.n	800086c <__aeabi_fmul+0x88>
 80009b8:	0022      	movs	r2, r4
 80009ba:	309e      	adds	r0, #158	; 0x9e
 80009bc:	40da      	lsrs	r2, r3
 80009be:	4084      	lsls	r4, r0
 80009c0:	0013      	movs	r3, r2
 80009c2:	1e62      	subs	r2, r4, #1
 80009c4:	4194      	sbcs	r4, r2
 80009c6:	431c      	orrs	r4, r3
 80009c8:	0763      	lsls	r3, r4, #29
 80009ca:	d004      	beq.n	80009d6 <__aeabi_fmul+0x1f2>
 80009cc:	230f      	movs	r3, #15
 80009ce:	4023      	ands	r3, r4
 80009d0:	2b04      	cmp	r3, #4
 80009d2:	d000      	beq.n	80009d6 <__aeabi_fmul+0x1f2>
 80009d4:	3404      	adds	r4, #4
 80009d6:	0163      	lsls	r3, r4, #5
 80009d8:	d51a      	bpl.n	8000a10 <__aeabi_fmul+0x22c>
 80009da:	2001      	movs	r0, #1
 80009dc:	2400      	movs	r4, #0
 80009de:	e747      	b.n	8000870 <__aeabi_fmul+0x8c>
 80009e0:	2080      	movs	r0, #128	; 0x80
 80009e2:	03c0      	lsls	r0, r0, #15
 80009e4:	4204      	tst	r4, r0
 80009e6:	d009      	beq.n	80009fc <__aeabi_fmul+0x218>
 80009e8:	4643      	mov	r3, r8
 80009ea:	4203      	tst	r3, r0
 80009ec:	d106      	bne.n	80009fc <__aeabi_fmul+0x218>
 80009ee:	4644      	mov	r4, r8
 80009f0:	4304      	orrs	r4, r0
 80009f2:	0264      	lsls	r4, r4, #9
 80009f4:	0039      	movs	r1, r7
 80009f6:	20ff      	movs	r0, #255	; 0xff
 80009f8:	0a64      	lsrs	r4, r4, #9
 80009fa:	e739      	b.n	8000870 <__aeabi_fmul+0x8c>
 80009fc:	2080      	movs	r0, #128	; 0x80
 80009fe:	03c0      	lsls	r0, r0, #15
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0264      	lsls	r4, r4, #9
 8000a04:	0031      	movs	r1, r6
 8000a06:	20ff      	movs	r0, #255	; 0xff
 8000a08:	0a64      	lsrs	r4, r4, #9
 8000a0a:	e731      	b.n	8000870 <__aeabi_fmul+0x8c>
 8000a0c:	0028      	movs	r0, r5
 8000a0e:	e765      	b.n	80008dc <__aeabi_fmul+0xf8>
 8000a10:	01a4      	lsls	r4, r4, #6
 8000a12:	2000      	movs	r0, #0
 8000a14:	0a64      	lsrs	r4, r4, #9
 8000a16:	e72b      	b.n	8000870 <__aeabi_fmul+0x8c>
 8000a18:	2080      	movs	r0, #128	; 0x80
 8000a1a:	03c0      	lsls	r0, r0, #15
 8000a1c:	4304      	orrs	r4, r0
 8000a1e:	0264      	lsls	r4, r4, #9
 8000a20:	20ff      	movs	r0, #255	; 0xff
 8000a22:	0a64      	lsrs	r4, r4, #9
 8000a24:	e724      	b.n	8000870 <__aeabi_fmul+0x8c>
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	08007650 	.word	0x08007650
 8000a2c:	f7ffffff 	.word	0xf7ffffff

08000a30 <__aeabi_fsub>:
 8000a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a32:	46ce      	mov	lr, r9
 8000a34:	4647      	mov	r7, r8
 8000a36:	0243      	lsls	r3, r0, #9
 8000a38:	0a5b      	lsrs	r3, r3, #9
 8000a3a:	024e      	lsls	r6, r1, #9
 8000a3c:	00da      	lsls	r2, r3, #3
 8000a3e:	4694      	mov	ip, r2
 8000a40:	0a72      	lsrs	r2, r6, #9
 8000a42:	4691      	mov	r9, r2
 8000a44:	0045      	lsls	r5, r0, #1
 8000a46:	004a      	lsls	r2, r1, #1
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	0e2d      	lsrs	r5, r5, #24
 8000a4c:	001f      	movs	r7, r3
 8000a4e:	0fc4      	lsrs	r4, r0, #31
 8000a50:	0e12      	lsrs	r2, r2, #24
 8000a52:	0fc9      	lsrs	r1, r1, #31
 8000a54:	09b6      	lsrs	r6, r6, #6
 8000a56:	2aff      	cmp	r2, #255	; 0xff
 8000a58:	d05b      	beq.n	8000b12 <__aeabi_fsub+0xe2>
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	4041      	eors	r1, r0
 8000a5e:	428c      	cmp	r4, r1
 8000a60:	d039      	beq.n	8000ad6 <__aeabi_fsub+0xa6>
 8000a62:	1aa8      	subs	r0, r5, r2
 8000a64:	2800      	cmp	r0, #0
 8000a66:	dd5a      	ble.n	8000b1e <__aeabi_fsub+0xee>
 8000a68:	2a00      	cmp	r2, #0
 8000a6a:	d06a      	beq.n	8000b42 <__aeabi_fsub+0x112>
 8000a6c:	2dff      	cmp	r5, #255	; 0xff
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_fsub+0x42>
 8000a70:	e0d9      	b.n	8000c26 <__aeabi_fsub+0x1f6>
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	04d2      	lsls	r2, r2, #19
 8000a76:	4316      	orrs	r6, r2
 8000a78:	281b      	cmp	r0, #27
 8000a7a:	dc00      	bgt.n	8000a7e <__aeabi_fsub+0x4e>
 8000a7c:	e0e9      	b.n	8000c52 <__aeabi_fsub+0x222>
 8000a7e:	2001      	movs	r0, #1
 8000a80:	4663      	mov	r3, ip
 8000a82:	1a18      	subs	r0, r3, r0
 8000a84:	0143      	lsls	r3, r0, #5
 8000a86:	d400      	bmi.n	8000a8a <__aeabi_fsub+0x5a>
 8000a88:	e0b4      	b.n	8000bf4 <__aeabi_fsub+0x1c4>
 8000a8a:	0180      	lsls	r0, r0, #6
 8000a8c:	0987      	lsrs	r7, r0, #6
 8000a8e:	0038      	movs	r0, r7
 8000a90:	f001 ff96 	bl	80029c0 <__clzsi2>
 8000a94:	3805      	subs	r0, #5
 8000a96:	4087      	lsls	r7, r0
 8000a98:	4285      	cmp	r5, r0
 8000a9a:	dc00      	bgt.n	8000a9e <__aeabi_fsub+0x6e>
 8000a9c:	e0cc      	b.n	8000c38 <__aeabi_fsub+0x208>
 8000a9e:	1a2d      	subs	r5, r5, r0
 8000aa0:	48b5      	ldr	r0, [pc, #724]	; (8000d78 <__aeabi_fsub+0x348>)
 8000aa2:	4038      	ands	r0, r7
 8000aa4:	0743      	lsls	r3, r0, #29
 8000aa6:	d004      	beq.n	8000ab2 <__aeabi_fsub+0x82>
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	4003      	ands	r3, r0
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	d000      	beq.n	8000ab2 <__aeabi_fsub+0x82>
 8000ab0:	3004      	adds	r0, #4
 8000ab2:	0143      	lsls	r3, r0, #5
 8000ab4:	d400      	bmi.n	8000ab8 <__aeabi_fsub+0x88>
 8000ab6:	e0a0      	b.n	8000bfa <__aeabi_fsub+0x1ca>
 8000ab8:	1c6a      	adds	r2, r5, #1
 8000aba:	2dfe      	cmp	r5, #254	; 0xfe
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_fsub+0x90>
 8000abe:	e08d      	b.n	8000bdc <__aeabi_fsub+0x1ac>
 8000ac0:	0180      	lsls	r0, r0, #6
 8000ac2:	0a47      	lsrs	r7, r0, #9
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	05d0      	lsls	r0, r2, #23
 8000ac8:	4338      	orrs	r0, r7
 8000aca:	07e4      	lsls	r4, r4, #31
 8000acc:	4320      	orrs	r0, r4
 8000ace:	bcc0      	pop	{r6, r7}
 8000ad0:	46b9      	mov	r9, r7
 8000ad2:	46b0      	mov	r8, r6
 8000ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ad6:	1aa8      	subs	r0, r5, r2
 8000ad8:	4680      	mov	r8, r0
 8000ada:	2800      	cmp	r0, #0
 8000adc:	dd45      	ble.n	8000b6a <__aeabi_fsub+0x13a>
 8000ade:	2a00      	cmp	r2, #0
 8000ae0:	d070      	beq.n	8000bc4 <__aeabi_fsub+0x194>
 8000ae2:	2dff      	cmp	r5, #255	; 0xff
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_fsub+0xb8>
 8000ae6:	e09e      	b.n	8000c26 <__aeabi_fsub+0x1f6>
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	04db      	lsls	r3, r3, #19
 8000aec:	431e      	orrs	r6, r3
 8000aee:	4643      	mov	r3, r8
 8000af0:	2b1b      	cmp	r3, #27
 8000af2:	dc00      	bgt.n	8000af6 <__aeabi_fsub+0xc6>
 8000af4:	e0d2      	b.n	8000c9c <__aeabi_fsub+0x26c>
 8000af6:	2001      	movs	r0, #1
 8000af8:	4460      	add	r0, ip
 8000afa:	0143      	lsls	r3, r0, #5
 8000afc:	d57a      	bpl.n	8000bf4 <__aeabi_fsub+0x1c4>
 8000afe:	3501      	adds	r5, #1
 8000b00:	2dff      	cmp	r5, #255	; 0xff
 8000b02:	d06b      	beq.n	8000bdc <__aeabi_fsub+0x1ac>
 8000b04:	2301      	movs	r3, #1
 8000b06:	4a9d      	ldr	r2, [pc, #628]	; (8000d7c <__aeabi_fsub+0x34c>)
 8000b08:	4003      	ands	r3, r0
 8000b0a:	0840      	lsrs	r0, r0, #1
 8000b0c:	4010      	ands	r0, r2
 8000b0e:	4318      	orrs	r0, r3
 8000b10:	e7c8      	b.n	8000aa4 <__aeabi_fsub+0x74>
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	d020      	beq.n	8000b58 <__aeabi_fsub+0x128>
 8000b16:	428c      	cmp	r4, r1
 8000b18:	d023      	beq.n	8000b62 <__aeabi_fsub+0x132>
 8000b1a:	0028      	movs	r0, r5
 8000b1c:	38ff      	subs	r0, #255	; 0xff
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	d039      	beq.n	8000b96 <__aeabi_fsub+0x166>
 8000b22:	1b57      	subs	r7, r2, r5
 8000b24:	2d00      	cmp	r5, #0
 8000b26:	d000      	beq.n	8000b2a <__aeabi_fsub+0xfa>
 8000b28:	e09d      	b.n	8000c66 <__aeabi_fsub+0x236>
 8000b2a:	4663      	mov	r3, ip
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_fsub+0x102>
 8000b30:	e0db      	b.n	8000cea <__aeabi_fsub+0x2ba>
 8000b32:	1e7b      	subs	r3, r7, #1
 8000b34:	2f01      	cmp	r7, #1
 8000b36:	d100      	bne.n	8000b3a <__aeabi_fsub+0x10a>
 8000b38:	e10d      	b.n	8000d56 <__aeabi_fsub+0x326>
 8000b3a:	2fff      	cmp	r7, #255	; 0xff
 8000b3c:	d071      	beq.n	8000c22 <__aeabi_fsub+0x1f2>
 8000b3e:	001f      	movs	r7, r3
 8000b40:	e098      	b.n	8000c74 <__aeabi_fsub+0x244>
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d100      	bne.n	8000b48 <__aeabi_fsub+0x118>
 8000b46:	e0a7      	b.n	8000c98 <__aeabi_fsub+0x268>
 8000b48:	1e42      	subs	r2, r0, #1
 8000b4a:	2801      	cmp	r0, #1
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_fsub+0x120>
 8000b4e:	e0e6      	b.n	8000d1e <__aeabi_fsub+0x2ee>
 8000b50:	28ff      	cmp	r0, #255	; 0xff
 8000b52:	d068      	beq.n	8000c26 <__aeabi_fsub+0x1f6>
 8000b54:	0010      	movs	r0, r2
 8000b56:	e78f      	b.n	8000a78 <__aeabi_fsub+0x48>
 8000b58:	2001      	movs	r0, #1
 8000b5a:	4041      	eors	r1, r0
 8000b5c:	42a1      	cmp	r1, r4
 8000b5e:	d000      	beq.n	8000b62 <__aeabi_fsub+0x132>
 8000b60:	e77f      	b.n	8000a62 <__aeabi_fsub+0x32>
 8000b62:	20ff      	movs	r0, #255	; 0xff
 8000b64:	4240      	negs	r0, r0
 8000b66:	4680      	mov	r8, r0
 8000b68:	44a8      	add	r8, r5
 8000b6a:	4640      	mov	r0, r8
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d038      	beq.n	8000be2 <__aeabi_fsub+0x1b2>
 8000b70:	1b51      	subs	r1, r2, r5
 8000b72:	2d00      	cmp	r5, #0
 8000b74:	d100      	bne.n	8000b78 <__aeabi_fsub+0x148>
 8000b76:	e0ae      	b.n	8000cd6 <__aeabi_fsub+0x2a6>
 8000b78:	2aff      	cmp	r2, #255	; 0xff
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_fsub+0x14e>
 8000b7c:	e0df      	b.n	8000d3e <__aeabi_fsub+0x30e>
 8000b7e:	2380      	movs	r3, #128	; 0x80
 8000b80:	4660      	mov	r0, ip
 8000b82:	04db      	lsls	r3, r3, #19
 8000b84:	4318      	orrs	r0, r3
 8000b86:	4684      	mov	ip, r0
 8000b88:	291b      	cmp	r1, #27
 8000b8a:	dc00      	bgt.n	8000b8e <__aeabi_fsub+0x15e>
 8000b8c:	e0d9      	b.n	8000d42 <__aeabi_fsub+0x312>
 8000b8e:	2001      	movs	r0, #1
 8000b90:	0015      	movs	r5, r2
 8000b92:	1980      	adds	r0, r0, r6
 8000b94:	e7b1      	b.n	8000afa <__aeabi_fsub+0xca>
 8000b96:	20fe      	movs	r0, #254	; 0xfe
 8000b98:	1c6a      	adds	r2, r5, #1
 8000b9a:	4210      	tst	r0, r2
 8000b9c:	d171      	bne.n	8000c82 <__aeabi_fsub+0x252>
 8000b9e:	2d00      	cmp	r5, #0
 8000ba0:	d000      	beq.n	8000ba4 <__aeabi_fsub+0x174>
 8000ba2:	e0a6      	b.n	8000cf2 <__aeabi_fsub+0x2c2>
 8000ba4:	4663      	mov	r3, ip
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d100      	bne.n	8000bac <__aeabi_fsub+0x17c>
 8000baa:	e0d9      	b.n	8000d60 <__aeabi_fsub+0x330>
 8000bac:	2200      	movs	r2, #0
 8000bae:	2e00      	cmp	r6, #0
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_fsub+0x184>
 8000bb2:	e788      	b.n	8000ac6 <__aeabi_fsub+0x96>
 8000bb4:	1b98      	subs	r0, r3, r6
 8000bb6:	0143      	lsls	r3, r0, #5
 8000bb8:	d400      	bmi.n	8000bbc <__aeabi_fsub+0x18c>
 8000bba:	e0e1      	b.n	8000d80 <__aeabi_fsub+0x350>
 8000bbc:	4663      	mov	r3, ip
 8000bbe:	000c      	movs	r4, r1
 8000bc0:	1af0      	subs	r0, r6, r3
 8000bc2:	e76f      	b.n	8000aa4 <__aeabi_fsub+0x74>
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d100      	bne.n	8000bca <__aeabi_fsub+0x19a>
 8000bc8:	e0b7      	b.n	8000d3a <__aeabi_fsub+0x30a>
 8000bca:	0002      	movs	r2, r0
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	2801      	cmp	r0, #1
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_fsub+0x1a4>
 8000bd2:	e09c      	b.n	8000d0e <__aeabi_fsub+0x2de>
 8000bd4:	28ff      	cmp	r0, #255	; 0xff
 8000bd6:	d026      	beq.n	8000c26 <__aeabi_fsub+0x1f6>
 8000bd8:	4690      	mov	r8, r2
 8000bda:	e788      	b.n	8000aee <__aeabi_fsub+0xbe>
 8000bdc:	22ff      	movs	r2, #255	; 0xff
 8000bde:	2700      	movs	r7, #0
 8000be0:	e771      	b.n	8000ac6 <__aeabi_fsub+0x96>
 8000be2:	20fe      	movs	r0, #254	; 0xfe
 8000be4:	1c6a      	adds	r2, r5, #1
 8000be6:	4210      	tst	r0, r2
 8000be8:	d064      	beq.n	8000cb4 <__aeabi_fsub+0x284>
 8000bea:	2aff      	cmp	r2, #255	; 0xff
 8000bec:	d0f6      	beq.n	8000bdc <__aeabi_fsub+0x1ac>
 8000bee:	0015      	movs	r5, r2
 8000bf0:	4466      	add	r6, ip
 8000bf2:	0870      	lsrs	r0, r6, #1
 8000bf4:	0743      	lsls	r3, r0, #29
 8000bf6:	d000      	beq.n	8000bfa <__aeabi_fsub+0x1ca>
 8000bf8:	e756      	b.n	8000aa8 <__aeabi_fsub+0x78>
 8000bfa:	08c3      	lsrs	r3, r0, #3
 8000bfc:	2dff      	cmp	r5, #255	; 0xff
 8000bfe:	d012      	beq.n	8000c26 <__aeabi_fsub+0x1f6>
 8000c00:	025b      	lsls	r3, r3, #9
 8000c02:	0a5f      	lsrs	r7, r3, #9
 8000c04:	b2ea      	uxtb	r2, r5
 8000c06:	e75e      	b.n	8000ac6 <__aeabi_fsub+0x96>
 8000c08:	4662      	mov	r2, ip
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_fsub+0x1e0>
 8000c0e:	e096      	b.n	8000d3e <__aeabi_fsub+0x30e>
 8000c10:	2e00      	cmp	r6, #0
 8000c12:	d008      	beq.n	8000c26 <__aeabi_fsub+0x1f6>
 8000c14:	2280      	movs	r2, #128	; 0x80
 8000c16:	03d2      	lsls	r2, r2, #15
 8000c18:	4213      	tst	r3, r2
 8000c1a:	d004      	beq.n	8000c26 <__aeabi_fsub+0x1f6>
 8000c1c:	4648      	mov	r0, r9
 8000c1e:	4210      	tst	r0, r2
 8000c20:	d101      	bne.n	8000c26 <__aeabi_fsub+0x1f6>
 8000c22:	000c      	movs	r4, r1
 8000c24:	464b      	mov	r3, r9
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0d8      	beq.n	8000bdc <__aeabi_fsub+0x1ac>
 8000c2a:	2780      	movs	r7, #128	; 0x80
 8000c2c:	03ff      	lsls	r7, r7, #15
 8000c2e:	431f      	orrs	r7, r3
 8000c30:	027f      	lsls	r7, r7, #9
 8000c32:	22ff      	movs	r2, #255	; 0xff
 8000c34:	0a7f      	lsrs	r7, r7, #9
 8000c36:	e746      	b.n	8000ac6 <__aeabi_fsub+0x96>
 8000c38:	2320      	movs	r3, #32
 8000c3a:	003a      	movs	r2, r7
 8000c3c:	1b45      	subs	r5, r0, r5
 8000c3e:	0038      	movs	r0, r7
 8000c40:	3501      	adds	r5, #1
 8000c42:	40ea      	lsrs	r2, r5
 8000c44:	1b5d      	subs	r5, r3, r5
 8000c46:	40a8      	lsls	r0, r5
 8000c48:	1e43      	subs	r3, r0, #1
 8000c4a:	4198      	sbcs	r0, r3
 8000c4c:	2500      	movs	r5, #0
 8000c4e:	4310      	orrs	r0, r2
 8000c50:	e728      	b.n	8000aa4 <__aeabi_fsub+0x74>
 8000c52:	2320      	movs	r3, #32
 8000c54:	1a1b      	subs	r3, r3, r0
 8000c56:	0032      	movs	r2, r6
 8000c58:	409e      	lsls	r6, r3
 8000c5a:	40c2      	lsrs	r2, r0
 8000c5c:	0030      	movs	r0, r6
 8000c5e:	1e43      	subs	r3, r0, #1
 8000c60:	4198      	sbcs	r0, r3
 8000c62:	4310      	orrs	r0, r2
 8000c64:	e70c      	b.n	8000a80 <__aeabi_fsub+0x50>
 8000c66:	2aff      	cmp	r2, #255	; 0xff
 8000c68:	d0db      	beq.n	8000c22 <__aeabi_fsub+0x1f2>
 8000c6a:	2380      	movs	r3, #128	; 0x80
 8000c6c:	4660      	mov	r0, ip
 8000c6e:	04db      	lsls	r3, r3, #19
 8000c70:	4318      	orrs	r0, r3
 8000c72:	4684      	mov	ip, r0
 8000c74:	2f1b      	cmp	r7, #27
 8000c76:	dd56      	ble.n	8000d26 <__aeabi_fsub+0x2f6>
 8000c78:	2001      	movs	r0, #1
 8000c7a:	000c      	movs	r4, r1
 8000c7c:	0015      	movs	r5, r2
 8000c7e:	1a30      	subs	r0, r6, r0
 8000c80:	e700      	b.n	8000a84 <__aeabi_fsub+0x54>
 8000c82:	4663      	mov	r3, ip
 8000c84:	1b9f      	subs	r7, r3, r6
 8000c86:	017b      	lsls	r3, r7, #5
 8000c88:	d43d      	bmi.n	8000d06 <__aeabi_fsub+0x2d6>
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	d000      	beq.n	8000c90 <__aeabi_fsub+0x260>
 8000c8e:	e6fe      	b.n	8000a8e <__aeabi_fsub+0x5e>
 8000c90:	2400      	movs	r4, #0
 8000c92:	2200      	movs	r2, #0
 8000c94:	2700      	movs	r7, #0
 8000c96:	e716      	b.n	8000ac6 <__aeabi_fsub+0x96>
 8000c98:	0005      	movs	r5, r0
 8000c9a:	e7af      	b.n	8000bfc <__aeabi_fsub+0x1cc>
 8000c9c:	0032      	movs	r2, r6
 8000c9e:	4643      	mov	r3, r8
 8000ca0:	4641      	mov	r1, r8
 8000ca2:	40da      	lsrs	r2, r3
 8000ca4:	2320      	movs	r3, #32
 8000ca6:	1a5b      	subs	r3, r3, r1
 8000ca8:	409e      	lsls	r6, r3
 8000caa:	0030      	movs	r0, r6
 8000cac:	1e43      	subs	r3, r0, #1
 8000cae:	4198      	sbcs	r0, r3
 8000cb0:	4310      	orrs	r0, r2
 8000cb2:	e721      	b.n	8000af8 <__aeabi_fsub+0xc8>
 8000cb4:	2d00      	cmp	r5, #0
 8000cb6:	d1a7      	bne.n	8000c08 <__aeabi_fsub+0x1d8>
 8000cb8:	4663      	mov	r3, ip
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d059      	beq.n	8000d72 <__aeabi_fsub+0x342>
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d100      	bne.n	8000cc6 <__aeabi_fsub+0x296>
 8000cc4:	e6ff      	b.n	8000ac6 <__aeabi_fsub+0x96>
 8000cc6:	0030      	movs	r0, r6
 8000cc8:	4460      	add	r0, ip
 8000cca:	0143      	lsls	r3, r0, #5
 8000ccc:	d592      	bpl.n	8000bf4 <__aeabi_fsub+0x1c4>
 8000cce:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <__aeabi_fsub+0x348>)
 8000cd0:	3501      	adds	r5, #1
 8000cd2:	4018      	ands	r0, r3
 8000cd4:	e78e      	b.n	8000bf4 <__aeabi_fsub+0x1c4>
 8000cd6:	4663      	mov	r3, ip
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d047      	beq.n	8000d6c <__aeabi_fsub+0x33c>
 8000cdc:	1e4b      	subs	r3, r1, #1
 8000cde:	2901      	cmp	r1, #1
 8000ce0:	d015      	beq.n	8000d0e <__aeabi_fsub+0x2de>
 8000ce2:	29ff      	cmp	r1, #255	; 0xff
 8000ce4:	d02b      	beq.n	8000d3e <__aeabi_fsub+0x30e>
 8000ce6:	0019      	movs	r1, r3
 8000ce8:	e74e      	b.n	8000b88 <__aeabi_fsub+0x158>
 8000cea:	000c      	movs	r4, r1
 8000cec:	464b      	mov	r3, r9
 8000cee:	003d      	movs	r5, r7
 8000cf0:	e784      	b.n	8000bfc <__aeabi_fsub+0x1cc>
 8000cf2:	4662      	mov	r2, ip
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	d18b      	bne.n	8000c10 <__aeabi_fsub+0x1e0>
 8000cf8:	2e00      	cmp	r6, #0
 8000cfa:	d192      	bne.n	8000c22 <__aeabi_fsub+0x1f2>
 8000cfc:	2780      	movs	r7, #128	; 0x80
 8000cfe:	2400      	movs	r4, #0
 8000d00:	22ff      	movs	r2, #255	; 0xff
 8000d02:	03ff      	lsls	r7, r7, #15
 8000d04:	e6df      	b.n	8000ac6 <__aeabi_fsub+0x96>
 8000d06:	4663      	mov	r3, ip
 8000d08:	000c      	movs	r4, r1
 8000d0a:	1af7      	subs	r7, r6, r3
 8000d0c:	e6bf      	b.n	8000a8e <__aeabi_fsub+0x5e>
 8000d0e:	0030      	movs	r0, r6
 8000d10:	4460      	add	r0, ip
 8000d12:	2501      	movs	r5, #1
 8000d14:	0143      	lsls	r3, r0, #5
 8000d16:	d400      	bmi.n	8000d1a <__aeabi_fsub+0x2ea>
 8000d18:	e76c      	b.n	8000bf4 <__aeabi_fsub+0x1c4>
 8000d1a:	2502      	movs	r5, #2
 8000d1c:	e6f2      	b.n	8000b04 <__aeabi_fsub+0xd4>
 8000d1e:	4663      	mov	r3, ip
 8000d20:	2501      	movs	r5, #1
 8000d22:	1b98      	subs	r0, r3, r6
 8000d24:	e6ae      	b.n	8000a84 <__aeabi_fsub+0x54>
 8000d26:	2320      	movs	r3, #32
 8000d28:	4664      	mov	r4, ip
 8000d2a:	4660      	mov	r0, ip
 8000d2c:	40fc      	lsrs	r4, r7
 8000d2e:	1bdf      	subs	r7, r3, r7
 8000d30:	40b8      	lsls	r0, r7
 8000d32:	1e43      	subs	r3, r0, #1
 8000d34:	4198      	sbcs	r0, r3
 8000d36:	4320      	orrs	r0, r4
 8000d38:	e79f      	b.n	8000c7a <__aeabi_fsub+0x24a>
 8000d3a:	0005      	movs	r5, r0
 8000d3c:	e75e      	b.n	8000bfc <__aeabi_fsub+0x1cc>
 8000d3e:	464b      	mov	r3, r9
 8000d40:	e771      	b.n	8000c26 <__aeabi_fsub+0x1f6>
 8000d42:	2320      	movs	r3, #32
 8000d44:	4665      	mov	r5, ip
 8000d46:	4660      	mov	r0, ip
 8000d48:	40cd      	lsrs	r5, r1
 8000d4a:	1a59      	subs	r1, r3, r1
 8000d4c:	4088      	lsls	r0, r1
 8000d4e:	1e43      	subs	r3, r0, #1
 8000d50:	4198      	sbcs	r0, r3
 8000d52:	4328      	orrs	r0, r5
 8000d54:	e71c      	b.n	8000b90 <__aeabi_fsub+0x160>
 8000d56:	4663      	mov	r3, ip
 8000d58:	000c      	movs	r4, r1
 8000d5a:	2501      	movs	r5, #1
 8000d5c:	1af0      	subs	r0, r6, r3
 8000d5e:	e691      	b.n	8000a84 <__aeabi_fsub+0x54>
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d095      	beq.n	8000c90 <__aeabi_fsub+0x260>
 8000d64:	000c      	movs	r4, r1
 8000d66:	464f      	mov	r7, r9
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e6ac      	b.n	8000ac6 <__aeabi_fsub+0x96>
 8000d6c:	464b      	mov	r3, r9
 8000d6e:	000d      	movs	r5, r1
 8000d70:	e744      	b.n	8000bfc <__aeabi_fsub+0x1cc>
 8000d72:	464f      	mov	r7, r9
 8000d74:	2200      	movs	r2, #0
 8000d76:	e6a6      	b.n	8000ac6 <__aeabi_fsub+0x96>
 8000d78:	fbffffff 	.word	0xfbffffff
 8000d7c:	7dffffff 	.word	0x7dffffff
 8000d80:	2800      	cmp	r0, #0
 8000d82:	d000      	beq.n	8000d86 <__aeabi_fsub+0x356>
 8000d84:	e736      	b.n	8000bf4 <__aeabi_fsub+0x1c4>
 8000d86:	2400      	movs	r4, #0
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e69c      	b.n	8000ac6 <__aeabi_fsub+0x96>

08000d8c <__aeabi_f2iz>:
 8000d8c:	0241      	lsls	r1, r0, #9
 8000d8e:	0042      	lsls	r2, r0, #1
 8000d90:	0fc3      	lsrs	r3, r0, #31
 8000d92:	0a49      	lsrs	r1, r1, #9
 8000d94:	2000      	movs	r0, #0
 8000d96:	0e12      	lsrs	r2, r2, #24
 8000d98:	2a7e      	cmp	r2, #126	; 0x7e
 8000d9a:	dd03      	ble.n	8000da4 <__aeabi_f2iz+0x18>
 8000d9c:	2a9d      	cmp	r2, #157	; 0x9d
 8000d9e:	dd02      	ble.n	8000da6 <__aeabi_f2iz+0x1a>
 8000da0:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <__aeabi_f2iz+0x3c>)
 8000da2:	1898      	adds	r0, r3, r2
 8000da4:	4770      	bx	lr
 8000da6:	2080      	movs	r0, #128	; 0x80
 8000da8:	0400      	lsls	r0, r0, #16
 8000daa:	4301      	orrs	r1, r0
 8000dac:	2a95      	cmp	r2, #149	; 0x95
 8000dae:	dc07      	bgt.n	8000dc0 <__aeabi_f2iz+0x34>
 8000db0:	2096      	movs	r0, #150	; 0x96
 8000db2:	1a82      	subs	r2, r0, r2
 8000db4:	40d1      	lsrs	r1, r2
 8000db6:	4248      	negs	r0, r1
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1f3      	bne.n	8000da4 <__aeabi_f2iz+0x18>
 8000dbc:	0008      	movs	r0, r1
 8000dbe:	e7f1      	b.n	8000da4 <__aeabi_f2iz+0x18>
 8000dc0:	3a96      	subs	r2, #150	; 0x96
 8000dc2:	4091      	lsls	r1, r2
 8000dc4:	e7f7      	b.n	8000db6 <__aeabi_f2iz+0x2a>
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	7fffffff 	.word	0x7fffffff

08000dcc <__aeabi_i2f>:
 8000dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dce:	2800      	cmp	r0, #0
 8000dd0:	d013      	beq.n	8000dfa <__aeabi_i2f+0x2e>
 8000dd2:	17c3      	asrs	r3, r0, #31
 8000dd4:	18c6      	adds	r6, r0, r3
 8000dd6:	405e      	eors	r6, r3
 8000dd8:	0fc4      	lsrs	r4, r0, #31
 8000dda:	0030      	movs	r0, r6
 8000ddc:	f001 fdf0 	bl	80029c0 <__clzsi2>
 8000de0:	239e      	movs	r3, #158	; 0x9e
 8000de2:	0005      	movs	r5, r0
 8000de4:	1a1b      	subs	r3, r3, r0
 8000de6:	2b96      	cmp	r3, #150	; 0x96
 8000de8:	dc0f      	bgt.n	8000e0a <__aeabi_i2f+0x3e>
 8000dea:	2808      	cmp	r0, #8
 8000dec:	dd01      	ble.n	8000df2 <__aeabi_i2f+0x26>
 8000dee:	3d08      	subs	r5, #8
 8000df0:	40ae      	lsls	r6, r5
 8000df2:	0276      	lsls	r6, r6, #9
 8000df4:	0a76      	lsrs	r6, r6, #9
 8000df6:	b2d8      	uxtb	r0, r3
 8000df8:	e002      	b.n	8000e00 <__aeabi_i2f+0x34>
 8000dfa:	2400      	movs	r4, #0
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	2600      	movs	r6, #0
 8000e00:	05c0      	lsls	r0, r0, #23
 8000e02:	4330      	orrs	r0, r6
 8000e04:	07e4      	lsls	r4, r4, #31
 8000e06:	4320      	orrs	r0, r4
 8000e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e0a:	2b99      	cmp	r3, #153	; 0x99
 8000e0c:	dd0c      	ble.n	8000e28 <__aeabi_i2f+0x5c>
 8000e0e:	2205      	movs	r2, #5
 8000e10:	0031      	movs	r1, r6
 8000e12:	1a12      	subs	r2, r2, r0
 8000e14:	40d1      	lsrs	r1, r2
 8000e16:	000a      	movs	r2, r1
 8000e18:	0001      	movs	r1, r0
 8000e1a:	0030      	movs	r0, r6
 8000e1c:	311b      	adds	r1, #27
 8000e1e:	4088      	lsls	r0, r1
 8000e20:	1e41      	subs	r1, r0, #1
 8000e22:	4188      	sbcs	r0, r1
 8000e24:	4302      	orrs	r2, r0
 8000e26:	0016      	movs	r6, r2
 8000e28:	2d05      	cmp	r5, #5
 8000e2a:	dc12      	bgt.n	8000e52 <__aeabi_i2f+0x86>
 8000e2c:	0031      	movs	r1, r6
 8000e2e:	4f0d      	ldr	r7, [pc, #52]	; (8000e64 <__aeabi_i2f+0x98>)
 8000e30:	4039      	ands	r1, r7
 8000e32:	0772      	lsls	r2, r6, #29
 8000e34:	d009      	beq.n	8000e4a <__aeabi_i2f+0x7e>
 8000e36:	200f      	movs	r0, #15
 8000e38:	4030      	ands	r0, r6
 8000e3a:	2804      	cmp	r0, #4
 8000e3c:	d005      	beq.n	8000e4a <__aeabi_i2f+0x7e>
 8000e3e:	3104      	adds	r1, #4
 8000e40:	014a      	lsls	r2, r1, #5
 8000e42:	d502      	bpl.n	8000e4a <__aeabi_i2f+0x7e>
 8000e44:	239f      	movs	r3, #159	; 0x9f
 8000e46:	4039      	ands	r1, r7
 8000e48:	1b5b      	subs	r3, r3, r5
 8000e4a:	0189      	lsls	r1, r1, #6
 8000e4c:	0a4e      	lsrs	r6, r1, #9
 8000e4e:	b2d8      	uxtb	r0, r3
 8000e50:	e7d6      	b.n	8000e00 <__aeabi_i2f+0x34>
 8000e52:	1f6a      	subs	r2, r5, #5
 8000e54:	4096      	lsls	r6, r2
 8000e56:	0031      	movs	r1, r6
 8000e58:	4f02      	ldr	r7, [pc, #8]	; (8000e64 <__aeabi_i2f+0x98>)
 8000e5a:	4039      	ands	r1, r7
 8000e5c:	0772      	lsls	r2, r6, #29
 8000e5e:	d0f4      	beq.n	8000e4a <__aeabi_i2f+0x7e>
 8000e60:	e7e9      	b.n	8000e36 <__aeabi_i2f+0x6a>
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	fbffffff 	.word	0xfbffffff

08000e68 <__aeabi_ui2f>:
 8000e68:	b570      	push	{r4, r5, r6, lr}
 8000e6a:	1e05      	subs	r5, r0, #0
 8000e6c:	d00e      	beq.n	8000e8c <__aeabi_ui2f+0x24>
 8000e6e:	f001 fda7 	bl	80029c0 <__clzsi2>
 8000e72:	239e      	movs	r3, #158	; 0x9e
 8000e74:	0004      	movs	r4, r0
 8000e76:	1a1b      	subs	r3, r3, r0
 8000e78:	2b96      	cmp	r3, #150	; 0x96
 8000e7a:	dc0c      	bgt.n	8000e96 <__aeabi_ui2f+0x2e>
 8000e7c:	2808      	cmp	r0, #8
 8000e7e:	dd01      	ble.n	8000e84 <__aeabi_ui2f+0x1c>
 8000e80:	3c08      	subs	r4, #8
 8000e82:	40a5      	lsls	r5, r4
 8000e84:	026d      	lsls	r5, r5, #9
 8000e86:	0a6d      	lsrs	r5, r5, #9
 8000e88:	b2d8      	uxtb	r0, r3
 8000e8a:	e001      	b.n	8000e90 <__aeabi_ui2f+0x28>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	2500      	movs	r5, #0
 8000e90:	05c0      	lsls	r0, r0, #23
 8000e92:	4328      	orrs	r0, r5
 8000e94:	bd70      	pop	{r4, r5, r6, pc}
 8000e96:	2b99      	cmp	r3, #153	; 0x99
 8000e98:	dd09      	ble.n	8000eae <__aeabi_ui2f+0x46>
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	0029      	movs	r1, r5
 8000e9e:	321b      	adds	r2, #27
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	1e4a      	subs	r2, r1, #1
 8000ea4:	4191      	sbcs	r1, r2
 8000ea6:	2205      	movs	r2, #5
 8000ea8:	1a12      	subs	r2, r2, r0
 8000eaa:	40d5      	lsrs	r5, r2
 8000eac:	430d      	orrs	r5, r1
 8000eae:	2c05      	cmp	r4, #5
 8000eb0:	dc12      	bgt.n	8000ed8 <__aeabi_ui2f+0x70>
 8000eb2:	0029      	movs	r1, r5
 8000eb4:	4e0c      	ldr	r6, [pc, #48]	; (8000ee8 <__aeabi_ui2f+0x80>)
 8000eb6:	4031      	ands	r1, r6
 8000eb8:	076a      	lsls	r2, r5, #29
 8000eba:	d009      	beq.n	8000ed0 <__aeabi_ui2f+0x68>
 8000ebc:	200f      	movs	r0, #15
 8000ebe:	4028      	ands	r0, r5
 8000ec0:	2804      	cmp	r0, #4
 8000ec2:	d005      	beq.n	8000ed0 <__aeabi_ui2f+0x68>
 8000ec4:	3104      	adds	r1, #4
 8000ec6:	014a      	lsls	r2, r1, #5
 8000ec8:	d502      	bpl.n	8000ed0 <__aeabi_ui2f+0x68>
 8000eca:	239f      	movs	r3, #159	; 0x9f
 8000ecc:	4031      	ands	r1, r6
 8000ece:	1b1b      	subs	r3, r3, r4
 8000ed0:	0189      	lsls	r1, r1, #6
 8000ed2:	0a4d      	lsrs	r5, r1, #9
 8000ed4:	b2d8      	uxtb	r0, r3
 8000ed6:	e7db      	b.n	8000e90 <__aeabi_ui2f+0x28>
 8000ed8:	1f62      	subs	r2, r4, #5
 8000eda:	4095      	lsls	r5, r2
 8000edc:	0029      	movs	r1, r5
 8000ede:	4e02      	ldr	r6, [pc, #8]	; (8000ee8 <__aeabi_ui2f+0x80>)
 8000ee0:	4031      	ands	r1, r6
 8000ee2:	076a      	lsls	r2, r5, #29
 8000ee4:	d0f4      	beq.n	8000ed0 <__aeabi_ui2f+0x68>
 8000ee6:	e7e9      	b.n	8000ebc <__aeabi_ui2f+0x54>
 8000ee8:	fbffffff 	.word	0xfbffffff

08000eec <__aeabi_dadd>:
 8000eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eee:	464f      	mov	r7, r9
 8000ef0:	4646      	mov	r6, r8
 8000ef2:	46d6      	mov	lr, sl
 8000ef4:	000d      	movs	r5, r1
 8000ef6:	0004      	movs	r4, r0
 8000ef8:	b5c0      	push	{r6, r7, lr}
 8000efa:	001f      	movs	r7, r3
 8000efc:	0011      	movs	r1, r2
 8000efe:	0328      	lsls	r0, r5, #12
 8000f00:	0f62      	lsrs	r2, r4, #29
 8000f02:	0a40      	lsrs	r0, r0, #9
 8000f04:	4310      	orrs	r0, r2
 8000f06:	007a      	lsls	r2, r7, #1
 8000f08:	0d52      	lsrs	r2, r2, #21
 8000f0a:	00e3      	lsls	r3, r4, #3
 8000f0c:	033c      	lsls	r4, r7, #12
 8000f0e:	4691      	mov	r9, r2
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0ffa      	lsrs	r2, r7, #31
 8000f14:	0f4f      	lsrs	r7, r1, #29
 8000f16:	006e      	lsls	r6, r5, #1
 8000f18:	4327      	orrs	r7, r4
 8000f1a:	4692      	mov	sl, r2
 8000f1c:	46b8      	mov	r8, r7
 8000f1e:	0d76      	lsrs	r6, r6, #21
 8000f20:	0fed      	lsrs	r5, r5, #31
 8000f22:	00c9      	lsls	r1, r1, #3
 8000f24:	4295      	cmp	r5, r2
 8000f26:	d100      	bne.n	8000f2a <__aeabi_dadd+0x3e>
 8000f28:	e099      	b.n	800105e <__aeabi_dadd+0x172>
 8000f2a:	464c      	mov	r4, r9
 8000f2c:	1b34      	subs	r4, r6, r4
 8000f2e:	46a4      	mov	ip, r4
 8000f30:	2c00      	cmp	r4, #0
 8000f32:	dc00      	bgt.n	8000f36 <__aeabi_dadd+0x4a>
 8000f34:	e07c      	b.n	8001030 <__aeabi_dadd+0x144>
 8000f36:	464a      	mov	r2, r9
 8000f38:	2a00      	cmp	r2, #0
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_dadd+0x52>
 8000f3c:	e0b8      	b.n	80010b0 <__aeabi_dadd+0x1c4>
 8000f3e:	4ac5      	ldr	r2, [pc, #788]	; (8001254 <__aeabi_dadd+0x368>)
 8000f40:	4296      	cmp	r6, r2
 8000f42:	d100      	bne.n	8000f46 <__aeabi_dadd+0x5a>
 8000f44:	e11c      	b.n	8001180 <__aeabi_dadd+0x294>
 8000f46:	2280      	movs	r2, #128	; 0x80
 8000f48:	003c      	movs	r4, r7
 8000f4a:	0412      	lsls	r2, r2, #16
 8000f4c:	4314      	orrs	r4, r2
 8000f4e:	46a0      	mov	r8, r4
 8000f50:	4662      	mov	r2, ip
 8000f52:	2a38      	cmp	r2, #56	; 0x38
 8000f54:	dd00      	ble.n	8000f58 <__aeabi_dadd+0x6c>
 8000f56:	e161      	b.n	800121c <__aeabi_dadd+0x330>
 8000f58:	2a1f      	cmp	r2, #31
 8000f5a:	dd00      	ble.n	8000f5e <__aeabi_dadd+0x72>
 8000f5c:	e1cc      	b.n	80012f8 <__aeabi_dadd+0x40c>
 8000f5e:	4664      	mov	r4, ip
 8000f60:	2220      	movs	r2, #32
 8000f62:	1b12      	subs	r2, r2, r4
 8000f64:	4644      	mov	r4, r8
 8000f66:	4094      	lsls	r4, r2
 8000f68:	000f      	movs	r7, r1
 8000f6a:	46a1      	mov	r9, r4
 8000f6c:	4664      	mov	r4, ip
 8000f6e:	4091      	lsls	r1, r2
 8000f70:	40e7      	lsrs	r7, r4
 8000f72:	464c      	mov	r4, r9
 8000f74:	1e4a      	subs	r2, r1, #1
 8000f76:	4191      	sbcs	r1, r2
 8000f78:	433c      	orrs	r4, r7
 8000f7a:	4642      	mov	r2, r8
 8000f7c:	4321      	orrs	r1, r4
 8000f7e:	4664      	mov	r4, ip
 8000f80:	40e2      	lsrs	r2, r4
 8000f82:	1a80      	subs	r0, r0, r2
 8000f84:	1a5c      	subs	r4, r3, r1
 8000f86:	42a3      	cmp	r3, r4
 8000f88:	419b      	sbcs	r3, r3
 8000f8a:	425f      	negs	r7, r3
 8000f8c:	1bc7      	subs	r7, r0, r7
 8000f8e:	023b      	lsls	r3, r7, #8
 8000f90:	d400      	bmi.n	8000f94 <__aeabi_dadd+0xa8>
 8000f92:	e0d0      	b.n	8001136 <__aeabi_dadd+0x24a>
 8000f94:	027f      	lsls	r7, r7, #9
 8000f96:	0a7f      	lsrs	r7, r7, #9
 8000f98:	2f00      	cmp	r7, #0
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_dadd+0xb2>
 8000f9c:	e0ff      	b.n	800119e <__aeabi_dadd+0x2b2>
 8000f9e:	0038      	movs	r0, r7
 8000fa0:	f001 fd0e 	bl	80029c0 <__clzsi2>
 8000fa4:	0001      	movs	r1, r0
 8000fa6:	3908      	subs	r1, #8
 8000fa8:	2320      	movs	r3, #32
 8000faa:	0022      	movs	r2, r4
 8000fac:	1a5b      	subs	r3, r3, r1
 8000fae:	408f      	lsls	r7, r1
 8000fb0:	40da      	lsrs	r2, r3
 8000fb2:	408c      	lsls	r4, r1
 8000fb4:	4317      	orrs	r7, r2
 8000fb6:	42b1      	cmp	r1, r6
 8000fb8:	da00      	bge.n	8000fbc <__aeabi_dadd+0xd0>
 8000fba:	e0ff      	b.n	80011bc <__aeabi_dadd+0x2d0>
 8000fbc:	1b89      	subs	r1, r1, r6
 8000fbe:	1c4b      	adds	r3, r1, #1
 8000fc0:	2b1f      	cmp	r3, #31
 8000fc2:	dd00      	ble.n	8000fc6 <__aeabi_dadd+0xda>
 8000fc4:	e0a8      	b.n	8001118 <__aeabi_dadd+0x22c>
 8000fc6:	2220      	movs	r2, #32
 8000fc8:	0039      	movs	r1, r7
 8000fca:	1ad2      	subs	r2, r2, r3
 8000fcc:	0020      	movs	r0, r4
 8000fce:	4094      	lsls	r4, r2
 8000fd0:	4091      	lsls	r1, r2
 8000fd2:	40d8      	lsrs	r0, r3
 8000fd4:	1e62      	subs	r2, r4, #1
 8000fd6:	4194      	sbcs	r4, r2
 8000fd8:	40df      	lsrs	r7, r3
 8000fda:	2600      	movs	r6, #0
 8000fdc:	4301      	orrs	r1, r0
 8000fde:	430c      	orrs	r4, r1
 8000fe0:	0763      	lsls	r3, r4, #29
 8000fe2:	d009      	beq.n	8000ff8 <__aeabi_dadd+0x10c>
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	4023      	ands	r3, r4
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d005      	beq.n	8000ff8 <__aeabi_dadd+0x10c>
 8000fec:	1d23      	adds	r3, r4, #4
 8000fee:	42a3      	cmp	r3, r4
 8000ff0:	41a4      	sbcs	r4, r4
 8000ff2:	4264      	negs	r4, r4
 8000ff4:	193f      	adds	r7, r7, r4
 8000ff6:	001c      	movs	r4, r3
 8000ff8:	023b      	lsls	r3, r7, #8
 8000ffa:	d400      	bmi.n	8000ffe <__aeabi_dadd+0x112>
 8000ffc:	e09e      	b.n	800113c <__aeabi_dadd+0x250>
 8000ffe:	4b95      	ldr	r3, [pc, #596]	; (8001254 <__aeabi_dadd+0x368>)
 8001000:	3601      	adds	r6, #1
 8001002:	429e      	cmp	r6, r3
 8001004:	d100      	bne.n	8001008 <__aeabi_dadd+0x11c>
 8001006:	e0b7      	b.n	8001178 <__aeabi_dadd+0x28c>
 8001008:	4a93      	ldr	r2, [pc, #588]	; (8001258 <__aeabi_dadd+0x36c>)
 800100a:	08e4      	lsrs	r4, r4, #3
 800100c:	4017      	ands	r7, r2
 800100e:	077b      	lsls	r3, r7, #29
 8001010:	0571      	lsls	r1, r6, #21
 8001012:	027f      	lsls	r7, r7, #9
 8001014:	4323      	orrs	r3, r4
 8001016:	0b3f      	lsrs	r7, r7, #12
 8001018:	0d4a      	lsrs	r2, r1, #21
 800101a:	0512      	lsls	r2, r2, #20
 800101c:	433a      	orrs	r2, r7
 800101e:	07ed      	lsls	r5, r5, #31
 8001020:	432a      	orrs	r2, r5
 8001022:	0018      	movs	r0, r3
 8001024:	0011      	movs	r1, r2
 8001026:	bce0      	pop	{r5, r6, r7}
 8001028:	46ba      	mov	sl, r7
 800102a:	46b1      	mov	r9, r6
 800102c:	46a8      	mov	r8, r5
 800102e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001030:	2c00      	cmp	r4, #0
 8001032:	d04b      	beq.n	80010cc <__aeabi_dadd+0x1e0>
 8001034:	464c      	mov	r4, r9
 8001036:	1ba4      	subs	r4, r4, r6
 8001038:	46a4      	mov	ip, r4
 800103a:	2e00      	cmp	r6, #0
 800103c:	d000      	beq.n	8001040 <__aeabi_dadd+0x154>
 800103e:	e123      	b.n	8001288 <__aeabi_dadd+0x39c>
 8001040:	0004      	movs	r4, r0
 8001042:	431c      	orrs	r4, r3
 8001044:	d100      	bne.n	8001048 <__aeabi_dadd+0x15c>
 8001046:	e1af      	b.n	80013a8 <__aeabi_dadd+0x4bc>
 8001048:	4662      	mov	r2, ip
 800104a:	1e54      	subs	r4, r2, #1
 800104c:	2a01      	cmp	r2, #1
 800104e:	d100      	bne.n	8001052 <__aeabi_dadd+0x166>
 8001050:	e215      	b.n	800147e <__aeabi_dadd+0x592>
 8001052:	4d80      	ldr	r5, [pc, #512]	; (8001254 <__aeabi_dadd+0x368>)
 8001054:	45ac      	cmp	ip, r5
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x16e>
 8001058:	e1c8      	b.n	80013ec <__aeabi_dadd+0x500>
 800105a:	46a4      	mov	ip, r4
 800105c:	e11b      	b.n	8001296 <__aeabi_dadd+0x3aa>
 800105e:	464a      	mov	r2, r9
 8001060:	1ab2      	subs	r2, r6, r2
 8001062:	4694      	mov	ip, r2
 8001064:	2a00      	cmp	r2, #0
 8001066:	dc00      	bgt.n	800106a <__aeabi_dadd+0x17e>
 8001068:	e0ac      	b.n	80011c4 <__aeabi_dadd+0x2d8>
 800106a:	464a      	mov	r2, r9
 800106c:	2a00      	cmp	r2, #0
 800106e:	d043      	beq.n	80010f8 <__aeabi_dadd+0x20c>
 8001070:	4a78      	ldr	r2, [pc, #480]	; (8001254 <__aeabi_dadd+0x368>)
 8001072:	4296      	cmp	r6, r2
 8001074:	d100      	bne.n	8001078 <__aeabi_dadd+0x18c>
 8001076:	e1af      	b.n	80013d8 <__aeabi_dadd+0x4ec>
 8001078:	2280      	movs	r2, #128	; 0x80
 800107a:	003c      	movs	r4, r7
 800107c:	0412      	lsls	r2, r2, #16
 800107e:	4314      	orrs	r4, r2
 8001080:	46a0      	mov	r8, r4
 8001082:	4662      	mov	r2, ip
 8001084:	2a38      	cmp	r2, #56	; 0x38
 8001086:	dc67      	bgt.n	8001158 <__aeabi_dadd+0x26c>
 8001088:	2a1f      	cmp	r2, #31
 800108a:	dc00      	bgt.n	800108e <__aeabi_dadd+0x1a2>
 800108c:	e15f      	b.n	800134e <__aeabi_dadd+0x462>
 800108e:	4647      	mov	r7, r8
 8001090:	3a20      	subs	r2, #32
 8001092:	40d7      	lsrs	r7, r2
 8001094:	4662      	mov	r2, ip
 8001096:	2a20      	cmp	r2, #32
 8001098:	d005      	beq.n	80010a6 <__aeabi_dadd+0x1ba>
 800109a:	4664      	mov	r4, ip
 800109c:	2240      	movs	r2, #64	; 0x40
 800109e:	1b12      	subs	r2, r2, r4
 80010a0:	4644      	mov	r4, r8
 80010a2:	4094      	lsls	r4, r2
 80010a4:	4321      	orrs	r1, r4
 80010a6:	1e4a      	subs	r2, r1, #1
 80010a8:	4191      	sbcs	r1, r2
 80010aa:	000c      	movs	r4, r1
 80010ac:	433c      	orrs	r4, r7
 80010ae:	e057      	b.n	8001160 <__aeabi_dadd+0x274>
 80010b0:	003a      	movs	r2, r7
 80010b2:	430a      	orrs	r2, r1
 80010b4:	d100      	bne.n	80010b8 <__aeabi_dadd+0x1cc>
 80010b6:	e105      	b.n	80012c4 <__aeabi_dadd+0x3d8>
 80010b8:	0022      	movs	r2, r4
 80010ba:	3a01      	subs	r2, #1
 80010bc:	2c01      	cmp	r4, #1
 80010be:	d100      	bne.n	80010c2 <__aeabi_dadd+0x1d6>
 80010c0:	e182      	b.n	80013c8 <__aeabi_dadd+0x4dc>
 80010c2:	4c64      	ldr	r4, [pc, #400]	; (8001254 <__aeabi_dadd+0x368>)
 80010c4:	45a4      	cmp	ip, r4
 80010c6:	d05b      	beq.n	8001180 <__aeabi_dadd+0x294>
 80010c8:	4694      	mov	ip, r2
 80010ca:	e741      	b.n	8000f50 <__aeabi_dadd+0x64>
 80010cc:	4c63      	ldr	r4, [pc, #396]	; (800125c <__aeabi_dadd+0x370>)
 80010ce:	1c77      	adds	r7, r6, #1
 80010d0:	4227      	tst	r7, r4
 80010d2:	d000      	beq.n	80010d6 <__aeabi_dadd+0x1ea>
 80010d4:	e0c4      	b.n	8001260 <__aeabi_dadd+0x374>
 80010d6:	0004      	movs	r4, r0
 80010d8:	431c      	orrs	r4, r3
 80010da:	2e00      	cmp	r6, #0
 80010dc:	d000      	beq.n	80010e0 <__aeabi_dadd+0x1f4>
 80010de:	e169      	b.n	80013b4 <__aeabi_dadd+0x4c8>
 80010e0:	2c00      	cmp	r4, #0
 80010e2:	d100      	bne.n	80010e6 <__aeabi_dadd+0x1fa>
 80010e4:	e1bf      	b.n	8001466 <__aeabi_dadd+0x57a>
 80010e6:	4644      	mov	r4, r8
 80010e8:	430c      	orrs	r4, r1
 80010ea:	d000      	beq.n	80010ee <__aeabi_dadd+0x202>
 80010ec:	e1d0      	b.n	8001490 <__aeabi_dadd+0x5a4>
 80010ee:	0742      	lsls	r2, r0, #29
 80010f0:	08db      	lsrs	r3, r3, #3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	08c0      	lsrs	r0, r0, #3
 80010f6:	e029      	b.n	800114c <__aeabi_dadd+0x260>
 80010f8:	003a      	movs	r2, r7
 80010fa:	430a      	orrs	r2, r1
 80010fc:	d100      	bne.n	8001100 <__aeabi_dadd+0x214>
 80010fe:	e170      	b.n	80013e2 <__aeabi_dadd+0x4f6>
 8001100:	4662      	mov	r2, ip
 8001102:	4664      	mov	r4, ip
 8001104:	3a01      	subs	r2, #1
 8001106:	2c01      	cmp	r4, #1
 8001108:	d100      	bne.n	800110c <__aeabi_dadd+0x220>
 800110a:	e0e0      	b.n	80012ce <__aeabi_dadd+0x3e2>
 800110c:	4c51      	ldr	r4, [pc, #324]	; (8001254 <__aeabi_dadd+0x368>)
 800110e:	45a4      	cmp	ip, r4
 8001110:	d100      	bne.n	8001114 <__aeabi_dadd+0x228>
 8001112:	e161      	b.n	80013d8 <__aeabi_dadd+0x4ec>
 8001114:	4694      	mov	ip, r2
 8001116:	e7b4      	b.n	8001082 <__aeabi_dadd+0x196>
 8001118:	003a      	movs	r2, r7
 800111a:	391f      	subs	r1, #31
 800111c:	40ca      	lsrs	r2, r1
 800111e:	0011      	movs	r1, r2
 8001120:	2b20      	cmp	r3, #32
 8001122:	d003      	beq.n	800112c <__aeabi_dadd+0x240>
 8001124:	2240      	movs	r2, #64	; 0x40
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	409f      	lsls	r7, r3
 800112a:	433c      	orrs	r4, r7
 800112c:	1e63      	subs	r3, r4, #1
 800112e:	419c      	sbcs	r4, r3
 8001130:	2700      	movs	r7, #0
 8001132:	2600      	movs	r6, #0
 8001134:	430c      	orrs	r4, r1
 8001136:	0763      	lsls	r3, r4, #29
 8001138:	d000      	beq.n	800113c <__aeabi_dadd+0x250>
 800113a:	e753      	b.n	8000fe4 <__aeabi_dadd+0xf8>
 800113c:	46b4      	mov	ip, r6
 800113e:	08e4      	lsrs	r4, r4, #3
 8001140:	077b      	lsls	r3, r7, #29
 8001142:	4323      	orrs	r3, r4
 8001144:	08f8      	lsrs	r0, r7, #3
 8001146:	4a43      	ldr	r2, [pc, #268]	; (8001254 <__aeabi_dadd+0x368>)
 8001148:	4594      	cmp	ip, r2
 800114a:	d01d      	beq.n	8001188 <__aeabi_dadd+0x29c>
 800114c:	4662      	mov	r2, ip
 800114e:	0307      	lsls	r7, r0, #12
 8001150:	0552      	lsls	r2, r2, #21
 8001152:	0b3f      	lsrs	r7, r7, #12
 8001154:	0d52      	lsrs	r2, r2, #21
 8001156:	e760      	b.n	800101a <__aeabi_dadd+0x12e>
 8001158:	4644      	mov	r4, r8
 800115a:	430c      	orrs	r4, r1
 800115c:	1e62      	subs	r2, r4, #1
 800115e:	4194      	sbcs	r4, r2
 8001160:	18e4      	adds	r4, r4, r3
 8001162:	429c      	cmp	r4, r3
 8001164:	419b      	sbcs	r3, r3
 8001166:	425f      	negs	r7, r3
 8001168:	183f      	adds	r7, r7, r0
 800116a:	023b      	lsls	r3, r7, #8
 800116c:	d5e3      	bpl.n	8001136 <__aeabi_dadd+0x24a>
 800116e:	4b39      	ldr	r3, [pc, #228]	; (8001254 <__aeabi_dadd+0x368>)
 8001170:	3601      	adds	r6, #1
 8001172:	429e      	cmp	r6, r3
 8001174:	d000      	beq.n	8001178 <__aeabi_dadd+0x28c>
 8001176:	e0b5      	b.n	80012e4 <__aeabi_dadd+0x3f8>
 8001178:	0032      	movs	r2, r6
 800117a:	2700      	movs	r7, #0
 800117c:	2300      	movs	r3, #0
 800117e:	e74c      	b.n	800101a <__aeabi_dadd+0x12e>
 8001180:	0742      	lsls	r2, r0, #29
 8001182:	08db      	lsrs	r3, r3, #3
 8001184:	4313      	orrs	r3, r2
 8001186:	08c0      	lsrs	r0, r0, #3
 8001188:	001a      	movs	r2, r3
 800118a:	4302      	orrs	r2, r0
 800118c:	d100      	bne.n	8001190 <__aeabi_dadd+0x2a4>
 800118e:	e1e1      	b.n	8001554 <__aeabi_dadd+0x668>
 8001190:	2780      	movs	r7, #128	; 0x80
 8001192:	033f      	lsls	r7, r7, #12
 8001194:	4307      	orrs	r7, r0
 8001196:	033f      	lsls	r7, r7, #12
 8001198:	4a2e      	ldr	r2, [pc, #184]	; (8001254 <__aeabi_dadd+0x368>)
 800119a:	0b3f      	lsrs	r7, r7, #12
 800119c:	e73d      	b.n	800101a <__aeabi_dadd+0x12e>
 800119e:	0020      	movs	r0, r4
 80011a0:	f001 fc0e 	bl	80029c0 <__clzsi2>
 80011a4:	0001      	movs	r1, r0
 80011a6:	3118      	adds	r1, #24
 80011a8:	291f      	cmp	r1, #31
 80011aa:	dc00      	bgt.n	80011ae <__aeabi_dadd+0x2c2>
 80011ac:	e6fc      	b.n	8000fa8 <__aeabi_dadd+0xbc>
 80011ae:	3808      	subs	r0, #8
 80011b0:	4084      	lsls	r4, r0
 80011b2:	0027      	movs	r7, r4
 80011b4:	2400      	movs	r4, #0
 80011b6:	42b1      	cmp	r1, r6
 80011b8:	db00      	blt.n	80011bc <__aeabi_dadd+0x2d0>
 80011ba:	e6ff      	b.n	8000fbc <__aeabi_dadd+0xd0>
 80011bc:	4a26      	ldr	r2, [pc, #152]	; (8001258 <__aeabi_dadd+0x36c>)
 80011be:	1a76      	subs	r6, r6, r1
 80011c0:	4017      	ands	r7, r2
 80011c2:	e70d      	b.n	8000fe0 <__aeabi_dadd+0xf4>
 80011c4:	2a00      	cmp	r2, #0
 80011c6:	d02f      	beq.n	8001228 <__aeabi_dadd+0x33c>
 80011c8:	464a      	mov	r2, r9
 80011ca:	1b92      	subs	r2, r2, r6
 80011cc:	4694      	mov	ip, r2
 80011ce:	2e00      	cmp	r6, #0
 80011d0:	d100      	bne.n	80011d4 <__aeabi_dadd+0x2e8>
 80011d2:	e0ad      	b.n	8001330 <__aeabi_dadd+0x444>
 80011d4:	4a1f      	ldr	r2, [pc, #124]	; (8001254 <__aeabi_dadd+0x368>)
 80011d6:	4591      	cmp	r9, r2
 80011d8:	d100      	bne.n	80011dc <__aeabi_dadd+0x2f0>
 80011da:	e10f      	b.n	80013fc <__aeabi_dadd+0x510>
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	0412      	lsls	r2, r2, #16
 80011e0:	4310      	orrs	r0, r2
 80011e2:	4662      	mov	r2, ip
 80011e4:	2a38      	cmp	r2, #56	; 0x38
 80011e6:	dd00      	ble.n	80011ea <__aeabi_dadd+0x2fe>
 80011e8:	e10f      	b.n	800140a <__aeabi_dadd+0x51e>
 80011ea:	2a1f      	cmp	r2, #31
 80011ec:	dd00      	ble.n	80011f0 <__aeabi_dadd+0x304>
 80011ee:	e180      	b.n	80014f2 <__aeabi_dadd+0x606>
 80011f0:	4664      	mov	r4, ip
 80011f2:	2220      	movs	r2, #32
 80011f4:	001e      	movs	r6, r3
 80011f6:	1b12      	subs	r2, r2, r4
 80011f8:	4667      	mov	r7, ip
 80011fa:	0004      	movs	r4, r0
 80011fc:	4093      	lsls	r3, r2
 80011fe:	4094      	lsls	r4, r2
 8001200:	40fe      	lsrs	r6, r7
 8001202:	1e5a      	subs	r2, r3, #1
 8001204:	4193      	sbcs	r3, r2
 8001206:	40f8      	lsrs	r0, r7
 8001208:	4334      	orrs	r4, r6
 800120a:	431c      	orrs	r4, r3
 800120c:	4480      	add	r8, r0
 800120e:	1864      	adds	r4, r4, r1
 8001210:	428c      	cmp	r4, r1
 8001212:	41bf      	sbcs	r7, r7
 8001214:	427f      	negs	r7, r7
 8001216:	464e      	mov	r6, r9
 8001218:	4447      	add	r7, r8
 800121a:	e7a6      	b.n	800116a <__aeabi_dadd+0x27e>
 800121c:	4642      	mov	r2, r8
 800121e:	430a      	orrs	r2, r1
 8001220:	0011      	movs	r1, r2
 8001222:	1e4a      	subs	r2, r1, #1
 8001224:	4191      	sbcs	r1, r2
 8001226:	e6ad      	b.n	8000f84 <__aeabi_dadd+0x98>
 8001228:	4c0c      	ldr	r4, [pc, #48]	; (800125c <__aeabi_dadd+0x370>)
 800122a:	1c72      	adds	r2, r6, #1
 800122c:	4222      	tst	r2, r4
 800122e:	d000      	beq.n	8001232 <__aeabi_dadd+0x346>
 8001230:	e0a1      	b.n	8001376 <__aeabi_dadd+0x48a>
 8001232:	0002      	movs	r2, r0
 8001234:	431a      	orrs	r2, r3
 8001236:	2e00      	cmp	r6, #0
 8001238:	d000      	beq.n	800123c <__aeabi_dadd+0x350>
 800123a:	e0fa      	b.n	8001432 <__aeabi_dadd+0x546>
 800123c:	2a00      	cmp	r2, #0
 800123e:	d100      	bne.n	8001242 <__aeabi_dadd+0x356>
 8001240:	e145      	b.n	80014ce <__aeabi_dadd+0x5e2>
 8001242:	003a      	movs	r2, r7
 8001244:	430a      	orrs	r2, r1
 8001246:	d000      	beq.n	800124a <__aeabi_dadd+0x35e>
 8001248:	e146      	b.n	80014d8 <__aeabi_dadd+0x5ec>
 800124a:	0742      	lsls	r2, r0, #29
 800124c:	08db      	lsrs	r3, r3, #3
 800124e:	4313      	orrs	r3, r2
 8001250:	08c0      	lsrs	r0, r0, #3
 8001252:	e77b      	b.n	800114c <__aeabi_dadd+0x260>
 8001254:	000007ff 	.word	0x000007ff
 8001258:	ff7fffff 	.word	0xff7fffff
 800125c:	000007fe 	.word	0x000007fe
 8001260:	4647      	mov	r7, r8
 8001262:	1a5c      	subs	r4, r3, r1
 8001264:	1bc2      	subs	r2, r0, r7
 8001266:	42a3      	cmp	r3, r4
 8001268:	41bf      	sbcs	r7, r7
 800126a:	427f      	negs	r7, r7
 800126c:	46b9      	mov	r9, r7
 800126e:	0017      	movs	r7, r2
 8001270:	464a      	mov	r2, r9
 8001272:	1abf      	subs	r7, r7, r2
 8001274:	023a      	lsls	r2, r7, #8
 8001276:	d500      	bpl.n	800127a <__aeabi_dadd+0x38e>
 8001278:	e08d      	b.n	8001396 <__aeabi_dadd+0x4aa>
 800127a:	0023      	movs	r3, r4
 800127c:	433b      	orrs	r3, r7
 800127e:	d000      	beq.n	8001282 <__aeabi_dadd+0x396>
 8001280:	e68a      	b.n	8000f98 <__aeabi_dadd+0xac>
 8001282:	2000      	movs	r0, #0
 8001284:	2500      	movs	r5, #0
 8001286:	e761      	b.n	800114c <__aeabi_dadd+0x260>
 8001288:	4cb4      	ldr	r4, [pc, #720]	; (800155c <__aeabi_dadd+0x670>)
 800128a:	45a1      	cmp	r9, r4
 800128c:	d100      	bne.n	8001290 <__aeabi_dadd+0x3a4>
 800128e:	e0ad      	b.n	80013ec <__aeabi_dadd+0x500>
 8001290:	2480      	movs	r4, #128	; 0x80
 8001292:	0424      	lsls	r4, r4, #16
 8001294:	4320      	orrs	r0, r4
 8001296:	4664      	mov	r4, ip
 8001298:	2c38      	cmp	r4, #56	; 0x38
 800129a:	dc3d      	bgt.n	8001318 <__aeabi_dadd+0x42c>
 800129c:	4662      	mov	r2, ip
 800129e:	2c1f      	cmp	r4, #31
 80012a0:	dd00      	ble.n	80012a4 <__aeabi_dadd+0x3b8>
 80012a2:	e0b7      	b.n	8001414 <__aeabi_dadd+0x528>
 80012a4:	2520      	movs	r5, #32
 80012a6:	001e      	movs	r6, r3
 80012a8:	1b2d      	subs	r5, r5, r4
 80012aa:	0004      	movs	r4, r0
 80012ac:	40ab      	lsls	r3, r5
 80012ae:	40ac      	lsls	r4, r5
 80012b0:	40d6      	lsrs	r6, r2
 80012b2:	40d0      	lsrs	r0, r2
 80012b4:	4642      	mov	r2, r8
 80012b6:	1e5d      	subs	r5, r3, #1
 80012b8:	41ab      	sbcs	r3, r5
 80012ba:	4334      	orrs	r4, r6
 80012bc:	1a12      	subs	r2, r2, r0
 80012be:	4690      	mov	r8, r2
 80012c0:	4323      	orrs	r3, r4
 80012c2:	e02c      	b.n	800131e <__aeabi_dadd+0x432>
 80012c4:	0742      	lsls	r2, r0, #29
 80012c6:	08db      	lsrs	r3, r3, #3
 80012c8:	4313      	orrs	r3, r2
 80012ca:	08c0      	lsrs	r0, r0, #3
 80012cc:	e73b      	b.n	8001146 <__aeabi_dadd+0x25a>
 80012ce:	185c      	adds	r4, r3, r1
 80012d0:	429c      	cmp	r4, r3
 80012d2:	419b      	sbcs	r3, r3
 80012d4:	4440      	add	r0, r8
 80012d6:	425b      	negs	r3, r3
 80012d8:	18c7      	adds	r7, r0, r3
 80012da:	2601      	movs	r6, #1
 80012dc:	023b      	lsls	r3, r7, #8
 80012de:	d400      	bmi.n	80012e2 <__aeabi_dadd+0x3f6>
 80012e0:	e729      	b.n	8001136 <__aeabi_dadd+0x24a>
 80012e2:	2602      	movs	r6, #2
 80012e4:	4a9e      	ldr	r2, [pc, #632]	; (8001560 <__aeabi_dadd+0x674>)
 80012e6:	0863      	lsrs	r3, r4, #1
 80012e8:	4017      	ands	r7, r2
 80012ea:	2201      	movs	r2, #1
 80012ec:	4014      	ands	r4, r2
 80012ee:	431c      	orrs	r4, r3
 80012f0:	07fb      	lsls	r3, r7, #31
 80012f2:	431c      	orrs	r4, r3
 80012f4:	087f      	lsrs	r7, r7, #1
 80012f6:	e673      	b.n	8000fe0 <__aeabi_dadd+0xf4>
 80012f8:	4644      	mov	r4, r8
 80012fa:	3a20      	subs	r2, #32
 80012fc:	40d4      	lsrs	r4, r2
 80012fe:	4662      	mov	r2, ip
 8001300:	2a20      	cmp	r2, #32
 8001302:	d005      	beq.n	8001310 <__aeabi_dadd+0x424>
 8001304:	4667      	mov	r7, ip
 8001306:	2240      	movs	r2, #64	; 0x40
 8001308:	1bd2      	subs	r2, r2, r7
 800130a:	4647      	mov	r7, r8
 800130c:	4097      	lsls	r7, r2
 800130e:	4339      	orrs	r1, r7
 8001310:	1e4a      	subs	r2, r1, #1
 8001312:	4191      	sbcs	r1, r2
 8001314:	4321      	orrs	r1, r4
 8001316:	e635      	b.n	8000f84 <__aeabi_dadd+0x98>
 8001318:	4303      	orrs	r3, r0
 800131a:	1e58      	subs	r0, r3, #1
 800131c:	4183      	sbcs	r3, r0
 800131e:	1acc      	subs	r4, r1, r3
 8001320:	42a1      	cmp	r1, r4
 8001322:	41bf      	sbcs	r7, r7
 8001324:	4643      	mov	r3, r8
 8001326:	427f      	negs	r7, r7
 8001328:	4655      	mov	r5, sl
 800132a:	464e      	mov	r6, r9
 800132c:	1bdf      	subs	r7, r3, r7
 800132e:	e62e      	b.n	8000f8e <__aeabi_dadd+0xa2>
 8001330:	0002      	movs	r2, r0
 8001332:	431a      	orrs	r2, r3
 8001334:	d100      	bne.n	8001338 <__aeabi_dadd+0x44c>
 8001336:	e0bd      	b.n	80014b4 <__aeabi_dadd+0x5c8>
 8001338:	4662      	mov	r2, ip
 800133a:	4664      	mov	r4, ip
 800133c:	3a01      	subs	r2, #1
 800133e:	2c01      	cmp	r4, #1
 8001340:	d100      	bne.n	8001344 <__aeabi_dadd+0x458>
 8001342:	e0e5      	b.n	8001510 <__aeabi_dadd+0x624>
 8001344:	4c85      	ldr	r4, [pc, #532]	; (800155c <__aeabi_dadd+0x670>)
 8001346:	45a4      	cmp	ip, r4
 8001348:	d058      	beq.n	80013fc <__aeabi_dadd+0x510>
 800134a:	4694      	mov	ip, r2
 800134c:	e749      	b.n	80011e2 <__aeabi_dadd+0x2f6>
 800134e:	4664      	mov	r4, ip
 8001350:	2220      	movs	r2, #32
 8001352:	1b12      	subs	r2, r2, r4
 8001354:	4644      	mov	r4, r8
 8001356:	4094      	lsls	r4, r2
 8001358:	000f      	movs	r7, r1
 800135a:	46a1      	mov	r9, r4
 800135c:	4664      	mov	r4, ip
 800135e:	4091      	lsls	r1, r2
 8001360:	40e7      	lsrs	r7, r4
 8001362:	464c      	mov	r4, r9
 8001364:	1e4a      	subs	r2, r1, #1
 8001366:	4191      	sbcs	r1, r2
 8001368:	433c      	orrs	r4, r7
 800136a:	4642      	mov	r2, r8
 800136c:	430c      	orrs	r4, r1
 800136e:	4661      	mov	r1, ip
 8001370:	40ca      	lsrs	r2, r1
 8001372:	1880      	adds	r0, r0, r2
 8001374:	e6f4      	b.n	8001160 <__aeabi_dadd+0x274>
 8001376:	4c79      	ldr	r4, [pc, #484]	; (800155c <__aeabi_dadd+0x670>)
 8001378:	42a2      	cmp	r2, r4
 800137a:	d100      	bne.n	800137e <__aeabi_dadd+0x492>
 800137c:	e6fd      	b.n	800117a <__aeabi_dadd+0x28e>
 800137e:	1859      	adds	r1, r3, r1
 8001380:	4299      	cmp	r1, r3
 8001382:	419b      	sbcs	r3, r3
 8001384:	4440      	add	r0, r8
 8001386:	425f      	negs	r7, r3
 8001388:	19c7      	adds	r7, r0, r7
 800138a:	07fc      	lsls	r4, r7, #31
 800138c:	0849      	lsrs	r1, r1, #1
 800138e:	0016      	movs	r6, r2
 8001390:	430c      	orrs	r4, r1
 8001392:	087f      	lsrs	r7, r7, #1
 8001394:	e6cf      	b.n	8001136 <__aeabi_dadd+0x24a>
 8001396:	1acc      	subs	r4, r1, r3
 8001398:	42a1      	cmp	r1, r4
 800139a:	41bf      	sbcs	r7, r7
 800139c:	4643      	mov	r3, r8
 800139e:	427f      	negs	r7, r7
 80013a0:	1a18      	subs	r0, r3, r0
 80013a2:	4655      	mov	r5, sl
 80013a4:	1bc7      	subs	r7, r0, r7
 80013a6:	e5f7      	b.n	8000f98 <__aeabi_dadd+0xac>
 80013a8:	08c9      	lsrs	r1, r1, #3
 80013aa:	077b      	lsls	r3, r7, #29
 80013ac:	4655      	mov	r5, sl
 80013ae:	430b      	orrs	r3, r1
 80013b0:	08f8      	lsrs	r0, r7, #3
 80013b2:	e6c8      	b.n	8001146 <__aeabi_dadd+0x25a>
 80013b4:	2c00      	cmp	r4, #0
 80013b6:	d000      	beq.n	80013ba <__aeabi_dadd+0x4ce>
 80013b8:	e081      	b.n	80014be <__aeabi_dadd+0x5d2>
 80013ba:	4643      	mov	r3, r8
 80013bc:	430b      	orrs	r3, r1
 80013be:	d115      	bne.n	80013ec <__aeabi_dadd+0x500>
 80013c0:	2080      	movs	r0, #128	; 0x80
 80013c2:	2500      	movs	r5, #0
 80013c4:	0300      	lsls	r0, r0, #12
 80013c6:	e6e3      	b.n	8001190 <__aeabi_dadd+0x2a4>
 80013c8:	1a5c      	subs	r4, r3, r1
 80013ca:	42a3      	cmp	r3, r4
 80013cc:	419b      	sbcs	r3, r3
 80013ce:	1bc7      	subs	r7, r0, r7
 80013d0:	425b      	negs	r3, r3
 80013d2:	2601      	movs	r6, #1
 80013d4:	1aff      	subs	r7, r7, r3
 80013d6:	e5da      	b.n	8000f8e <__aeabi_dadd+0xa2>
 80013d8:	0742      	lsls	r2, r0, #29
 80013da:	08db      	lsrs	r3, r3, #3
 80013dc:	4313      	orrs	r3, r2
 80013de:	08c0      	lsrs	r0, r0, #3
 80013e0:	e6d2      	b.n	8001188 <__aeabi_dadd+0x29c>
 80013e2:	0742      	lsls	r2, r0, #29
 80013e4:	08db      	lsrs	r3, r3, #3
 80013e6:	4313      	orrs	r3, r2
 80013e8:	08c0      	lsrs	r0, r0, #3
 80013ea:	e6ac      	b.n	8001146 <__aeabi_dadd+0x25a>
 80013ec:	4643      	mov	r3, r8
 80013ee:	4642      	mov	r2, r8
 80013f0:	08c9      	lsrs	r1, r1, #3
 80013f2:	075b      	lsls	r3, r3, #29
 80013f4:	4655      	mov	r5, sl
 80013f6:	430b      	orrs	r3, r1
 80013f8:	08d0      	lsrs	r0, r2, #3
 80013fa:	e6c5      	b.n	8001188 <__aeabi_dadd+0x29c>
 80013fc:	4643      	mov	r3, r8
 80013fe:	4642      	mov	r2, r8
 8001400:	075b      	lsls	r3, r3, #29
 8001402:	08c9      	lsrs	r1, r1, #3
 8001404:	430b      	orrs	r3, r1
 8001406:	08d0      	lsrs	r0, r2, #3
 8001408:	e6be      	b.n	8001188 <__aeabi_dadd+0x29c>
 800140a:	4303      	orrs	r3, r0
 800140c:	001c      	movs	r4, r3
 800140e:	1e63      	subs	r3, r4, #1
 8001410:	419c      	sbcs	r4, r3
 8001412:	e6fc      	b.n	800120e <__aeabi_dadd+0x322>
 8001414:	0002      	movs	r2, r0
 8001416:	3c20      	subs	r4, #32
 8001418:	40e2      	lsrs	r2, r4
 800141a:	0014      	movs	r4, r2
 800141c:	4662      	mov	r2, ip
 800141e:	2a20      	cmp	r2, #32
 8001420:	d003      	beq.n	800142a <__aeabi_dadd+0x53e>
 8001422:	2540      	movs	r5, #64	; 0x40
 8001424:	1aad      	subs	r5, r5, r2
 8001426:	40a8      	lsls	r0, r5
 8001428:	4303      	orrs	r3, r0
 800142a:	1e58      	subs	r0, r3, #1
 800142c:	4183      	sbcs	r3, r0
 800142e:	4323      	orrs	r3, r4
 8001430:	e775      	b.n	800131e <__aeabi_dadd+0x432>
 8001432:	2a00      	cmp	r2, #0
 8001434:	d0e2      	beq.n	80013fc <__aeabi_dadd+0x510>
 8001436:	003a      	movs	r2, r7
 8001438:	430a      	orrs	r2, r1
 800143a:	d0cd      	beq.n	80013d8 <__aeabi_dadd+0x4ec>
 800143c:	0742      	lsls	r2, r0, #29
 800143e:	08db      	lsrs	r3, r3, #3
 8001440:	4313      	orrs	r3, r2
 8001442:	2280      	movs	r2, #128	; 0x80
 8001444:	08c0      	lsrs	r0, r0, #3
 8001446:	0312      	lsls	r2, r2, #12
 8001448:	4210      	tst	r0, r2
 800144a:	d006      	beq.n	800145a <__aeabi_dadd+0x56e>
 800144c:	08fc      	lsrs	r4, r7, #3
 800144e:	4214      	tst	r4, r2
 8001450:	d103      	bne.n	800145a <__aeabi_dadd+0x56e>
 8001452:	0020      	movs	r0, r4
 8001454:	08cb      	lsrs	r3, r1, #3
 8001456:	077a      	lsls	r2, r7, #29
 8001458:	4313      	orrs	r3, r2
 800145a:	0f5a      	lsrs	r2, r3, #29
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	0752      	lsls	r2, r2, #29
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	4313      	orrs	r3, r2
 8001464:	e690      	b.n	8001188 <__aeabi_dadd+0x29c>
 8001466:	4643      	mov	r3, r8
 8001468:	430b      	orrs	r3, r1
 800146a:	d100      	bne.n	800146e <__aeabi_dadd+0x582>
 800146c:	e709      	b.n	8001282 <__aeabi_dadd+0x396>
 800146e:	4643      	mov	r3, r8
 8001470:	4642      	mov	r2, r8
 8001472:	08c9      	lsrs	r1, r1, #3
 8001474:	075b      	lsls	r3, r3, #29
 8001476:	4655      	mov	r5, sl
 8001478:	430b      	orrs	r3, r1
 800147a:	08d0      	lsrs	r0, r2, #3
 800147c:	e666      	b.n	800114c <__aeabi_dadd+0x260>
 800147e:	1acc      	subs	r4, r1, r3
 8001480:	42a1      	cmp	r1, r4
 8001482:	4189      	sbcs	r1, r1
 8001484:	1a3f      	subs	r7, r7, r0
 8001486:	4249      	negs	r1, r1
 8001488:	4655      	mov	r5, sl
 800148a:	2601      	movs	r6, #1
 800148c:	1a7f      	subs	r7, r7, r1
 800148e:	e57e      	b.n	8000f8e <__aeabi_dadd+0xa2>
 8001490:	4642      	mov	r2, r8
 8001492:	1a5c      	subs	r4, r3, r1
 8001494:	1a87      	subs	r7, r0, r2
 8001496:	42a3      	cmp	r3, r4
 8001498:	4192      	sbcs	r2, r2
 800149a:	4252      	negs	r2, r2
 800149c:	1abf      	subs	r7, r7, r2
 800149e:	023a      	lsls	r2, r7, #8
 80014a0:	d53d      	bpl.n	800151e <__aeabi_dadd+0x632>
 80014a2:	1acc      	subs	r4, r1, r3
 80014a4:	42a1      	cmp	r1, r4
 80014a6:	4189      	sbcs	r1, r1
 80014a8:	4643      	mov	r3, r8
 80014aa:	4249      	negs	r1, r1
 80014ac:	1a1f      	subs	r7, r3, r0
 80014ae:	4655      	mov	r5, sl
 80014b0:	1a7f      	subs	r7, r7, r1
 80014b2:	e595      	b.n	8000fe0 <__aeabi_dadd+0xf4>
 80014b4:	077b      	lsls	r3, r7, #29
 80014b6:	08c9      	lsrs	r1, r1, #3
 80014b8:	430b      	orrs	r3, r1
 80014ba:	08f8      	lsrs	r0, r7, #3
 80014bc:	e643      	b.n	8001146 <__aeabi_dadd+0x25a>
 80014be:	4644      	mov	r4, r8
 80014c0:	08db      	lsrs	r3, r3, #3
 80014c2:	430c      	orrs	r4, r1
 80014c4:	d130      	bne.n	8001528 <__aeabi_dadd+0x63c>
 80014c6:	0742      	lsls	r2, r0, #29
 80014c8:	4313      	orrs	r3, r2
 80014ca:	08c0      	lsrs	r0, r0, #3
 80014cc:	e65c      	b.n	8001188 <__aeabi_dadd+0x29c>
 80014ce:	077b      	lsls	r3, r7, #29
 80014d0:	08c9      	lsrs	r1, r1, #3
 80014d2:	430b      	orrs	r3, r1
 80014d4:	08f8      	lsrs	r0, r7, #3
 80014d6:	e639      	b.n	800114c <__aeabi_dadd+0x260>
 80014d8:	185c      	adds	r4, r3, r1
 80014da:	429c      	cmp	r4, r3
 80014dc:	419b      	sbcs	r3, r3
 80014de:	4440      	add	r0, r8
 80014e0:	425b      	negs	r3, r3
 80014e2:	18c7      	adds	r7, r0, r3
 80014e4:	023b      	lsls	r3, r7, #8
 80014e6:	d400      	bmi.n	80014ea <__aeabi_dadd+0x5fe>
 80014e8:	e625      	b.n	8001136 <__aeabi_dadd+0x24a>
 80014ea:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <__aeabi_dadd+0x674>)
 80014ec:	2601      	movs	r6, #1
 80014ee:	401f      	ands	r7, r3
 80014f0:	e621      	b.n	8001136 <__aeabi_dadd+0x24a>
 80014f2:	0004      	movs	r4, r0
 80014f4:	3a20      	subs	r2, #32
 80014f6:	40d4      	lsrs	r4, r2
 80014f8:	4662      	mov	r2, ip
 80014fa:	2a20      	cmp	r2, #32
 80014fc:	d004      	beq.n	8001508 <__aeabi_dadd+0x61c>
 80014fe:	2240      	movs	r2, #64	; 0x40
 8001500:	4666      	mov	r6, ip
 8001502:	1b92      	subs	r2, r2, r6
 8001504:	4090      	lsls	r0, r2
 8001506:	4303      	orrs	r3, r0
 8001508:	1e5a      	subs	r2, r3, #1
 800150a:	4193      	sbcs	r3, r2
 800150c:	431c      	orrs	r4, r3
 800150e:	e67e      	b.n	800120e <__aeabi_dadd+0x322>
 8001510:	185c      	adds	r4, r3, r1
 8001512:	428c      	cmp	r4, r1
 8001514:	4189      	sbcs	r1, r1
 8001516:	4440      	add	r0, r8
 8001518:	4249      	negs	r1, r1
 800151a:	1847      	adds	r7, r0, r1
 800151c:	e6dd      	b.n	80012da <__aeabi_dadd+0x3ee>
 800151e:	0023      	movs	r3, r4
 8001520:	433b      	orrs	r3, r7
 8001522:	d100      	bne.n	8001526 <__aeabi_dadd+0x63a>
 8001524:	e6ad      	b.n	8001282 <__aeabi_dadd+0x396>
 8001526:	e606      	b.n	8001136 <__aeabi_dadd+0x24a>
 8001528:	0744      	lsls	r4, r0, #29
 800152a:	4323      	orrs	r3, r4
 800152c:	2480      	movs	r4, #128	; 0x80
 800152e:	08c0      	lsrs	r0, r0, #3
 8001530:	0324      	lsls	r4, r4, #12
 8001532:	4220      	tst	r0, r4
 8001534:	d008      	beq.n	8001548 <__aeabi_dadd+0x65c>
 8001536:	4642      	mov	r2, r8
 8001538:	08d6      	lsrs	r6, r2, #3
 800153a:	4226      	tst	r6, r4
 800153c:	d104      	bne.n	8001548 <__aeabi_dadd+0x65c>
 800153e:	4655      	mov	r5, sl
 8001540:	0030      	movs	r0, r6
 8001542:	08cb      	lsrs	r3, r1, #3
 8001544:	0751      	lsls	r1, r2, #29
 8001546:	430b      	orrs	r3, r1
 8001548:	0f5a      	lsrs	r2, r3, #29
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	08db      	lsrs	r3, r3, #3
 800154e:	0752      	lsls	r2, r2, #29
 8001550:	4313      	orrs	r3, r2
 8001552:	e619      	b.n	8001188 <__aeabi_dadd+0x29c>
 8001554:	2300      	movs	r3, #0
 8001556:	4a01      	ldr	r2, [pc, #4]	; (800155c <__aeabi_dadd+0x670>)
 8001558:	001f      	movs	r7, r3
 800155a:	e55e      	b.n	800101a <__aeabi_dadd+0x12e>
 800155c:	000007ff 	.word	0x000007ff
 8001560:	ff7fffff 	.word	0xff7fffff

08001564 <__aeabi_ddiv>:
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001566:	4657      	mov	r7, sl
 8001568:	464e      	mov	r6, r9
 800156a:	4645      	mov	r5, r8
 800156c:	46de      	mov	lr, fp
 800156e:	b5e0      	push	{r5, r6, r7, lr}
 8001570:	4681      	mov	r9, r0
 8001572:	0005      	movs	r5, r0
 8001574:	030c      	lsls	r4, r1, #12
 8001576:	0048      	lsls	r0, r1, #1
 8001578:	4692      	mov	sl, r2
 800157a:	001f      	movs	r7, r3
 800157c:	b085      	sub	sp, #20
 800157e:	0b24      	lsrs	r4, r4, #12
 8001580:	0d40      	lsrs	r0, r0, #21
 8001582:	0fce      	lsrs	r6, r1, #31
 8001584:	2800      	cmp	r0, #0
 8001586:	d100      	bne.n	800158a <__aeabi_ddiv+0x26>
 8001588:	e156      	b.n	8001838 <__aeabi_ddiv+0x2d4>
 800158a:	4bd4      	ldr	r3, [pc, #848]	; (80018dc <__aeabi_ddiv+0x378>)
 800158c:	4298      	cmp	r0, r3
 800158e:	d100      	bne.n	8001592 <__aeabi_ddiv+0x2e>
 8001590:	e172      	b.n	8001878 <__aeabi_ddiv+0x314>
 8001592:	0f6b      	lsrs	r3, r5, #29
 8001594:	00e4      	lsls	r4, r4, #3
 8001596:	431c      	orrs	r4, r3
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	041b      	lsls	r3, r3, #16
 800159c:	4323      	orrs	r3, r4
 800159e:	4698      	mov	r8, r3
 80015a0:	4bcf      	ldr	r3, [pc, #828]	; (80018e0 <__aeabi_ddiv+0x37c>)
 80015a2:	00ed      	lsls	r5, r5, #3
 80015a4:	469b      	mov	fp, r3
 80015a6:	2300      	movs	r3, #0
 80015a8:	4699      	mov	r9, r3
 80015aa:	4483      	add	fp, r0
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	033c      	lsls	r4, r7, #12
 80015b0:	007b      	lsls	r3, r7, #1
 80015b2:	4650      	mov	r0, sl
 80015b4:	0b24      	lsrs	r4, r4, #12
 80015b6:	0d5b      	lsrs	r3, r3, #21
 80015b8:	0fff      	lsrs	r7, r7, #31
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d100      	bne.n	80015c0 <__aeabi_ddiv+0x5c>
 80015be:	e11f      	b.n	8001800 <__aeabi_ddiv+0x29c>
 80015c0:	4ac6      	ldr	r2, [pc, #792]	; (80018dc <__aeabi_ddiv+0x378>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d100      	bne.n	80015c8 <__aeabi_ddiv+0x64>
 80015c6:	e162      	b.n	800188e <__aeabi_ddiv+0x32a>
 80015c8:	49c5      	ldr	r1, [pc, #788]	; (80018e0 <__aeabi_ddiv+0x37c>)
 80015ca:	0f42      	lsrs	r2, r0, #29
 80015cc:	468c      	mov	ip, r1
 80015ce:	00e4      	lsls	r4, r4, #3
 80015d0:	4659      	mov	r1, fp
 80015d2:	4314      	orrs	r4, r2
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	4463      	add	r3, ip
 80015d8:	0412      	lsls	r2, r2, #16
 80015da:	1acb      	subs	r3, r1, r3
 80015dc:	4314      	orrs	r4, r2
 80015de:	469b      	mov	fp, r3
 80015e0:	00c2      	lsls	r2, r0, #3
 80015e2:	2000      	movs	r0, #0
 80015e4:	0033      	movs	r3, r6
 80015e6:	407b      	eors	r3, r7
 80015e8:	469a      	mov	sl, r3
 80015ea:	464b      	mov	r3, r9
 80015ec:	2b0f      	cmp	r3, #15
 80015ee:	d827      	bhi.n	8001640 <__aeabi_ddiv+0xdc>
 80015f0:	49bc      	ldr	r1, [pc, #752]	; (80018e4 <__aeabi_ddiv+0x380>)
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	58cb      	ldr	r3, [r1, r3]
 80015f6:	469f      	mov	pc, r3
 80015f8:	46b2      	mov	sl, r6
 80015fa:	9b00      	ldr	r3, [sp, #0]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d016      	beq.n	800162e <__aeabi_ddiv+0xca>
 8001600:	2b03      	cmp	r3, #3
 8001602:	d100      	bne.n	8001606 <__aeabi_ddiv+0xa2>
 8001604:	e28e      	b.n	8001b24 <__aeabi_ddiv+0x5c0>
 8001606:	2b01      	cmp	r3, #1
 8001608:	d000      	beq.n	800160c <__aeabi_ddiv+0xa8>
 800160a:	e0d9      	b.n	80017c0 <__aeabi_ddiv+0x25c>
 800160c:	2300      	movs	r3, #0
 800160e:	2400      	movs	r4, #0
 8001610:	2500      	movs	r5, #0
 8001612:	4652      	mov	r2, sl
 8001614:	051b      	lsls	r3, r3, #20
 8001616:	4323      	orrs	r3, r4
 8001618:	07d2      	lsls	r2, r2, #31
 800161a:	4313      	orrs	r3, r2
 800161c:	0028      	movs	r0, r5
 800161e:	0019      	movs	r1, r3
 8001620:	b005      	add	sp, #20
 8001622:	bcf0      	pop	{r4, r5, r6, r7}
 8001624:	46bb      	mov	fp, r7
 8001626:	46b2      	mov	sl, r6
 8001628:	46a9      	mov	r9, r5
 800162a:	46a0      	mov	r8, r4
 800162c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800162e:	2400      	movs	r4, #0
 8001630:	2500      	movs	r5, #0
 8001632:	4baa      	ldr	r3, [pc, #680]	; (80018dc <__aeabi_ddiv+0x378>)
 8001634:	e7ed      	b.n	8001612 <__aeabi_ddiv+0xae>
 8001636:	46ba      	mov	sl, r7
 8001638:	46a0      	mov	r8, r4
 800163a:	0015      	movs	r5, r2
 800163c:	9000      	str	r0, [sp, #0]
 800163e:	e7dc      	b.n	80015fa <__aeabi_ddiv+0x96>
 8001640:	4544      	cmp	r4, r8
 8001642:	d200      	bcs.n	8001646 <__aeabi_ddiv+0xe2>
 8001644:	e1c7      	b.n	80019d6 <__aeabi_ddiv+0x472>
 8001646:	d100      	bne.n	800164a <__aeabi_ddiv+0xe6>
 8001648:	e1c2      	b.n	80019d0 <__aeabi_ddiv+0x46c>
 800164a:	2301      	movs	r3, #1
 800164c:	425b      	negs	r3, r3
 800164e:	469c      	mov	ip, r3
 8001650:	002e      	movs	r6, r5
 8001652:	4640      	mov	r0, r8
 8001654:	2500      	movs	r5, #0
 8001656:	44e3      	add	fp, ip
 8001658:	0223      	lsls	r3, r4, #8
 800165a:	0e14      	lsrs	r4, r2, #24
 800165c:	431c      	orrs	r4, r3
 800165e:	0c1b      	lsrs	r3, r3, #16
 8001660:	4699      	mov	r9, r3
 8001662:	0423      	lsls	r3, r4, #16
 8001664:	0c1f      	lsrs	r7, r3, #16
 8001666:	0212      	lsls	r2, r2, #8
 8001668:	4649      	mov	r1, r9
 800166a:	9200      	str	r2, [sp, #0]
 800166c:	9701      	str	r7, [sp, #4]
 800166e:	f7fe fde3 	bl	8000238 <__aeabi_uidivmod>
 8001672:	0002      	movs	r2, r0
 8001674:	437a      	muls	r2, r7
 8001676:	040b      	lsls	r3, r1, #16
 8001678:	0c31      	lsrs	r1, r6, #16
 800167a:	4680      	mov	r8, r0
 800167c:	4319      	orrs	r1, r3
 800167e:	428a      	cmp	r2, r1
 8001680:	d907      	bls.n	8001692 <__aeabi_ddiv+0x12e>
 8001682:	2301      	movs	r3, #1
 8001684:	425b      	negs	r3, r3
 8001686:	469c      	mov	ip, r3
 8001688:	1909      	adds	r1, r1, r4
 800168a:	44e0      	add	r8, ip
 800168c:	428c      	cmp	r4, r1
 800168e:	d800      	bhi.n	8001692 <__aeabi_ddiv+0x12e>
 8001690:	e207      	b.n	8001aa2 <__aeabi_ddiv+0x53e>
 8001692:	1a88      	subs	r0, r1, r2
 8001694:	4649      	mov	r1, r9
 8001696:	f7fe fdcf 	bl	8000238 <__aeabi_uidivmod>
 800169a:	0409      	lsls	r1, r1, #16
 800169c:	468c      	mov	ip, r1
 800169e:	0431      	lsls	r1, r6, #16
 80016a0:	4666      	mov	r6, ip
 80016a2:	9a01      	ldr	r2, [sp, #4]
 80016a4:	0c09      	lsrs	r1, r1, #16
 80016a6:	4342      	muls	r2, r0
 80016a8:	0003      	movs	r3, r0
 80016aa:	4331      	orrs	r1, r6
 80016ac:	428a      	cmp	r2, r1
 80016ae:	d904      	bls.n	80016ba <__aeabi_ddiv+0x156>
 80016b0:	1909      	adds	r1, r1, r4
 80016b2:	3b01      	subs	r3, #1
 80016b4:	428c      	cmp	r4, r1
 80016b6:	d800      	bhi.n	80016ba <__aeabi_ddiv+0x156>
 80016b8:	e1ed      	b.n	8001a96 <__aeabi_ddiv+0x532>
 80016ba:	1a88      	subs	r0, r1, r2
 80016bc:	4642      	mov	r2, r8
 80016be:	0412      	lsls	r2, r2, #16
 80016c0:	431a      	orrs	r2, r3
 80016c2:	4690      	mov	r8, r2
 80016c4:	4641      	mov	r1, r8
 80016c6:	9b00      	ldr	r3, [sp, #0]
 80016c8:	040e      	lsls	r6, r1, #16
 80016ca:	0c1b      	lsrs	r3, r3, #16
 80016cc:	001f      	movs	r7, r3
 80016ce:	9302      	str	r3, [sp, #8]
 80016d0:	9b00      	ldr	r3, [sp, #0]
 80016d2:	0c36      	lsrs	r6, r6, #16
 80016d4:	041b      	lsls	r3, r3, #16
 80016d6:	0c19      	lsrs	r1, r3, #16
 80016d8:	000b      	movs	r3, r1
 80016da:	4373      	muls	r3, r6
 80016dc:	0c12      	lsrs	r2, r2, #16
 80016de:	437e      	muls	r6, r7
 80016e0:	9103      	str	r1, [sp, #12]
 80016e2:	4351      	muls	r1, r2
 80016e4:	437a      	muls	r2, r7
 80016e6:	0c1f      	lsrs	r7, r3, #16
 80016e8:	46bc      	mov	ip, r7
 80016ea:	1876      	adds	r6, r6, r1
 80016ec:	4466      	add	r6, ip
 80016ee:	42b1      	cmp	r1, r6
 80016f0:	d903      	bls.n	80016fa <__aeabi_ddiv+0x196>
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	0249      	lsls	r1, r1, #9
 80016f6:	468c      	mov	ip, r1
 80016f8:	4462      	add	r2, ip
 80016fa:	0c31      	lsrs	r1, r6, #16
 80016fc:	188a      	adds	r2, r1, r2
 80016fe:	0431      	lsls	r1, r6, #16
 8001700:	041e      	lsls	r6, r3, #16
 8001702:	0c36      	lsrs	r6, r6, #16
 8001704:	198e      	adds	r6, r1, r6
 8001706:	4290      	cmp	r0, r2
 8001708:	d302      	bcc.n	8001710 <__aeabi_ddiv+0x1ac>
 800170a:	d112      	bne.n	8001732 <__aeabi_ddiv+0x1ce>
 800170c:	42b5      	cmp	r5, r6
 800170e:	d210      	bcs.n	8001732 <__aeabi_ddiv+0x1ce>
 8001710:	4643      	mov	r3, r8
 8001712:	1e59      	subs	r1, r3, #1
 8001714:	9b00      	ldr	r3, [sp, #0]
 8001716:	469c      	mov	ip, r3
 8001718:	4465      	add	r5, ip
 800171a:	001f      	movs	r7, r3
 800171c:	429d      	cmp	r5, r3
 800171e:	419b      	sbcs	r3, r3
 8001720:	425b      	negs	r3, r3
 8001722:	191b      	adds	r3, r3, r4
 8001724:	18c0      	adds	r0, r0, r3
 8001726:	4284      	cmp	r4, r0
 8001728:	d200      	bcs.n	800172c <__aeabi_ddiv+0x1c8>
 800172a:	e1a0      	b.n	8001a6e <__aeabi_ddiv+0x50a>
 800172c:	d100      	bne.n	8001730 <__aeabi_ddiv+0x1cc>
 800172e:	e19b      	b.n	8001a68 <__aeabi_ddiv+0x504>
 8001730:	4688      	mov	r8, r1
 8001732:	1bae      	subs	r6, r5, r6
 8001734:	42b5      	cmp	r5, r6
 8001736:	41ad      	sbcs	r5, r5
 8001738:	1a80      	subs	r0, r0, r2
 800173a:	426d      	negs	r5, r5
 800173c:	1b40      	subs	r0, r0, r5
 800173e:	4284      	cmp	r4, r0
 8001740:	d100      	bne.n	8001744 <__aeabi_ddiv+0x1e0>
 8001742:	e1d5      	b.n	8001af0 <__aeabi_ddiv+0x58c>
 8001744:	4649      	mov	r1, r9
 8001746:	f7fe fd77 	bl	8000238 <__aeabi_uidivmod>
 800174a:	9a01      	ldr	r2, [sp, #4]
 800174c:	040b      	lsls	r3, r1, #16
 800174e:	4342      	muls	r2, r0
 8001750:	0c31      	lsrs	r1, r6, #16
 8001752:	0005      	movs	r5, r0
 8001754:	4319      	orrs	r1, r3
 8001756:	428a      	cmp	r2, r1
 8001758:	d900      	bls.n	800175c <__aeabi_ddiv+0x1f8>
 800175a:	e16c      	b.n	8001a36 <__aeabi_ddiv+0x4d2>
 800175c:	1a88      	subs	r0, r1, r2
 800175e:	4649      	mov	r1, r9
 8001760:	f7fe fd6a 	bl	8000238 <__aeabi_uidivmod>
 8001764:	9a01      	ldr	r2, [sp, #4]
 8001766:	0436      	lsls	r6, r6, #16
 8001768:	4342      	muls	r2, r0
 800176a:	0409      	lsls	r1, r1, #16
 800176c:	0c36      	lsrs	r6, r6, #16
 800176e:	0003      	movs	r3, r0
 8001770:	430e      	orrs	r6, r1
 8001772:	42b2      	cmp	r2, r6
 8001774:	d900      	bls.n	8001778 <__aeabi_ddiv+0x214>
 8001776:	e153      	b.n	8001a20 <__aeabi_ddiv+0x4bc>
 8001778:	9803      	ldr	r0, [sp, #12]
 800177a:	1ab6      	subs	r6, r6, r2
 800177c:	0002      	movs	r2, r0
 800177e:	042d      	lsls	r5, r5, #16
 8001780:	431d      	orrs	r5, r3
 8001782:	9f02      	ldr	r7, [sp, #8]
 8001784:	042b      	lsls	r3, r5, #16
 8001786:	0c1b      	lsrs	r3, r3, #16
 8001788:	435a      	muls	r2, r3
 800178a:	437b      	muls	r3, r7
 800178c:	469c      	mov	ip, r3
 800178e:	0c29      	lsrs	r1, r5, #16
 8001790:	4348      	muls	r0, r1
 8001792:	0c13      	lsrs	r3, r2, #16
 8001794:	4484      	add	ip, r0
 8001796:	4463      	add	r3, ip
 8001798:	4379      	muls	r1, r7
 800179a:	4298      	cmp	r0, r3
 800179c:	d903      	bls.n	80017a6 <__aeabi_ddiv+0x242>
 800179e:	2080      	movs	r0, #128	; 0x80
 80017a0:	0240      	lsls	r0, r0, #9
 80017a2:	4684      	mov	ip, r0
 80017a4:	4461      	add	r1, ip
 80017a6:	0c18      	lsrs	r0, r3, #16
 80017a8:	0412      	lsls	r2, r2, #16
 80017aa:	041b      	lsls	r3, r3, #16
 80017ac:	0c12      	lsrs	r2, r2, #16
 80017ae:	1841      	adds	r1, r0, r1
 80017b0:	189b      	adds	r3, r3, r2
 80017b2:	428e      	cmp	r6, r1
 80017b4:	d200      	bcs.n	80017b8 <__aeabi_ddiv+0x254>
 80017b6:	e0ff      	b.n	80019b8 <__aeabi_ddiv+0x454>
 80017b8:	d100      	bne.n	80017bc <__aeabi_ddiv+0x258>
 80017ba:	e0fa      	b.n	80019b2 <__aeabi_ddiv+0x44e>
 80017bc:	2301      	movs	r3, #1
 80017be:	431d      	orrs	r5, r3
 80017c0:	4a49      	ldr	r2, [pc, #292]	; (80018e8 <__aeabi_ddiv+0x384>)
 80017c2:	445a      	add	r2, fp
 80017c4:	2a00      	cmp	r2, #0
 80017c6:	dc00      	bgt.n	80017ca <__aeabi_ddiv+0x266>
 80017c8:	e0aa      	b.n	8001920 <__aeabi_ddiv+0x3bc>
 80017ca:	076b      	lsls	r3, r5, #29
 80017cc:	d000      	beq.n	80017d0 <__aeabi_ddiv+0x26c>
 80017ce:	e13d      	b.n	8001a4c <__aeabi_ddiv+0x4e8>
 80017d0:	08ed      	lsrs	r5, r5, #3
 80017d2:	4643      	mov	r3, r8
 80017d4:	01db      	lsls	r3, r3, #7
 80017d6:	d506      	bpl.n	80017e6 <__aeabi_ddiv+0x282>
 80017d8:	4642      	mov	r2, r8
 80017da:	4b44      	ldr	r3, [pc, #272]	; (80018ec <__aeabi_ddiv+0x388>)
 80017dc:	401a      	ands	r2, r3
 80017de:	4690      	mov	r8, r2
 80017e0:	2280      	movs	r2, #128	; 0x80
 80017e2:	00d2      	lsls	r2, r2, #3
 80017e4:	445a      	add	r2, fp
 80017e6:	4b42      	ldr	r3, [pc, #264]	; (80018f0 <__aeabi_ddiv+0x38c>)
 80017e8:	429a      	cmp	r2, r3
 80017ea:	dd00      	ble.n	80017ee <__aeabi_ddiv+0x28a>
 80017ec:	e71f      	b.n	800162e <__aeabi_ddiv+0xca>
 80017ee:	4643      	mov	r3, r8
 80017f0:	075b      	lsls	r3, r3, #29
 80017f2:	431d      	orrs	r5, r3
 80017f4:	4643      	mov	r3, r8
 80017f6:	0552      	lsls	r2, r2, #21
 80017f8:	025c      	lsls	r4, r3, #9
 80017fa:	0b24      	lsrs	r4, r4, #12
 80017fc:	0d53      	lsrs	r3, r2, #21
 80017fe:	e708      	b.n	8001612 <__aeabi_ddiv+0xae>
 8001800:	4652      	mov	r2, sl
 8001802:	4322      	orrs	r2, r4
 8001804:	d100      	bne.n	8001808 <__aeabi_ddiv+0x2a4>
 8001806:	e07b      	b.n	8001900 <__aeabi_ddiv+0x39c>
 8001808:	2c00      	cmp	r4, #0
 800180a:	d100      	bne.n	800180e <__aeabi_ddiv+0x2aa>
 800180c:	e0fa      	b.n	8001a04 <__aeabi_ddiv+0x4a0>
 800180e:	0020      	movs	r0, r4
 8001810:	f001 f8d6 	bl	80029c0 <__clzsi2>
 8001814:	0002      	movs	r2, r0
 8001816:	3a0b      	subs	r2, #11
 8001818:	231d      	movs	r3, #29
 800181a:	0001      	movs	r1, r0
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	4652      	mov	r2, sl
 8001820:	3908      	subs	r1, #8
 8001822:	40da      	lsrs	r2, r3
 8001824:	408c      	lsls	r4, r1
 8001826:	4314      	orrs	r4, r2
 8001828:	4652      	mov	r2, sl
 800182a:	408a      	lsls	r2, r1
 800182c:	4b31      	ldr	r3, [pc, #196]	; (80018f4 <__aeabi_ddiv+0x390>)
 800182e:	4458      	add	r0, fp
 8001830:	469b      	mov	fp, r3
 8001832:	4483      	add	fp, r0
 8001834:	2000      	movs	r0, #0
 8001836:	e6d5      	b.n	80015e4 <__aeabi_ddiv+0x80>
 8001838:	464b      	mov	r3, r9
 800183a:	4323      	orrs	r3, r4
 800183c:	4698      	mov	r8, r3
 800183e:	d044      	beq.n	80018ca <__aeabi_ddiv+0x366>
 8001840:	2c00      	cmp	r4, #0
 8001842:	d100      	bne.n	8001846 <__aeabi_ddiv+0x2e2>
 8001844:	e0ce      	b.n	80019e4 <__aeabi_ddiv+0x480>
 8001846:	0020      	movs	r0, r4
 8001848:	f001 f8ba 	bl	80029c0 <__clzsi2>
 800184c:	0001      	movs	r1, r0
 800184e:	0002      	movs	r2, r0
 8001850:	390b      	subs	r1, #11
 8001852:	231d      	movs	r3, #29
 8001854:	1a5b      	subs	r3, r3, r1
 8001856:	4649      	mov	r1, r9
 8001858:	0010      	movs	r0, r2
 800185a:	40d9      	lsrs	r1, r3
 800185c:	3808      	subs	r0, #8
 800185e:	4084      	lsls	r4, r0
 8001860:	000b      	movs	r3, r1
 8001862:	464d      	mov	r5, r9
 8001864:	4323      	orrs	r3, r4
 8001866:	4698      	mov	r8, r3
 8001868:	4085      	lsls	r5, r0
 800186a:	4823      	ldr	r0, [pc, #140]	; (80018f8 <__aeabi_ddiv+0x394>)
 800186c:	1a83      	subs	r3, r0, r2
 800186e:	469b      	mov	fp, r3
 8001870:	2300      	movs	r3, #0
 8001872:	4699      	mov	r9, r3
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	e69a      	b.n	80015ae <__aeabi_ddiv+0x4a>
 8001878:	464b      	mov	r3, r9
 800187a:	4323      	orrs	r3, r4
 800187c:	4698      	mov	r8, r3
 800187e:	d11d      	bne.n	80018bc <__aeabi_ddiv+0x358>
 8001880:	2308      	movs	r3, #8
 8001882:	4699      	mov	r9, r3
 8001884:	3b06      	subs	r3, #6
 8001886:	2500      	movs	r5, #0
 8001888:	4683      	mov	fp, r0
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	e68f      	b.n	80015ae <__aeabi_ddiv+0x4a>
 800188e:	4652      	mov	r2, sl
 8001890:	4322      	orrs	r2, r4
 8001892:	d109      	bne.n	80018a8 <__aeabi_ddiv+0x344>
 8001894:	2302      	movs	r3, #2
 8001896:	4649      	mov	r1, r9
 8001898:	4319      	orrs	r1, r3
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <__aeabi_ddiv+0x398>)
 800189c:	4689      	mov	r9, r1
 800189e:	469c      	mov	ip, r3
 80018a0:	2400      	movs	r4, #0
 80018a2:	2002      	movs	r0, #2
 80018a4:	44e3      	add	fp, ip
 80018a6:	e69d      	b.n	80015e4 <__aeabi_ddiv+0x80>
 80018a8:	2303      	movs	r3, #3
 80018aa:	464a      	mov	r2, r9
 80018ac:	431a      	orrs	r2, r3
 80018ae:	4b13      	ldr	r3, [pc, #76]	; (80018fc <__aeabi_ddiv+0x398>)
 80018b0:	4691      	mov	r9, r2
 80018b2:	469c      	mov	ip, r3
 80018b4:	4652      	mov	r2, sl
 80018b6:	2003      	movs	r0, #3
 80018b8:	44e3      	add	fp, ip
 80018ba:	e693      	b.n	80015e4 <__aeabi_ddiv+0x80>
 80018bc:	230c      	movs	r3, #12
 80018be:	4699      	mov	r9, r3
 80018c0:	3b09      	subs	r3, #9
 80018c2:	46a0      	mov	r8, r4
 80018c4:	4683      	mov	fp, r0
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	e671      	b.n	80015ae <__aeabi_ddiv+0x4a>
 80018ca:	2304      	movs	r3, #4
 80018cc:	4699      	mov	r9, r3
 80018ce:	2300      	movs	r3, #0
 80018d0:	469b      	mov	fp, r3
 80018d2:	3301      	adds	r3, #1
 80018d4:	2500      	movs	r5, #0
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	e669      	b.n	80015ae <__aeabi_ddiv+0x4a>
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	000007ff 	.word	0x000007ff
 80018e0:	fffffc01 	.word	0xfffffc01
 80018e4:	08007690 	.word	0x08007690
 80018e8:	000003ff 	.word	0x000003ff
 80018ec:	feffffff 	.word	0xfeffffff
 80018f0:	000007fe 	.word	0x000007fe
 80018f4:	000003f3 	.word	0x000003f3
 80018f8:	fffffc0d 	.word	0xfffffc0d
 80018fc:	fffff801 	.word	0xfffff801
 8001900:	4649      	mov	r1, r9
 8001902:	2301      	movs	r3, #1
 8001904:	4319      	orrs	r1, r3
 8001906:	4689      	mov	r9, r1
 8001908:	2400      	movs	r4, #0
 800190a:	2001      	movs	r0, #1
 800190c:	e66a      	b.n	80015e4 <__aeabi_ddiv+0x80>
 800190e:	2300      	movs	r3, #0
 8001910:	2480      	movs	r4, #128	; 0x80
 8001912:	469a      	mov	sl, r3
 8001914:	2500      	movs	r5, #0
 8001916:	4b8a      	ldr	r3, [pc, #552]	; (8001b40 <__aeabi_ddiv+0x5dc>)
 8001918:	0324      	lsls	r4, r4, #12
 800191a:	e67a      	b.n	8001612 <__aeabi_ddiv+0xae>
 800191c:	2501      	movs	r5, #1
 800191e:	426d      	negs	r5, r5
 8001920:	2301      	movs	r3, #1
 8001922:	1a9b      	subs	r3, r3, r2
 8001924:	2b38      	cmp	r3, #56	; 0x38
 8001926:	dd00      	ble.n	800192a <__aeabi_ddiv+0x3c6>
 8001928:	e670      	b.n	800160c <__aeabi_ddiv+0xa8>
 800192a:	2b1f      	cmp	r3, #31
 800192c:	dc00      	bgt.n	8001930 <__aeabi_ddiv+0x3cc>
 800192e:	e0bf      	b.n	8001ab0 <__aeabi_ddiv+0x54c>
 8001930:	211f      	movs	r1, #31
 8001932:	4249      	negs	r1, r1
 8001934:	1a8a      	subs	r2, r1, r2
 8001936:	4641      	mov	r1, r8
 8001938:	40d1      	lsrs	r1, r2
 800193a:	000a      	movs	r2, r1
 800193c:	2b20      	cmp	r3, #32
 800193e:	d004      	beq.n	800194a <__aeabi_ddiv+0x3e6>
 8001940:	4641      	mov	r1, r8
 8001942:	4b80      	ldr	r3, [pc, #512]	; (8001b44 <__aeabi_ddiv+0x5e0>)
 8001944:	445b      	add	r3, fp
 8001946:	4099      	lsls	r1, r3
 8001948:	430d      	orrs	r5, r1
 800194a:	1e6b      	subs	r3, r5, #1
 800194c:	419d      	sbcs	r5, r3
 800194e:	2307      	movs	r3, #7
 8001950:	432a      	orrs	r2, r5
 8001952:	001d      	movs	r5, r3
 8001954:	2400      	movs	r4, #0
 8001956:	4015      	ands	r5, r2
 8001958:	4213      	tst	r3, r2
 800195a:	d100      	bne.n	800195e <__aeabi_ddiv+0x3fa>
 800195c:	e0d4      	b.n	8001b08 <__aeabi_ddiv+0x5a4>
 800195e:	210f      	movs	r1, #15
 8001960:	2300      	movs	r3, #0
 8001962:	4011      	ands	r1, r2
 8001964:	2904      	cmp	r1, #4
 8001966:	d100      	bne.n	800196a <__aeabi_ddiv+0x406>
 8001968:	e0cb      	b.n	8001b02 <__aeabi_ddiv+0x59e>
 800196a:	1d11      	adds	r1, r2, #4
 800196c:	4291      	cmp	r1, r2
 800196e:	4192      	sbcs	r2, r2
 8001970:	4252      	negs	r2, r2
 8001972:	189b      	adds	r3, r3, r2
 8001974:	000a      	movs	r2, r1
 8001976:	0219      	lsls	r1, r3, #8
 8001978:	d400      	bmi.n	800197c <__aeabi_ddiv+0x418>
 800197a:	e0c2      	b.n	8001b02 <__aeabi_ddiv+0x59e>
 800197c:	2301      	movs	r3, #1
 800197e:	2400      	movs	r4, #0
 8001980:	2500      	movs	r5, #0
 8001982:	e646      	b.n	8001612 <__aeabi_ddiv+0xae>
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	4641      	mov	r1, r8
 8001988:	031b      	lsls	r3, r3, #12
 800198a:	4219      	tst	r1, r3
 800198c:	d008      	beq.n	80019a0 <__aeabi_ddiv+0x43c>
 800198e:	421c      	tst	r4, r3
 8001990:	d106      	bne.n	80019a0 <__aeabi_ddiv+0x43c>
 8001992:	431c      	orrs	r4, r3
 8001994:	0324      	lsls	r4, r4, #12
 8001996:	46ba      	mov	sl, r7
 8001998:	0015      	movs	r5, r2
 800199a:	4b69      	ldr	r3, [pc, #420]	; (8001b40 <__aeabi_ddiv+0x5dc>)
 800199c:	0b24      	lsrs	r4, r4, #12
 800199e:	e638      	b.n	8001612 <__aeabi_ddiv+0xae>
 80019a0:	2480      	movs	r4, #128	; 0x80
 80019a2:	4643      	mov	r3, r8
 80019a4:	0324      	lsls	r4, r4, #12
 80019a6:	431c      	orrs	r4, r3
 80019a8:	0324      	lsls	r4, r4, #12
 80019aa:	46b2      	mov	sl, r6
 80019ac:	4b64      	ldr	r3, [pc, #400]	; (8001b40 <__aeabi_ddiv+0x5dc>)
 80019ae:	0b24      	lsrs	r4, r4, #12
 80019b0:	e62f      	b.n	8001612 <__aeabi_ddiv+0xae>
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d100      	bne.n	80019b8 <__aeabi_ddiv+0x454>
 80019b6:	e703      	b.n	80017c0 <__aeabi_ddiv+0x25c>
 80019b8:	19a6      	adds	r6, r4, r6
 80019ba:	1e68      	subs	r0, r5, #1
 80019bc:	42a6      	cmp	r6, r4
 80019be:	d200      	bcs.n	80019c2 <__aeabi_ddiv+0x45e>
 80019c0:	e08d      	b.n	8001ade <__aeabi_ddiv+0x57a>
 80019c2:	428e      	cmp	r6, r1
 80019c4:	d200      	bcs.n	80019c8 <__aeabi_ddiv+0x464>
 80019c6:	e0a3      	b.n	8001b10 <__aeabi_ddiv+0x5ac>
 80019c8:	d100      	bne.n	80019cc <__aeabi_ddiv+0x468>
 80019ca:	e0b3      	b.n	8001b34 <__aeabi_ddiv+0x5d0>
 80019cc:	0005      	movs	r5, r0
 80019ce:	e6f5      	b.n	80017bc <__aeabi_ddiv+0x258>
 80019d0:	42aa      	cmp	r2, r5
 80019d2:	d900      	bls.n	80019d6 <__aeabi_ddiv+0x472>
 80019d4:	e639      	b.n	800164a <__aeabi_ddiv+0xe6>
 80019d6:	4643      	mov	r3, r8
 80019d8:	07de      	lsls	r6, r3, #31
 80019da:	0858      	lsrs	r0, r3, #1
 80019dc:	086b      	lsrs	r3, r5, #1
 80019de:	431e      	orrs	r6, r3
 80019e0:	07ed      	lsls	r5, r5, #31
 80019e2:	e639      	b.n	8001658 <__aeabi_ddiv+0xf4>
 80019e4:	4648      	mov	r0, r9
 80019e6:	f000 ffeb 	bl	80029c0 <__clzsi2>
 80019ea:	0001      	movs	r1, r0
 80019ec:	0002      	movs	r2, r0
 80019ee:	3115      	adds	r1, #21
 80019f0:	3220      	adds	r2, #32
 80019f2:	291c      	cmp	r1, #28
 80019f4:	dc00      	bgt.n	80019f8 <__aeabi_ddiv+0x494>
 80019f6:	e72c      	b.n	8001852 <__aeabi_ddiv+0x2ee>
 80019f8:	464b      	mov	r3, r9
 80019fa:	3808      	subs	r0, #8
 80019fc:	4083      	lsls	r3, r0
 80019fe:	2500      	movs	r5, #0
 8001a00:	4698      	mov	r8, r3
 8001a02:	e732      	b.n	800186a <__aeabi_ddiv+0x306>
 8001a04:	f000 ffdc 	bl	80029c0 <__clzsi2>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	001a      	movs	r2, r3
 8001a0c:	3215      	adds	r2, #21
 8001a0e:	3020      	adds	r0, #32
 8001a10:	2a1c      	cmp	r2, #28
 8001a12:	dc00      	bgt.n	8001a16 <__aeabi_ddiv+0x4b2>
 8001a14:	e700      	b.n	8001818 <__aeabi_ddiv+0x2b4>
 8001a16:	4654      	mov	r4, sl
 8001a18:	3b08      	subs	r3, #8
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	409c      	lsls	r4, r3
 8001a1e:	e705      	b.n	800182c <__aeabi_ddiv+0x2c8>
 8001a20:	1936      	adds	r6, r6, r4
 8001a22:	3b01      	subs	r3, #1
 8001a24:	42b4      	cmp	r4, r6
 8001a26:	d900      	bls.n	8001a2a <__aeabi_ddiv+0x4c6>
 8001a28:	e6a6      	b.n	8001778 <__aeabi_ddiv+0x214>
 8001a2a:	42b2      	cmp	r2, r6
 8001a2c:	d800      	bhi.n	8001a30 <__aeabi_ddiv+0x4cc>
 8001a2e:	e6a3      	b.n	8001778 <__aeabi_ddiv+0x214>
 8001a30:	1e83      	subs	r3, r0, #2
 8001a32:	1936      	adds	r6, r6, r4
 8001a34:	e6a0      	b.n	8001778 <__aeabi_ddiv+0x214>
 8001a36:	1909      	adds	r1, r1, r4
 8001a38:	3d01      	subs	r5, #1
 8001a3a:	428c      	cmp	r4, r1
 8001a3c:	d900      	bls.n	8001a40 <__aeabi_ddiv+0x4dc>
 8001a3e:	e68d      	b.n	800175c <__aeabi_ddiv+0x1f8>
 8001a40:	428a      	cmp	r2, r1
 8001a42:	d800      	bhi.n	8001a46 <__aeabi_ddiv+0x4e2>
 8001a44:	e68a      	b.n	800175c <__aeabi_ddiv+0x1f8>
 8001a46:	1e85      	subs	r5, r0, #2
 8001a48:	1909      	adds	r1, r1, r4
 8001a4a:	e687      	b.n	800175c <__aeabi_ddiv+0x1f8>
 8001a4c:	230f      	movs	r3, #15
 8001a4e:	402b      	ands	r3, r5
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d100      	bne.n	8001a56 <__aeabi_ddiv+0x4f2>
 8001a54:	e6bc      	b.n	80017d0 <__aeabi_ddiv+0x26c>
 8001a56:	2305      	movs	r3, #5
 8001a58:	425b      	negs	r3, r3
 8001a5a:	42ab      	cmp	r3, r5
 8001a5c:	419b      	sbcs	r3, r3
 8001a5e:	3504      	adds	r5, #4
 8001a60:	425b      	negs	r3, r3
 8001a62:	08ed      	lsrs	r5, r5, #3
 8001a64:	4498      	add	r8, r3
 8001a66:	e6b4      	b.n	80017d2 <__aeabi_ddiv+0x26e>
 8001a68:	42af      	cmp	r7, r5
 8001a6a:	d900      	bls.n	8001a6e <__aeabi_ddiv+0x50a>
 8001a6c:	e660      	b.n	8001730 <__aeabi_ddiv+0x1cc>
 8001a6e:	4282      	cmp	r2, r0
 8001a70:	d804      	bhi.n	8001a7c <__aeabi_ddiv+0x518>
 8001a72:	d000      	beq.n	8001a76 <__aeabi_ddiv+0x512>
 8001a74:	e65c      	b.n	8001730 <__aeabi_ddiv+0x1cc>
 8001a76:	42ae      	cmp	r6, r5
 8001a78:	d800      	bhi.n	8001a7c <__aeabi_ddiv+0x518>
 8001a7a:	e659      	b.n	8001730 <__aeabi_ddiv+0x1cc>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	425b      	negs	r3, r3
 8001a80:	469c      	mov	ip, r3
 8001a82:	9b00      	ldr	r3, [sp, #0]
 8001a84:	44e0      	add	r8, ip
 8001a86:	469c      	mov	ip, r3
 8001a88:	4465      	add	r5, ip
 8001a8a:	429d      	cmp	r5, r3
 8001a8c:	419b      	sbcs	r3, r3
 8001a8e:	425b      	negs	r3, r3
 8001a90:	191b      	adds	r3, r3, r4
 8001a92:	18c0      	adds	r0, r0, r3
 8001a94:	e64d      	b.n	8001732 <__aeabi_ddiv+0x1ce>
 8001a96:	428a      	cmp	r2, r1
 8001a98:	d800      	bhi.n	8001a9c <__aeabi_ddiv+0x538>
 8001a9a:	e60e      	b.n	80016ba <__aeabi_ddiv+0x156>
 8001a9c:	1e83      	subs	r3, r0, #2
 8001a9e:	1909      	adds	r1, r1, r4
 8001aa0:	e60b      	b.n	80016ba <__aeabi_ddiv+0x156>
 8001aa2:	428a      	cmp	r2, r1
 8001aa4:	d800      	bhi.n	8001aa8 <__aeabi_ddiv+0x544>
 8001aa6:	e5f4      	b.n	8001692 <__aeabi_ddiv+0x12e>
 8001aa8:	1e83      	subs	r3, r0, #2
 8001aaa:	4698      	mov	r8, r3
 8001aac:	1909      	adds	r1, r1, r4
 8001aae:	e5f0      	b.n	8001692 <__aeabi_ddiv+0x12e>
 8001ab0:	4925      	ldr	r1, [pc, #148]	; (8001b48 <__aeabi_ddiv+0x5e4>)
 8001ab2:	0028      	movs	r0, r5
 8001ab4:	4459      	add	r1, fp
 8001ab6:	408d      	lsls	r5, r1
 8001ab8:	4642      	mov	r2, r8
 8001aba:	408a      	lsls	r2, r1
 8001abc:	1e69      	subs	r1, r5, #1
 8001abe:	418d      	sbcs	r5, r1
 8001ac0:	4641      	mov	r1, r8
 8001ac2:	40d8      	lsrs	r0, r3
 8001ac4:	40d9      	lsrs	r1, r3
 8001ac6:	4302      	orrs	r2, r0
 8001ac8:	432a      	orrs	r2, r5
 8001aca:	000b      	movs	r3, r1
 8001acc:	0751      	lsls	r1, r2, #29
 8001ace:	d100      	bne.n	8001ad2 <__aeabi_ddiv+0x56e>
 8001ad0:	e751      	b.n	8001976 <__aeabi_ddiv+0x412>
 8001ad2:	210f      	movs	r1, #15
 8001ad4:	4011      	ands	r1, r2
 8001ad6:	2904      	cmp	r1, #4
 8001ad8:	d000      	beq.n	8001adc <__aeabi_ddiv+0x578>
 8001ada:	e746      	b.n	800196a <__aeabi_ddiv+0x406>
 8001adc:	e74b      	b.n	8001976 <__aeabi_ddiv+0x412>
 8001ade:	0005      	movs	r5, r0
 8001ae0:	428e      	cmp	r6, r1
 8001ae2:	d000      	beq.n	8001ae6 <__aeabi_ddiv+0x582>
 8001ae4:	e66a      	b.n	80017bc <__aeabi_ddiv+0x258>
 8001ae6:	9a00      	ldr	r2, [sp, #0]
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d000      	beq.n	8001aee <__aeabi_ddiv+0x58a>
 8001aec:	e666      	b.n	80017bc <__aeabi_ddiv+0x258>
 8001aee:	e667      	b.n	80017c0 <__aeabi_ddiv+0x25c>
 8001af0:	4a16      	ldr	r2, [pc, #88]	; (8001b4c <__aeabi_ddiv+0x5e8>)
 8001af2:	445a      	add	r2, fp
 8001af4:	2a00      	cmp	r2, #0
 8001af6:	dc00      	bgt.n	8001afa <__aeabi_ddiv+0x596>
 8001af8:	e710      	b.n	800191c <__aeabi_ddiv+0x3b8>
 8001afa:	2301      	movs	r3, #1
 8001afc:	2500      	movs	r5, #0
 8001afe:	4498      	add	r8, r3
 8001b00:	e667      	b.n	80017d2 <__aeabi_ddiv+0x26e>
 8001b02:	075d      	lsls	r5, r3, #29
 8001b04:	025b      	lsls	r3, r3, #9
 8001b06:	0b1c      	lsrs	r4, r3, #12
 8001b08:	08d2      	lsrs	r2, r2, #3
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	4315      	orrs	r5, r2
 8001b0e:	e580      	b.n	8001612 <__aeabi_ddiv+0xae>
 8001b10:	9800      	ldr	r0, [sp, #0]
 8001b12:	3d02      	subs	r5, #2
 8001b14:	0042      	lsls	r2, r0, #1
 8001b16:	4282      	cmp	r2, r0
 8001b18:	41bf      	sbcs	r7, r7
 8001b1a:	427f      	negs	r7, r7
 8001b1c:	193c      	adds	r4, r7, r4
 8001b1e:	1936      	adds	r6, r6, r4
 8001b20:	9200      	str	r2, [sp, #0]
 8001b22:	e7dd      	b.n	8001ae0 <__aeabi_ddiv+0x57c>
 8001b24:	2480      	movs	r4, #128	; 0x80
 8001b26:	4643      	mov	r3, r8
 8001b28:	0324      	lsls	r4, r4, #12
 8001b2a:	431c      	orrs	r4, r3
 8001b2c:	0324      	lsls	r4, r4, #12
 8001b2e:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <__aeabi_ddiv+0x5dc>)
 8001b30:	0b24      	lsrs	r4, r4, #12
 8001b32:	e56e      	b.n	8001612 <__aeabi_ddiv+0xae>
 8001b34:	9a00      	ldr	r2, [sp, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d3ea      	bcc.n	8001b10 <__aeabi_ddiv+0x5ac>
 8001b3a:	0005      	movs	r5, r0
 8001b3c:	e7d3      	b.n	8001ae6 <__aeabi_ddiv+0x582>
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	000007ff 	.word	0x000007ff
 8001b44:	0000043e 	.word	0x0000043e
 8001b48:	0000041e 	.word	0x0000041e
 8001b4c:	000003ff 	.word	0x000003ff

08001b50 <__aeabi_dmul>:
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b52:	4657      	mov	r7, sl
 8001b54:	464e      	mov	r6, r9
 8001b56:	4645      	mov	r5, r8
 8001b58:	46de      	mov	lr, fp
 8001b5a:	b5e0      	push	{r5, r6, r7, lr}
 8001b5c:	4698      	mov	r8, r3
 8001b5e:	030c      	lsls	r4, r1, #12
 8001b60:	004b      	lsls	r3, r1, #1
 8001b62:	0006      	movs	r6, r0
 8001b64:	4692      	mov	sl, r2
 8001b66:	b087      	sub	sp, #28
 8001b68:	0b24      	lsrs	r4, r4, #12
 8001b6a:	0d5b      	lsrs	r3, r3, #21
 8001b6c:	0fcf      	lsrs	r7, r1, #31
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d100      	bne.n	8001b74 <__aeabi_dmul+0x24>
 8001b72:	e15c      	b.n	8001e2e <__aeabi_dmul+0x2de>
 8001b74:	4ad9      	ldr	r2, [pc, #868]	; (8001edc <__aeabi_dmul+0x38c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dmul+0x2c>
 8001b7a:	e175      	b.n	8001e68 <__aeabi_dmul+0x318>
 8001b7c:	0f42      	lsrs	r2, r0, #29
 8001b7e:	00e4      	lsls	r4, r4, #3
 8001b80:	4314      	orrs	r4, r2
 8001b82:	2280      	movs	r2, #128	; 0x80
 8001b84:	0412      	lsls	r2, r2, #16
 8001b86:	4314      	orrs	r4, r2
 8001b88:	4ad5      	ldr	r2, [pc, #852]	; (8001ee0 <__aeabi_dmul+0x390>)
 8001b8a:	00c5      	lsls	r5, r0, #3
 8001b8c:	4694      	mov	ip, r2
 8001b8e:	4463      	add	r3, ip
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2300      	movs	r3, #0
 8001b94:	4699      	mov	r9, r3
 8001b96:	469b      	mov	fp, r3
 8001b98:	4643      	mov	r3, r8
 8001b9a:	4642      	mov	r2, r8
 8001b9c:	031e      	lsls	r6, r3, #12
 8001b9e:	0fd2      	lsrs	r2, r2, #31
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4650      	mov	r0, sl
 8001ba4:	4690      	mov	r8, r2
 8001ba6:	0b36      	lsrs	r6, r6, #12
 8001ba8:	0d5b      	lsrs	r3, r3, #21
 8001baa:	d100      	bne.n	8001bae <__aeabi_dmul+0x5e>
 8001bac:	e120      	b.n	8001df0 <__aeabi_dmul+0x2a0>
 8001bae:	4acb      	ldr	r2, [pc, #812]	; (8001edc <__aeabi_dmul+0x38c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_dmul+0x66>
 8001bb4:	e162      	b.n	8001e7c <__aeabi_dmul+0x32c>
 8001bb6:	49ca      	ldr	r1, [pc, #808]	; (8001ee0 <__aeabi_dmul+0x390>)
 8001bb8:	0f42      	lsrs	r2, r0, #29
 8001bba:	468c      	mov	ip, r1
 8001bbc:	9900      	ldr	r1, [sp, #0]
 8001bbe:	4463      	add	r3, ip
 8001bc0:	00f6      	lsls	r6, r6, #3
 8001bc2:	468c      	mov	ip, r1
 8001bc4:	4316      	orrs	r6, r2
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	449c      	add	ip, r3
 8001bca:	0412      	lsls	r2, r2, #16
 8001bcc:	4663      	mov	r3, ip
 8001bce:	4316      	orrs	r6, r2
 8001bd0:	00c2      	lsls	r2, r0, #3
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	9900      	ldr	r1, [sp, #0]
 8001bd8:	4643      	mov	r3, r8
 8001bda:	3101      	adds	r1, #1
 8001bdc:	468c      	mov	ip, r1
 8001bde:	4649      	mov	r1, r9
 8001be0:	407b      	eors	r3, r7
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	290f      	cmp	r1, #15
 8001be6:	d826      	bhi.n	8001c36 <__aeabi_dmul+0xe6>
 8001be8:	4bbe      	ldr	r3, [pc, #760]	; (8001ee4 <__aeabi_dmul+0x394>)
 8001bea:	0089      	lsls	r1, r1, #2
 8001bec:	5859      	ldr	r1, [r3, r1]
 8001bee:	468f      	mov	pc, r1
 8001bf0:	4643      	mov	r3, r8
 8001bf2:	9301      	str	r3, [sp, #4]
 8001bf4:	0034      	movs	r4, r6
 8001bf6:	0015      	movs	r5, r2
 8001bf8:	4683      	mov	fp, r0
 8001bfa:	465b      	mov	r3, fp
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d016      	beq.n	8001c2e <__aeabi_dmul+0xde>
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dmul+0xb6>
 8001c04:	e203      	b.n	800200e <__aeabi_dmul+0x4be>
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dmul+0xbc>
 8001c0a:	e0cd      	b.n	8001da8 <__aeabi_dmul+0x258>
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2400      	movs	r4, #0
 8001c10:	2500      	movs	r5, #0
 8001c12:	9b01      	ldr	r3, [sp, #4]
 8001c14:	0512      	lsls	r2, r2, #20
 8001c16:	4322      	orrs	r2, r4
 8001c18:	07db      	lsls	r3, r3, #31
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	0028      	movs	r0, r5
 8001c1e:	0011      	movs	r1, r2
 8001c20:	b007      	add	sp, #28
 8001c22:	bcf0      	pop	{r4, r5, r6, r7}
 8001c24:	46bb      	mov	fp, r7
 8001c26:	46b2      	mov	sl, r6
 8001c28:	46a9      	mov	r9, r5
 8001c2a:	46a0      	mov	r8, r4
 8001c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c2e:	2400      	movs	r4, #0
 8001c30:	2500      	movs	r5, #0
 8001c32:	4aaa      	ldr	r2, [pc, #680]	; (8001edc <__aeabi_dmul+0x38c>)
 8001c34:	e7ed      	b.n	8001c12 <__aeabi_dmul+0xc2>
 8001c36:	0c28      	lsrs	r0, r5, #16
 8001c38:	042d      	lsls	r5, r5, #16
 8001c3a:	0c2d      	lsrs	r5, r5, #16
 8001c3c:	002b      	movs	r3, r5
 8001c3e:	0c11      	lsrs	r1, r2, #16
 8001c40:	0412      	lsls	r2, r2, #16
 8001c42:	0c12      	lsrs	r2, r2, #16
 8001c44:	4353      	muls	r3, r2
 8001c46:	4698      	mov	r8, r3
 8001c48:	0013      	movs	r3, r2
 8001c4a:	002f      	movs	r7, r5
 8001c4c:	4343      	muls	r3, r0
 8001c4e:	4699      	mov	r9, r3
 8001c50:	434f      	muls	r7, r1
 8001c52:	444f      	add	r7, r9
 8001c54:	46bb      	mov	fp, r7
 8001c56:	4647      	mov	r7, r8
 8001c58:	000b      	movs	r3, r1
 8001c5a:	0c3f      	lsrs	r7, r7, #16
 8001c5c:	46ba      	mov	sl, r7
 8001c5e:	4343      	muls	r3, r0
 8001c60:	44da      	add	sl, fp
 8001c62:	9302      	str	r3, [sp, #8]
 8001c64:	45d1      	cmp	r9, sl
 8001c66:	d904      	bls.n	8001c72 <__aeabi_dmul+0x122>
 8001c68:	2780      	movs	r7, #128	; 0x80
 8001c6a:	027f      	lsls	r7, r7, #9
 8001c6c:	46b9      	mov	r9, r7
 8001c6e:	444b      	add	r3, r9
 8001c70:	9302      	str	r3, [sp, #8]
 8001c72:	4653      	mov	r3, sl
 8001c74:	0c1b      	lsrs	r3, r3, #16
 8001c76:	469b      	mov	fp, r3
 8001c78:	4653      	mov	r3, sl
 8001c7a:	041f      	lsls	r7, r3, #16
 8001c7c:	4643      	mov	r3, r8
 8001c7e:	041b      	lsls	r3, r3, #16
 8001c80:	0c1b      	lsrs	r3, r3, #16
 8001c82:	4698      	mov	r8, r3
 8001c84:	003b      	movs	r3, r7
 8001c86:	4443      	add	r3, r8
 8001c88:	9304      	str	r3, [sp, #16]
 8001c8a:	0c33      	lsrs	r3, r6, #16
 8001c8c:	0436      	lsls	r6, r6, #16
 8001c8e:	0c36      	lsrs	r6, r6, #16
 8001c90:	4698      	mov	r8, r3
 8001c92:	0033      	movs	r3, r6
 8001c94:	4343      	muls	r3, r0
 8001c96:	4699      	mov	r9, r3
 8001c98:	4643      	mov	r3, r8
 8001c9a:	4343      	muls	r3, r0
 8001c9c:	002f      	movs	r7, r5
 8001c9e:	469a      	mov	sl, r3
 8001ca0:	4643      	mov	r3, r8
 8001ca2:	4377      	muls	r7, r6
 8001ca4:	435d      	muls	r5, r3
 8001ca6:	0c38      	lsrs	r0, r7, #16
 8001ca8:	444d      	add	r5, r9
 8001caa:	1945      	adds	r5, r0, r5
 8001cac:	45a9      	cmp	r9, r5
 8001cae:	d903      	bls.n	8001cb8 <__aeabi_dmul+0x168>
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	025b      	lsls	r3, r3, #9
 8001cb4:	4699      	mov	r9, r3
 8001cb6:	44ca      	add	sl, r9
 8001cb8:	043f      	lsls	r7, r7, #16
 8001cba:	0c28      	lsrs	r0, r5, #16
 8001cbc:	0c3f      	lsrs	r7, r7, #16
 8001cbe:	042d      	lsls	r5, r5, #16
 8001cc0:	19ed      	adds	r5, r5, r7
 8001cc2:	0c27      	lsrs	r7, r4, #16
 8001cc4:	0424      	lsls	r4, r4, #16
 8001cc6:	0c24      	lsrs	r4, r4, #16
 8001cc8:	0003      	movs	r3, r0
 8001cca:	0020      	movs	r0, r4
 8001ccc:	4350      	muls	r0, r2
 8001cce:	437a      	muls	r2, r7
 8001cd0:	4691      	mov	r9, r2
 8001cd2:	003a      	movs	r2, r7
 8001cd4:	4453      	add	r3, sl
 8001cd6:	9305      	str	r3, [sp, #20]
 8001cd8:	0c03      	lsrs	r3, r0, #16
 8001cda:	469a      	mov	sl, r3
 8001cdc:	434a      	muls	r2, r1
 8001cde:	4361      	muls	r1, r4
 8001ce0:	4449      	add	r1, r9
 8001ce2:	4451      	add	r1, sl
 8001ce4:	44ab      	add	fp, r5
 8001ce6:	4589      	cmp	r9, r1
 8001ce8:	d903      	bls.n	8001cf2 <__aeabi_dmul+0x1a2>
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	025b      	lsls	r3, r3, #9
 8001cee:	4699      	mov	r9, r3
 8001cf0:	444a      	add	r2, r9
 8001cf2:	0400      	lsls	r0, r0, #16
 8001cf4:	0c0b      	lsrs	r3, r1, #16
 8001cf6:	0c00      	lsrs	r0, r0, #16
 8001cf8:	0409      	lsls	r1, r1, #16
 8001cfa:	1809      	adds	r1, r1, r0
 8001cfc:	0020      	movs	r0, r4
 8001cfe:	4699      	mov	r9, r3
 8001d00:	4643      	mov	r3, r8
 8001d02:	4370      	muls	r0, r6
 8001d04:	435c      	muls	r4, r3
 8001d06:	437e      	muls	r6, r7
 8001d08:	435f      	muls	r7, r3
 8001d0a:	0c03      	lsrs	r3, r0, #16
 8001d0c:	4698      	mov	r8, r3
 8001d0e:	19a4      	adds	r4, r4, r6
 8001d10:	4444      	add	r4, r8
 8001d12:	444a      	add	r2, r9
 8001d14:	9703      	str	r7, [sp, #12]
 8001d16:	42a6      	cmp	r6, r4
 8001d18:	d904      	bls.n	8001d24 <__aeabi_dmul+0x1d4>
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	025b      	lsls	r3, r3, #9
 8001d1e:	4698      	mov	r8, r3
 8001d20:	4447      	add	r7, r8
 8001d22:	9703      	str	r7, [sp, #12]
 8001d24:	0423      	lsls	r3, r4, #16
 8001d26:	9e02      	ldr	r6, [sp, #8]
 8001d28:	469a      	mov	sl, r3
 8001d2a:	9b05      	ldr	r3, [sp, #20]
 8001d2c:	445e      	add	r6, fp
 8001d2e:	4698      	mov	r8, r3
 8001d30:	42ae      	cmp	r6, r5
 8001d32:	41ad      	sbcs	r5, r5
 8001d34:	1876      	adds	r6, r6, r1
 8001d36:	428e      	cmp	r6, r1
 8001d38:	4189      	sbcs	r1, r1
 8001d3a:	0400      	lsls	r0, r0, #16
 8001d3c:	0c00      	lsrs	r0, r0, #16
 8001d3e:	4450      	add	r0, sl
 8001d40:	4440      	add	r0, r8
 8001d42:	426d      	negs	r5, r5
 8001d44:	1947      	adds	r7, r0, r5
 8001d46:	46b8      	mov	r8, r7
 8001d48:	4693      	mov	fp, r2
 8001d4a:	4249      	negs	r1, r1
 8001d4c:	4689      	mov	r9, r1
 8001d4e:	44c3      	add	fp, r8
 8001d50:	44d9      	add	r9, fp
 8001d52:	4298      	cmp	r0, r3
 8001d54:	4180      	sbcs	r0, r0
 8001d56:	45a8      	cmp	r8, r5
 8001d58:	41ad      	sbcs	r5, r5
 8001d5a:	4593      	cmp	fp, r2
 8001d5c:	4192      	sbcs	r2, r2
 8001d5e:	4589      	cmp	r9, r1
 8001d60:	4189      	sbcs	r1, r1
 8001d62:	426d      	negs	r5, r5
 8001d64:	4240      	negs	r0, r0
 8001d66:	4328      	orrs	r0, r5
 8001d68:	0c24      	lsrs	r4, r4, #16
 8001d6a:	4252      	negs	r2, r2
 8001d6c:	4249      	negs	r1, r1
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	9b03      	ldr	r3, [sp, #12]
 8001d72:	1900      	adds	r0, r0, r4
 8001d74:	1880      	adds	r0, r0, r2
 8001d76:	18c7      	adds	r7, r0, r3
 8001d78:	464b      	mov	r3, r9
 8001d7a:	0ddc      	lsrs	r4, r3, #23
 8001d7c:	9b04      	ldr	r3, [sp, #16]
 8001d7e:	0275      	lsls	r5, r6, #9
 8001d80:	431d      	orrs	r5, r3
 8001d82:	1e6a      	subs	r2, r5, #1
 8001d84:	4195      	sbcs	r5, r2
 8001d86:	464b      	mov	r3, r9
 8001d88:	0df6      	lsrs	r6, r6, #23
 8001d8a:	027f      	lsls	r7, r7, #9
 8001d8c:	4335      	orrs	r5, r6
 8001d8e:	025a      	lsls	r2, r3, #9
 8001d90:	433c      	orrs	r4, r7
 8001d92:	4315      	orrs	r5, r2
 8001d94:	01fb      	lsls	r3, r7, #7
 8001d96:	d400      	bmi.n	8001d9a <__aeabi_dmul+0x24a>
 8001d98:	e11c      	b.n	8001fd4 <__aeabi_dmul+0x484>
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	086a      	lsrs	r2, r5, #1
 8001d9e:	400d      	ands	r5, r1
 8001da0:	4315      	orrs	r5, r2
 8001da2:	07e2      	lsls	r2, r4, #31
 8001da4:	4315      	orrs	r5, r2
 8001da6:	0864      	lsrs	r4, r4, #1
 8001da8:	494f      	ldr	r1, [pc, #316]	; (8001ee8 <__aeabi_dmul+0x398>)
 8001daa:	4461      	add	r1, ip
 8001dac:	2900      	cmp	r1, #0
 8001dae:	dc00      	bgt.n	8001db2 <__aeabi_dmul+0x262>
 8001db0:	e0b0      	b.n	8001f14 <__aeabi_dmul+0x3c4>
 8001db2:	076b      	lsls	r3, r5, #29
 8001db4:	d009      	beq.n	8001dca <__aeabi_dmul+0x27a>
 8001db6:	220f      	movs	r2, #15
 8001db8:	402a      	ands	r2, r5
 8001dba:	2a04      	cmp	r2, #4
 8001dbc:	d005      	beq.n	8001dca <__aeabi_dmul+0x27a>
 8001dbe:	1d2a      	adds	r2, r5, #4
 8001dc0:	42aa      	cmp	r2, r5
 8001dc2:	41ad      	sbcs	r5, r5
 8001dc4:	426d      	negs	r5, r5
 8001dc6:	1964      	adds	r4, r4, r5
 8001dc8:	0015      	movs	r5, r2
 8001dca:	01e3      	lsls	r3, r4, #7
 8001dcc:	d504      	bpl.n	8001dd8 <__aeabi_dmul+0x288>
 8001dce:	2180      	movs	r1, #128	; 0x80
 8001dd0:	4a46      	ldr	r2, [pc, #280]	; (8001eec <__aeabi_dmul+0x39c>)
 8001dd2:	00c9      	lsls	r1, r1, #3
 8001dd4:	4014      	ands	r4, r2
 8001dd6:	4461      	add	r1, ip
 8001dd8:	4a45      	ldr	r2, [pc, #276]	; (8001ef0 <__aeabi_dmul+0x3a0>)
 8001dda:	4291      	cmp	r1, r2
 8001ddc:	dd00      	ble.n	8001de0 <__aeabi_dmul+0x290>
 8001dde:	e726      	b.n	8001c2e <__aeabi_dmul+0xde>
 8001de0:	0762      	lsls	r2, r4, #29
 8001de2:	08ed      	lsrs	r5, r5, #3
 8001de4:	0264      	lsls	r4, r4, #9
 8001de6:	0549      	lsls	r1, r1, #21
 8001de8:	4315      	orrs	r5, r2
 8001dea:	0b24      	lsrs	r4, r4, #12
 8001dec:	0d4a      	lsrs	r2, r1, #21
 8001dee:	e710      	b.n	8001c12 <__aeabi_dmul+0xc2>
 8001df0:	4652      	mov	r2, sl
 8001df2:	4332      	orrs	r2, r6
 8001df4:	d100      	bne.n	8001df8 <__aeabi_dmul+0x2a8>
 8001df6:	e07f      	b.n	8001ef8 <__aeabi_dmul+0x3a8>
 8001df8:	2e00      	cmp	r6, #0
 8001dfa:	d100      	bne.n	8001dfe <__aeabi_dmul+0x2ae>
 8001dfc:	e0dc      	b.n	8001fb8 <__aeabi_dmul+0x468>
 8001dfe:	0030      	movs	r0, r6
 8001e00:	f000 fdde 	bl	80029c0 <__clzsi2>
 8001e04:	0002      	movs	r2, r0
 8001e06:	3a0b      	subs	r2, #11
 8001e08:	231d      	movs	r3, #29
 8001e0a:	0001      	movs	r1, r0
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	4652      	mov	r2, sl
 8001e10:	3908      	subs	r1, #8
 8001e12:	40da      	lsrs	r2, r3
 8001e14:	408e      	lsls	r6, r1
 8001e16:	4316      	orrs	r6, r2
 8001e18:	4652      	mov	r2, sl
 8001e1a:	408a      	lsls	r2, r1
 8001e1c:	9b00      	ldr	r3, [sp, #0]
 8001e1e:	4935      	ldr	r1, [pc, #212]	; (8001ef4 <__aeabi_dmul+0x3a4>)
 8001e20:	1a18      	subs	r0, r3, r0
 8001e22:	0003      	movs	r3, r0
 8001e24:	468c      	mov	ip, r1
 8001e26:	4463      	add	r3, ip
 8001e28:	2000      	movs	r0, #0
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	e6d3      	b.n	8001bd6 <__aeabi_dmul+0x86>
 8001e2e:	0025      	movs	r5, r4
 8001e30:	4305      	orrs	r5, r0
 8001e32:	d04a      	beq.n	8001eca <__aeabi_dmul+0x37a>
 8001e34:	2c00      	cmp	r4, #0
 8001e36:	d100      	bne.n	8001e3a <__aeabi_dmul+0x2ea>
 8001e38:	e0b0      	b.n	8001f9c <__aeabi_dmul+0x44c>
 8001e3a:	0020      	movs	r0, r4
 8001e3c:	f000 fdc0 	bl	80029c0 <__clzsi2>
 8001e40:	0001      	movs	r1, r0
 8001e42:	0002      	movs	r2, r0
 8001e44:	390b      	subs	r1, #11
 8001e46:	231d      	movs	r3, #29
 8001e48:	0010      	movs	r0, r2
 8001e4a:	1a5b      	subs	r3, r3, r1
 8001e4c:	0031      	movs	r1, r6
 8001e4e:	0035      	movs	r5, r6
 8001e50:	3808      	subs	r0, #8
 8001e52:	4084      	lsls	r4, r0
 8001e54:	40d9      	lsrs	r1, r3
 8001e56:	4085      	lsls	r5, r0
 8001e58:	430c      	orrs	r4, r1
 8001e5a:	4826      	ldr	r0, [pc, #152]	; (8001ef4 <__aeabi_dmul+0x3a4>)
 8001e5c:	1a83      	subs	r3, r0, r2
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	2300      	movs	r3, #0
 8001e62:	4699      	mov	r9, r3
 8001e64:	469b      	mov	fp, r3
 8001e66:	e697      	b.n	8001b98 <__aeabi_dmul+0x48>
 8001e68:	0005      	movs	r5, r0
 8001e6a:	4325      	orrs	r5, r4
 8001e6c:	d126      	bne.n	8001ebc <__aeabi_dmul+0x36c>
 8001e6e:	2208      	movs	r2, #8
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2302      	movs	r3, #2
 8001e74:	2400      	movs	r4, #0
 8001e76:	4691      	mov	r9, r2
 8001e78:	469b      	mov	fp, r3
 8001e7a:	e68d      	b.n	8001b98 <__aeabi_dmul+0x48>
 8001e7c:	4652      	mov	r2, sl
 8001e7e:	9b00      	ldr	r3, [sp, #0]
 8001e80:	4332      	orrs	r2, r6
 8001e82:	d110      	bne.n	8001ea6 <__aeabi_dmul+0x356>
 8001e84:	4915      	ldr	r1, [pc, #84]	; (8001edc <__aeabi_dmul+0x38c>)
 8001e86:	2600      	movs	r6, #0
 8001e88:	468c      	mov	ip, r1
 8001e8a:	4463      	add	r3, ip
 8001e8c:	4649      	mov	r1, r9
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	2302      	movs	r3, #2
 8001e92:	4319      	orrs	r1, r3
 8001e94:	4689      	mov	r9, r1
 8001e96:	2002      	movs	r0, #2
 8001e98:	e69d      	b.n	8001bd6 <__aeabi_dmul+0x86>
 8001e9a:	465b      	mov	r3, fp
 8001e9c:	9701      	str	r7, [sp, #4]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d000      	beq.n	8001ea4 <__aeabi_dmul+0x354>
 8001ea2:	e6ad      	b.n	8001c00 <__aeabi_dmul+0xb0>
 8001ea4:	e6c3      	b.n	8001c2e <__aeabi_dmul+0xde>
 8001ea6:	4a0d      	ldr	r2, [pc, #52]	; (8001edc <__aeabi_dmul+0x38c>)
 8001ea8:	2003      	movs	r0, #3
 8001eaa:	4694      	mov	ip, r2
 8001eac:	4463      	add	r3, ip
 8001eae:	464a      	mov	r2, r9
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	4691      	mov	r9, r2
 8001eb8:	4652      	mov	r2, sl
 8001eba:	e68c      	b.n	8001bd6 <__aeabi_dmul+0x86>
 8001ebc:	220c      	movs	r2, #12
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	0005      	movs	r5, r0
 8001ec4:	4691      	mov	r9, r2
 8001ec6:	469b      	mov	fp, r3
 8001ec8:	e666      	b.n	8001b98 <__aeabi_dmul+0x48>
 8001eca:	2304      	movs	r3, #4
 8001ecc:	4699      	mov	r9, r3
 8001ece:	2300      	movs	r3, #0
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	2400      	movs	r4, #0
 8001ed6:	469b      	mov	fp, r3
 8001ed8:	e65e      	b.n	8001b98 <__aeabi_dmul+0x48>
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	000007ff 	.word	0x000007ff
 8001ee0:	fffffc01 	.word	0xfffffc01
 8001ee4:	080076d0 	.word	0x080076d0
 8001ee8:	000003ff 	.word	0x000003ff
 8001eec:	feffffff 	.word	0xfeffffff
 8001ef0:	000007fe 	.word	0x000007fe
 8001ef4:	fffffc0d 	.word	0xfffffc0d
 8001ef8:	4649      	mov	r1, r9
 8001efa:	2301      	movs	r3, #1
 8001efc:	4319      	orrs	r1, r3
 8001efe:	4689      	mov	r9, r1
 8001f00:	2600      	movs	r6, #0
 8001f02:	2001      	movs	r0, #1
 8001f04:	e667      	b.n	8001bd6 <__aeabi_dmul+0x86>
 8001f06:	2300      	movs	r3, #0
 8001f08:	2480      	movs	r4, #128	; 0x80
 8001f0a:	2500      	movs	r5, #0
 8001f0c:	4a43      	ldr	r2, [pc, #268]	; (800201c <__aeabi_dmul+0x4cc>)
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	0324      	lsls	r4, r4, #12
 8001f12:	e67e      	b.n	8001c12 <__aeabi_dmul+0xc2>
 8001f14:	2001      	movs	r0, #1
 8001f16:	1a40      	subs	r0, r0, r1
 8001f18:	2838      	cmp	r0, #56	; 0x38
 8001f1a:	dd00      	ble.n	8001f1e <__aeabi_dmul+0x3ce>
 8001f1c:	e676      	b.n	8001c0c <__aeabi_dmul+0xbc>
 8001f1e:	281f      	cmp	r0, #31
 8001f20:	dd5b      	ble.n	8001fda <__aeabi_dmul+0x48a>
 8001f22:	221f      	movs	r2, #31
 8001f24:	0023      	movs	r3, r4
 8001f26:	4252      	negs	r2, r2
 8001f28:	1a51      	subs	r1, r2, r1
 8001f2a:	40cb      	lsrs	r3, r1
 8001f2c:	0019      	movs	r1, r3
 8001f2e:	2820      	cmp	r0, #32
 8001f30:	d003      	beq.n	8001f3a <__aeabi_dmul+0x3ea>
 8001f32:	4a3b      	ldr	r2, [pc, #236]	; (8002020 <__aeabi_dmul+0x4d0>)
 8001f34:	4462      	add	r2, ip
 8001f36:	4094      	lsls	r4, r2
 8001f38:	4325      	orrs	r5, r4
 8001f3a:	1e6a      	subs	r2, r5, #1
 8001f3c:	4195      	sbcs	r5, r2
 8001f3e:	002a      	movs	r2, r5
 8001f40:	430a      	orrs	r2, r1
 8001f42:	2107      	movs	r1, #7
 8001f44:	000d      	movs	r5, r1
 8001f46:	2400      	movs	r4, #0
 8001f48:	4015      	ands	r5, r2
 8001f4a:	4211      	tst	r1, r2
 8001f4c:	d05b      	beq.n	8002006 <__aeabi_dmul+0x4b6>
 8001f4e:	210f      	movs	r1, #15
 8001f50:	2400      	movs	r4, #0
 8001f52:	4011      	ands	r1, r2
 8001f54:	2904      	cmp	r1, #4
 8001f56:	d053      	beq.n	8002000 <__aeabi_dmul+0x4b0>
 8001f58:	1d11      	adds	r1, r2, #4
 8001f5a:	4291      	cmp	r1, r2
 8001f5c:	4192      	sbcs	r2, r2
 8001f5e:	4252      	negs	r2, r2
 8001f60:	18a4      	adds	r4, r4, r2
 8001f62:	000a      	movs	r2, r1
 8001f64:	0223      	lsls	r3, r4, #8
 8001f66:	d54b      	bpl.n	8002000 <__aeabi_dmul+0x4b0>
 8001f68:	2201      	movs	r2, #1
 8001f6a:	2400      	movs	r4, #0
 8001f6c:	2500      	movs	r5, #0
 8001f6e:	e650      	b.n	8001c12 <__aeabi_dmul+0xc2>
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	031b      	lsls	r3, r3, #12
 8001f74:	421c      	tst	r4, r3
 8001f76:	d009      	beq.n	8001f8c <__aeabi_dmul+0x43c>
 8001f78:	421e      	tst	r6, r3
 8001f7a:	d107      	bne.n	8001f8c <__aeabi_dmul+0x43c>
 8001f7c:	4333      	orrs	r3, r6
 8001f7e:	031c      	lsls	r4, r3, #12
 8001f80:	4643      	mov	r3, r8
 8001f82:	0015      	movs	r5, r2
 8001f84:	0b24      	lsrs	r4, r4, #12
 8001f86:	4a25      	ldr	r2, [pc, #148]	; (800201c <__aeabi_dmul+0x4cc>)
 8001f88:	9301      	str	r3, [sp, #4]
 8001f8a:	e642      	b.n	8001c12 <__aeabi_dmul+0xc2>
 8001f8c:	2280      	movs	r2, #128	; 0x80
 8001f8e:	0312      	lsls	r2, r2, #12
 8001f90:	4314      	orrs	r4, r2
 8001f92:	0324      	lsls	r4, r4, #12
 8001f94:	4a21      	ldr	r2, [pc, #132]	; (800201c <__aeabi_dmul+0x4cc>)
 8001f96:	0b24      	lsrs	r4, r4, #12
 8001f98:	9701      	str	r7, [sp, #4]
 8001f9a:	e63a      	b.n	8001c12 <__aeabi_dmul+0xc2>
 8001f9c:	f000 fd10 	bl	80029c0 <__clzsi2>
 8001fa0:	0001      	movs	r1, r0
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	3115      	adds	r1, #21
 8001fa6:	3220      	adds	r2, #32
 8001fa8:	291c      	cmp	r1, #28
 8001faa:	dc00      	bgt.n	8001fae <__aeabi_dmul+0x45e>
 8001fac:	e74b      	b.n	8001e46 <__aeabi_dmul+0x2f6>
 8001fae:	0034      	movs	r4, r6
 8001fb0:	3808      	subs	r0, #8
 8001fb2:	2500      	movs	r5, #0
 8001fb4:	4084      	lsls	r4, r0
 8001fb6:	e750      	b.n	8001e5a <__aeabi_dmul+0x30a>
 8001fb8:	f000 fd02 	bl	80029c0 <__clzsi2>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	001a      	movs	r2, r3
 8001fc0:	3215      	adds	r2, #21
 8001fc2:	3020      	adds	r0, #32
 8001fc4:	2a1c      	cmp	r2, #28
 8001fc6:	dc00      	bgt.n	8001fca <__aeabi_dmul+0x47a>
 8001fc8:	e71e      	b.n	8001e08 <__aeabi_dmul+0x2b8>
 8001fca:	4656      	mov	r6, sl
 8001fcc:	3b08      	subs	r3, #8
 8001fce:	2200      	movs	r2, #0
 8001fd0:	409e      	lsls	r6, r3
 8001fd2:	e723      	b.n	8001e1c <__aeabi_dmul+0x2cc>
 8001fd4:	9b00      	ldr	r3, [sp, #0]
 8001fd6:	469c      	mov	ip, r3
 8001fd8:	e6e6      	b.n	8001da8 <__aeabi_dmul+0x258>
 8001fda:	4912      	ldr	r1, [pc, #72]	; (8002024 <__aeabi_dmul+0x4d4>)
 8001fdc:	0022      	movs	r2, r4
 8001fde:	4461      	add	r1, ip
 8001fe0:	002e      	movs	r6, r5
 8001fe2:	408d      	lsls	r5, r1
 8001fe4:	408a      	lsls	r2, r1
 8001fe6:	40c6      	lsrs	r6, r0
 8001fe8:	1e69      	subs	r1, r5, #1
 8001fea:	418d      	sbcs	r5, r1
 8001fec:	4332      	orrs	r2, r6
 8001fee:	432a      	orrs	r2, r5
 8001ff0:	40c4      	lsrs	r4, r0
 8001ff2:	0753      	lsls	r3, r2, #29
 8001ff4:	d0b6      	beq.n	8001f64 <__aeabi_dmul+0x414>
 8001ff6:	210f      	movs	r1, #15
 8001ff8:	4011      	ands	r1, r2
 8001ffa:	2904      	cmp	r1, #4
 8001ffc:	d1ac      	bne.n	8001f58 <__aeabi_dmul+0x408>
 8001ffe:	e7b1      	b.n	8001f64 <__aeabi_dmul+0x414>
 8002000:	0765      	lsls	r5, r4, #29
 8002002:	0264      	lsls	r4, r4, #9
 8002004:	0b24      	lsrs	r4, r4, #12
 8002006:	08d2      	lsrs	r2, r2, #3
 8002008:	4315      	orrs	r5, r2
 800200a:	2200      	movs	r2, #0
 800200c:	e601      	b.n	8001c12 <__aeabi_dmul+0xc2>
 800200e:	2280      	movs	r2, #128	; 0x80
 8002010:	0312      	lsls	r2, r2, #12
 8002012:	4314      	orrs	r4, r2
 8002014:	0324      	lsls	r4, r4, #12
 8002016:	4a01      	ldr	r2, [pc, #4]	; (800201c <__aeabi_dmul+0x4cc>)
 8002018:	0b24      	lsrs	r4, r4, #12
 800201a:	e5fa      	b.n	8001c12 <__aeabi_dmul+0xc2>
 800201c:	000007ff 	.word	0x000007ff
 8002020:	0000043e 	.word	0x0000043e
 8002024:	0000041e 	.word	0x0000041e

08002028 <__aeabi_dsub>:
 8002028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800202a:	4657      	mov	r7, sl
 800202c:	464e      	mov	r6, r9
 800202e:	4645      	mov	r5, r8
 8002030:	46de      	mov	lr, fp
 8002032:	b5e0      	push	{r5, r6, r7, lr}
 8002034:	001e      	movs	r6, r3
 8002036:	0017      	movs	r7, r2
 8002038:	004a      	lsls	r2, r1, #1
 800203a:	030b      	lsls	r3, r1, #12
 800203c:	0d52      	lsrs	r2, r2, #21
 800203e:	0a5b      	lsrs	r3, r3, #9
 8002040:	4690      	mov	r8, r2
 8002042:	0f42      	lsrs	r2, r0, #29
 8002044:	431a      	orrs	r2, r3
 8002046:	0fcd      	lsrs	r5, r1, #31
 8002048:	4ccd      	ldr	r4, [pc, #820]	; (8002380 <__aeabi_dsub+0x358>)
 800204a:	0331      	lsls	r1, r6, #12
 800204c:	00c3      	lsls	r3, r0, #3
 800204e:	4694      	mov	ip, r2
 8002050:	0070      	lsls	r0, r6, #1
 8002052:	0f7a      	lsrs	r2, r7, #29
 8002054:	0a49      	lsrs	r1, r1, #9
 8002056:	00ff      	lsls	r7, r7, #3
 8002058:	469a      	mov	sl, r3
 800205a:	46b9      	mov	r9, r7
 800205c:	0d40      	lsrs	r0, r0, #21
 800205e:	0ff6      	lsrs	r6, r6, #31
 8002060:	4311      	orrs	r1, r2
 8002062:	42a0      	cmp	r0, r4
 8002064:	d100      	bne.n	8002068 <__aeabi_dsub+0x40>
 8002066:	e0b1      	b.n	80021cc <__aeabi_dsub+0x1a4>
 8002068:	2201      	movs	r2, #1
 800206a:	4056      	eors	r6, r2
 800206c:	46b3      	mov	fp, r6
 800206e:	42b5      	cmp	r5, r6
 8002070:	d100      	bne.n	8002074 <__aeabi_dsub+0x4c>
 8002072:	e088      	b.n	8002186 <__aeabi_dsub+0x15e>
 8002074:	4642      	mov	r2, r8
 8002076:	1a12      	subs	r2, r2, r0
 8002078:	2a00      	cmp	r2, #0
 800207a:	dc00      	bgt.n	800207e <__aeabi_dsub+0x56>
 800207c:	e0ae      	b.n	80021dc <__aeabi_dsub+0x1b4>
 800207e:	2800      	cmp	r0, #0
 8002080:	d100      	bne.n	8002084 <__aeabi_dsub+0x5c>
 8002082:	e0c1      	b.n	8002208 <__aeabi_dsub+0x1e0>
 8002084:	48be      	ldr	r0, [pc, #760]	; (8002380 <__aeabi_dsub+0x358>)
 8002086:	4580      	cmp	r8, r0
 8002088:	d100      	bne.n	800208c <__aeabi_dsub+0x64>
 800208a:	e151      	b.n	8002330 <__aeabi_dsub+0x308>
 800208c:	2080      	movs	r0, #128	; 0x80
 800208e:	0400      	lsls	r0, r0, #16
 8002090:	4301      	orrs	r1, r0
 8002092:	2a38      	cmp	r2, #56	; 0x38
 8002094:	dd00      	ble.n	8002098 <__aeabi_dsub+0x70>
 8002096:	e17b      	b.n	8002390 <__aeabi_dsub+0x368>
 8002098:	2a1f      	cmp	r2, #31
 800209a:	dd00      	ble.n	800209e <__aeabi_dsub+0x76>
 800209c:	e1ee      	b.n	800247c <__aeabi_dsub+0x454>
 800209e:	2020      	movs	r0, #32
 80020a0:	003e      	movs	r6, r7
 80020a2:	1a80      	subs	r0, r0, r2
 80020a4:	000c      	movs	r4, r1
 80020a6:	40d6      	lsrs	r6, r2
 80020a8:	40d1      	lsrs	r1, r2
 80020aa:	4087      	lsls	r7, r0
 80020ac:	4662      	mov	r2, ip
 80020ae:	4084      	lsls	r4, r0
 80020b0:	1a52      	subs	r2, r2, r1
 80020b2:	1e78      	subs	r0, r7, #1
 80020b4:	4187      	sbcs	r7, r0
 80020b6:	4694      	mov	ip, r2
 80020b8:	4334      	orrs	r4, r6
 80020ba:	4327      	orrs	r7, r4
 80020bc:	1bdc      	subs	r4, r3, r7
 80020be:	42a3      	cmp	r3, r4
 80020c0:	419b      	sbcs	r3, r3
 80020c2:	4662      	mov	r2, ip
 80020c4:	425b      	negs	r3, r3
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	4699      	mov	r9, r3
 80020ca:	464b      	mov	r3, r9
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	d400      	bmi.n	80020d2 <__aeabi_dsub+0xaa>
 80020d0:	e118      	b.n	8002304 <__aeabi_dsub+0x2dc>
 80020d2:	464b      	mov	r3, r9
 80020d4:	0258      	lsls	r0, r3, #9
 80020d6:	0a43      	lsrs	r3, r0, #9
 80020d8:	4699      	mov	r9, r3
 80020da:	464b      	mov	r3, r9
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d100      	bne.n	80020e2 <__aeabi_dsub+0xba>
 80020e0:	e137      	b.n	8002352 <__aeabi_dsub+0x32a>
 80020e2:	4648      	mov	r0, r9
 80020e4:	f000 fc6c 	bl	80029c0 <__clzsi2>
 80020e8:	0001      	movs	r1, r0
 80020ea:	3908      	subs	r1, #8
 80020ec:	2320      	movs	r3, #32
 80020ee:	0022      	movs	r2, r4
 80020f0:	4648      	mov	r0, r9
 80020f2:	1a5b      	subs	r3, r3, r1
 80020f4:	40da      	lsrs	r2, r3
 80020f6:	4088      	lsls	r0, r1
 80020f8:	408c      	lsls	r4, r1
 80020fa:	4643      	mov	r3, r8
 80020fc:	4310      	orrs	r0, r2
 80020fe:	4588      	cmp	r8, r1
 8002100:	dd00      	ble.n	8002104 <__aeabi_dsub+0xdc>
 8002102:	e136      	b.n	8002372 <__aeabi_dsub+0x34a>
 8002104:	1ac9      	subs	r1, r1, r3
 8002106:	1c4b      	adds	r3, r1, #1
 8002108:	2b1f      	cmp	r3, #31
 800210a:	dd00      	ble.n	800210e <__aeabi_dsub+0xe6>
 800210c:	e0ea      	b.n	80022e4 <__aeabi_dsub+0x2bc>
 800210e:	2220      	movs	r2, #32
 8002110:	0026      	movs	r6, r4
 8002112:	1ad2      	subs	r2, r2, r3
 8002114:	0001      	movs	r1, r0
 8002116:	4094      	lsls	r4, r2
 8002118:	40de      	lsrs	r6, r3
 800211a:	40d8      	lsrs	r0, r3
 800211c:	2300      	movs	r3, #0
 800211e:	4091      	lsls	r1, r2
 8002120:	1e62      	subs	r2, r4, #1
 8002122:	4194      	sbcs	r4, r2
 8002124:	4681      	mov	r9, r0
 8002126:	4698      	mov	r8, r3
 8002128:	4331      	orrs	r1, r6
 800212a:	430c      	orrs	r4, r1
 800212c:	0763      	lsls	r3, r4, #29
 800212e:	d009      	beq.n	8002144 <__aeabi_dsub+0x11c>
 8002130:	230f      	movs	r3, #15
 8002132:	4023      	ands	r3, r4
 8002134:	2b04      	cmp	r3, #4
 8002136:	d005      	beq.n	8002144 <__aeabi_dsub+0x11c>
 8002138:	1d23      	adds	r3, r4, #4
 800213a:	42a3      	cmp	r3, r4
 800213c:	41a4      	sbcs	r4, r4
 800213e:	4264      	negs	r4, r4
 8002140:	44a1      	add	r9, r4
 8002142:	001c      	movs	r4, r3
 8002144:	464b      	mov	r3, r9
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	d400      	bmi.n	800214c <__aeabi_dsub+0x124>
 800214a:	e0de      	b.n	800230a <__aeabi_dsub+0x2e2>
 800214c:	4641      	mov	r1, r8
 800214e:	4b8c      	ldr	r3, [pc, #560]	; (8002380 <__aeabi_dsub+0x358>)
 8002150:	3101      	adds	r1, #1
 8002152:	4299      	cmp	r1, r3
 8002154:	d100      	bne.n	8002158 <__aeabi_dsub+0x130>
 8002156:	e0e7      	b.n	8002328 <__aeabi_dsub+0x300>
 8002158:	464b      	mov	r3, r9
 800215a:	488a      	ldr	r0, [pc, #552]	; (8002384 <__aeabi_dsub+0x35c>)
 800215c:	08e4      	lsrs	r4, r4, #3
 800215e:	4003      	ands	r3, r0
 8002160:	0018      	movs	r0, r3
 8002162:	0549      	lsls	r1, r1, #21
 8002164:	075b      	lsls	r3, r3, #29
 8002166:	0240      	lsls	r0, r0, #9
 8002168:	4323      	orrs	r3, r4
 800216a:	0d4a      	lsrs	r2, r1, #21
 800216c:	0b04      	lsrs	r4, r0, #12
 800216e:	0512      	lsls	r2, r2, #20
 8002170:	07ed      	lsls	r5, r5, #31
 8002172:	4322      	orrs	r2, r4
 8002174:	432a      	orrs	r2, r5
 8002176:	0018      	movs	r0, r3
 8002178:	0011      	movs	r1, r2
 800217a:	bcf0      	pop	{r4, r5, r6, r7}
 800217c:	46bb      	mov	fp, r7
 800217e:	46b2      	mov	sl, r6
 8002180:	46a9      	mov	r9, r5
 8002182:	46a0      	mov	r8, r4
 8002184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002186:	4642      	mov	r2, r8
 8002188:	1a12      	subs	r2, r2, r0
 800218a:	2a00      	cmp	r2, #0
 800218c:	dd52      	ble.n	8002234 <__aeabi_dsub+0x20c>
 800218e:	2800      	cmp	r0, #0
 8002190:	d100      	bne.n	8002194 <__aeabi_dsub+0x16c>
 8002192:	e09c      	b.n	80022ce <__aeabi_dsub+0x2a6>
 8002194:	45a0      	cmp	r8, r4
 8002196:	d100      	bne.n	800219a <__aeabi_dsub+0x172>
 8002198:	e0ca      	b.n	8002330 <__aeabi_dsub+0x308>
 800219a:	2080      	movs	r0, #128	; 0x80
 800219c:	0400      	lsls	r0, r0, #16
 800219e:	4301      	orrs	r1, r0
 80021a0:	2a38      	cmp	r2, #56	; 0x38
 80021a2:	dd00      	ble.n	80021a6 <__aeabi_dsub+0x17e>
 80021a4:	e149      	b.n	800243a <__aeabi_dsub+0x412>
 80021a6:	2a1f      	cmp	r2, #31
 80021a8:	dc00      	bgt.n	80021ac <__aeabi_dsub+0x184>
 80021aa:	e197      	b.n	80024dc <__aeabi_dsub+0x4b4>
 80021ac:	0010      	movs	r0, r2
 80021ae:	000e      	movs	r6, r1
 80021b0:	3820      	subs	r0, #32
 80021b2:	40c6      	lsrs	r6, r0
 80021b4:	2a20      	cmp	r2, #32
 80021b6:	d004      	beq.n	80021c2 <__aeabi_dsub+0x19a>
 80021b8:	2040      	movs	r0, #64	; 0x40
 80021ba:	1a82      	subs	r2, r0, r2
 80021bc:	4091      	lsls	r1, r2
 80021be:	430f      	orrs	r7, r1
 80021c0:	46b9      	mov	r9, r7
 80021c2:	464c      	mov	r4, r9
 80021c4:	1e62      	subs	r2, r4, #1
 80021c6:	4194      	sbcs	r4, r2
 80021c8:	4334      	orrs	r4, r6
 80021ca:	e13a      	b.n	8002442 <__aeabi_dsub+0x41a>
 80021cc:	000a      	movs	r2, r1
 80021ce:	433a      	orrs	r2, r7
 80021d0:	d028      	beq.n	8002224 <__aeabi_dsub+0x1fc>
 80021d2:	46b3      	mov	fp, r6
 80021d4:	42b5      	cmp	r5, r6
 80021d6:	d02b      	beq.n	8002230 <__aeabi_dsub+0x208>
 80021d8:	4a6b      	ldr	r2, [pc, #428]	; (8002388 <__aeabi_dsub+0x360>)
 80021da:	4442      	add	r2, r8
 80021dc:	2a00      	cmp	r2, #0
 80021de:	d05d      	beq.n	800229c <__aeabi_dsub+0x274>
 80021e0:	4642      	mov	r2, r8
 80021e2:	4644      	mov	r4, r8
 80021e4:	1a82      	subs	r2, r0, r2
 80021e6:	2c00      	cmp	r4, #0
 80021e8:	d000      	beq.n	80021ec <__aeabi_dsub+0x1c4>
 80021ea:	e0f5      	b.n	80023d8 <__aeabi_dsub+0x3b0>
 80021ec:	4665      	mov	r5, ip
 80021ee:	431d      	orrs	r5, r3
 80021f0:	d100      	bne.n	80021f4 <__aeabi_dsub+0x1cc>
 80021f2:	e19c      	b.n	800252e <__aeabi_dsub+0x506>
 80021f4:	1e55      	subs	r5, r2, #1
 80021f6:	2a01      	cmp	r2, #1
 80021f8:	d100      	bne.n	80021fc <__aeabi_dsub+0x1d4>
 80021fa:	e1fb      	b.n	80025f4 <__aeabi_dsub+0x5cc>
 80021fc:	4c60      	ldr	r4, [pc, #384]	; (8002380 <__aeabi_dsub+0x358>)
 80021fe:	42a2      	cmp	r2, r4
 8002200:	d100      	bne.n	8002204 <__aeabi_dsub+0x1dc>
 8002202:	e1bd      	b.n	8002580 <__aeabi_dsub+0x558>
 8002204:	002a      	movs	r2, r5
 8002206:	e0f0      	b.n	80023ea <__aeabi_dsub+0x3c2>
 8002208:	0008      	movs	r0, r1
 800220a:	4338      	orrs	r0, r7
 800220c:	d100      	bne.n	8002210 <__aeabi_dsub+0x1e8>
 800220e:	e0c3      	b.n	8002398 <__aeabi_dsub+0x370>
 8002210:	1e50      	subs	r0, r2, #1
 8002212:	2a01      	cmp	r2, #1
 8002214:	d100      	bne.n	8002218 <__aeabi_dsub+0x1f0>
 8002216:	e1a8      	b.n	800256a <__aeabi_dsub+0x542>
 8002218:	4c59      	ldr	r4, [pc, #356]	; (8002380 <__aeabi_dsub+0x358>)
 800221a:	42a2      	cmp	r2, r4
 800221c:	d100      	bne.n	8002220 <__aeabi_dsub+0x1f8>
 800221e:	e087      	b.n	8002330 <__aeabi_dsub+0x308>
 8002220:	0002      	movs	r2, r0
 8002222:	e736      	b.n	8002092 <__aeabi_dsub+0x6a>
 8002224:	2201      	movs	r2, #1
 8002226:	4056      	eors	r6, r2
 8002228:	46b3      	mov	fp, r6
 800222a:	42b5      	cmp	r5, r6
 800222c:	d000      	beq.n	8002230 <__aeabi_dsub+0x208>
 800222e:	e721      	b.n	8002074 <__aeabi_dsub+0x4c>
 8002230:	4a55      	ldr	r2, [pc, #340]	; (8002388 <__aeabi_dsub+0x360>)
 8002232:	4442      	add	r2, r8
 8002234:	2a00      	cmp	r2, #0
 8002236:	d100      	bne.n	800223a <__aeabi_dsub+0x212>
 8002238:	e0b5      	b.n	80023a6 <__aeabi_dsub+0x37e>
 800223a:	4642      	mov	r2, r8
 800223c:	4644      	mov	r4, r8
 800223e:	1a82      	subs	r2, r0, r2
 8002240:	2c00      	cmp	r4, #0
 8002242:	d100      	bne.n	8002246 <__aeabi_dsub+0x21e>
 8002244:	e138      	b.n	80024b8 <__aeabi_dsub+0x490>
 8002246:	4e4e      	ldr	r6, [pc, #312]	; (8002380 <__aeabi_dsub+0x358>)
 8002248:	42b0      	cmp	r0, r6
 800224a:	d100      	bne.n	800224e <__aeabi_dsub+0x226>
 800224c:	e1de      	b.n	800260c <__aeabi_dsub+0x5e4>
 800224e:	2680      	movs	r6, #128	; 0x80
 8002250:	4664      	mov	r4, ip
 8002252:	0436      	lsls	r6, r6, #16
 8002254:	4334      	orrs	r4, r6
 8002256:	46a4      	mov	ip, r4
 8002258:	2a38      	cmp	r2, #56	; 0x38
 800225a:	dd00      	ble.n	800225e <__aeabi_dsub+0x236>
 800225c:	e196      	b.n	800258c <__aeabi_dsub+0x564>
 800225e:	2a1f      	cmp	r2, #31
 8002260:	dd00      	ble.n	8002264 <__aeabi_dsub+0x23c>
 8002262:	e224      	b.n	80026ae <__aeabi_dsub+0x686>
 8002264:	2620      	movs	r6, #32
 8002266:	1ab4      	subs	r4, r6, r2
 8002268:	46a2      	mov	sl, r4
 800226a:	4664      	mov	r4, ip
 800226c:	4656      	mov	r6, sl
 800226e:	40b4      	lsls	r4, r6
 8002270:	46a1      	mov	r9, r4
 8002272:	001c      	movs	r4, r3
 8002274:	464e      	mov	r6, r9
 8002276:	40d4      	lsrs	r4, r2
 8002278:	4326      	orrs	r6, r4
 800227a:	0034      	movs	r4, r6
 800227c:	4656      	mov	r6, sl
 800227e:	40b3      	lsls	r3, r6
 8002280:	1e5e      	subs	r6, r3, #1
 8002282:	41b3      	sbcs	r3, r6
 8002284:	431c      	orrs	r4, r3
 8002286:	4663      	mov	r3, ip
 8002288:	40d3      	lsrs	r3, r2
 800228a:	18c9      	adds	r1, r1, r3
 800228c:	19e4      	adds	r4, r4, r7
 800228e:	42bc      	cmp	r4, r7
 8002290:	41bf      	sbcs	r7, r7
 8002292:	427f      	negs	r7, r7
 8002294:	46b9      	mov	r9, r7
 8002296:	4680      	mov	r8, r0
 8002298:	4489      	add	r9, r1
 800229a:	e0d8      	b.n	800244e <__aeabi_dsub+0x426>
 800229c:	4640      	mov	r0, r8
 800229e:	4c3b      	ldr	r4, [pc, #236]	; (800238c <__aeabi_dsub+0x364>)
 80022a0:	3001      	adds	r0, #1
 80022a2:	4220      	tst	r0, r4
 80022a4:	d000      	beq.n	80022a8 <__aeabi_dsub+0x280>
 80022a6:	e0b4      	b.n	8002412 <__aeabi_dsub+0x3ea>
 80022a8:	4640      	mov	r0, r8
 80022aa:	2800      	cmp	r0, #0
 80022ac:	d000      	beq.n	80022b0 <__aeabi_dsub+0x288>
 80022ae:	e144      	b.n	800253a <__aeabi_dsub+0x512>
 80022b0:	4660      	mov	r0, ip
 80022b2:	4318      	orrs	r0, r3
 80022b4:	d100      	bne.n	80022b8 <__aeabi_dsub+0x290>
 80022b6:	e190      	b.n	80025da <__aeabi_dsub+0x5b2>
 80022b8:	0008      	movs	r0, r1
 80022ba:	4338      	orrs	r0, r7
 80022bc:	d000      	beq.n	80022c0 <__aeabi_dsub+0x298>
 80022be:	e1aa      	b.n	8002616 <__aeabi_dsub+0x5ee>
 80022c0:	4661      	mov	r1, ip
 80022c2:	08db      	lsrs	r3, r3, #3
 80022c4:	0749      	lsls	r1, r1, #29
 80022c6:	430b      	orrs	r3, r1
 80022c8:	4661      	mov	r1, ip
 80022ca:	08cc      	lsrs	r4, r1, #3
 80022cc:	e027      	b.n	800231e <__aeabi_dsub+0x2f6>
 80022ce:	0008      	movs	r0, r1
 80022d0:	4338      	orrs	r0, r7
 80022d2:	d061      	beq.n	8002398 <__aeabi_dsub+0x370>
 80022d4:	1e50      	subs	r0, r2, #1
 80022d6:	2a01      	cmp	r2, #1
 80022d8:	d100      	bne.n	80022dc <__aeabi_dsub+0x2b4>
 80022da:	e139      	b.n	8002550 <__aeabi_dsub+0x528>
 80022dc:	42a2      	cmp	r2, r4
 80022de:	d027      	beq.n	8002330 <__aeabi_dsub+0x308>
 80022e0:	0002      	movs	r2, r0
 80022e2:	e75d      	b.n	80021a0 <__aeabi_dsub+0x178>
 80022e4:	0002      	movs	r2, r0
 80022e6:	391f      	subs	r1, #31
 80022e8:	40ca      	lsrs	r2, r1
 80022ea:	0011      	movs	r1, r2
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d003      	beq.n	80022f8 <__aeabi_dsub+0x2d0>
 80022f0:	2240      	movs	r2, #64	; 0x40
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	4098      	lsls	r0, r3
 80022f6:	4304      	orrs	r4, r0
 80022f8:	1e63      	subs	r3, r4, #1
 80022fa:	419c      	sbcs	r4, r3
 80022fc:	2300      	movs	r3, #0
 80022fe:	4699      	mov	r9, r3
 8002300:	4698      	mov	r8, r3
 8002302:	430c      	orrs	r4, r1
 8002304:	0763      	lsls	r3, r4, #29
 8002306:	d000      	beq.n	800230a <__aeabi_dsub+0x2e2>
 8002308:	e712      	b.n	8002130 <__aeabi_dsub+0x108>
 800230a:	464b      	mov	r3, r9
 800230c:	464a      	mov	r2, r9
 800230e:	08e4      	lsrs	r4, r4, #3
 8002310:	075b      	lsls	r3, r3, #29
 8002312:	4323      	orrs	r3, r4
 8002314:	08d4      	lsrs	r4, r2, #3
 8002316:	4642      	mov	r2, r8
 8002318:	4919      	ldr	r1, [pc, #100]	; (8002380 <__aeabi_dsub+0x358>)
 800231a:	428a      	cmp	r2, r1
 800231c:	d00e      	beq.n	800233c <__aeabi_dsub+0x314>
 800231e:	0324      	lsls	r4, r4, #12
 8002320:	0552      	lsls	r2, r2, #21
 8002322:	0b24      	lsrs	r4, r4, #12
 8002324:	0d52      	lsrs	r2, r2, #21
 8002326:	e722      	b.n	800216e <__aeabi_dsub+0x146>
 8002328:	000a      	movs	r2, r1
 800232a:	2400      	movs	r4, #0
 800232c:	2300      	movs	r3, #0
 800232e:	e71e      	b.n	800216e <__aeabi_dsub+0x146>
 8002330:	08db      	lsrs	r3, r3, #3
 8002332:	4662      	mov	r2, ip
 8002334:	0752      	lsls	r2, r2, #29
 8002336:	4313      	orrs	r3, r2
 8002338:	4662      	mov	r2, ip
 800233a:	08d4      	lsrs	r4, r2, #3
 800233c:	001a      	movs	r2, r3
 800233e:	4322      	orrs	r2, r4
 8002340:	d100      	bne.n	8002344 <__aeabi_dsub+0x31c>
 8002342:	e1fc      	b.n	800273e <__aeabi_dsub+0x716>
 8002344:	2280      	movs	r2, #128	; 0x80
 8002346:	0312      	lsls	r2, r2, #12
 8002348:	4314      	orrs	r4, r2
 800234a:	0324      	lsls	r4, r4, #12
 800234c:	4a0c      	ldr	r2, [pc, #48]	; (8002380 <__aeabi_dsub+0x358>)
 800234e:	0b24      	lsrs	r4, r4, #12
 8002350:	e70d      	b.n	800216e <__aeabi_dsub+0x146>
 8002352:	0020      	movs	r0, r4
 8002354:	f000 fb34 	bl	80029c0 <__clzsi2>
 8002358:	0001      	movs	r1, r0
 800235a:	3118      	adds	r1, #24
 800235c:	291f      	cmp	r1, #31
 800235e:	dc00      	bgt.n	8002362 <__aeabi_dsub+0x33a>
 8002360:	e6c4      	b.n	80020ec <__aeabi_dsub+0xc4>
 8002362:	3808      	subs	r0, #8
 8002364:	4084      	lsls	r4, r0
 8002366:	4643      	mov	r3, r8
 8002368:	0020      	movs	r0, r4
 800236a:	2400      	movs	r4, #0
 800236c:	4588      	cmp	r8, r1
 800236e:	dc00      	bgt.n	8002372 <__aeabi_dsub+0x34a>
 8002370:	e6c8      	b.n	8002104 <__aeabi_dsub+0xdc>
 8002372:	4a04      	ldr	r2, [pc, #16]	; (8002384 <__aeabi_dsub+0x35c>)
 8002374:	1a5b      	subs	r3, r3, r1
 8002376:	4010      	ands	r0, r2
 8002378:	4698      	mov	r8, r3
 800237a:	4681      	mov	r9, r0
 800237c:	e6d6      	b.n	800212c <__aeabi_dsub+0x104>
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	000007ff 	.word	0x000007ff
 8002384:	ff7fffff 	.word	0xff7fffff
 8002388:	fffff801 	.word	0xfffff801
 800238c:	000007fe 	.word	0x000007fe
 8002390:	430f      	orrs	r7, r1
 8002392:	1e7a      	subs	r2, r7, #1
 8002394:	4197      	sbcs	r7, r2
 8002396:	e691      	b.n	80020bc <__aeabi_dsub+0x94>
 8002398:	4661      	mov	r1, ip
 800239a:	08db      	lsrs	r3, r3, #3
 800239c:	0749      	lsls	r1, r1, #29
 800239e:	430b      	orrs	r3, r1
 80023a0:	4661      	mov	r1, ip
 80023a2:	08cc      	lsrs	r4, r1, #3
 80023a4:	e7b8      	b.n	8002318 <__aeabi_dsub+0x2f0>
 80023a6:	4640      	mov	r0, r8
 80023a8:	4cd3      	ldr	r4, [pc, #844]	; (80026f8 <__aeabi_dsub+0x6d0>)
 80023aa:	3001      	adds	r0, #1
 80023ac:	4220      	tst	r0, r4
 80023ae:	d000      	beq.n	80023b2 <__aeabi_dsub+0x38a>
 80023b0:	e0a2      	b.n	80024f8 <__aeabi_dsub+0x4d0>
 80023b2:	4640      	mov	r0, r8
 80023b4:	2800      	cmp	r0, #0
 80023b6:	d000      	beq.n	80023ba <__aeabi_dsub+0x392>
 80023b8:	e101      	b.n	80025be <__aeabi_dsub+0x596>
 80023ba:	4660      	mov	r0, ip
 80023bc:	4318      	orrs	r0, r3
 80023be:	d100      	bne.n	80023c2 <__aeabi_dsub+0x39a>
 80023c0:	e15e      	b.n	8002680 <__aeabi_dsub+0x658>
 80023c2:	0008      	movs	r0, r1
 80023c4:	4338      	orrs	r0, r7
 80023c6:	d000      	beq.n	80023ca <__aeabi_dsub+0x3a2>
 80023c8:	e15f      	b.n	800268a <__aeabi_dsub+0x662>
 80023ca:	4661      	mov	r1, ip
 80023cc:	08db      	lsrs	r3, r3, #3
 80023ce:	0749      	lsls	r1, r1, #29
 80023d0:	430b      	orrs	r3, r1
 80023d2:	4661      	mov	r1, ip
 80023d4:	08cc      	lsrs	r4, r1, #3
 80023d6:	e7a2      	b.n	800231e <__aeabi_dsub+0x2f6>
 80023d8:	4dc8      	ldr	r5, [pc, #800]	; (80026fc <__aeabi_dsub+0x6d4>)
 80023da:	42a8      	cmp	r0, r5
 80023dc:	d100      	bne.n	80023e0 <__aeabi_dsub+0x3b8>
 80023de:	e0cf      	b.n	8002580 <__aeabi_dsub+0x558>
 80023e0:	2580      	movs	r5, #128	; 0x80
 80023e2:	4664      	mov	r4, ip
 80023e4:	042d      	lsls	r5, r5, #16
 80023e6:	432c      	orrs	r4, r5
 80023e8:	46a4      	mov	ip, r4
 80023ea:	2a38      	cmp	r2, #56	; 0x38
 80023ec:	dc56      	bgt.n	800249c <__aeabi_dsub+0x474>
 80023ee:	2a1f      	cmp	r2, #31
 80023f0:	dd00      	ble.n	80023f4 <__aeabi_dsub+0x3cc>
 80023f2:	e0d1      	b.n	8002598 <__aeabi_dsub+0x570>
 80023f4:	2520      	movs	r5, #32
 80023f6:	001e      	movs	r6, r3
 80023f8:	1aad      	subs	r5, r5, r2
 80023fa:	4664      	mov	r4, ip
 80023fc:	40ab      	lsls	r3, r5
 80023fe:	40ac      	lsls	r4, r5
 8002400:	40d6      	lsrs	r6, r2
 8002402:	1e5d      	subs	r5, r3, #1
 8002404:	41ab      	sbcs	r3, r5
 8002406:	4334      	orrs	r4, r6
 8002408:	4323      	orrs	r3, r4
 800240a:	4664      	mov	r4, ip
 800240c:	40d4      	lsrs	r4, r2
 800240e:	1b09      	subs	r1, r1, r4
 8002410:	e049      	b.n	80024a6 <__aeabi_dsub+0x47e>
 8002412:	4660      	mov	r0, ip
 8002414:	1bdc      	subs	r4, r3, r7
 8002416:	1a46      	subs	r6, r0, r1
 8002418:	42a3      	cmp	r3, r4
 800241a:	4180      	sbcs	r0, r0
 800241c:	4240      	negs	r0, r0
 800241e:	4681      	mov	r9, r0
 8002420:	0030      	movs	r0, r6
 8002422:	464e      	mov	r6, r9
 8002424:	1b80      	subs	r0, r0, r6
 8002426:	4681      	mov	r9, r0
 8002428:	0200      	lsls	r0, r0, #8
 800242a:	d476      	bmi.n	800251a <__aeabi_dsub+0x4f2>
 800242c:	464b      	mov	r3, r9
 800242e:	4323      	orrs	r3, r4
 8002430:	d000      	beq.n	8002434 <__aeabi_dsub+0x40c>
 8002432:	e652      	b.n	80020da <__aeabi_dsub+0xb2>
 8002434:	2400      	movs	r4, #0
 8002436:	2500      	movs	r5, #0
 8002438:	e771      	b.n	800231e <__aeabi_dsub+0x2f6>
 800243a:	4339      	orrs	r1, r7
 800243c:	000c      	movs	r4, r1
 800243e:	1e62      	subs	r2, r4, #1
 8002440:	4194      	sbcs	r4, r2
 8002442:	18e4      	adds	r4, r4, r3
 8002444:	429c      	cmp	r4, r3
 8002446:	419b      	sbcs	r3, r3
 8002448:	425b      	negs	r3, r3
 800244a:	4463      	add	r3, ip
 800244c:	4699      	mov	r9, r3
 800244e:	464b      	mov	r3, r9
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	d400      	bmi.n	8002456 <__aeabi_dsub+0x42e>
 8002454:	e756      	b.n	8002304 <__aeabi_dsub+0x2dc>
 8002456:	2301      	movs	r3, #1
 8002458:	469c      	mov	ip, r3
 800245a:	4ba8      	ldr	r3, [pc, #672]	; (80026fc <__aeabi_dsub+0x6d4>)
 800245c:	44e0      	add	r8, ip
 800245e:	4598      	cmp	r8, r3
 8002460:	d038      	beq.n	80024d4 <__aeabi_dsub+0x4ac>
 8002462:	464b      	mov	r3, r9
 8002464:	48a6      	ldr	r0, [pc, #664]	; (8002700 <__aeabi_dsub+0x6d8>)
 8002466:	2201      	movs	r2, #1
 8002468:	4003      	ands	r3, r0
 800246a:	0018      	movs	r0, r3
 800246c:	0863      	lsrs	r3, r4, #1
 800246e:	4014      	ands	r4, r2
 8002470:	431c      	orrs	r4, r3
 8002472:	07c3      	lsls	r3, r0, #31
 8002474:	431c      	orrs	r4, r3
 8002476:	0843      	lsrs	r3, r0, #1
 8002478:	4699      	mov	r9, r3
 800247a:	e657      	b.n	800212c <__aeabi_dsub+0x104>
 800247c:	0010      	movs	r0, r2
 800247e:	000e      	movs	r6, r1
 8002480:	3820      	subs	r0, #32
 8002482:	40c6      	lsrs	r6, r0
 8002484:	2a20      	cmp	r2, #32
 8002486:	d004      	beq.n	8002492 <__aeabi_dsub+0x46a>
 8002488:	2040      	movs	r0, #64	; 0x40
 800248a:	1a82      	subs	r2, r0, r2
 800248c:	4091      	lsls	r1, r2
 800248e:	430f      	orrs	r7, r1
 8002490:	46b9      	mov	r9, r7
 8002492:	464f      	mov	r7, r9
 8002494:	1e7a      	subs	r2, r7, #1
 8002496:	4197      	sbcs	r7, r2
 8002498:	4337      	orrs	r7, r6
 800249a:	e60f      	b.n	80020bc <__aeabi_dsub+0x94>
 800249c:	4662      	mov	r2, ip
 800249e:	431a      	orrs	r2, r3
 80024a0:	0013      	movs	r3, r2
 80024a2:	1e5a      	subs	r2, r3, #1
 80024a4:	4193      	sbcs	r3, r2
 80024a6:	1afc      	subs	r4, r7, r3
 80024a8:	42a7      	cmp	r7, r4
 80024aa:	41bf      	sbcs	r7, r7
 80024ac:	427f      	negs	r7, r7
 80024ae:	1bcb      	subs	r3, r1, r7
 80024b0:	4699      	mov	r9, r3
 80024b2:	465d      	mov	r5, fp
 80024b4:	4680      	mov	r8, r0
 80024b6:	e608      	b.n	80020ca <__aeabi_dsub+0xa2>
 80024b8:	4666      	mov	r6, ip
 80024ba:	431e      	orrs	r6, r3
 80024bc:	d100      	bne.n	80024c0 <__aeabi_dsub+0x498>
 80024be:	e0be      	b.n	800263e <__aeabi_dsub+0x616>
 80024c0:	1e56      	subs	r6, r2, #1
 80024c2:	2a01      	cmp	r2, #1
 80024c4:	d100      	bne.n	80024c8 <__aeabi_dsub+0x4a0>
 80024c6:	e109      	b.n	80026dc <__aeabi_dsub+0x6b4>
 80024c8:	4c8c      	ldr	r4, [pc, #560]	; (80026fc <__aeabi_dsub+0x6d4>)
 80024ca:	42a2      	cmp	r2, r4
 80024cc:	d100      	bne.n	80024d0 <__aeabi_dsub+0x4a8>
 80024ce:	e119      	b.n	8002704 <__aeabi_dsub+0x6dc>
 80024d0:	0032      	movs	r2, r6
 80024d2:	e6c1      	b.n	8002258 <__aeabi_dsub+0x230>
 80024d4:	4642      	mov	r2, r8
 80024d6:	2400      	movs	r4, #0
 80024d8:	2300      	movs	r3, #0
 80024da:	e648      	b.n	800216e <__aeabi_dsub+0x146>
 80024dc:	2020      	movs	r0, #32
 80024de:	000c      	movs	r4, r1
 80024e0:	1a80      	subs	r0, r0, r2
 80024e2:	003e      	movs	r6, r7
 80024e4:	4087      	lsls	r7, r0
 80024e6:	4084      	lsls	r4, r0
 80024e8:	40d6      	lsrs	r6, r2
 80024ea:	1e78      	subs	r0, r7, #1
 80024ec:	4187      	sbcs	r7, r0
 80024ee:	40d1      	lsrs	r1, r2
 80024f0:	4334      	orrs	r4, r6
 80024f2:	433c      	orrs	r4, r7
 80024f4:	448c      	add	ip, r1
 80024f6:	e7a4      	b.n	8002442 <__aeabi_dsub+0x41a>
 80024f8:	4a80      	ldr	r2, [pc, #512]	; (80026fc <__aeabi_dsub+0x6d4>)
 80024fa:	4290      	cmp	r0, r2
 80024fc:	d100      	bne.n	8002500 <__aeabi_dsub+0x4d8>
 80024fe:	e0e9      	b.n	80026d4 <__aeabi_dsub+0x6ac>
 8002500:	19df      	adds	r7, r3, r7
 8002502:	429f      	cmp	r7, r3
 8002504:	419b      	sbcs	r3, r3
 8002506:	4461      	add	r1, ip
 8002508:	425b      	negs	r3, r3
 800250a:	18c9      	adds	r1, r1, r3
 800250c:	07cc      	lsls	r4, r1, #31
 800250e:	087f      	lsrs	r7, r7, #1
 8002510:	084b      	lsrs	r3, r1, #1
 8002512:	4699      	mov	r9, r3
 8002514:	4680      	mov	r8, r0
 8002516:	433c      	orrs	r4, r7
 8002518:	e6f4      	b.n	8002304 <__aeabi_dsub+0x2dc>
 800251a:	1afc      	subs	r4, r7, r3
 800251c:	42a7      	cmp	r7, r4
 800251e:	41bf      	sbcs	r7, r7
 8002520:	4663      	mov	r3, ip
 8002522:	427f      	negs	r7, r7
 8002524:	1ac9      	subs	r1, r1, r3
 8002526:	1bcb      	subs	r3, r1, r7
 8002528:	4699      	mov	r9, r3
 800252a:	465d      	mov	r5, fp
 800252c:	e5d5      	b.n	80020da <__aeabi_dsub+0xb2>
 800252e:	08ff      	lsrs	r7, r7, #3
 8002530:	074b      	lsls	r3, r1, #29
 8002532:	465d      	mov	r5, fp
 8002534:	433b      	orrs	r3, r7
 8002536:	08cc      	lsrs	r4, r1, #3
 8002538:	e6ee      	b.n	8002318 <__aeabi_dsub+0x2f0>
 800253a:	4662      	mov	r2, ip
 800253c:	431a      	orrs	r2, r3
 800253e:	d000      	beq.n	8002542 <__aeabi_dsub+0x51a>
 8002540:	e082      	b.n	8002648 <__aeabi_dsub+0x620>
 8002542:	000b      	movs	r3, r1
 8002544:	433b      	orrs	r3, r7
 8002546:	d11b      	bne.n	8002580 <__aeabi_dsub+0x558>
 8002548:	2480      	movs	r4, #128	; 0x80
 800254a:	2500      	movs	r5, #0
 800254c:	0324      	lsls	r4, r4, #12
 800254e:	e6f9      	b.n	8002344 <__aeabi_dsub+0x31c>
 8002550:	19dc      	adds	r4, r3, r7
 8002552:	429c      	cmp	r4, r3
 8002554:	419b      	sbcs	r3, r3
 8002556:	4461      	add	r1, ip
 8002558:	4689      	mov	r9, r1
 800255a:	425b      	negs	r3, r3
 800255c:	4499      	add	r9, r3
 800255e:	464b      	mov	r3, r9
 8002560:	021b      	lsls	r3, r3, #8
 8002562:	d444      	bmi.n	80025ee <__aeabi_dsub+0x5c6>
 8002564:	2301      	movs	r3, #1
 8002566:	4698      	mov	r8, r3
 8002568:	e6cc      	b.n	8002304 <__aeabi_dsub+0x2dc>
 800256a:	1bdc      	subs	r4, r3, r7
 800256c:	4662      	mov	r2, ip
 800256e:	42a3      	cmp	r3, r4
 8002570:	419b      	sbcs	r3, r3
 8002572:	1a51      	subs	r1, r2, r1
 8002574:	425b      	negs	r3, r3
 8002576:	1acb      	subs	r3, r1, r3
 8002578:	4699      	mov	r9, r3
 800257a:	2301      	movs	r3, #1
 800257c:	4698      	mov	r8, r3
 800257e:	e5a4      	b.n	80020ca <__aeabi_dsub+0xa2>
 8002580:	08ff      	lsrs	r7, r7, #3
 8002582:	074b      	lsls	r3, r1, #29
 8002584:	465d      	mov	r5, fp
 8002586:	433b      	orrs	r3, r7
 8002588:	08cc      	lsrs	r4, r1, #3
 800258a:	e6d7      	b.n	800233c <__aeabi_dsub+0x314>
 800258c:	4662      	mov	r2, ip
 800258e:	431a      	orrs	r2, r3
 8002590:	0014      	movs	r4, r2
 8002592:	1e63      	subs	r3, r4, #1
 8002594:	419c      	sbcs	r4, r3
 8002596:	e679      	b.n	800228c <__aeabi_dsub+0x264>
 8002598:	0015      	movs	r5, r2
 800259a:	4664      	mov	r4, ip
 800259c:	3d20      	subs	r5, #32
 800259e:	40ec      	lsrs	r4, r5
 80025a0:	46a0      	mov	r8, r4
 80025a2:	2a20      	cmp	r2, #32
 80025a4:	d005      	beq.n	80025b2 <__aeabi_dsub+0x58a>
 80025a6:	2540      	movs	r5, #64	; 0x40
 80025a8:	4664      	mov	r4, ip
 80025aa:	1aaa      	subs	r2, r5, r2
 80025ac:	4094      	lsls	r4, r2
 80025ae:	4323      	orrs	r3, r4
 80025b0:	469a      	mov	sl, r3
 80025b2:	4654      	mov	r4, sl
 80025b4:	1e63      	subs	r3, r4, #1
 80025b6:	419c      	sbcs	r4, r3
 80025b8:	4643      	mov	r3, r8
 80025ba:	4323      	orrs	r3, r4
 80025bc:	e773      	b.n	80024a6 <__aeabi_dsub+0x47e>
 80025be:	4662      	mov	r2, ip
 80025c0:	431a      	orrs	r2, r3
 80025c2:	d023      	beq.n	800260c <__aeabi_dsub+0x5e4>
 80025c4:	000a      	movs	r2, r1
 80025c6:	433a      	orrs	r2, r7
 80025c8:	d000      	beq.n	80025cc <__aeabi_dsub+0x5a4>
 80025ca:	e0a0      	b.n	800270e <__aeabi_dsub+0x6e6>
 80025cc:	4662      	mov	r2, ip
 80025ce:	08db      	lsrs	r3, r3, #3
 80025d0:	0752      	lsls	r2, r2, #29
 80025d2:	4313      	orrs	r3, r2
 80025d4:	4662      	mov	r2, ip
 80025d6:	08d4      	lsrs	r4, r2, #3
 80025d8:	e6b0      	b.n	800233c <__aeabi_dsub+0x314>
 80025da:	000b      	movs	r3, r1
 80025dc:	433b      	orrs	r3, r7
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x5ba>
 80025e0:	e728      	b.n	8002434 <__aeabi_dsub+0x40c>
 80025e2:	08ff      	lsrs	r7, r7, #3
 80025e4:	074b      	lsls	r3, r1, #29
 80025e6:	465d      	mov	r5, fp
 80025e8:	433b      	orrs	r3, r7
 80025ea:	08cc      	lsrs	r4, r1, #3
 80025ec:	e697      	b.n	800231e <__aeabi_dsub+0x2f6>
 80025ee:	2302      	movs	r3, #2
 80025f0:	4698      	mov	r8, r3
 80025f2:	e736      	b.n	8002462 <__aeabi_dsub+0x43a>
 80025f4:	1afc      	subs	r4, r7, r3
 80025f6:	42a7      	cmp	r7, r4
 80025f8:	41bf      	sbcs	r7, r7
 80025fa:	4663      	mov	r3, ip
 80025fc:	427f      	negs	r7, r7
 80025fe:	1ac9      	subs	r1, r1, r3
 8002600:	1bcb      	subs	r3, r1, r7
 8002602:	4699      	mov	r9, r3
 8002604:	2301      	movs	r3, #1
 8002606:	465d      	mov	r5, fp
 8002608:	4698      	mov	r8, r3
 800260a:	e55e      	b.n	80020ca <__aeabi_dsub+0xa2>
 800260c:	074b      	lsls	r3, r1, #29
 800260e:	08ff      	lsrs	r7, r7, #3
 8002610:	433b      	orrs	r3, r7
 8002612:	08cc      	lsrs	r4, r1, #3
 8002614:	e692      	b.n	800233c <__aeabi_dsub+0x314>
 8002616:	1bdc      	subs	r4, r3, r7
 8002618:	4660      	mov	r0, ip
 800261a:	42a3      	cmp	r3, r4
 800261c:	41b6      	sbcs	r6, r6
 800261e:	1a40      	subs	r0, r0, r1
 8002620:	4276      	negs	r6, r6
 8002622:	1b80      	subs	r0, r0, r6
 8002624:	4681      	mov	r9, r0
 8002626:	0200      	lsls	r0, r0, #8
 8002628:	d560      	bpl.n	80026ec <__aeabi_dsub+0x6c4>
 800262a:	1afc      	subs	r4, r7, r3
 800262c:	42a7      	cmp	r7, r4
 800262e:	41bf      	sbcs	r7, r7
 8002630:	4663      	mov	r3, ip
 8002632:	427f      	negs	r7, r7
 8002634:	1ac9      	subs	r1, r1, r3
 8002636:	1bcb      	subs	r3, r1, r7
 8002638:	4699      	mov	r9, r3
 800263a:	465d      	mov	r5, fp
 800263c:	e576      	b.n	800212c <__aeabi_dsub+0x104>
 800263e:	08ff      	lsrs	r7, r7, #3
 8002640:	074b      	lsls	r3, r1, #29
 8002642:	433b      	orrs	r3, r7
 8002644:	08cc      	lsrs	r4, r1, #3
 8002646:	e667      	b.n	8002318 <__aeabi_dsub+0x2f0>
 8002648:	000a      	movs	r2, r1
 800264a:	08db      	lsrs	r3, r3, #3
 800264c:	433a      	orrs	r2, r7
 800264e:	d100      	bne.n	8002652 <__aeabi_dsub+0x62a>
 8002650:	e66f      	b.n	8002332 <__aeabi_dsub+0x30a>
 8002652:	4662      	mov	r2, ip
 8002654:	0752      	lsls	r2, r2, #29
 8002656:	4313      	orrs	r3, r2
 8002658:	4662      	mov	r2, ip
 800265a:	08d4      	lsrs	r4, r2, #3
 800265c:	2280      	movs	r2, #128	; 0x80
 800265e:	0312      	lsls	r2, r2, #12
 8002660:	4214      	tst	r4, r2
 8002662:	d007      	beq.n	8002674 <__aeabi_dsub+0x64c>
 8002664:	08c8      	lsrs	r0, r1, #3
 8002666:	4210      	tst	r0, r2
 8002668:	d104      	bne.n	8002674 <__aeabi_dsub+0x64c>
 800266a:	465d      	mov	r5, fp
 800266c:	0004      	movs	r4, r0
 800266e:	08fb      	lsrs	r3, r7, #3
 8002670:	0749      	lsls	r1, r1, #29
 8002672:	430b      	orrs	r3, r1
 8002674:	0f5a      	lsrs	r2, r3, #29
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	08db      	lsrs	r3, r3, #3
 800267a:	0752      	lsls	r2, r2, #29
 800267c:	4313      	orrs	r3, r2
 800267e:	e65d      	b.n	800233c <__aeabi_dsub+0x314>
 8002680:	074b      	lsls	r3, r1, #29
 8002682:	08ff      	lsrs	r7, r7, #3
 8002684:	433b      	orrs	r3, r7
 8002686:	08cc      	lsrs	r4, r1, #3
 8002688:	e649      	b.n	800231e <__aeabi_dsub+0x2f6>
 800268a:	19dc      	adds	r4, r3, r7
 800268c:	429c      	cmp	r4, r3
 800268e:	419b      	sbcs	r3, r3
 8002690:	4461      	add	r1, ip
 8002692:	4689      	mov	r9, r1
 8002694:	425b      	negs	r3, r3
 8002696:	4499      	add	r9, r3
 8002698:	464b      	mov	r3, r9
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	d400      	bmi.n	80026a0 <__aeabi_dsub+0x678>
 800269e:	e631      	b.n	8002304 <__aeabi_dsub+0x2dc>
 80026a0:	464a      	mov	r2, r9
 80026a2:	4b17      	ldr	r3, [pc, #92]	; (8002700 <__aeabi_dsub+0x6d8>)
 80026a4:	401a      	ands	r2, r3
 80026a6:	2301      	movs	r3, #1
 80026a8:	4691      	mov	r9, r2
 80026aa:	4698      	mov	r8, r3
 80026ac:	e62a      	b.n	8002304 <__aeabi_dsub+0x2dc>
 80026ae:	0016      	movs	r6, r2
 80026b0:	4664      	mov	r4, ip
 80026b2:	3e20      	subs	r6, #32
 80026b4:	40f4      	lsrs	r4, r6
 80026b6:	46a0      	mov	r8, r4
 80026b8:	2a20      	cmp	r2, #32
 80026ba:	d005      	beq.n	80026c8 <__aeabi_dsub+0x6a0>
 80026bc:	2640      	movs	r6, #64	; 0x40
 80026be:	4664      	mov	r4, ip
 80026c0:	1ab2      	subs	r2, r6, r2
 80026c2:	4094      	lsls	r4, r2
 80026c4:	4323      	orrs	r3, r4
 80026c6:	469a      	mov	sl, r3
 80026c8:	4654      	mov	r4, sl
 80026ca:	1e63      	subs	r3, r4, #1
 80026cc:	419c      	sbcs	r4, r3
 80026ce:	4643      	mov	r3, r8
 80026d0:	431c      	orrs	r4, r3
 80026d2:	e5db      	b.n	800228c <__aeabi_dsub+0x264>
 80026d4:	0002      	movs	r2, r0
 80026d6:	2400      	movs	r4, #0
 80026d8:	2300      	movs	r3, #0
 80026da:	e548      	b.n	800216e <__aeabi_dsub+0x146>
 80026dc:	19dc      	adds	r4, r3, r7
 80026de:	42bc      	cmp	r4, r7
 80026e0:	41bf      	sbcs	r7, r7
 80026e2:	4461      	add	r1, ip
 80026e4:	4689      	mov	r9, r1
 80026e6:	427f      	negs	r7, r7
 80026e8:	44b9      	add	r9, r7
 80026ea:	e738      	b.n	800255e <__aeabi_dsub+0x536>
 80026ec:	464b      	mov	r3, r9
 80026ee:	4323      	orrs	r3, r4
 80026f0:	d100      	bne.n	80026f4 <__aeabi_dsub+0x6cc>
 80026f2:	e69f      	b.n	8002434 <__aeabi_dsub+0x40c>
 80026f4:	e606      	b.n	8002304 <__aeabi_dsub+0x2dc>
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	000007fe 	.word	0x000007fe
 80026fc:	000007ff 	.word	0x000007ff
 8002700:	ff7fffff 	.word	0xff7fffff
 8002704:	08ff      	lsrs	r7, r7, #3
 8002706:	074b      	lsls	r3, r1, #29
 8002708:	433b      	orrs	r3, r7
 800270a:	08cc      	lsrs	r4, r1, #3
 800270c:	e616      	b.n	800233c <__aeabi_dsub+0x314>
 800270e:	4662      	mov	r2, ip
 8002710:	08db      	lsrs	r3, r3, #3
 8002712:	0752      	lsls	r2, r2, #29
 8002714:	4313      	orrs	r3, r2
 8002716:	4662      	mov	r2, ip
 8002718:	08d4      	lsrs	r4, r2, #3
 800271a:	2280      	movs	r2, #128	; 0x80
 800271c:	0312      	lsls	r2, r2, #12
 800271e:	4214      	tst	r4, r2
 8002720:	d007      	beq.n	8002732 <__aeabi_dsub+0x70a>
 8002722:	08c8      	lsrs	r0, r1, #3
 8002724:	4210      	tst	r0, r2
 8002726:	d104      	bne.n	8002732 <__aeabi_dsub+0x70a>
 8002728:	465d      	mov	r5, fp
 800272a:	0004      	movs	r4, r0
 800272c:	08fb      	lsrs	r3, r7, #3
 800272e:	0749      	lsls	r1, r1, #29
 8002730:	430b      	orrs	r3, r1
 8002732:	0f5a      	lsrs	r2, r3, #29
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	0752      	lsls	r2, r2, #29
 8002738:	08db      	lsrs	r3, r3, #3
 800273a:	4313      	orrs	r3, r2
 800273c:	e5fe      	b.n	800233c <__aeabi_dsub+0x314>
 800273e:	2300      	movs	r3, #0
 8002740:	4a01      	ldr	r2, [pc, #4]	; (8002748 <__aeabi_dsub+0x720>)
 8002742:	001c      	movs	r4, r3
 8002744:	e513      	b.n	800216e <__aeabi_dsub+0x146>
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	000007ff 	.word	0x000007ff

0800274c <__aeabi_i2d>:
 800274c:	b570      	push	{r4, r5, r6, lr}
 800274e:	2800      	cmp	r0, #0
 8002750:	d016      	beq.n	8002780 <__aeabi_i2d+0x34>
 8002752:	17c3      	asrs	r3, r0, #31
 8002754:	18c5      	adds	r5, r0, r3
 8002756:	405d      	eors	r5, r3
 8002758:	0fc4      	lsrs	r4, r0, #31
 800275a:	0028      	movs	r0, r5
 800275c:	f000 f930 	bl	80029c0 <__clzsi2>
 8002760:	4a11      	ldr	r2, [pc, #68]	; (80027a8 <__aeabi_i2d+0x5c>)
 8002762:	1a12      	subs	r2, r2, r0
 8002764:	280a      	cmp	r0, #10
 8002766:	dc16      	bgt.n	8002796 <__aeabi_i2d+0x4a>
 8002768:	0003      	movs	r3, r0
 800276a:	002e      	movs	r6, r5
 800276c:	3315      	adds	r3, #21
 800276e:	409e      	lsls	r6, r3
 8002770:	230b      	movs	r3, #11
 8002772:	1a18      	subs	r0, r3, r0
 8002774:	40c5      	lsrs	r5, r0
 8002776:	0552      	lsls	r2, r2, #21
 8002778:	032d      	lsls	r5, r5, #12
 800277a:	0b2d      	lsrs	r5, r5, #12
 800277c:	0d53      	lsrs	r3, r2, #21
 800277e:	e003      	b.n	8002788 <__aeabi_i2d+0x3c>
 8002780:	2400      	movs	r4, #0
 8002782:	2300      	movs	r3, #0
 8002784:	2500      	movs	r5, #0
 8002786:	2600      	movs	r6, #0
 8002788:	051b      	lsls	r3, r3, #20
 800278a:	432b      	orrs	r3, r5
 800278c:	07e4      	lsls	r4, r4, #31
 800278e:	4323      	orrs	r3, r4
 8002790:	0030      	movs	r0, r6
 8002792:	0019      	movs	r1, r3
 8002794:	bd70      	pop	{r4, r5, r6, pc}
 8002796:	380b      	subs	r0, #11
 8002798:	4085      	lsls	r5, r0
 800279a:	0552      	lsls	r2, r2, #21
 800279c:	032d      	lsls	r5, r5, #12
 800279e:	2600      	movs	r6, #0
 80027a0:	0b2d      	lsrs	r5, r5, #12
 80027a2:	0d53      	lsrs	r3, r2, #21
 80027a4:	e7f0      	b.n	8002788 <__aeabi_i2d+0x3c>
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	0000041e 	.word	0x0000041e

080027ac <__aeabi_f2d>:
 80027ac:	b570      	push	{r4, r5, r6, lr}
 80027ae:	0043      	lsls	r3, r0, #1
 80027b0:	0246      	lsls	r6, r0, #9
 80027b2:	0fc4      	lsrs	r4, r0, #31
 80027b4:	20fe      	movs	r0, #254	; 0xfe
 80027b6:	0e1b      	lsrs	r3, r3, #24
 80027b8:	1c59      	adds	r1, r3, #1
 80027ba:	0a75      	lsrs	r5, r6, #9
 80027bc:	4208      	tst	r0, r1
 80027be:	d00c      	beq.n	80027da <__aeabi_f2d+0x2e>
 80027c0:	22e0      	movs	r2, #224	; 0xe0
 80027c2:	0092      	lsls	r2, r2, #2
 80027c4:	4694      	mov	ip, r2
 80027c6:	076d      	lsls	r5, r5, #29
 80027c8:	0b36      	lsrs	r6, r6, #12
 80027ca:	4463      	add	r3, ip
 80027cc:	051b      	lsls	r3, r3, #20
 80027ce:	4333      	orrs	r3, r6
 80027d0:	07e4      	lsls	r4, r4, #31
 80027d2:	4323      	orrs	r3, r4
 80027d4:	0028      	movs	r0, r5
 80027d6:	0019      	movs	r1, r3
 80027d8:	bd70      	pop	{r4, r5, r6, pc}
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d114      	bne.n	8002808 <__aeabi_f2d+0x5c>
 80027de:	2d00      	cmp	r5, #0
 80027e0:	d01b      	beq.n	800281a <__aeabi_f2d+0x6e>
 80027e2:	0028      	movs	r0, r5
 80027e4:	f000 f8ec 	bl	80029c0 <__clzsi2>
 80027e8:	280a      	cmp	r0, #10
 80027ea:	dc1c      	bgt.n	8002826 <__aeabi_f2d+0x7a>
 80027ec:	230b      	movs	r3, #11
 80027ee:	002e      	movs	r6, r5
 80027f0:	1a1b      	subs	r3, r3, r0
 80027f2:	40de      	lsrs	r6, r3
 80027f4:	0003      	movs	r3, r0
 80027f6:	3315      	adds	r3, #21
 80027f8:	409d      	lsls	r5, r3
 80027fa:	4a0e      	ldr	r2, [pc, #56]	; (8002834 <__aeabi_f2d+0x88>)
 80027fc:	0336      	lsls	r6, r6, #12
 80027fe:	1a12      	subs	r2, r2, r0
 8002800:	0552      	lsls	r2, r2, #21
 8002802:	0b36      	lsrs	r6, r6, #12
 8002804:	0d53      	lsrs	r3, r2, #21
 8002806:	e7e1      	b.n	80027cc <__aeabi_f2d+0x20>
 8002808:	2d00      	cmp	r5, #0
 800280a:	d009      	beq.n	8002820 <__aeabi_f2d+0x74>
 800280c:	2280      	movs	r2, #128	; 0x80
 800280e:	0b36      	lsrs	r6, r6, #12
 8002810:	0312      	lsls	r2, r2, #12
 8002812:	4b09      	ldr	r3, [pc, #36]	; (8002838 <__aeabi_f2d+0x8c>)
 8002814:	076d      	lsls	r5, r5, #29
 8002816:	4316      	orrs	r6, r2
 8002818:	e7d8      	b.n	80027cc <__aeabi_f2d+0x20>
 800281a:	2300      	movs	r3, #0
 800281c:	2600      	movs	r6, #0
 800281e:	e7d5      	b.n	80027cc <__aeabi_f2d+0x20>
 8002820:	2600      	movs	r6, #0
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <__aeabi_f2d+0x8c>)
 8002824:	e7d2      	b.n	80027cc <__aeabi_f2d+0x20>
 8002826:	0003      	movs	r3, r0
 8002828:	3b0b      	subs	r3, #11
 800282a:	409d      	lsls	r5, r3
 800282c:	002e      	movs	r6, r5
 800282e:	2500      	movs	r5, #0
 8002830:	e7e3      	b.n	80027fa <__aeabi_f2d+0x4e>
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	00000389 	.word	0x00000389
 8002838:	000007ff 	.word	0x000007ff

0800283c <__aeabi_d2f>:
 800283c:	0002      	movs	r2, r0
 800283e:	004b      	lsls	r3, r1, #1
 8002840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002842:	0d5b      	lsrs	r3, r3, #21
 8002844:	030c      	lsls	r4, r1, #12
 8002846:	4e3d      	ldr	r6, [pc, #244]	; (800293c <__aeabi_d2f+0x100>)
 8002848:	0a64      	lsrs	r4, r4, #9
 800284a:	0f40      	lsrs	r0, r0, #29
 800284c:	1c5f      	adds	r7, r3, #1
 800284e:	0fc9      	lsrs	r1, r1, #31
 8002850:	4304      	orrs	r4, r0
 8002852:	00d5      	lsls	r5, r2, #3
 8002854:	4237      	tst	r7, r6
 8002856:	d00a      	beq.n	800286e <__aeabi_d2f+0x32>
 8002858:	4839      	ldr	r0, [pc, #228]	; (8002940 <__aeabi_d2f+0x104>)
 800285a:	181e      	adds	r6, r3, r0
 800285c:	2efe      	cmp	r6, #254	; 0xfe
 800285e:	dd16      	ble.n	800288e <__aeabi_d2f+0x52>
 8002860:	20ff      	movs	r0, #255	; 0xff
 8002862:	2400      	movs	r4, #0
 8002864:	05c0      	lsls	r0, r0, #23
 8002866:	4320      	orrs	r0, r4
 8002868:	07c9      	lsls	r1, r1, #31
 800286a:	4308      	orrs	r0, r1
 800286c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <__aeabi_d2f+0x44>
 8002872:	432c      	orrs	r4, r5
 8002874:	d026      	beq.n	80028c4 <__aeabi_d2f+0x88>
 8002876:	2205      	movs	r2, #5
 8002878:	0192      	lsls	r2, r2, #6
 800287a:	0a54      	lsrs	r4, r2, #9
 800287c:	b2d8      	uxtb	r0, r3
 800287e:	e7f1      	b.n	8002864 <__aeabi_d2f+0x28>
 8002880:	4325      	orrs	r5, r4
 8002882:	d0ed      	beq.n	8002860 <__aeabi_d2f+0x24>
 8002884:	2080      	movs	r0, #128	; 0x80
 8002886:	03c0      	lsls	r0, r0, #15
 8002888:	4304      	orrs	r4, r0
 800288a:	20ff      	movs	r0, #255	; 0xff
 800288c:	e7ea      	b.n	8002864 <__aeabi_d2f+0x28>
 800288e:	2e00      	cmp	r6, #0
 8002890:	dd1b      	ble.n	80028ca <__aeabi_d2f+0x8e>
 8002892:	0192      	lsls	r2, r2, #6
 8002894:	1e53      	subs	r3, r2, #1
 8002896:	419a      	sbcs	r2, r3
 8002898:	00e4      	lsls	r4, r4, #3
 800289a:	0f6d      	lsrs	r5, r5, #29
 800289c:	4322      	orrs	r2, r4
 800289e:	432a      	orrs	r2, r5
 80028a0:	0753      	lsls	r3, r2, #29
 80028a2:	d048      	beq.n	8002936 <__aeabi_d2f+0xfa>
 80028a4:	230f      	movs	r3, #15
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d000      	beq.n	80028ae <__aeabi_d2f+0x72>
 80028ac:	3204      	adds	r2, #4
 80028ae:	2380      	movs	r3, #128	; 0x80
 80028b0:	04db      	lsls	r3, r3, #19
 80028b2:	4013      	ands	r3, r2
 80028b4:	d03f      	beq.n	8002936 <__aeabi_d2f+0xfa>
 80028b6:	1c70      	adds	r0, r6, #1
 80028b8:	2efe      	cmp	r6, #254	; 0xfe
 80028ba:	d0d1      	beq.n	8002860 <__aeabi_d2f+0x24>
 80028bc:	0192      	lsls	r2, r2, #6
 80028be:	0a54      	lsrs	r4, r2, #9
 80028c0:	b2c0      	uxtb	r0, r0
 80028c2:	e7cf      	b.n	8002864 <__aeabi_d2f+0x28>
 80028c4:	2000      	movs	r0, #0
 80028c6:	2400      	movs	r4, #0
 80028c8:	e7cc      	b.n	8002864 <__aeabi_d2f+0x28>
 80028ca:	0032      	movs	r2, r6
 80028cc:	3217      	adds	r2, #23
 80028ce:	db22      	blt.n	8002916 <__aeabi_d2f+0xda>
 80028d0:	2080      	movs	r0, #128	; 0x80
 80028d2:	0400      	lsls	r0, r0, #16
 80028d4:	4320      	orrs	r0, r4
 80028d6:	241e      	movs	r4, #30
 80028d8:	1ba4      	subs	r4, r4, r6
 80028da:	2c1f      	cmp	r4, #31
 80028dc:	dd1d      	ble.n	800291a <__aeabi_d2f+0xde>
 80028de:	2202      	movs	r2, #2
 80028e0:	4252      	negs	r2, r2
 80028e2:	1b96      	subs	r6, r2, r6
 80028e4:	0002      	movs	r2, r0
 80028e6:	40f2      	lsrs	r2, r6
 80028e8:	0016      	movs	r6, r2
 80028ea:	2c20      	cmp	r4, #32
 80028ec:	d004      	beq.n	80028f8 <__aeabi_d2f+0xbc>
 80028ee:	4a15      	ldr	r2, [pc, #84]	; (8002944 <__aeabi_d2f+0x108>)
 80028f0:	4694      	mov	ip, r2
 80028f2:	4463      	add	r3, ip
 80028f4:	4098      	lsls	r0, r3
 80028f6:	4305      	orrs	r5, r0
 80028f8:	002a      	movs	r2, r5
 80028fa:	1e53      	subs	r3, r2, #1
 80028fc:	419a      	sbcs	r2, r3
 80028fe:	4332      	orrs	r2, r6
 8002900:	2600      	movs	r6, #0
 8002902:	0753      	lsls	r3, r2, #29
 8002904:	d1ce      	bne.n	80028a4 <__aeabi_d2f+0x68>
 8002906:	2480      	movs	r4, #128	; 0x80
 8002908:	0013      	movs	r3, r2
 800290a:	04e4      	lsls	r4, r4, #19
 800290c:	2001      	movs	r0, #1
 800290e:	4023      	ands	r3, r4
 8002910:	4222      	tst	r2, r4
 8002912:	d1d3      	bne.n	80028bc <__aeabi_d2f+0x80>
 8002914:	e7b0      	b.n	8002878 <__aeabi_d2f+0x3c>
 8002916:	2300      	movs	r3, #0
 8002918:	e7ad      	b.n	8002876 <__aeabi_d2f+0x3a>
 800291a:	4a0b      	ldr	r2, [pc, #44]	; (8002948 <__aeabi_d2f+0x10c>)
 800291c:	4694      	mov	ip, r2
 800291e:	002a      	movs	r2, r5
 8002920:	40e2      	lsrs	r2, r4
 8002922:	0014      	movs	r4, r2
 8002924:	002a      	movs	r2, r5
 8002926:	4463      	add	r3, ip
 8002928:	409a      	lsls	r2, r3
 800292a:	4098      	lsls	r0, r3
 800292c:	1e55      	subs	r5, r2, #1
 800292e:	41aa      	sbcs	r2, r5
 8002930:	4302      	orrs	r2, r0
 8002932:	4322      	orrs	r2, r4
 8002934:	e7e4      	b.n	8002900 <__aeabi_d2f+0xc4>
 8002936:	0033      	movs	r3, r6
 8002938:	e79e      	b.n	8002878 <__aeabi_d2f+0x3c>
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	000007fe 	.word	0x000007fe
 8002940:	fffffc80 	.word	0xfffffc80
 8002944:	fffffca2 	.word	0xfffffca2
 8002948:	fffffc82 	.word	0xfffffc82

0800294c <__aeabi_cfrcmple>:
 800294c:	4684      	mov	ip, r0
 800294e:	0008      	movs	r0, r1
 8002950:	4661      	mov	r1, ip
 8002952:	e7ff      	b.n	8002954 <__aeabi_cfcmpeq>

08002954 <__aeabi_cfcmpeq>:
 8002954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002956:	f000 f8c9 	bl	8002aec <__lesf2>
 800295a:	2800      	cmp	r0, #0
 800295c:	d401      	bmi.n	8002962 <__aeabi_cfcmpeq+0xe>
 800295e:	2100      	movs	r1, #0
 8002960:	42c8      	cmn	r0, r1
 8002962:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002964 <__aeabi_fcmpeq>:
 8002964:	b510      	push	{r4, lr}
 8002966:	f000 f855 	bl	8002a14 <__eqsf2>
 800296a:	4240      	negs	r0, r0
 800296c:	3001      	adds	r0, #1
 800296e:	bd10      	pop	{r4, pc}

08002970 <__aeabi_fcmplt>:
 8002970:	b510      	push	{r4, lr}
 8002972:	f000 f8bb 	bl	8002aec <__lesf2>
 8002976:	2800      	cmp	r0, #0
 8002978:	db01      	blt.n	800297e <__aeabi_fcmplt+0xe>
 800297a:	2000      	movs	r0, #0
 800297c:	bd10      	pop	{r4, pc}
 800297e:	2001      	movs	r0, #1
 8002980:	bd10      	pop	{r4, pc}
 8002982:	46c0      	nop			; (mov r8, r8)

08002984 <__aeabi_fcmple>:
 8002984:	b510      	push	{r4, lr}
 8002986:	f000 f8b1 	bl	8002aec <__lesf2>
 800298a:	2800      	cmp	r0, #0
 800298c:	dd01      	ble.n	8002992 <__aeabi_fcmple+0xe>
 800298e:	2000      	movs	r0, #0
 8002990:	bd10      	pop	{r4, pc}
 8002992:	2001      	movs	r0, #1
 8002994:	bd10      	pop	{r4, pc}
 8002996:	46c0      	nop			; (mov r8, r8)

08002998 <__aeabi_fcmpgt>:
 8002998:	b510      	push	{r4, lr}
 800299a:	f000 f861 	bl	8002a60 <__gesf2>
 800299e:	2800      	cmp	r0, #0
 80029a0:	dc01      	bgt.n	80029a6 <__aeabi_fcmpgt+0xe>
 80029a2:	2000      	movs	r0, #0
 80029a4:	bd10      	pop	{r4, pc}
 80029a6:	2001      	movs	r0, #1
 80029a8:	bd10      	pop	{r4, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)

080029ac <__aeabi_fcmpge>:
 80029ac:	b510      	push	{r4, lr}
 80029ae:	f000 f857 	bl	8002a60 <__gesf2>
 80029b2:	2800      	cmp	r0, #0
 80029b4:	da01      	bge.n	80029ba <__aeabi_fcmpge+0xe>
 80029b6:	2000      	movs	r0, #0
 80029b8:	bd10      	pop	{r4, pc}
 80029ba:	2001      	movs	r0, #1
 80029bc:	bd10      	pop	{r4, pc}
 80029be:	46c0      	nop			; (mov r8, r8)

080029c0 <__clzsi2>:
 80029c0:	211c      	movs	r1, #28
 80029c2:	2301      	movs	r3, #1
 80029c4:	041b      	lsls	r3, r3, #16
 80029c6:	4298      	cmp	r0, r3
 80029c8:	d301      	bcc.n	80029ce <__clzsi2+0xe>
 80029ca:	0c00      	lsrs	r0, r0, #16
 80029cc:	3910      	subs	r1, #16
 80029ce:	0a1b      	lsrs	r3, r3, #8
 80029d0:	4298      	cmp	r0, r3
 80029d2:	d301      	bcc.n	80029d8 <__clzsi2+0x18>
 80029d4:	0a00      	lsrs	r0, r0, #8
 80029d6:	3908      	subs	r1, #8
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	4298      	cmp	r0, r3
 80029dc:	d301      	bcc.n	80029e2 <__clzsi2+0x22>
 80029de:	0900      	lsrs	r0, r0, #4
 80029e0:	3904      	subs	r1, #4
 80029e2:	a202      	add	r2, pc, #8	; (adr r2, 80029ec <__clzsi2+0x2c>)
 80029e4:	5c10      	ldrb	r0, [r2, r0]
 80029e6:	1840      	adds	r0, r0, r1
 80029e8:	4770      	bx	lr
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	02020304 	.word	0x02020304
 80029f0:	01010101 	.word	0x01010101
	...

080029fc <__clzdi2>:
 80029fc:	b510      	push	{r4, lr}
 80029fe:	2900      	cmp	r1, #0
 8002a00:	d103      	bne.n	8002a0a <__clzdi2+0xe>
 8002a02:	f7ff ffdd 	bl	80029c0 <__clzsi2>
 8002a06:	3020      	adds	r0, #32
 8002a08:	e002      	b.n	8002a10 <__clzdi2+0x14>
 8002a0a:	0008      	movs	r0, r1
 8002a0c:	f7ff ffd8 	bl	80029c0 <__clzsi2>
 8002a10:	bd10      	pop	{r4, pc}
 8002a12:	46c0      	nop			; (mov r8, r8)

08002a14 <__eqsf2>:
 8002a14:	b570      	push	{r4, r5, r6, lr}
 8002a16:	0042      	lsls	r2, r0, #1
 8002a18:	0245      	lsls	r5, r0, #9
 8002a1a:	024e      	lsls	r6, r1, #9
 8002a1c:	004c      	lsls	r4, r1, #1
 8002a1e:	0fc3      	lsrs	r3, r0, #31
 8002a20:	0a6d      	lsrs	r5, r5, #9
 8002a22:	2001      	movs	r0, #1
 8002a24:	0e12      	lsrs	r2, r2, #24
 8002a26:	0a76      	lsrs	r6, r6, #9
 8002a28:	0e24      	lsrs	r4, r4, #24
 8002a2a:	0fc9      	lsrs	r1, r1, #31
 8002a2c:	2aff      	cmp	r2, #255	; 0xff
 8002a2e:	d006      	beq.n	8002a3e <__eqsf2+0x2a>
 8002a30:	2cff      	cmp	r4, #255	; 0xff
 8002a32:	d003      	beq.n	8002a3c <__eqsf2+0x28>
 8002a34:	42a2      	cmp	r2, r4
 8002a36:	d101      	bne.n	8002a3c <__eqsf2+0x28>
 8002a38:	42b5      	cmp	r5, r6
 8002a3a:	d006      	beq.n	8002a4a <__eqsf2+0x36>
 8002a3c:	bd70      	pop	{r4, r5, r6, pc}
 8002a3e:	2d00      	cmp	r5, #0
 8002a40:	d1fc      	bne.n	8002a3c <__eqsf2+0x28>
 8002a42:	2cff      	cmp	r4, #255	; 0xff
 8002a44:	d1fa      	bne.n	8002a3c <__eqsf2+0x28>
 8002a46:	2e00      	cmp	r6, #0
 8002a48:	d1f8      	bne.n	8002a3c <__eqsf2+0x28>
 8002a4a:	428b      	cmp	r3, r1
 8002a4c:	d006      	beq.n	8002a5c <__eqsf2+0x48>
 8002a4e:	2001      	movs	r0, #1
 8002a50:	2a00      	cmp	r2, #0
 8002a52:	d1f3      	bne.n	8002a3c <__eqsf2+0x28>
 8002a54:	0028      	movs	r0, r5
 8002a56:	1e43      	subs	r3, r0, #1
 8002a58:	4198      	sbcs	r0, r3
 8002a5a:	e7ef      	b.n	8002a3c <__eqsf2+0x28>
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	e7ed      	b.n	8002a3c <__eqsf2+0x28>

08002a60 <__gesf2>:
 8002a60:	b570      	push	{r4, r5, r6, lr}
 8002a62:	0042      	lsls	r2, r0, #1
 8002a64:	0245      	lsls	r5, r0, #9
 8002a66:	024e      	lsls	r6, r1, #9
 8002a68:	004c      	lsls	r4, r1, #1
 8002a6a:	0fc3      	lsrs	r3, r0, #31
 8002a6c:	0a6d      	lsrs	r5, r5, #9
 8002a6e:	0e12      	lsrs	r2, r2, #24
 8002a70:	0a76      	lsrs	r6, r6, #9
 8002a72:	0e24      	lsrs	r4, r4, #24
 8002a74:	0fc8      	lsrs	r0, r1, #31
 8002a76:	2aff      	cmp	r2, #255	; 0xff
 8002a78:	d01b      	beq.n	8002ab2 <__gesf2+0x52>
 8002a7a:	2cff      	cmp	r4, #255	; 0xff
 8002a7c:	d00e      	beq.n	8002a9c <__gesf2+0x3c>
 8002a7e:	2a00      	cmp	r2, #0
 8002a80:	d11b      	bne.n	8002aba <__gesf2+0x5a>
 8002a82:	2c00      	cmp	r4, #0
 8002a84:	d101      	bne.n	8002a8a <__gesf2+0x2a>
 8002a86:	2e00      	cmp	r6, #0
 8002a88:	d01c      	beq.n	8002ac4 <__gesf2+0x64>
 8002a8a:	2d00      	cmp	r5, #0
 8002a8c:	d00c      	beq.n	8002aa8 <__gesf2+0x48>
 8002a8e:	4283      	cmp	r3, r0
 8002a90:	d01c      	beq.n	8002acc <__gesf2+0x6c>
 8002a92:	2102      	movs	r1, #2
 8002a94:	1e58      	subs	r0, r3, #1
 8002a96:	4008      	ands	r0, r1
 8002a98:	3801      	subs	r0, #1
 8002a9a:	bd70      	pop	{r4, r5, r6, pc}
 8002a9c:	2e00      	cmp	r6, #0
 8002a9e:	d122      	bne.n	8002ae6 <__gesf2+0x86>
 8002aa0:	2a00      	cmp	r2, #0
 8002aa2:	d1f4      	bne.n	8002a8e <__gesf2+0x2e>
 8002aa4:	2d00      	cmp	r5, #0
 8002aa6:	d1f2      	bne.n	8002a8e <__gesf2+0x2e>
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	d1f6      	bne.n	8002a9a <__gesf2+0x3a>
 8002aac:	2001      	movs	r0, #1
 8002aae:	4240      	negs	r0, r0
 8002ab0:	e7f3      	b.n	8002a9a <__gesf2+0x3a>
 8002ab2:	2d00      	cmp	r5, #0
 8002ab4:	d117      	bne.n	8002ae6 <__gesf2+0x86>
 8002ab6:	2cff      	cmp	r4, #255	; 0xff
 8002ab8:	d0f0      	beq.n	8002a9c <__gesf2+0x3c>
 8002aba:	2c00      	cmp	r4, #0
 8002abc:	d1e7      	bne.n	8002a8e <__gesf2+0x2e>
 8002abe:	2e00      	cmp	r6, #0
 8002ac0:	d1e5      	bne.n	8002a8e <__gesf2+0x2e>
 8002ac2:	e7e6      	b.n	8002a92 <__gesf2+0x32>
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	2d00      	cmp	r5, #0
 8002ac8:	d0e7      	beq.n	8002a9a <__gesf2+0x3a>
 8002aca:	e7e2      	b.n	8002a92 <__gesf2+0x32>
 8002acc:	42a2      	cmp	r2, r4
 8002ace:	dc05      	bgt.n	8002adc <__gesf2+0x7c>
 8002ad0:	dbea      	blt.n	8002aa8 <__gesf2+0x48>
 8002ad2:	42b5      	cmp	r5, r6
 8002ad4:	d802      	bhi.n	8002adc <__gesf2+0x7c>
 8002ad6:	d3e7      	bcc.n	8002aa8 <__gesf2+0x48>
 8002ad8:	2000      	movs	r0, #0
 8002ada:	e7de      	b.n	8002a9a <__gesf2+0x3a>
 8002adc:	4243      	negs	r3, r0
 8002ade:	4158      	adcs	r0, r3
 8002ae0:	0040      	lsls	r0, r0, #1
 8002ae2:	3801      	subs	r0, #1
 8002ae4:	e7d9      	b.n	8002a9a <__gesf2+0x3a>
 8002ae6:	2002      	movs	r0, #2
 8002ae8:	4240      	negs	r0, r0
 8002aea:	e7d6      	b.n	8002a9a <__gesf2+0x3a>

08002aec <__lesf2>:
 8002aec:	b570      	push	{r4, r5, r6, lr}
 8002aee:	0042      	lsls	r2, r0, #1
 8002af0:	0245      	lsls	r5, r0, #9
 8002af2:	024e      	lsls	r6, r1, #9
 8002af4:	004c      	lsls	r4, r1, #1
 8002af6:	0fc3      	lsrs	r3, r0, #31
 8002af8:	0a6d      	lsrs	r5, r5, #9
 8002afa:	0e12      	lsrs	r2, r2, #24
 8002afc:	0a76      	lsrs	r6, r6, #9
 8002afe:	0e24      	lsrs	r4, r4, #24
 8002b00:	0fc8      	lsrs	r0, r1, #31
 8002b02:	2aff      	cmp	r2, #255	; 0xff
 8002b04:	d00b      	beq.n	8002b1e <__lesf2+0x32>
 8002b06:	2cff      	cmp	r4, #255	; 0xff
 8002b08:	d00d      	beq.n	8002b26 <__lesf2+0x3a>
 8002b0a:	2a00      	cmp	r2, #0
 8002b0c:	d11f      	bne.n	8002b4e <__lesf2+0x62>
 8002b0e:	2c00      	cmp	r4, #0
 8002b10:	d116      	bne.n	8002b40 <__lesf2+0x54>
 8002b12:	2e00      	cmp	r6, #0
 8002b14:	d114      	bne.n	8002b40 <__lesf2+0x54>
 8002b16:	2000      	movs	r0, #0
 8002b18:	2d00      	cmp	r5, #0
 8002b1a:	d010      	beq.n	8002b3e <__lesf2+0x52>
 8002b1c:	e009      	b.n	8002b32 <__lesf2+0x46>
 8002b1e:	2d00      	cmp	r5, #0
 8002b20:	d10c      	bne.n	8002b3c <__lesf2+0x50>
 8002b22:	2cff      	cmp	r4, #255	; 0xff
 8002b24:	d113      	bne.n	8002b4e <__lesf2+0x62>
 8002b26:	2e00      	cmp	r6, #0
 8002b28:	d108      	bne.n	8002b3c <__lesf2+0x50>
 8002b2a:	2a00      	cmp	r2, #0
 8002b2c:	d008      	beq.n	8002b40 <__lesf2+0x54>
 8002b2e:	4283      	cmp	r3, r0
 8002b30:	d012      	beq.n	8002b58 <__lesf2+0x6c>
 8002b32:	2102      	movs	r1, #2
 8002b34:	1e58      	subs	r0, r3, #1
 8002b36:	4008      	ands	r0, r1
 8002b38:	3801      	subs	r0, #1
 8002b3a:	e000      	b.n	8002b3e <__lesf2+0x52>
 8002b3c:	2002      	movs	r0, #2
 8002b3e:	bd70      	pop	{r4, r5, r6, pc}
 8002b40:	2d00      	cmp	r5, #0
 8002b42:	d1f4      	bne.n	8002b2e <__lesf2+0x42>
 8002b44:	2800      	cmp	r0, #0
 8002b46:	d1fa      	bne.n	8002b3e <__lesf2+0x52>
 8002b48:	2001      	movs	r0, #1
 8002b4a:	4240      	negs	r0, r0
 8002b4c:	e7f7      	b.n	8002b3e <__lesf2+0x52>
 8002b4e:	2c00      	cmp	r4, #0
 8002b50:	d1ed      	bne.n	8002b2e <__lesf2+0x42>
 8002b52:	2e00      	cmp	r6, #0
 8002b54:	d1eb      	bne.n	8002b2e <__lesf2+0x42>
 8002b56:	e7ec      	b.n	8002b32 <__lesf2+0x46>
 8002b58:	42a2      	cmp	r2, r4
 8002b5a:	dc05      	bgt.n	8002b68 <__lesf2+0x7c>
 8002b5c:	dbf2      	blt.n	8002b44 <__lesf2+0x58>
 8002b5e:	42b5      	cmp	r5, r6
 8002b60:	d802      	bhi.n	8002b68 <__lesf2+0x7c>
 8002b62:	d3ef      	bcc.n	8002b44 <__lesf2+0x58>
 8002b64:	2000      	movs	r0, #0
 8002b66:	e7ea      	b.n	8002b3e <__lesf2+0x52>
 8002b68:	4243      	negs	r3, r0
 8002b6a:	4158      	adcs	r0, r3
 8002b6c:	0040      	lsls	r0, r0, #1
 8002b6e:	3801      	subs	r0, #1
 8002b70:	e7e5      	b.n	8002b3e <__lesf2+0x52>
 8002b72:	46c0      	nop			; (mov r8, r8)

08002b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b76:	46de      	mov	lr, fp
 8002b78:	4657      	mov	r7, sl
 8002b7a:	464e      	mov	r6, r9
 8002b7c:	4645      	mov	r5, r8
 8002b7e:	b5e0      	push	{r5, r6, r7, lr}
 8002b80:	b0a5      	sub	sp, #148	; 0x94
 8002b82:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b84:	f000 fd82 	bl	800368c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b88:	f000 f8d0 	bl	8002d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b8c:	f000 fa4e 	bl	800302c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002b90:	f000 f93e 	bl	8002e10 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002b94:	f000 fa1a 	bl	8002fcc <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002b98:	f000 f97a 	bl	8002e90 <MX_RTC_Init>
//      }
//  }
//  HAL_UART_Transmit(&huart1, EndMSG, sizeof(EndMSG), 10000);
	/*--[ Scanning Done ]--*/

	SHT2x_Init(&hi2c1);
 8002b9c:	4b58      	ldr	r3, [pc, #352]	; (8002d00 <main+0x18c>)
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f000 fbd8 	bl	8003354 <SHT2x_Init>
	SHT2x_SetResolution(RES_14_12);
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f000 fcb9 	bl	800351c <SHT2x_SetResolution>

    /* USER CODE BEGIN 3 */
//		printf("hello_world!\r\n");
//		HAL_UART_Transmit(&huart1, Tx, sizeof(Tx), 1000);

		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002baa:	4956      	ldr	r1, [pc, #344]	; (8002d04 <main+0x190>)
 8002bac:	4b56      	ldr	r3, [pc, #344]	; (8002d08 <main+0x194>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f002 ff03 	bl	80059bc <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002bb6:	4955      	ldr	r1, [pc, #340]	; (8002d0c <main+0x198>)
 8002bb8:	4b53      	ldr	r3, [pc, #332]	; (8002d08 <main+0x194>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f002 ffef 	bl	8005ba0 <HAL_RTC_GetDate>

		sprintf(time, "Time: %02d.%02d.%02d\r\n", sTime.Hours, sTime.Minutes,sTime.Seconds);
 8002bc2:	4b50      	ldr	r3, [pc, #320]	; (8002d04 <main+0x190>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	001a      	movs	r2, r3
 8002bc8:	4b4e      	ldr	r3, [pc, #312]	; (8002d04 <main+0x190>)
 8002bca:	785b      	ldrb	r3, [r3, #1]
 8002bcc:	001c      	movs	r4, r3
 8002bce:	4b4d      	ldr	r3, [pc, #308]	; (8002d04 <main+0x190>)
 8002bd0:	789b      	ldrb	r3, [r3, #2]
 8002bd2:	494f      	ldr	r1, [pc, #316]	; (8002d10 <main+0x19c>)
 8002bd4:	484f      	ldr	r0, [pc, #316]	; (8002d14 <main+0x1a0>)
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	0023      	movs	r3, r4
 8002bda:	f004 f893 	bl	8006d04 <siprintf>

		sprintf(date, "Date: %02d.%02d.%02d\t", sDate.Date, sDate.Month,sDate.Year);
 8002bde:	4b4b      	ldr	r3, [pc, #300]	; (8002d0c <main+0x198>)
 8002be0:	789b      	ldrb	r3, [r3, #2]
 8002be2:	001a      	movs	r2, r3
 8002be4:	4b49      	ldr	r3, [pc, #292]	; (8002d0c <main+0x198>)
 8002be6:	785b      	ldrb	r3, [r3, #1]
 8002be8:	001c      	movs	r4, r3
 8002bea:	4b48      	ldr	r3, [pc, #288]	; (8002d0c <main+0x198>)
 8002bec:	78db      	ldrb	r3, [r3, #3]
 8002bee:	494a      	ldr	r1, [pc, #296]	; (8002d18 <main+0x1a4>)
 8002bf0:	484a      	ldr	r0, [pc, #296]	; (8002d1c <main+0x1a8>)
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	0023      	movs	r3, r4
 8002bf6:	f004 f885 	bl	8006d04 <siprintf>

		HAL_UART_Transmit(&huart1, (uint8_t*) date, sizeof(date), 300);
 8002bfa:	2396      	movs	r3, #150	; 0x96
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	4947      	ldr	r1, [pc, #284]	; (8002d1c <main+0x1a8>)
 8002c00:	4847      	ldr	r0, [pc, #284]	; (8002d20 <main+0x1ac>)
 8002c02:	221e      	movs	r2, #30
 8002c04:	f003 fafe 	bl	8006204 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*) time, sizeof(time), 300);
 8002c08:	2396      	movs	r3, #150	; 0x96
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4941      	ldr	r1, [pc, #260]	; (8002d14 <main+0x1a0>)
 8002c0e:	4844      	ldr	r0, [pc, #272]	; (8002d20 <main+0x1ac>)
 8002c10:	221e      	movs	r2, #30
 8002c12:	f003 faf7 	bl	8006204 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8002c16:	23fa      	movs	r3, #250	; 0xfa
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f000 fda6 	bl	800376c <HAL_Delay>

if (flag ==1){
 8002c20:	4b40      	ldr	r3, [pc, #256]	; (8002d24 <main+0x1b0>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d1c0      	bne.n	8002baa <main+0x36>
	unsigned char buffer[100] = { 0 };
 8002c28:	1d3b      	adds	r3, r7, #4
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	2260      	movs	r2, #96	; 0x60
 8002c32:	2100      	movs	r1, #0
 8002c34:	0018      	movs	r0, r3
 8002c36:	f004 f85d 	bl	8006cf4 <memset>
					/* Gets current temperature & relative humidity. */
					float cel = SHT2x_GetTemperature(1);
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	f000 fbee 	bl	800341c <SHT2x_GetTemperature>
 8002c40:	1c03      	adds	r3, r0, #0
 8002c42:	677b      	str	r3, [r7, #116]	; 0x74
					/* Converts temperature to degrees Fahrenheit and Kelvin */
					float fah = SHT2x_CelsiusToFahrenheit(cel);
 8002c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c46:	1c18      	adds	r0, r3, #0
 8002c48:	f000 fc9a 	bl	8003580 <SHT2x_CelsiusToFahrenheit>
 8002c4c:	1c03      	adds	r3, r0, #0
 8002c4e:	673b      	str	r3, [r7, #112]	; 0x70
					float kel = SHT2x_CelsiusToKelvin(cel);
 8002c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c52:	1c18      	adds	r0, r3, #0
 8002c54:	f000 fcb8 	bl	80035c8 <SHT2x_CelsiusToKelvin>
 8002c58:	1c03      	adds	r3, r0, #0
 8002c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
					float rh = SHT2x_GetRelativeHumidity(1);
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	f000 fc1f 	bl	80034a0 <SHT2x_GetRelativeHumidity>
 8002c62:	1c03      	adds	r3, r0, #0
 8002c64:	66bb      	str	r3, [r7, #104]	; 0x68
					/* May show warning below. Ignore and proceed. */
					sprintf(buffer, "%d.%dºC, %d.%dºF, %d.%d K, %d.%d%% RH\n",
 8002c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c68:	1c18      	adds	r0, r3, #0
 8002c6a:	f000 fcbd 	bl	80035e8 <SHT2x_GetInteger>
 8002c6e:	4682      	mov	sl, r0
 8002c70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c72:	2101      	movs	r1, #1
 8002c74:	1c18      	adds	r0, r3, #0
 8002c76:	f000 fcc3 	bl	8003600 <SHT2x_GetDecimal>
 8002c7a:	4683      	mov	fp, r0
 8002c7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c7e:	1c18      	adds	r0, r3, #0
 8002c80:	f000 fcb2 	bl	80035e8 <SHT2x_GetInteger>
 8002c84:	0004      	movs	r4, r0
 8002c86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c88:	2101      	movs	r1, #1
 8002c8a:	1c18      	adds	r0, r3, #0
 8002c8c:	f000 fcb8 	bl	8003600 <SHT2x_GetDecimal>
 8002c90:	0005      	movs	r5, r0
 8002c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c94:	1c18      	adds	r0, r3, #0
 8002c96:	f000 fca7 	bl	80035e8 <SHT2x_GetInteger>
 8002c9a:	0006      	movs	r6, r0
 8002c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	1c18      	adds	r0, r3, #0
 8002ca2:	f000 fcad 	bl	8003600 <SHT2x_GetDecimal>
 8002ca6:	4680      	mov	r8, r0
 8002ca8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002caa:	1c18      	adds	r0, r3, #0
 8002cac:	f000 fc9c 	bl	80035e8 <SHT2x_GetInteger>
 8002cb0:	4681      	mov	r9, r0
 8002cb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	1c18      	adds	r0, r3, #0
 8002cb8:	f000 fca2 	bl	8003600 <SHT2x_GetDecimal>
 8002cbc:	0003      	movs	r3, r0
 8002cbe:	491a      	ldr	r1, [pc, #104]	; (8002d28 <main+0x1b4>)
 8002cc0:	1d38      	adds	r0, r7, #4
 8002cc2:	9305      	str	r3, [sp, #20]
 8002cc4:	464b      	mov	r3, r9
 8002cc6:	9304      	str	r3, [sp, #16]
 8002cc8:	4643      	mov	r3, r8
 8002cca:	9303      	str	r3, [sp, #12]
 8002ccc:	9602      	str	r6, [sp, #8]
 8002cce:	9501      	str	r5, [sp, #4]
 8002cd0:	9400      	str	r4, [sp, #0]
 8002cd2:	465b      	mov	r3, fp
 8002cd4:	4652      	mov	r2, sl
 8002cd6:	f004 f815 	bl	8006d04 <siprintf>
							SHT2x_GetInteger(cel), SHT2x_GetDecimal(cel, 1),
							SHT2x_GetInteger(fah), SHT2x_GetDecimal(fah, 1),
							SHT2x_GetInteger(kel), SHT2x_GetDecimal(kel, 1),
							SHT2x_GetInteger(rh), SHT2x_GetDecimal(rh, 1));
					HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 1000);
 8002cda:	1d3b      	adds	r3, r7, #4
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f7fd fa13 	bl	8000108 <strlen>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	23fa      	movs	r3, #250	; 0xfa
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	1d39      	adds	r1, r7, #4
 8002cec:	480c      	ldr	r0, [pc, #48]	; (8002d20 <main+0x1ac>)
 8002cee:	f003 fa89 	bl	8006204 <HAL_UART_Transmit>
					HAL_Delay(250);
 8002cf2:	20fa      	movs	r0, #250	; 0xfa
 8002cf4:	f000 fd3a 	bl	800376c <HAL_Delay>
					flag =0;
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <main+0x1b0>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002cfe:	e754      	b.n	8002baa <main+0x36>
 8002d00:	200000a4 	.word	0x200000a4
 8002d04:	2000008c 	.word	0x2000008c
 8002d08:	200000f8 	.word	0x200000f8
 8002d0c:	200000a0 	.word	0x200000a0
 8002d10:	080075f0 	.word	0x080075f0
 8002d14:	200001c4 	.word	0x200001c4
 8002d18:	08007608 	.word	0x08007608
 8002d1c:	200001a4 	.word	0x200001a4
 8002d20:	2000011c 	.word	0x2000011c
 8002d24:	200001e2 	.word	0x200001e2
 8002d28:	08007620 	.word	0x08007620

08002d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b09d      	sub	sp, #116	; 0x74
 8002d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d32:	2438      	movs	r4, #56	; 0x38
 8002d34:	193b      	adds	r3, r7, r4
 8002d36:	0018      	movs	r0, r3
 8002d38:	2338      	movs	r3, #56	; 0x38
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	f003 ffd9 	bl	8006cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d42:	2324      	movs	r3, #36	; 0x24
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	0018      	movs	r0, r3
 8002d48:	2314      	movs	r3, #20
 8002d4a:	001a      	movs	r2, r3
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	f003 ffd1 	bl	8006cf4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d52:	003b      	movs	r3, r7
 8002d54:	0018      	movs	r0, r3
 8002d56:	2324      	movs	r3, #36	; 0x24
 8002d58:	001a      	movs	r2, r3
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	f003 ffca 	bl	8006cf4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d60:	4b29      	ldr	r3, [pc, #164]	; (8002e08 <SystemClock_Config+0xdc>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a29      	ldr	r2, [pc, #164]	; (8002e0c <SystemClock_Config+0xe0>)
 8002d66:	401a      	ands	r2, r3
 8002d68:	4b27      	ldr	r3, [pc, #156]	; (8002e08 <SystemClock_Config+0xdc>)
 8002d6a:	2180      	movs	r1, #128	; 0x80
 8002d6c:	0109      	lsls	r1, r1, #4
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002d72:	0021      	movs	r1, r4
 8002d74:	187b      	adds	r3, r7, r1
 8002d76:	220a      	movs	r2, #10
 8002d78:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d7a:	187b      	adds	r3, r7, r1
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d80:	187b      	adds	r3, r7, r1
 8002d82:	2210      	movs	r2, #16
 8002d84:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002d86:	187b      	adds	r3, r7, r1
 8002d88:	2201      	movs	r2, #1
 8002d8a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d8c:	187b      	adds	r3, r7, r1
 8002d8e:	2200      	movs	r2, #0
 8002d90:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d92:	187b      	adds	r3, r7, r1
 8002d94:	0018      	movs	r0, r3
 8002d96:	f001 fd55 	bl	8004844 <HAL_RCC_OscConfig>
 8002d9a:	1e03      	subs	r3, r0, #0
 8002d9c:	d001      	beq.n	8002da2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8002d9e:	f000 f98d 	bl	80030bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002da2:	2124      	movs	r1, #36	; 0x24
 8002da4:	187b      	adds	r3, r7, r1
 8002da6:	220f      	movs	r2, #15
 8002da8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002daa:	187b      	adds	r3, r7, r1
 8002dac:	2201      	movs	r2, #1
 8002dae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002db0:	187b      	adds	r3, r7, r1
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002db6:	187b      	adds	r3, r7, r1
 8002db8:	2200      	movs	r2, #0
 8002dba:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dbc:	187b      	adds	r3, r7, r1
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002dc2:	187b      	adds	r3, r7, r1
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f002 f900 	bl	8004fcc <HAL_RCC_ClockConfig>
 8002dcc:	1e03      	subs	r3, r0, #0
 8002dce:	d001      	beq.n	8002dd4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002dd0:	f000 f974 	bl	80030bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8002dd4:	003b      	movs	r3, r7
 8002dd6:	2229      	movs	r2, #41	; 0x29
 8002dd8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8002dda:	003b      	movs	r3, r7
 8002ddc:	2202      	movs	r2, #2
 8002dde:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002de0:	003b      	movs	r3, r7
 8002de2:	2280      	movs	r2, #128	; 0x80
 8002de4:	0192      	lsls	r2, r2, #6
 8002de6:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002de8:	003b      	movs	r3, r7
 8002dea:	2280      	movs	r2, #128	; 0x80
 8002dec:	0292      	lsls	r2, r2, #10
 8002dee:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002df0:	003b      	movs	r3, r7
 8002df2:	0018      	movs	r0, r3
 8002df4:	f002 fb0e 	bl	8005414 <HAL_RCCEx_PeriphCLKConfig>
 8002df8:	1e03      	subs	r3, r0, #0
 8002dfa:	d001      	beq.n	8002e00 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002dfc:	f000 f95e 	bl	80030bc <Error_Handler>
  }
}
 8002e00:	46c0      	nop			; (mov r8, r8)
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b01d      	add	sp, #116	; 0x74
 8002e06:	bd90      	pop	{r4, r7, pc}
 8002e08:	40007000 	.word	0x40007000
 8002e0c:	ffffe7ff 	.word	0xffffe7ff

08002e10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e14:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <MX_I2C1_Init+0x74>)
 8002e16:	4a1c      	ldr	r2, [pc, #112]	; (8002e88 <MX_I2C1_Init+0x78>)
 8002e18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002e1a:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <MX_I2C1_Init+0x74>)
 8002e1c:	4a1b      	ldr	r2, [pc, #108]	; (8002e8c <MX_I2C1_Init+0x7c>)
 8002e1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e20:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <MX_I2C1_Init+0x74>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e26:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <MX_I2C1_Init+0x74>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e2c:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <MX_I2C1_Init+0x74>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e32:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <MX_I2C1_Init+0x74>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <MX_I2C1_Init+0x74>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <MX_I2C1_Init+0x74>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e44:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <MX_I2C1_Init+0x74>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <MX_I2C1_Init+0x74>)
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f000 ff05 	bl	8003c5c <HAL_I2C_Init>
 8002e52:	1e03      	subs	r3, r0, #0
 8002e54:	d001      	beq.n	8002e5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002e56:	f000 f931 	bl	80030bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <MX_I2C1_Init+0x74>)
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f001 fc58 	bl	8004714 <HAL_I2CEx_ConfigAnalogFilter>
 8002e64:	1e03      	subs	r3, r0, #0
 8002e66:	d001      	beq.n	8002e6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002e68:	f000 f928 	bl	80030bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <MX_I2C1_Init+0x74>)
 8002e6e:	2100      	movs	r1, #0
 8002e70:	0018      	movs	r0, r3
 8002e72:	f001 fc9b 	bl	80047ac <HAL_I2CEx_ConfigDigitalFilter>
 8002e76:	1e03      	subs	r3, r0, #0
 8002e78:	d001      	beq.n	8002e7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002e7a:	f000 f91f 	bl	80030bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	200000a4 	.word	0x200000a4
 8002e88:	40005400 	.word	0x40005400
 8002e8c:	00303d5b 	.word	0x00303d5b

08002e90 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b090      	sub	sp, #64	; 0x40
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002e96:	232c      	movs	r3, #44	; 0x2c
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	2314      	movs	r3, #20
 8002e9e:	001a      	movs	r2, r3
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	f003 ff27 	bl	8006cf4 <memset>
  RTC_DateTypeDef sDate = {0};
 8002ea6:	2328      	movs	r3, #40	; 0x28
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002eae:	003b      	movs	r3, r7
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	2328      	movs	r3, #40	; 0x28
 8002eb4:	001a      	movs	r2, r3
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	f003 ff1c 	bl	8006cf4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002ebc:	4b41      	ldr	r3, [pc, #260]	; (8002fc4 <MX_RTC_Init+0x134>)
 8002ebe:	4a42      	ldr	r2, [pc, #264]	; (8002fc8 <MX_RTC_Init+0x138>)
 8002ec0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002ec2:	4b40      	ldr	r3, [pc, #256]	; (8002fc4 <MX_RTC_Init+0x134>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002ec8:	4b3e      	ldr	r3, [pc, #248]	; (8002fc4 <MX_RTC_Init+0x134>)
 8002eca:	227f      	movs	r2, #127	; 0x7f
 8002ecc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002ece:	4b3d      	ldr	r3, [pc, #244]	; (8002fc4 <MX_RTC_Init+0x134>)
 8002ed0:	22ff      	movs	r2, #255	; 0xff
 8002ed2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002ed4:	4b3b      	ldr	r3, [pc, #236]	; (8002fc4 <MX_RTC_Init+0x134>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002eda:	4b3a      	ldr	r3, [pc, #232]	; (8002fc4 <MX_RTC_Init+0x134>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002ee0:	4b38      	ldr	r3, [pc, #224]	; (8002fc4 <MX_RTC_Init+0x134>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002ee6:	4b37      	ldr	r3, [pc, #220]	; (8002fc4 <MX_RTC_Init+0x134>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002eec:	4b35      	ldr	r3, [pc, #212]	; (8002fc4 <MX_RTC_Init+0x134>)
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f002 fc1e 	bl	8005730 <HAL_RTC_Init>
 8002ef4:	1e03      	subs	r3, r0, #0
 8002ef6:	d001      	beq.n	8002efc <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8002ef8:	f000 f8e0 	bl	80030bc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x11;
 8002efc:	212c      	movs	r1, #44	; 0x2c
 8002efe:	187b      	adds	r3, r7, r1
 8002f00:	2211      	movs	r2, #17
 8002f02:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002f04:	187b      	adds	r3, r7, r1
 8002f06:	2200      	movs	r2, #0
 8002f08:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x11;
 8002f0a:	187b      	adds	r3, r7, r1
 8002f0c:	2211      	movs	r2, #17
 8002f0e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002f10:	187b      	adds	r3, r7, r1
 8002f12:	2200      	movs	r2, #0
 8002f14:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002f16:	187b      	adds	r3, r7, r1
 8002f18:	2200      	movs	r2, #0
 8002f1a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002f1c:	1879      	adds	r1, r7, r1
 8002f1e:	4b29      	ldr	r3, [pc, #164]	; (8002fc4 <MX_RTC_Init+0x134>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	0018      	movs	r0, r3
 8002f24:	f002 fca0 	bl	8005868 <HAL_RTC_SetTime>
 8002f28:	1e03      	subs	r3, r0, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8002f2c:	f000 f8c6 	bl	80030bc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8002f30:	2128      	movs	r1, #40	; 0x28
 8002f32:	187b      	adds	r3, r7, r1
 8002f34:	2202      	movs	r2, #2
 8002f36:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8002f38:	187b      	adds	r3, r7, r1
 8002f3a:	2206      	movs	r2, #6
 8002f3c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x13;
 8002f3e:	187b      	adds	r3, r7, r1
 8002f40:	2213      	movs	r2, #19
 8002f42:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x23;
 8002f44:	187b      	adds	r3, r7, r1
 8002f46:	2223      	movs	r2, #35	; 0x23
 8002f48:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002f4a:	1879      	adds	r1, r7, r1
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <MX_RTC_Init+0x134>)
 8002f4e:	2201      	movs	r2, #1
 8002f50:	0018      	movs	r0, r3
 8002f52:	f002 fd91 	bl	8005a78 <HAL_RTC_SetDate>
 8002f56:	1e03      	subs	r3, r0, #0
 8002f58:	d001      	beq.n	8002f5e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8002f5a:	f000 f8af 	bl	80030bc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x11;
 8002f5e:	003b      	movs	r3, r7
 8002f60:	2211      	movs	r2, #17
 8002f62:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8002f64:	003b      	movs	r3, r7
 8002f66:	2201      	movs	r2, #1
 8002f68:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002f6a:	003b      	movs	r3, r7
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002f70:	003b      	movs	r3, r7
 8002f72:	2200      	movs	r2, #0
 8002f74:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002f76:	003b      	movs	r3, r7
 8002f78:	2200      	movs	r2, #0
 8002f7a:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002f7c:	003b      	movs	r3, r7
 8002f7e:	2200      	movs	r2, #0
 8002f80:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_MINUTES;
 8002f82:	003b      	movs	r3, r7
 8002f84:	2280      	movs	r2, #128	; 0x80
 8002f86:	0212      	lsls	r2, r2, #8
 8002f88:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002f8a:	003b      	movs	r3, r7
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002f90:	003b      	movs	r3, r7
 8002f92:	2200      	movs	r2, #0
 8002f94:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x13;
 8002f96:	003b      	movs	r3, r7
 8002f98:	2220      	movs	r2, #32
 8002f9a:	2113      	movs	r1, #19
 8002f9c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002f9e:	003b      	movs	r3, r7
 8002fa0:	2280      	movs	r2, #128	; 0x80
 8002fa2:	0052      	lsls	r2, r2, #1
 8002fa4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002fa6:	0039      	movs	r1, r7
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <MX_RTC_Init+0x134>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	0018      	movs	r0, r3
 8002fae:	f002 fe47 	bl	8005c40 <HAL_RTC_SetAlarm_IT>
 8002fb2:	1e03      	subs	r3, r0, #0
 8002fb4:	d001      	beq.n	8002fba <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8002fb6:	f000 f881 	bl	80030bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b010      	add	sp, #64	; 0x40
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	200000f8 	.word	0x200000f8
 8002fc8:	40002800 	.word	0x40002800

08002fcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fd0:	4b14      	ldr	r3, [pc, #80]	; (8003024 <MX_USART1_UART_Init+0x58>)
 8002fd2:	4a15      	ldr	r2, [pc, #84]	; (8003028 <MX_USART1_UART_Init+0x5c>)
 8002fd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fd6:	4b13      	ldr	r3, [pc, #76]	; (8003024 <MX_USART1_UART_Init+0x58>)
 8002fd8:	22e1      	movs	r2, #225	; 0xe1
 8002fda:	0252      	lsls	r2, r2, #9
 8002fdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fde:	4b11      	ldr	r3, [pc, #68]	; (8003024 <MX_USART1_UART_Init+0x58>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fe4:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <MX_USART1_UART_Init+0x58>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fea:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <MX_USART1_UART_Init+0x58>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <MX_USART1_UART_Init+0x58>)
 8002ff2:	220c      	movs	r2, #12
 8002ff4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <MX_USART1_UART_Init+0x58>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ffc:	4b09      	ldr	r3, [pc, #36]	; (8003024 <MX_USART1_UART_Init+0x58>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003002:	4b08      	ldr	r3, [pc, #32]	; (8003024 <MX_USART1_UART_Init+0x58>)
 8003004:	2200      	movs	r2, #0
 8003006:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003008:	4b06      	ldr	r3, [pc, #24]	; (8003024 <MX_USART1_UART_Init+0x58>)
 800300a:	2200      	movs	r2, #0
 800300c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <MX_USART1_UART_Init+0x58>)
 8003010:	0018      	movs	r0, r3
 8003012:	f003 f8a3 	bl	800615c <HAL_UART_Init>
 8003016:	1e03      	subs	r3, r0, #0
 8003018:	d001      	beq.n	800301e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800301a:	f000 f84f 	bl	80030bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	2000011c 	.word	0x2000011c
 8003028:	40013800 	.word	0x40013800

0800302c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003032:	4b1a      	ldr	r3, [pc, #104]	; (800309c <MX_GPIO_Init+0x70>)
 8003034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003036:	4b19      	ldr	r3, [pc, #100]	; (800309c <MX_GPIO_Init+0x70>)
 8003038:	2104      	movs	r1, #4
 800303a:	430a      	orrs	r2, r1
 800303c:	62da      	str	r2, [r3, #44]	; 0x2c
 800303e:	4b17      	ldr	r3, [pc, #92]	; (800309c <MX_GPIO_Init+0x70>)
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	2204      	movs	r2, #4
 8003044:	4013      	ands	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800304a:	4b14      	ldr	r3, [pc, #80]	; (800309c <MX_GPIO_Init+0x70>)
 800304c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304e:	4b13      	ldr	r3, [pc, #76]	; (800309c <MX_GPIO_Init+0x70>)
 8003050:	2180      	movs	r1, #128	; 0x80
 8003052:	430a      	orrs	r2, r1
 8003054:	62da      	str	r2, [r3, #44]	; 0x2c
 8003056:	4b11      	ldr	r3, [pc, #68]	; (800309c <MX_GPIO_Init+0x70>)
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	2280      	movs	r2, #128	; 0x80
 800305c:	4013      	ands	r3, r2
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003062:	4b0e      	ldr	r3, [pc, #56]	; (800309c <MX_GPIO_Init+0x70>)
 8003064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003066:	4b0d      	ldr	r3, [pc, #52]	; (800309c <MX_GPIO_Init+0x70>)
 8003068:	2101      	movs	r1, #1
 800306a:	430a      	orrs	r2, r1
 800306c:	62da      	str	r2, [r3, #44]	; 0x2c
 800306e:	4b0b      	ldr	r3, [pc, #44]	; (800309c <MX_GPIO_Init+0x70>)
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	2201      	movs	r2, #1
 8003074:	4013      	ands	r3, r2
 8003076:	607b      	str	r3, [r7, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800307a:	4b08      	ldr	r3, [pc, #32]	; (800309c <MX_GPIO_Init+0x70>)
 800307c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307e:	4b07      	ldr	r3, [pc, #28]	; (800309c <MX_GPIO_Init+0x70>)
 8003080:	2102      	movs	r1, #2
 8003082:	430a      	orrs	r2, r1
 8003084:	62da      	str	r2, [r3, #44]	; 0x2c
 8003086:	4b05      	ldr	r3, [pc, #20]	; (800309c <MX_GPIO_Init+0x70>)
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	2202      	movs	r2, #2
 800308c:	4013      	ands	r3, r2
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	683b      	ldr	r3, [r7, #0]

}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	46bd      	mov	sp, r7
 8003096:	b004      	add	sp, #16
 8003098:	bd80      	pop	{r7, pc}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	40021000 	.word	0x40021000

080030a0 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	flag =1;
 80030a8:	4b03      	ldr	r3, [pc, #12]	; (80030b8 <HAL_RTC_AlarmAEventCallback+0x18>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	701a      	strb	r2, [r3, #0]

}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b002      	add	sp, #8
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	200001e2 	.word	0x200001e2

080030bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030c0:	b672      	cpsid	i
}
 80030c2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80030c4:	e7fe      	b.n	80030c4 <Error_Handler+0x8>
	...

080030c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030cc:	4b07      	ldr	r3, [pc, #28]	; (80030ec <HAL_MspInit+0x24>)
 80030ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030d0:	4b06      	ldr	r3, [pc, #24]	; (80030ec <HAL_MspInit+0x24>)
 80030d2:	2101      	movs	r1, #1
 80030d4:	430a      	orrs	r2, r1
 80030d6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80030d8:	4b04      	ldr	r3, [pc, #16]	; (80030ec <HAL_MspInit+0x24>)
 80030da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030dc:	4b03      	ldr	r3, [pc, #12]	; (80030ec <HAL_MspInit+0x24>)
 80030de:	2180      	movs	r1, #128	; 0x80
 80030e0:	0549      	lsls	r1, r1, #21
 80030e2:	430a      	orrs	r2, r1
 80030e4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40021000 	.word	0x40021000

080030f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030f0:	b590      	push	{r4, r7, lr}
 80030f2:	b089      	sub	sp, #36	; 0x24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f8:	240c      	movs	r4, #12
 80030fa:	193b      	adds	r3, r7, r4
 80030fc:	0018      	movs	r0, r3
 80030fe:	2314      	movs	r3, #20
 8003100:	001a      	movs	r2, r3
 8003102:	2100      	movs	r1, #0
 8003104:	f003 fdf6 	bl	8006cf4 <memset>
  if(hi2c->Instance==I2C1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a17      	ldr	r2, [pc, #92]	; (800316c <HAL_I2C_MspInit+0x7c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d128      	bne.n	8003164 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003112:	4b17      	ldr	r3, [pc, #92]	; (8003170 <HAL_I2C_MspInit+0x80>)
 8003114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003116:	4b16      	ldr	r3, [pc, #88]	; (8003170 <HAL_I2C_MspInit+0x80>)
 8003118:	2102      	movs	r1, #2
 800311a:	430a      	orrs	r2, r1
 800311c:	62da      	str	r2, [r3, #44]	; 0x2c
 800311e:	4b14      	ldr	r3, [pc, #80]	; (8003170 <HAL_I2C_MspInit+0x80>)
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	2202      	movs	r2, #2
 8003124:	4013      	ands	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800312a:	0021      	movs	r1, r4
 800312c:	187b      	adds	r3, r7, r1
 800312e:	22c0      	movs	r2, #192	; 0xc0
 8003130:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003132:	187b      	adds	r3, r7, r1
 8003134:	2212      	movs	r2, #18
 8003136:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003138:	187b      	adds	r3, r7, r1
 800313a:	2201      	movs	r2, #1
 800313c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313e:	187b      	adds	r3, r7, r1
 8003140:	2203      	movs	r2, #3
 8003142:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003144:	187b      	adds	r3, r7, r1
 8003146:	2201      	movs	r2, #1
 8003148:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800314a:	187b      	adds	r3, r7, r1
 800314c:	4a09      	ldr	r2, [pc, #36]	; (8003174 <HAL_I2C_MspInit+0x84>)
 800314e:	0019      	movs	r1, r3
 8003150:	0010      	movs	r0, r2
 8003152:	f000 fc0d 	bl	8003970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_I2C_MspInit+0x80>)
 8003158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_I2C_MspInit+0x80>)
 800315c:	2180      	movs	r1, #128	; 0x80
 800315e:	0389      	lsls	r1, r1, #14
 8003160:	430a      	orrs	r2, r1
 8003162:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003164:	46c0      	nop			; (mov r8, r8)
 8003166:	46bd      	mov	sp, r7
 8003168:	b009      	add	sp, #36	; 0x24
 800316a:	bd90      	pop	{r4, r7, pc}
 800316c:	40005400 	.word	0x40005400
 8003170:	40021000 	.word	0x40021000
 8003174:	50000400 	.word	0x50000400

08003178 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a0a      	ldr	r2, [pc, #40]	; (80031b0 <HAL_RTC_MspInit+0x38>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d10e      	bne.n	80031a8 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800318a:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <HAL_RTC_MspInit+0x3c>)
 800318c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800318e:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <HAL_RTC_MspInit+0x3c>)
 8003190:	2180      	movs	r1, #128	; 0x80
 8003192:	02c9      	lsls	r1, r1, #11
 8003194:	430a      	orrs	r2, r1
 8003196:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003198:	2200      	movs	r2, #0
 800319a:	2100      	movs	r1, #0
 800319c:	2002      	movs	r0, #2
 800319e:	f000 fbb5 	bl	800390c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80031a2:	2002      	movs	r0, #2
 80031a4:	f000 fbc7 	bl	8003936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b002      	add	sp, #8
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40002800 	.word	0x40002800
 80031b4:	40021000 	.word	0x40021000

080031b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b089      	sub	sp, #36	; 0x24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c0:	240c      	movs	r4, #12
 80031c2:	193b      	adds	r3, r7, r4
 80031c4:	0018      	movs	r0, r3
 80031c6:	2314      	movs	r3, #20
 80031c8:	001a      	movs	r2, r3
 80031ca:	2100      	movs	r1, #0
 80031cc:	f003 fd92 	bl	8006cf4 <memset>
  if(huart->Instance==USART1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a18      	ldr	r2, [pc, #96]	; (8003238 <HAL_UART_MspInit+0x80>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d12a      	bne.n	8003230 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031da:	4b18      	ldr	r3, [pc, #96]	; (800323c <HAL_UART_MspInit+0x84>)
 80031dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031de:	4b17      	ldr	r3, [pc, #92]	; (800323c <HAL_UART_MspInit+0x84>)
 80031e0:	2180      	movs	r1, #128	; 0x80
 80031e2:	01c9      	lsls	r1, r1, #7
 80031e4:	430a      	orrs	r2, r1
 80031e6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e8:	4b14      	ldr	r3, [pc, #80]	; (800323c <HAL_UART_MspInit+0x84>)
 80031ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ec:	4b13      	ldr	r3, [pc, #76]	; (800323c <HAL_UART_MspInit+0x84>)
 80031ee:	2101      	movs	r1, #1
 80031f0:	430a      	orrs	r2, r1
 80031f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80031f4:	4b11      	ldr	r3, [pc, #68]	; (800323c <HAL_UART_MspInit+0x84>)
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	2201      	movs	r2, #1
 80031fa:	4013      	ands	r3, r2
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003200:	193b      	adds	r3, r7, r4
 8003202:	22c0      	movs	r2, #192	; 0xc0
 8003204:	00d2      	lsls	r2, r2, #3
 8003206:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003208:	0021      	movs	r1, r4
 800320a:	187b      	adds	r3, r7, r1
 800320c:	2202      	movs	r2, #2
 800320e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	187b      	adds	r3, r7, r1
 8003212:	2200      	movs	r2, #0
 8003214:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003216:	187b      	adds	r3, r7, r1
 8003218:	2203      	movs	r2, #3
 800321a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800321c:	187b      	adds	r3, r7, r1
 800321e:	2204      	movs	r2, #4
 8003220:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003222:	187a      	adds	r2, r7, r1
 8003224:	23a0      	movs	r3, #160	; 0xa0
 8003226:	05db      	lsls	r3, r3, #23
 8003228:	0011      	movs	r1, r2
 800322a:	0018      	movs	r0, r3
 800322c:	f000 fba0 	bl	8003970 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003230:	46c0      	nop			; (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	b009      	add	sp, #36	; 0x24
 8003236:	bd90      	pop	{r4, r7, pc}
 8003238:	40013800 	.word	0x40013800
 800323c:	40021000 	.word	0x40021000

08003240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003244:	e7fe      	b.n	8003244 <NMI_Handler+0x4>

08003246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800324a:	e7fe      	b.n	800324a <HardFault_Handler+0x4>

0800324c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003250:	46c0      	nop			; (mov r8, r8)
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003264:	f000 fa66 	bl	8003734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <RTC_IRQHandler+0x14>)
 8003276:	0018      	movs	r0, r3
 8003278:	f002 fe44 	bl	8005f04 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800327c:	46c0      	nop			; (mov r8, r8)
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	200000f8 	.word	0x200000f8

08003288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003290:	4a14      	ldr	r2, [pc, #80]	; (80032e4 <_sbrk+0x5c>)
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <_sbrk+0x60>)
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <_sbrk+0x64>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032a4:	4b11      	ldr	r3, [pc, #68]	; (80032ec <_sbrk+0x64>)
 80032a6:	4a12      	ldr	r2, [pc, #72]	; (80032f0 <_sbrk+0x68>)
 80032a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <_sbrk+0x64>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	18d3      	adds	r3, r2, r3
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d207      	bcs.n	80032c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032b8:	f003 fcf2 	bl	8006ca0 <__errno>
 80032bc:	0003      	movs	r3, r0
 80032be:	220c      	movs	r2, #12
 80032c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032c2:	2301      	movs	r3, #1
 80032c4:	425b      	negs	r3, r3
 80032c6:	e009      	b.n	80032dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032c8:	4b08      	ldr	r3, [pc, #32]	; (80032ec <_sbrk+0x64>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032ce:	4b07      	ldr	r3, [pc, #28]	; (80032ec <_sbrk+0x64>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	18d2      	adds	r2, r2, r3
 80032d6:	4b05      	ldr	r3, [pc, #20]	; (80032ec <_sbrk+0x64>)
 80032d8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80032da:	68fb      	ldr	r3, [r7, #12]
}
 80032dc:	0018      	movs	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	b006      	add	sp, #24
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20002000 	.word	0x20002000
 80032e8:	00000400 	.word	0x00000400
 80032ec:	200001e4 	.word	0x200001e4
 80032f0:	20000200 	.word	0x20000200

080032f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032f8:	46c0      	nop			; (mov r8, r8)
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003300:	480d      	ldr	r0, [pc, #52]	; (8003338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003302:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003304:	f7ff fff6 	bl	80032f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003308:	480c      	ldr	r0, [pc, #48]	; (800333c <LoopForever+0x6>)
  ldr r1, =_edata
 800330a:	490d      	ldr	r1, [pc, #52]	; (8003340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800330c:	4a0d      	ldr	r2, [pc, #52]	; (8003344 <LoopForever+0xe>)
  movs r3, #0
 800330e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003310:	e002      	b.n	8003318 <LoopCopyDataInit>

08003312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003316:	3304      	adds	r3, #4

08003318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800331a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800331c:	d3f9      	bcc.n	8003312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800331e:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003320:	4c0a      	ldr	r4, [pc, #40]	; (800334c <LoopForever+0x16>)
  movs r3, #0
 8003322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003324:	e001      	b.n	800332a <LoopFillZerobss>

08003326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003328:	3204      	adds	r2, #4

0800332a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800332a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800332c:	d3fb      	bcc.n	8003326 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800332e:	f003 fcbd 	bl	8006cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003332:	f7ff fc1f 	bl	8002b74 <main>

08003336 <LoopForever>:

LoopForever:
    b LoopForever
 8003336:	e7fe      	b.n	8003336 <LoopForever>
  ldr   r0, =_estack
 8003338:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800333c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003340:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003344:	080077c0 	.word	0x080077c0
  ldr r2, =_sbss
 8003348:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800334c:	20000200 	.word	0x20000200

08003350 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003350:	e7fe      	b.n	8003350 <ADC1_COMP_IRQHandler>
	...

08003354 <SHT2x_Init>:

/**
 * @brief Initializes the SHT2x temperature/humidity sensor.
 * @param hi2c User I2C handle pointer.
 */
void SHT2x_Init(I2C_HandleTypeDef *hi2c) {
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	_sht2x_ui2c = hi2c;
 800335c:	4b03      	ldr	r3, [pc, #12]	; (800336c <SHT2x_Init+0x18>)
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	601a      	str	r2, [r3, #0]
}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	46bd      	mov	sp, r7
 8003366:	b002      	add	sp, #8
 8003368:	bd80      	pop	{r7, pc}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	200001e8 	.word	0x200001e8

08003370 <SHT2x_ReadUserReg>:

/**
 * @brief Gets the value stored in user register.
 * @return 8-bit value stored in user register, 0 to 255.
 */
uint8_t SHT2x_ReadUserReg(void) {
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af02      	add	r7, sp, #8
	uint8_t val;
	uint8_t cmd = SHT2x_READ_REG;
 8003376:	1dbb      	adds	r3, r7, #6
 8003378:	22e7      	movs	r2, #231	; 0xe7
 800337a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 800337c:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <SHT2x_ReadUserReg+0x40>)
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	1dba      	adds	r2, r7, #6
 8003382:	23fa      	movs	r3, #250	; 0xfa
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	2301      	movs	r3, #1
 800338a:	2180      	movs	r1, #128	; 0x80
 800338c:	f000 fcfc 	bl	8003d88 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &val, 1, SHT2x_TIMEOUT);
 8003390:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <SHT2x_ReadUserReg+0x40>)
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	1dfa      	adds	r2, r7, #7
 8003396:	23fa      	movs	r3, #250	; 0xfa
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	2301      	movs	r3, #1
 800339e:	2180      	movs	r1, #128	; 0x80
 80033a0:	f000 fdfa 	bl	8003f98 <HAL_I2C_Master_Receive>
	return val;
 80033a4:	1dfb      	adds	r3, r7, #7
 80033a6:	781b      	ldrb	r3, [r3, #0]
}
 80033a8:	0018      	movs	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b002      	add	sp, #8
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	200001e8 	.word	0x200001e8

080033b4 <SHT2x_GetRaw>:
/**
 * @brief Sends the designated command to sensor and read a 16-bit raw value.
 * @param cmd Command to send to sensor.
 * @return 16-bit raw value, 0 to 65535.
 */
uint16_t SHT2x_GetRaw(uint8_t cmd) {
 80033b4:	b590      	push	{r4, r7, lr}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	0002      	movs	r2, r0
 80033bc:	1dfb      	adds	r3, r7, #7
 80033be:	701a      	strb	r2, [r3, #0]
	uint8_t val[3] = { 0 };
 80033c0:	240c      	movs	r4, #12
 80033c2:	193b      	adds	r3, r7, r4
 80033c4:	4a13      	ldr	r2, [pc, #76]	; (8003414 <SHT2x_GetRaw+0x60>)
 80033c6:	8812      	ldrh	r2, [r2, #0]
 80033c8:	801a      	strh	r2, [r3, #0]
 80033ca:	2202      	movs	r2, #2
 80033cc:	2100      	movs	r1, #0
 80033ce:	5499      	strb	r1, [r3, r2]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 80033d0:	4b11      	ldr	r3, [pc, #68]	; (8003418 <SHT2x_GetRaw+0x64>)
 80033d2:	6818      	ldr	r0, [r3, #0]
 80033d4:	1dfa      	adds	r2, r7, #7
 80033d6:	23fa      	movs	r3, #250	; 0xfa
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	2301      	movs	r3, #1
 80033de:	2180      	movs	r1, #128	; 0x80
 80033e0:	f000 fcd2 	bl	8003d88 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, val, 3, SHT2x_TIMEOUT);
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <SHT2x_GetRaw+0x64>)
 80033e6:	6818      	ldr	r0, [r3, #0]
 80033e8:	193a      	adds	r2, r7, r4
 80033ea:	23fa      	movs	r3, #250	; 0xfa
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	2303      	movs	r3, #3
 80033f2:	2180      	movs	r1, #128	; 0x80
 80033f4:	f000 fdd0 	bl	8003f98 <HAL_I2C_Master_Receive>
	return val[0] << 8 | val[1];
 80033f8:	193b      	adds	r3, r7, r4
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	021b      	lsls	r3, r3, #8
 80033fe:	b21a      	sxth	r2, r3
 8003400:	193b      	adds	r3, r7, r4
 8003402:	785b      	ldrb	r3, [r3, #1]
 8003404:	b21b      	sxth	r3, r3
 8003406:	4313      	orrs	r3, r2
 8003408:	b21b      	sxth	r3, r3
 800340a:	b29b      	uxth	r3, r3
}
 800340c:	0018      	movs	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	b005      	add	sp, #20
 8003412:	bd90      	pop	{r4, r7, pc}
 8003414:	0800764c 	.word	0x0800764c
 8003418:	200001e8 	.word	0x200001e8

0800341c <SHT2x_GetTemperature>:
/**
 * @brief Measures and gets the current temperature.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point temperature value.
 */
float SHT2x_GetTemperature(uint8_t hold) {
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	0002      	movs	r2, r0
 8003424:	1dfb      	adds	r3, r7, #7
 8003426:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = (hold ? SHT2x_READ_TEMP_HOLD : SHT2x_READ_TEMP_NOHOLD);
 8003428:	1dfb      	adds	r3, r7, #7
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <SHT2x_GetTemperature+0x18>
 8003430:	22e3      	movs	r2, #227	; 0xe3
 8003432:	e000      	b.n	8003436 <SHT2x_GetTemperature+0x1a>
 8003434:	22f3      	movs	r2, #243	; 0xf3
 8003436:	210f      	movs	r1, #15
 8003438:	187b      	adds	r3, r7, r1
 800343a:	701a      	strb	r2, [r3, #0]
	return -46.85 + 175.72 * (SHT2x_GetRaw(cmd) / 65536.0);
 800343c:	187b      	adds	r3, r7, r1
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	0018      	movs	r0, r3
 8003442:	f7ff ffb7 	bl	80033b4 <SHT2x_GetRaw>
 8003446:	0003      	movs	r3, r0
 8003448:	0018      	movs	r0, r3
 800344a:	f7ff f97f 	bl	800274c <__aeabi_i2d>
 800344e:	2200      	movs	r2, #0
 8003450:	4b0e      	ldr	r3, [pc, #56]	; (800348c <SHT2x_GetTemperature+0x70>)
 8003452:	f7fe f887 	bl	8001564 <__aeabi_ddiv>
 8003456:	0002      	movs	r2, r0
 8003458:	000b      	movs	r3, r1
 800345a:	0010      	movs	r0, r2
 800345c:	0019      	movs	r1, r3
 800345e:	4a0c      	ldr	r2, [pc, #48]	; (8003490 <SHT2x_GetTemperature+0x74>)
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <SHT2x_GetTemperature+0x78>)
 8003462:	f7fe fb75 	bl	8001b50 <__aeabi_dmul>
 8003466:	0002      	movs	r2, r0
 8003468:	000b      	movs	r3, r1
 800346a:	0010      	movs	r0, r2
 800346c:	0019      	movs	r1, r3
 800346e:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <SHT2x_GetTemperature+0x7c>)
 8003470:	4b0a      	ldr	r3, [pc, #40]	; (800349c <SHT2x_GetTemperature+0x80>)
 8003472:	f7fe fdd9 	bl	8002028 <__aeabi_dsub>
 8003476:	0002      	movs	r2, r0
 8003478:	000b      	movs	r3, r1
 800347a:	0010      	movs	r0, r2
 800347c:	0019      	movs	r1, r3
 800347e:	f7ff f9dd 	bl	800283c <__aeabi_d2f>
 8003482:	1c03      	adds	r3, r0, #0
}
 8003484:	1c18      	adds	r0, r3, #0
 8003486:	46bd      	mov	sp, r7
 8003488:	b004      	add	sp, #16
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40f00000 	.word	0x40f00000
 8003490:	3d70a3d7 	.word	0x3d70a3d7
 8003494:	4065f70a 	.word	0x4065f70a
 8003498:	cccccccd 	.word	0xcccccccd
 800349c:	40476ccc 	.word	0x40476ccc

080034a0 <SHT2x_GetRelativeHumidity>:
/**
 * @brief Measures and gets the current relative humidity.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point relative humidity value.
 */
float SHT2x_GetRelativeHumidity(uint8_t hold) {
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	0002      	movs	r2, r0
 80034a8:	1dfb      	adds	r3, r7, #7
 80034aa:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = (hold ? SHT2x_READ_RH_HOLD : SHT2x_READ_RH_NOHOLD);
 80034ac:	1dfb      	adds	r3, r7, #7
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <SHT2x_GetRelativeHumidity+0x18>
 80034b4:	22e5      	movs	r2, #229	; 0xe5
 80034b6:	e000      	b.n	80034ba <SHT2x_GetRelativeHumidity+0x1a>
 80034b8:	22f5      	movs	r2, #245	; 0xf5
 80034ba:	210f      	movs	r1, #15
 80034bc:	187b      	adds	r3, r7, r1
 80034be:	701a      	strb	r2, [r3, #0]
	return -6 + 125.00 * (SHT2x_GetRaw(cmd) / 65536.0);
 80034c0:	187b      	adds	r3, r7, r1
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	0018      	movs	r0, r3
 80034c6:	f7ff ff75 	bl	80033b4 <SHT2x_GetRaw>
 80034ca:	0003      	movs	r3, r0
 80034cc:	0018      	movs	r0, r3
 80034ce:	f7ff f93d 	bl	800274c <__aeabi_i2d>
 80034d2:	2200      	movs	r2, #0
 80034d4:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <SHT2x_GetRelativeHumidity+0x70>)
 80034d6:	f7fe f845 	bl	8001564 <__aeabi_ddiv>
 80034da:	0002      	movs	r2, r0
 80034dc:	000b      	movs	r3, r1
 80034de:	0010      	movs	r0, r2
 80034e0:	0019      	movs	r1, r3
 80034e2:	2200      	movs	r2, #0
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <SHT2x_GetRelativeHumidity+0x74>)
 80034e6:	f7fe fb33 	bl	8001b50 <__aeabi_dmul>
 80034ea:	0002      	movs	r2, r0
 80034ec:	000b      	movs	r3, r1
 80034ee:	0010      	movs	r0, r2
 80034f0:	0019      	movs	r1, r3
 80034f2:	2200      	movs	r2, #0
 80034f4:	4b08      	ldr	r3, [pc, #32]	; (8003518 <SHT2x_GetRelativeHumidity+0x78>)
 80034f6:	f7fe fd97 	bl	8002028 <__aeabi_dsub>
 80034fa:	0002      	movs	r2, r0
 80034fc:	000b      	movs	r3, r1
 80034fe:	0010      	movs	r0, r2
 8003500:	0019      	movs	r1, r3
 8003502:	f7ff f99b 	bl	800283c <__aeabi_d2f>
 8003506:	1c03      	adds	r3, r0, #0
}
 8003508:	1c18      	adds	r0, r3, #0
 800350a:	46bd      	mov	sp, r7
 800350c:	b004      	add	sp, #16
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40f00000 	.word	0x40f00000
 8003514:	405f4000 	.word	0x405f4000
 8003518:	40180000 	.word	0x40180000

0800351c <SHT2x_SetResolution>:
 * @brief Sets the measurement resolution.
 * @param res Enum resolution.
 * @note Available resolutions: RES_14_12, RES_12_8, RES_13_10, RES_11_11.
 * @note RES_14_12 = 14bit temperature and- 12-bit RH resolution, etc.
 */
void SHT2x_SetResolution(SHT2x_Resolution res) {
 800351c:	b5b0      	push	{r4, r5, r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af02      	add	r7, sp, #8
 8003522:	0002      	movs	r2, r0
 8003524:	1dfb      	adds	r3, r7, #7
 8003526:	701a      	strb	r2, [r3, #0]
	uint8_t val = SHT2x_ReadUserReg();
 8003528:	250f      	movs	r5, #15
 800352a:	197c      	adds	r4, r7, r5
 800352c:	f7ff ff20 	bl	8003370 <SHT2x_ReadUserReg>
 8003530:	0003      	movs	r3, r0
 8003532:	7023      	strb	r3, [r4, #0]
	val = (val & 0x7e) | res;
 8003534:	0029      	movs	r1, r5
 8003536:	187b      	adds	r3, r7, r1
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	b25b      	sxtb	r3, r3
 800353c:	227e      	movs	r2, #126	; 0x7e
 800353e:	4013      	ands	r3, r2
 8003540:	b25a      	sxtb	r2, r3
 8003542:	1dfb      	adds	r3, r7, #7
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	b25b      	sxtb	r3, r3
 8003548:	4313      	orrs	r3, r2
 800354a:	b25a      	sxtb	r2, r3
 800354c:	187b      	adds	r3, r7, r1
 800354e:	701a      	strb	r2, [r3, #0]
	uint8_t temp[2] = { SHT2x_WRITE_REG, val };
 8003550:	240c      	movs	r4, #12
 8003552:	193b      	adds	r3, r7, r4
 8003554:	22e6      	movs	r2, #230	; 0xe6
 8003556:	701a      	strb	r2, [r3, #0]
 8003558:	193b      	adds	r3, r7, r4
 800355a:	187a      	adds	r2, r7, r1
 800355c:	7812      	ldrb	r2, [r2, #0]
 800355e:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, temp, 2, SHT2x_TIMEOUT);
 8003560:	4b06      	ldr	r3, [pc, #24]	; (800357c <SHT2x_SetResolution+0x60>)
 8003562:	6818      	ldr	r0, [r3, #0]
 8003564:	193a      	adds	r2, r7, r4
 8003566:	23fa      	movs	r3, #250	; 0xfa
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	2302      	movs	r3, #2
 800356e:	2180      	movs	r1, #128	; 0x80
 8003570:	f000 fc0a 	bl	8003d88 <HAL_I2C_Master_Transmit>
}
 8003574:	46c0      	nop			; (mov r8, r8)
 8003576:	46bd      	mov	sp, r7
 8003578:	b004      	add	sp, #16
 800357a:	bdb0      	pop	{r4, r5, r7, pc}
 800357c:	200001e8 	.word	0x200001e8

08003580 <SHT2x_CelsiusToFahrenheit>:
/**
 * @brief Converts degrees Celsius to degrees Fahrenheit.
 * @param celsius Floating point temperature in degrees Celsius.
 * @return Floating point temperature in degrees Fahrenheit.
 */
float SHT2x_CelsiusToFahrenheit(float celsius) {
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	return (9.0 / 5.0) * celsius + 32;
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7ff f90f 	bl	80027ac <__aeabi_f2d>
 800358e:	4a0b      	ldr	r2, [pc, #44]	; (80035bc <SHT2x_CelsiusToFahrenheit+0x3c>)
 8003590:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <SHT2x_CelsiusToFahrenheit+0x40>)
 8003592:	f7fe fadd 	bl	8001b50 <__aeabi_dmul>
 8003596:	0002      	movs	r2, r0
 8003598:	000b      	movs	r3, r1
 800359a:	0010      	movs	r0, r2
 800359c:	0019      	movs	r1, r3
 800359e:	2200      	movs	r2, #0
 80035a0:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <SHT2x_CelsiusToFahrenheit+0x44>)
 80035a2:	f7fd fca3 	bl	8000eec <__aeabi_dadd>
 80035a6:	0002      	movs	r2, r0
 80035a8:	000b      	movs	r3, r1
 80035aa:	0010      	movs	r0, r2
 80035ac:	0019      	movs	r1, r3
 80035ae:	f7ff f945 	bl	800283c <__aeabi_d2f>
 80035b2:	1c03      	adds	r3, r0, #0
}
 80035b4:	1c18      	adds	r0, r3, #0
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b002      	add	sp, #8
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	cccccccd 	.word	0xcccccccd
 80035c0:	3ffccccc 	.word	0x3ffccccc
 80035c4:	40400000 	.word	0x40400000

080035c8 <SHT2x_CelsiusToKelvin>:
/**
 * @brief Converts degrees Celsius to Kelvin.
 * @param celsius Floating point temperature in degrees Celsius.
 * @return Floating point temperature in Kelvin.
 */
float SHT2x_CelsiusToKelvin(float celsius) {
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
	return celsius + 273;
 80035d0:	4904      	ldr	r1, [pc, #16]	; (80035e4 <SHT2x_CelsiusToKelvin+0x1c>)
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fc ff68 	bl	80004a8 <__aeabi_fadd>
 80035d8:	1c03      	adds	r3, r0, #0
}
 80035da:	1c18      	adds	r0, r3, #0
 80035dc:	46bd      	mov	sp, r7
 80035de:	b002      	add	sp, #8
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	43888000 	.word	0x43888000

080035e8 <SHT2x_GetInteger>:
 * @brief Gets the integer part of a floating point number.
 * @note Avoids the use of sprinf floating point formatting.
 * @param num Floating point number.
 * @return Integer part of floating point number.
 */
int32_t SHT2x_GetInteger(float num) {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
	return num / 1;
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7fd fbcb 	bl	8000d8c <__aeabi_f2iz>
 80035f6:	0003      	movs	r3, r0
}
 80035f8:	0018      	movs	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b002      	add	sp, #8
 80035fe:	bd80      	pop	{r7, pc}

08003600 <SHT2x_GetDecimal>:
 * @brief Gets the decimal part of a floating point number.
 * @note Avoids the use of sprinf floating point formatting.
 * @param num Floating point number.
 * @return Decimal part of floating point number.
 */
uint32_t SHT2x_GetDecimal(float num, int digits) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
	float postDec = num - SHT2x_GetInteger(num);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	1c18      	adds	r0, r3, #0
 800360e:	f7ff ffeb 	bl	80035e8 <SHT2x_GetInteger>
 8003612:	0003      	movs	r3, r0
 8003614:	0018      	movs	r0, r3
 8003616:	f7fd fbd9 	bl	8000dcc <__aeabi_i2f>
 800361a:	1c03      	adds	r3, r0, #0
 800361c:	1c19      	adds	r1, r3, #0
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fd fa06 	bl	8000a30 <__aeabi_fsub>
 8003624:	1c03      	adds	r3, r0, #0
 8003626:	60fb      	str	r3, [r7, #12]
	return postDec * SHT2x_Ipow(10, digits);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	0019      	movs	r1, r3
 800362c:	200a      	movs	r0, #10
 800362e:	f000 f812 	bl	8003656 <SHT2x_Ipow>
 8003632:	0003      	movs	r3, r0
 8003634:	0018      	movs	r0, r3
 8003636:	f7fd fc17 	bl	8000e68 <__aeabi_ui2f>
 800363a:	1c03      	adds	r3, r0, #0
 800363c:	68f9      	ldr	r1, [r7, #12]
 800363e:	1c18      	adds	r0, r3, #0
 8003640:	f7fd f8d0 	bl	80007e4 <__aeabi_fmul>
 8003644:	1c03      	adds	r3, r0, #0
 8003646:	1c18      	adds	r0, r3, #0
 8003648:	f7fc fe4a 	bl	80002e0 <__aeabi_f2uiz>
 800364c:	0003      	movs	r3, r0
}
 800364e:	0018      	movs	r0, r3
 8003650:	46bd      	mov	sp, r7
 8003652:	b004      	add	sp, #16
 8003654:	bd80      	pop	{r7, pc}

08003656 <SHT2x_Ipow>:
 * @brief Integer equivalent of pow() in math.h.
 * @param base Base.
 * @param power Power.
 * @return
 */
uint32_t SHT2x_Ipow(uint32_t base, uint32_t power) {
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]
	uint32_t temp = base;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 1; i < power; i++)
 8003664:	2301      	movs	r3, #1
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	e006      	b.n	8003678 <SHT2x_Ipow+0x22>
		temp *= base;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	4353      	muls	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 1; i < power; i++)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	3301      	adds	r3, #1
 8003676:	60bb      	str	r3, [r7, #8]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d3f4      	bcc.n	800366a <SHT2x_Ipow+0x14>
	return temp;
 8003680:	68fb      	ldr	r3, [r7, #12]
}
 8003682:	0018      	movs	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	b004      	add	sp, #16
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003692:	1dfb      	adds	r3, r7, #7
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_Init+0x3c>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <HAL_Init+0x3c>)
 800369e:	2140      	movs	r1, #64	; 0x40
 80036a0:	430a      	orrs	r2, r1
 80036a2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036a4:	2000      	movs	r0, #0
 80036a6:	f000 f811 	bl	80036cc <HAL_InitTick>
 80036aa:	1e03      	subs	r3, r0, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80036ae:	1dfb      	adds	r3, r7, #7
 80036b0:	2201      	movs	r2, #1
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	e001      	b.n	80036ba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80036b6:	f7ff fd07 	bl	80030c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036ba:	1dfb      	adds	r3, r7, #7
 80036bc:	781b      	ldrb	r3, [r3, #0]
}
 80036be:	0018      	movs	r0, r3
 80036c0:	46bd      	mov	sp, r7
 80036c2:	b002      	add	sp, #8
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	40022000 	.word	0x40022000

080036cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036d4:	4b14      	ldr	r3, [pc, #80]	; (8003728 <HAL_InitTick+0x5c>)
 80036d6:	681c      	ldr	r4, [r3, #0]
 80036d8:	4b14      	ldr	r3, [pc, #80]	; (800372c <HAL_InitTick+0x60>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	0019      	movs	r1, r3
 80036de:	23fa      	movs	r3, #250	; 0xfa
 80036e0:	0098      	lsls	r0, r3, #2
 80036e2:	f7fc fd23 	bl	800012c <__udivsi3>
 80036e6:	0003      	movs	r3, r0
 80036e8:	0019      	movs	r1, r3
 80036ea:	0020      	movs	r0, r4
 80036ec:	f7fc fd1e 	bl	800012c <__udivsi3>
 80036f0:	0003      	movs	r3, r0
 80036f2:	0018      	movs	r0, r3
 80036f4:	f000 f92f 	bl	8003956 <HAL_SYSTICK_Config>
 80036f8:	1e03      	subs	r3, r0, #0
 80036fa:	d001      	beq.n	8003700 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e00f      	b.n	8003720 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b03      	cmp	r3, #3
 8003704:	d80b      	bhi.n	800371e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	2301      	movs	r3, #1
 800370a:	425b      	negs	r3, r3
 800370c:	2200      	movs	r2, #0
 800370e:	0018      	movs	r0, r3
 8003710:	f000 f8fc 	bl	800390c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_InitTick+0x64>)
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	e000      	b.n	8003720 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
}
 8003720:	0018      	movs	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	b003      	add	sp, #12
 8003726:	bd90      	pop	{r4, r7, pc}
 8003728:	20000000 	.word	0x20000000
 800372c:	20000008 	.word	0x20000008
 8003730:	20000004 	.word	0x20000004

08003734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003738:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_IncTick+0x1c>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	001a      	movs	r2, r3
 800373e:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_IncTick+0x20>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	18d2      	adds	r2, r2, r3
 8003744:	4b03      	ldr	r3, [pc, #12]	; (8003754 <HAL_IncTick+0x20>)
 8003746:	601a      	str	r2, [r3, #0]
}
 8003748:	46c0      	nop			; (mov r8, r8)
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	20000008 	.word	0x20000008
 8003754:	200001ec 	.word	0x200001ec

08003758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  return uwTick;
 800375c:	4b02      	ldr	r3, [pc, #8]	; (8003768 <HAL_GetTick+0x10>)
 800375e:	681b      	ldr	r3, [r3, #0]
}
 8003760:	0018      	movs	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	200001ec 	.word	0x200001ec

0800376c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003774:	f7ff fff0 	bl	8003758 <HAL_GetTick>
 8003778:	0003      	movs	r3, r0
 800377a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	3301      	adds	r3, #1
 8003784:	d005      	beq.n	8003792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003786:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <HAL_Delay+0x44>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	001a      	movs	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	189b      	adds	r3, r3, r2
 8003790:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	f7ff ffe0 	bl	8003758 <HAL_GetTick>
 8003798:	0002      	movs	r2, r0
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d8f7      	bhi.n	8003794 <HAL_Delay+0x28>
  {
  }
}
 80037a4:	46c0      	nop			; (mov r8, r8)
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b004      	add	sp, #16
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	20000008 	.word	0x20000008

080037b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	0002      	movs	r2, r0
 80037bc:	1dfb      	adds	r3, r7, #7
 80037be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80037c0:	1dfb      	adds	r3, r7, #7
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b7f      	cmp	r3, #127	; 0x7f
 80037c6:	d809      	bhi.n	80037dc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037c8:	1dfb      	adds	r3, r7, #7
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	001a      	movs	r2, r3
 80037ce:	231f      	movs	r3, #31
 80037d0:	401a      	ands	r2, r3
 80037d2:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <__NVIC_EnableIRQ+0x30>)
 80037d4:	2101      	movs	r1, #1
 80037d6:	4091      	lsls	r1, r2
 80037d8:	000a      	movs	r2, r1
 80037da:	601a      	str	r2, [r3, #0]
  }
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	b002      	add	sp, #8
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	e000e100 	.word	0xe000e100

080037e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	0002      	movs	r2, r0
 80037f0:	6039      	str	r1, [r7, #0]
 80037f2:	1dfb      	adds	r3, r7, #7
 80037f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80037f6:	1dfb      	adds	r3, r7, #7
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b7f      	cmp	r3, #127	; 0x7f
 80037fc:	d828      	bhi.n	8003850 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037fe:	4a2f      	ldr	r2, [pc, #188]	; (80038bc <__NVIC_SetPriority+0xd4>)
 8003800:	1dfb      	adds	r3, r7, #7
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	b25b      	sxtb	r3, r3
 8003806:	089b      	lsrs	r3, r3, #2
 8003808:	33c0      	adds	r3, #192	; 0xc0
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	589b      	ldr	r3, [r3, r2]
 800380e:	1dfa      	adds	r2, r7, #7
 8003810:	7812      	ldrb	r2, [r2, #0]
 8003812:	0011      	movs	r1, r2
 8003814:	2203      	movs	r2, #3
 8003816:	400a      	ands	r2, r1
 8003818:	00d2      	lsls	r2, r2, #3
 800381a:	21ff      	movs	r1, #255	; 0xff
 800381c:	4091      	lsls	r1, r2
 800381e:	000a      	movs	r2, r1
 8003820:	43d2      	mvns	r2, r2
 8003822:	401a      	ands	r2, r3
 8003824:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	019b      	lsls	r3, r3, #6
 800382a:	22ff      	movs	r2, #255	; 0xff
 800382c:	401a      	ands	r2, r3
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	0018      	movs	r0, r3
 8003834:	2303      	movs	r3, #3
 8003836:	4003      	ands	r3, r0
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800383c:	481f      	ldr	r0, [pc, #124]	; (80038bc <__NVIC_SetPriority+0xd4>)
 800383e:	1dfb      	adds	r3, r7, #7
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	b25b      	sxtb	r3, r3
 8003844:	089b      	lsrs	r3, r3, #2
 8003846:	430a      	orrs	r2, r1
 8003848:	33c0      	adds	r3, #192	; 0xc0
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800384e:	e031      	b.n	80038b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003850:	4a1b      	ldr	r2, [pc, #108]	; (80038c0 <__NVIC_SetPriority+0xd8>)
 8003852:	1dfb      	adds	r3, r7, #7
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	0019      	movs	r1, r3
 8003858:	230f      	movs	r3, #15
 800385a:	400b      	ands	r3, r1
 800385c:	3b08      	subs	r3, #8
 800385e:	089b      	lsrs	r3, r3, #2
 8003860:	3306      	adds	r3, #6
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	18d3      	adds	r3, r2, r3
 8003866:	3304      	adds	r3, #4
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	1dfa      	adds	r2, r7, #7
 800386c:	7812      	ldrb	r2, [r2, #0]
 800386e:	0011      	movs	r1, r2
 8003870:	2203      	movs	r2, #3
 8003872:	400a      	ands	r2, r1
 8003874:	00d2      	lsls	r2, r2, #3
 8003876:	21ff      	movs	r1, #255	; 0xff
 8003878:	4091      	lsls	r1, r2
 800387a:	000a      	movs	r2, r1
 800387c:	43d2      	mvns	r2, r2
 800387e:	401a      	ands	r2, r3
 8003880:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	019b      	lsls	r3, r3, #6
 8003886:	22ff      	movs	r2, #255	; 0xff
 8003888:	401a      	ands	r2, r3
 800388a:	1dfb      	adds	r3, r7, #7
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	0018      	movs	r0, r3
 8003890:	2303      	movs	r3, #3
 8003892:	4003      	ands	r3, r0
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003898:	4809      	ldr	r0, [pc, #36]	; (80038c0 <__NVIC_SetPriority+0xd8>)
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	001c      	movs	r4, r3
 80038a0:	230f      	movs	r3, #15
 80038a2:	4023      	ands	r3, r4
 80038a4:	3b08      	subs	r3, #8
 80038a6:	089b      	lsrs	r3, r3, #2
 80038a8:	430a      	orrs	r2, r1
 80038aa:	3306      	adds	r3, #6
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	18c3      	adds	r3, r0, r3
 80038b0:	3304      	adds	r3, #4
 80038b2:	601a      	str	r2, [r3, #0]
}
 80038b4:	46c0      	nop			; (mov r8, r8)
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b003      	add	sp, #12
 80038ba:	bd90      	pop	{r4, r7, pc}
 80038bc:	e000e100 	.word	0xe000e100
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	1e5a      	subs	r2, r3, #1
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	045b      	lsls	r3, r3, #17
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d301      	bcc.n	80038dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038d8:	2301      	movs	r3, #1
 80038da:	e010      	b.n	80038fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038dc:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <SysTick_Config+0x44>)
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	3a01      	subs	r2, #1
 80038e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038e4:	2301      	movs	r3, #1
 80038e6:	425b      	negs	r3, r3
 80038e8:	2103      	movs	r1, #3
 80038ea:	0018      	movs	r0, r3
 80038ec:	f7ff ff7c 	bl	80037e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038f0:	4b05      	ldr	r3, [pc, #20]	; (8003908 <SysTick_Config+0x44>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038f6:	4b04      	ldr	r3, [pc, #16]	; (8003908 <SysTick_Config+0x44>)
 80038f8:	2207      	movs	r2, #7
 80038fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	0018      	movs	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	b002      	add	sp, #8
 8003904:	bd80      	pop	{r7, pc}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	e000e010 	.word	0xe000e010

0800390c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	607a      	str	r2, [r7, #4]
 8003916:	210f      	movs	r1, #15
 8003918:	187b      	adds	r3, r7, r1
 800391a:	1c02      	adds	r2, r0, #0
 800391c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	187b      	adds	r3, r7, r1
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	b25b      	sxtb	r3, r3
 8003926:	0011      	movs	r1, r2
 8003928:	0018      	movs	r0, r3
 800392a:	f7ff ff5d 	bl	80037e8 <__NVIC_SetPriority>
}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	46bd      	mov	sp, r7
 8003932:	b004      	add	sp, #16
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	0002      	movs	r2, r0
 800393e:	1dfb      	adds	r3, r7, #7
 8003940:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003942:	1dfb      	adds	r3, r7, #7
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	b25b      	sxtb	r3, r3
 8003948:	0018      	movs	r0, r3
 800394a:	f7ff ff33 	bl	80037b4 <__NVIC_EnableIRQ>
}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	46bd      	mov	sp, r7
 8003952:	b002      	add	sp, #8
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	0018      	movs	r0, r3
 8003962:	f7ff ffaf 	bl	80038c4 <SysTick_Config>
 8003966:	0003      	movs	r3, r0
}
 8003968:	0018      	movs	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	b002      	add	sp, #8
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800397a:	2300      	movs	r3, #0
 800397c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003982:	2300      	movs	r3, #0
 8003984:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003986:	e14f      	b.n	8003c28 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2101      	movs	r1, #1
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4091      	lsls	r1, r2
 8003992:	000a      	movs	r2, r1
 8003994:	4013      	ands	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d100      	bne.n	80039a0 <HAL_GPIO_Init+0x30>
 800399e:	e140      	b.n	8003c22 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2203      	movs	r2, #3
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d005      	beq.n	80039b8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2203      	movs	r2, #3
 80039b2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d130      	bne.n	8003a1a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	2203      	movs	r2, #3
 80039c4:	409a      	lsls	r2, r3
 80039c6:	0013      	movs	r3, r2
 80039c8:	43da      	mvns	r2, r3
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4013      	ands	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	409a      	lsls	r2, r3
 80039da:	0013      	movs	r3, r2
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039ee:	2201      	movs	r2, #1
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	409a      	lsls	r2, r3
 80039f4:	0013      	movs	r3, r2
 80039f6:	43da      	mvns	r2, r3
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4013      	ands	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	091b      	lsrs	r3, r3, #4
 8003a04:	2201      	movs	r2, #1
 8003a06:	401a      	ands	r2, r3
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	0013      	movs	r3, r2
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2203      	movs	r2, #3
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d017      	beq.n	8003a56 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	2203      	movs	r2, #3
 8003a32:	409a      	lsls	r2, r3
 8003a34:	0013      	movs	r3, r2
 8003a36:	43da      	mvns	r2, r3
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	409a      	lsls	r2, r3
 8003a48:	0013      	movs	r3, r2
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d123      	bne.n	8003aaa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	08da      	lsrs	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3208      	adds	r2, #8
 8003a6a:	0092      	lsls	r2, r2, #2
 8003a6c:	58d3      	ldr	r3, [r2, r3]
 8003a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2207      	movs	r2, #7
 8003a74:	4013      	ands	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	220f      	movs	r2, #15
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	0013      	movs	r3, r2
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2107      	movs	r1, #7
 8003a8e:	400b      	ands	r3, r1
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	409a      	lsls	r2, r3
 8003a94:	0013      	movs	r3, r2
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	08da      	lsrs	r2, r3, #3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3208      	adds	r2, #8
 8003aa4:	0092      	lsls	r2, r2, #2
 8003aa6:	6939      	ldr	r1, [r7, #16]
 8003aa8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	0013      	movs	r3, r2
 8003aba:	43da      	mvns	r2, r3
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	401a      	ands	r2, r3
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	0013      	movs	r3, r2
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	23c0      	movs	r3, #192	; 0xc0
 8003ae4:	029b      	lsls	r3, r3, #10
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d100      	bne.n	8003aec <HAL_GPIO_Init+0x17c>
 8003aea:	e09a      	b.n	8003c22 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aec:	4b54      	ldr	r3, [pc, #336]	; (8003c40 <HAL_GPIO_Init+0x2d0>)
 8003aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003af0:	4b53      	ldr	r3, [pc, #332]	; (8003c40 <HAL_GPIO_Init+0x2d0>)
 8003af2:	2101      	movs	r1, #1
 8003af4:	430a      	orrs	r2, r1
 8003af6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003af8:	4a52      	ldr	r2, [pc, #328]	; (8003c44 <HAL_GPIO_Init+0x2d4>)
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	089b      	lsrs	r3, r3, #2
 8003afe:	3302      	adds	r3, #2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	589b      	ldr	r3, [r3, r2]
 8003b04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2203      	movs	r2, #3
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	220f      	movs	r2, #15
 8003b10:	409a      	lsls	r2, r3
 8003b12:	0013      	movs	r3, r2
 8003b14:	43da      	mvns	r2, r3
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	23a0      	movs	r3, #160	; 0xa0
 8003b20:	05db      	lsls	r3, r3, #23
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d019      	beq.n	8003b5a <HAL_GPIO_Init+0x1ea>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a47      	ldr	r2, [pc, #284]	; (8003c48 <HAL_GPIO_Init+0x2d8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d013      	beq.n	8003b56 <HAL_GPIO_Init+0x1e6>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a46      	ldr	r2, [pc, #280]	; (8003c4c <HAL_GPIO_Init+0x2dc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00d      	beq.n	8003b52 <HAL_GPIO_Init+0x1e2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a45      	ldr	r2, [pc, #276]	; (8003c50 <HAL_GPIO_Init+0x2e0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d007      	beq.n	8003b4e <HAL_GPIO_Init+0x1de>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a44      	ldr	r2, [pc, #272]	; (8003c54 <HAL_GPIO_Init+0x2e4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d101      	bne.n	8003b4a <HAL_GPIO_Init+0x1da>
 8003b46:	2305      	movs	r3, #5
 8003b48:	e008      	b.n	8003b5c <HAL_GPIO_Init+0x1ec>
 8003b4a:	2306      	movs	r3, #6
 8003b4c:	e006      	b.n	8003b5c <HAL_GPIO_Init+0x1ec>
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e004      	b.n	8003b5c <HAL_GPIO_Init+0x1ec>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e002      	b.n	8003b5c <HAL_GPIO_Init+0x1ec>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <HAL_GPIO_Init+0x1ec>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	2103      	movs	r1, #3
 8003b60:	400a      	ands	r2, r1
 8003b62:	0092      	lsls	r2, r2, #2
 8003b64:	4093      	lsls	r3, r2
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b6c:	4935      	ldr	r1, [pc, #212]	; (8003c44 <HAL_GPIO_Init+0x2d4>)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	089b      	lsrs	r3, r3, #2
 8003b72:	3302      	adds	r3, #2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b7a:	4b37      	ldr	r3, [pc, #220]	; (8003c58 <HAL_GPIO_Init+0x2e8>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	43da      	mvns	r2, r3
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4013      	ands	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	2380      	movs	r3, #128	; 0x80
 8003b90:	035b      	lsls	r3, r3, #13
 8003b92:	4013      	ands	r3, r2
 8003b94:	d003      	beq.n	8003b9e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003b9e:	4b2e      	ldr	r3, [pc, #184]	; (8003c58 <HAL_GPIO_Init+0x2e8>)
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003ba4:	4b2c      	ldr	r3, [pc, #176]	; (8003c58 <HAL_GPIO_Init+0x2e8>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	43da      	mvns	r2, r3
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	2380      	movs	r3, #128	; 0x80
 8003bba:	039b      	lsls	r3, r3, #14
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003bc8:	4b23      	ldr	r3, [pc, #140]	; (8003c58 <HAL_GPIO_Init+0x2e8>)
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003bce:	4b22      	ldr	r3, [pc, #136]	; (8003c58 <HAL_GPIO_Init+0x2e8>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	43da      	mvns	r2, r3
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	2380      	movs	r3, #128	; 0x80
 8003be4:	029b      	lsls	r3, r3, #10
 8003be6:	4013      	ands	r3, r2
 8003be8:	d003      	beq.n	8003bf2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003bf2:	4b19      	ldr	r3, [pc, #100]	; (8003c58 <HAL_GPIO_Init+0x2e8>)
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bf8:	4b17      	ldr	r3, [pc, #92]	; (8003c58 <HAL_GPIO_Init+0x2e8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	43da      	mvns	r2, r3
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4013      	ands	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	2380      	movs	r3, #128	; 0x80
 8003c0e:	025b      	lsls	r3, r3, #9
 8003c10:	4013      	ands	r3, r2
 8003c12:	d003      	beq.n	8003c1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003c1c:	4b0e      	ldr	r3, [pc, #56]	; (8003c58 <HAL_GPIO_Init+0x2e8>)
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	3301      	adds	r3, #1
 8003c26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	40da      	lsrs	r2, r3
 8003c30:	1e13      	subs	r3, r2, #0
 8003c32:	d000      	beq.n	8003c36 <HAL_GPIO_Init+0x2c6>
 8003c34:	e6a8      	b.n	8003988 <HAL_GPIO_Init+0x18>
  }
}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b006      	add	sp, #24
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40010000 	.word	0x40010000
 8003c48:	50000400 	.word	0x50000400
 8003c4c:	50000800 	.word	0x50000800
 8003c50:	50000c00 	.word	0x50000c00
 8003c54:	50001c00 	.word	0x50001c00
 8003c58:	40010400 	.word	0x40010400

08003c5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e082      	b.n	8003d74 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2241      	movs	r2, #65	; 0x41
 8003c72:	5c9b      	ldrb	r3, [r3, r2]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d107      	bne.n	8003c8a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2240      	movs	r2, #64	; 0x40
 8003c7e:	2100      	movs	r1, #0
 8003c80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	0018      	movs	r0, r3
 8003c86:	f7ff fa33 	bl	80030f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2241      	movs	r2, #65	; 0x41
 8003c8e:	2124      	movs	r1, #36	; 0x24
 8003c90:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	438a      	bics	r2, r1
 8003ca0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4934      	ldr	r1, [pc, #208]	; (8003d7c <HAL_I2C_Init+0x120>)
 8003cac:	400a      	ands	r2, r1
 8003cae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4931      	ldr	r1, [pc, #196]	; (8003d80 <HAL_I2C_Init+0x124>)
 8003cbc:	400a      	ands	r2, r1
 8003cbe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d108      	bne.n	8003cda <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2180      	movs	r1, #128	; 0x80
 8003cd2:	0209      	lsls	r1, r1, #8
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	e007      	b.n	8003cea <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2184      	movs	r1, #132	; 0x84
 8003ce4:	0209      	lsls	r1, r1, #8
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d104      	bne.n	8003cfc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2280      	movs	r2, #128	; 0x80
 8003cf8:	0112      	lsls	r2, r2, #4
 8003cfa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	491f      	ldr	r1, [pc, #124]	; (8003d84 <HAL_I2C_Init+0x128>)
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	491a      	ldr	r1, [pc, #104]	; (8003d80 <HAL_I2C_Init+0x124>)
 8003d18:	400a      	ands	r2, r1
 8003d1a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	431a      	orrs	r2, r3
 8003d26:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69d9      	ldr	r1, [r3, #28]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1a      	ldr	r2, [r3, #32]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2101      	movs	r1, #1
 8003d52:	430a      	orrs	r2, r1
 8003d54:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2241      	movs	r2, #65	; 0x41
 8003d60:	2120      	movs	r1, #32
 8003d62:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2242      	movs	r2, #66	; 0x42
 8003d6e:	2100      	movs	r1, #0
 8003d70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	0018      	movs	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b002      	add	sp, #8
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	f0ffffff 	.word	0xf0ffffff
 8003d80:	ffff7fff 	.word	0xffff7fff
 8003d84:	02008000 	.word	0x02008000

08003d88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003d88:	b590      	push	{r4, r7, lr}
 8003d8a:	b089      	sub	sp, #36	; 0x24
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	0008      	movs	r0, r1
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	0019      	movs	r1, r3
 8003d96:	230a      	movs	r3, #10
 8003d98:	18fb      	adds	r3, r7, r3
 8003d9a:	1c02      	adds	r2, r0, #0
 8003d9c:	801a      	strh	r2, [r3, #0]
 8003d9e:	2308      	movs	r3, #8
 8003da0:	18fb      	adds	r3, r7, r3
 8003da2:	1c0a      	adds	r2, r1, #0
 8003da4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2241      	movs	r2, #65	; 0x41
 8003daa:	5c9b      	ldrb	r3, [r3, r2]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d000      	beq.n	8003db4 <HAL_I2C_Master_Transmit+0x2c>
 8003db2:	e0e7      	b.n	8003f84 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2240      	movs	r2, #64	; 0x40
 8003db8:	5c9b      	ldrb	r3, [r3, r2]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_I2C_Master_Transmit+0x3a>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e0e1      	b.n	8003f86 <HAL_I2C_Master_Transmit+0x1fe>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2240      	movs	r2, #64	; 0x40
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003dca:	f7ff fcc5 	bl	8003758 <HAL_GetTick>
 8003dce:	0003      	movs	r3, r0
 8003dd0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003dd2:	2380      	movs	r3, #128	; 0x80
 8003dd4:	0219      	lsls	r1, r3, #8
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	2319      	movs	r3, #25
 8003dde:	2201      	movs	r2, #1
 8003de0:	f000 fa04 	bl	80041ec <I2C_WaitOnFlagUntilTimeout>
 8003de4:	1e03      	subs	r3, r0, #0
 8003de6:	d001      	beq.n	8003dec <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0cc      	b.n	8003f86 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2241      	movs	r2, #65	; 0x41
 8003df0:	2121      	movs	r1, #33	; 0x21
 8003df2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2242      	movs	r2, #66	; 0x42
 8003df8:	2110      	movs	r1, #16
 8003dfa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2208      	movs	r2, #8
 8003e0c:	18ba      	adds	r2, r7, r2
 8003e0e:	8812      	ldrh	r2, [r2, #0]
 8003e10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2bff      	cmp	r3, #255	; 0xff
 8003e20:	d911      	bls.n	8003e46 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	22ff      	movs	r2, #255	; 0xff
 8003e26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	2380      	movs	r3, #128	; 0x80
 8003e30:	045c      	lsls	r4, r3, #17
 8003e32:	230a      	movs	r3, #10
 8003e34:	18fb      	adds	r3, r7, r3
 8003e36:	8819      	ldrh	r1, [r3, #0]
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	4b55      	ldr	r3, [pc, #340]	; (8003f90 <HAL_I2C_Master_Transmit+0x208>)
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	0023      	movs	r3, r4
 8003e40:	f000 fc2e 	bl	80046a0 <I2C_TransferConfig>
 8003e44:	e075      	b.n	8003f32 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	2380      	movs	r3, #128	; 0x80
 8003e58:	049c      	lsls	r4, r3, #18
 8003e5a:	230a      	movs	r3, #10
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	8819      	ldrh	r1, [r3, #0]
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	4b4b      	ldr	r3, [pc, #300]	; (8003f90 <HAL_I2C_Master_Transmit+0x208>)
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	0023      	movs	r3, r4
 8003e68:	f000 fc1a 	bl	80046a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003e6c:	e061      	b.n	8003f32 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	0018      	movs	r0, r3
 8003e76:	f000 fa07 	bl	8004288 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e7a:	1e03      	subs	r3, r0, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e081      	b.n	8003f86 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	781a      	ldrb	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d03a      	beq.n	8003f32 <HAL_I2C_Master_Transmit+0x1aa>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d136      	bne.n	8003f32 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	0013      	movs	r3, r2
 8003ece:	2200      	movs	r2, #0
 8003ed0:	2180      	movs	r1, #128	; 0x80
 8003ed2:	f000 f98b 	bl	80041ec <I2C_WaitOnFlagUntilTimeout>
 8003ed6:	1e03      	subs	r3, r0, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e053      	b.n	8003f86 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2bff      	cmp	r3, #255	; 0xff
 8003ee6:	d911      	bls.n	8003f0c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	22ff      	movs	r2, #255	; 0xff
 8003eec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	2380      	movs	r3, #128	; 0x80
 8003ef6:	045c      	lsls	r4, r3, #17
 8003ef8:	230a      	movs	r3, #10
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	8819      	ldrh	r1, [r3, #0]
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	2300      	movs	r3, #0
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	0023      	movs	r3, r4
 8003f06:	f000 fbcb 	bl	80046a0 <I2C_TransferConfig>
 8003f0a:	e012      	b.n	8003f32 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	2380      	movs	r3, #128	; 0x80
 8003f1e:	049c      	lsls	r4, r3, #18
 8003f20:	230a      	movs	r3, #10
 8003f22:	18fb      	adds	r3, r7, r3
 8003f24:	8819      	ldrh	r1, [r3, #0]
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	0023      	movs	r3, r4
 8003f2e:	f000 fbb7 	bl	80046a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d198      	bne.n	8003e6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	0018      	movs	r0, r3
 8003f44:	f000 f9e6 	bl	8004314 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f48:	1e03      	subs	r3, r0, #0
 8003f4a:	d001      	beq.n	8003f50 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e01a      	b.n	8003f86 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2220      	movs	r2, #32
 8003f56:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	490c      	ldr	r1, [pc, #48]	; (8003f94 <HAL_I2C_Master_Transmit+0x20c>)
 8003f64:	400a      	ands	r2, r1
 8003f66:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2241      	movs	r2, #65	; 0x41
 8003f6c:	2120      	movs	r1, #32
 8003f6e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2242      	movs	r2, #66	; 0x42
 8003f74:	2100      	movs	r1, #0
 8003f76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2240      	movs	r2, #64	; 0x40
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	e000      	b.n	8003f86 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003f84:	2302      	movs	r3, #2
  }
}
 8003f86:	0018      	movs	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	b007      	add	sp, #28
 8003f8c:	bd90      	pop	{r4, r7, pc}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	80002000 	.word	0x80002000
 8003f94:	fe00e800 	.word	0xfe00e800

08003f98 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003f98:	b590      	push	{r4, r7, lr}
 8003f9a:	b089      	sub	sp, #36	; 0x24
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	0008      	movs	r0, r1
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	0019      	movs	r1, r3
 8003fa6:	230a      	movs	r3, #10
 8003fa8:	18fb      	adds	r3, r7, r3
 8003faa:	1c02      	adds	r2, r0, #0
 8003fac:	801a      	strh	r2, [r3, #0]
 8003fae:	2308      	movs	r3, #8
 8003fb0:	18fb      	adds	r3, r7, r3
 8003fb2:	1c0a      	adds	r2, r1, #0
 8003fb4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2241      	movs	r2, #65	; 0x41
 8003fba:	5c9b      	ldrb	r3, [r3, r2]
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b20      	cmp	r3, #32
 8003fc0:	d000      	beq.n	8003fc4 <HAL_I2C_Master_Receive+0x2c>
 8003fc2:	e0e8      	b.n	8004196 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2240      	movs	r2, #64	; 0x40
 8003fc8:	5c9b      	ldrb	r3, [r3, r2]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <HAL_I2C_Master_Receive+0x3a>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	e0e2      	b.n	8004198 <HAL_I2C_Master_Receive+0x200>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2240      	movs	r2, #64	; 0x40
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003fda:	f7ff fbbd 	bl	8003758 <HAL_GetTick>
 8003fde:	0003      	movs	r3, r0
 8003fe0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fe2:	2380      	movs	r3, #128	; 0x80
 8003fe4:	0219      	lsls	r1, r3, #8
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	2319      	movs	r3, #25
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f000 f8fc 	bl	80041ec <I2C_WaitOnFlagUntilTimeout>
 8003ff4:	1e03      	subs	r3, r0, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0cd      	b.n	8004198 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2241      	movs	r2, #65	; 0x41
 8004000:	2122      	movs	r1, #34	; 0x22
 8004002:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2242      	movs	r2, #66	; 0x42
 8004008:	2110      	movs	r1, #16
 800400a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2208      	movs	r2, #8
 800401c:	18ba      	adds	r2, r7, r2
 800401e:	8812      	ldrh	r2, [r2, #0]
 8004020:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402c:	b29b      	uxth	r3, r3
 800402e:	2bff      	cmp	r3, #255	; 0xff
 8004030:	d911      	bls.n	8004056 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	22ff      	movs	r2, #255	; 0xff
 8004036:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403c:	b2da      	uxtb	r2, r3
 800403e:	2380      	movs	r3, #128	; 0x80
 8004040:	045c      	lsls	r4, r3, #17
 8004042:	230a      	movs	r3, #10
 8004044:	18fb      	adds	r3, r7, r3
 8004046:	8819      	ldrh	r1, [r3, #0]
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	4b55      	ldr	r3, [pc, #340]	; (80041a0 <HAL_I2C_Master_Receive+0x208>)
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	0023      	movs	r3, r4
 8004050:	f000 fb26 	bl	80046a0 <I2C_TransferConfig>
 8004054:	e076      	b.n	8004144 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004064:	b2da      	uxtb	r2, r3
 8004066:	2380      	movs	r3, #128	; 0x80
 8004068:	049c      	lsls	r4, r3, #18
 800406a:	230a      	movs	r3, #10
 800406c:	18fb      	adds	r3, r7, r3
 800406e:	8819      	ldrh	r1, [r3, #0]
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	4b4b      	ldr	r3, [pc, #300]	; (80041a0 <HAL_I2C_Master_Receive+0x208>)
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	0023      	movs	r3, r4
 8004078:	f000 fb12 	bl	80046a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800407c:	e062      	b.n	8004144 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	0018      	movs	r0, r3
 8004086:	f000 f989 	bl	800439c <I2C_WaitOnRXNEFlagUntilTimeout>
 800408a:	1e03      	subs	r3, r0, #0
 800408c:	d001      	beq.n	8004092 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e082      	b.n	8004198 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d03a      	beq.n	8004144 <HAL_I2C_Master_Receive+0x1ac>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d136      	bne.n	8004144 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	0013      	movs	r3, r2
 80040e0:	2200      	movs	r2, #0
 80040e2:	2180      	movs	r1, #128	; 0x80
 80040e4:	f000 f882 	bl	80041ec <I2C_WaitOnFlagUntilTimeout>
 80040e8:	1e03      	subs	r3, r0, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e053      	b.n	8004198 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2bff      	cmp	r3, #255	; 0xff
 80040f8:	d911      	bls.n	800411e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	22ff      	movs	r2, #255	; 0xff
 80040fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004104:	b2da      	uxtb	r2, r3
 8004106:	2380      	movs	r3, #128	; 0x80
 8004108:	045c      	lsls	r4, r3, #17
 800410a:	230a      	movs	r3, #10
 800410c:	18fb      	adds	r3, r7, r3
 800410e:	8819      	ldrh	r1, [r3, #0]
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	2300      	movs	r3, #0
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	0023      	movs	r3, r4
 8004118:	f000 fac2 	bl	80046a0 <I2C_TransferConfig>
 800411c:	e012      	b.n	8004144 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412c:	b2da      	uxtb	r2, r3
 800412e:	2380      	movs	r3, #128	; 0x80
 8004130:	049c      	lsls	r4, r3, #18
 8004132:	230a      	movs	r3, #10
 8004134:	18fb      	adds	r3, r7, r3
 8004136:	8819      	ldrh	r1, [r3, #0]
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	2300      	movs	r3, #0
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	0023      	movs	r3, r4
 8004140:	f000 faae 	bl	80046a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d197      	bne.n	800407e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	0018      	movs	r0, r3
 8004156:	f000 f8dd 	bl	8004314 <I2C_WaitOnSTOPFlagUntilTimeout>
 800415a:	1e03      	subs	r3, r0, #0
 800415c:	d001      	beq.n	8004162 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e01a      	b.n	8004198 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2220      	movs	r2, #32
 8004168:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	490b      	ldr	r1, [pc, #44]	; (80041a4 <HAL_I2C_Master_Receive+0x20c>)
 8004176:	400a      	ands	r2, r1
 8004178:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2241      	movs	r2, #65	; 0x41
 800417e:	2120      	movs	r1, #32
 8004180:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2242      	movs	r2, #66	; 0x42
 8004186:	2100      	movs	r1, #0
 8004188:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2240      	movs	r2, #64	; 0x40
 800418e:	2100      	movs	r1, #0
 8004190:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	e000      	b.n	8004198 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004196:	2302      	movs	r3, #2
  }
}
 8004198:	0018      	movs	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	b007      	add	sp, #28
 800419e:	bd90      	pop	{r4, r7, pc}
 80041a0:	80002400 	.word	0x80002400
 80041a4:	fe00e800 	.word	0xfe00e800

080041a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	2202      	movs	r2, #2
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d103      	bne.n	80041c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2200      	movs	r2, #0
 80041c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	2201      	movs	r2, #1
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d007      	beq.n	80041e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2101      	movs	r1, #1
 80041e0:	430a      	orrs	r2, r1
 80041e2:	619a      	str	r2, [r3, #24]
  }
}
 80041e4:	46c0      	nop			; (mov r8, r8)
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b002      	add	sp, #8
 80041ea:	bd80      	pop	{r7, pc}

080041ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	1dfb      	adds	r3, r7, #7
 80041fa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041fc:	e030      	b.n	8004260 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	3301      	adds	r3, #1
 8004202:	d02d      	beq.n	8004260 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004204:	f7ff faa8 	bl	8003758 <HAL_GetTick>
 8004208:	0002      	movs	r2, r0
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d302      	bcc.n	800421a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d122      	bne.n	8004260 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	4013      	ands	r3, r2
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	425a      	negs	r2, r3
 800422a:	4153      	adcs	r3, r2
 800422c:	b2db      	uxtb	r3, r3
 800422e:	001a      	movs	r2, r3
 8004230:	1dfb      	adds	r3, r7, #7
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d113      	bne.n	8004260 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	2220      	movs	r2, #32
 800423e:	431a      	orrs	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2241      	movs	r2, #65	; 0x41
 8004248:	2120      	movs	r1, #32
 800424a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2242      	movs	r2, #66	; 0x42
 8004250:	2100      	movs	r1, #0
 8004252:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2240      	movs	r2, #64	; 0x40
 8004258:	2100      	movs	r1, #0
 800425a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e00f      	b.n	8004280 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	4013      	ands	r3, r2
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	425a      	negs	r2, r3
 8004270:	4153      	adcs	r3, r2
 8004272:	b2db      	uxtb	r3, r3
 8004274:	001a      	movs	r2, r3
 8004276:	1dfb      	adds	r3, r7, #7
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d0bf      	beq.n	80041fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	0018      	movs	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	b004      	add	sp, #16
 8004286:	bd80      	pop	{r7, pc}

08004288 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004294:	e032      	b.n	80042fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	68b9      	ldr	r1, [r7, #8]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	0018      	movs	r0, r3
 800429e:	f000 f8ff 	bl	80044a0 <I2C_IsErrorOccurred>
 80042a2:	1e03      	subs	r3, r0, #0
 80042a4:	d001      	beq.n	80042aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e030      	b.n	800430c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	3301      	adds	r3, #1
 80042ae:	d025      	beq.n	80042fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b0:	f7ff fa52 	bl	8003758 <HAL_GetTick>
 80042b4:	0002      	movs	r2, r0
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d302      	bcc.n	80042c6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d11a      	bne.n	80042fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	2202      	movs	r2, #2
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d013      	beq.n	80042fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d8:	2220      	movs	r2, #32
 80042da:	431a      	orrs	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2241      	movs	r2, #65	; 0x41
 80042e4:	2120      	movs	r1, #32
 80042e6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2242      	movs	r2, #66	; 0x42
 80042ec:	2100      	movs	r1, #0
 80042ee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2240      	movs	r2, #64	; 0x40
 80042f4:	2100      	movs	r1, #0
 80042f6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e007      	b.n	800430c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	2202      	movs	r2, #2
 8004304:	4013      	ands	r3, r2
 8004306:	2b02      	cmp	r3, #2
 8004308:	d1c5      	bne.n	8004296 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	0018      	movs	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	b004      	add	sp, #16
 8004312:	bd80      	pop	{r7, pc}

08004314 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004320:	e02f      	b.n	8004382 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	68b9      	ldr	r1, [r7, #8]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	0018      	movs	r0, r3
 800432a:	f000 f8b9 	bl	80044a0 <I2C_IsErrorOccurred>
 800432e:	1e03      	subs	r3, r0, #0
 8004330:	d001      	beq.n	8004336 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e02d      	b.n	8004392 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004336:	f7ff fa0f 	bl	8003758 <HAL_GetTick>
 800433a:	0002      	movs	r2, r0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	429a      	cmp	r2, r3
 8004344:	d302      	bcc.n	800434c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d11a      	bne.n	8004382 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	2220      	movs	r2, #32
 8004354:	4013      	ands	r3, r2
 8004356:	2b20      	cmp	r3, #32
 8004358:	d013      	beq.n	8004382 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435e:	2220      	movs	r2, #32
 8004360:	431a      	orrs	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2241      	movs	r2, #65	; 0x41
 800436a:	2120      	movs	r1, #32
 800436c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2242      	movs	r2, #66	; 0x42
 8004372:	2100      	movs	r1, #0
 8004374:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2240      	movs	r2, #64	; 0x40
 800437a:	2100      	movs	r1, #0
 800437c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e007      	b.n	8004392 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2220      	movs	r2, #32
 800438a:	4013      	ands	r3, r2
 800438c:	2b20      	cmp	r3, #32
 800438e:	d1c8      	bne.n	8004322 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	0018      	movs	r0, r3
 8004394:	46bd      	mov	sp, r7
 8004396:	b004      	add	sp, #16
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043a8:	e06b      	b.n	8004482 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	68b9      	ldr	r1, [r7, #8]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	0018      	movs	r0, r3
 80043b2:	f000 f875 	bl	80044a0 <I2C_IsErrorOccurred>
 80043b6:	1e03      	subs	r3, r0, #0
 80043b8:	d001      	beq.n	80043be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e069      	b.n	8004492 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	2220      	movs	r2, #32
 80043c6:	4013      	ands	r3, r2
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d138      	bne.n	800443e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	2204      	movs	r2, #4
 80043d4:	4013      	ands	r3, r2
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d105      	bne.n	80043e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	e055      	b.n	8004492 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	2210      	movs	r2, #16
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b10      	cmp	r3, #16
 80043f2:	d107      	bne.n	8004404 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2210      	movs	r2, #16
 80043fa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2204      	movs	r2, #4
 8004400:	645a      	str	r2, [r3, #68]	; 0x44
 8004402:	e002      	b.n	800440a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2220      	movs	r2, #32
 8004410:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	491f      	ldr	r1, [pc, #124]	; (800449c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800441e:	400a      	ands	r2, r1
 8004420:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2241      	movs	r2, #65	; 0x41
 8004426:	2120      	movs	r1, #32
 8004428:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2242      	movs	r2, #66	; 0x42
 800442e:	2100      	movs	r1, #0
 8004430:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2240      	movs	r2, #64	; 0x40
 8004436:	2100      	movs	r1, #0
 8004438:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e029      	b.n	8004492 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443e:	f7ff f98b 	bl	8003758 <HAL_GetTick>
 8004442:	0002      	movs	r2, r0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	429a      	cmp	r2, r3
 800444c:	d302      	bcc.n	8004454 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d116      	bne.n	8004482 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	2204      	movs	r2, #4
 800445c:	4013      	ands	r3, r2
 800445e:	2b04      	cmp	r3, #4
 8004460:	d00f      	beq.n	8004482 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004466:	2220      	movs	r2, #32
 8004468:	431a      	orrs	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2241      	movs	r2, #65	; 0x41
 8004472:	2120      	movs	r1, #32
 8004474:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2240      	movs	r2, #64	; 0x40
 800447a:	2100      	movs	r1, #0
 800447c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e007      	b.n	8004492 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	2204      	movs	r2, #4
 800448a:	4013      	ands	r3, r2
 800448c:	2b04      	cmp	r3, #4
 800448e:	d18c      	bne.n	80043aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	0018      	movs	r0, r3
 8004494:	46bd      	mov	sp, r7
 8004496:	b004      	add	sp, #16
 8004498:	bd80      	pop	{r7, pc}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	fe00e800 	.word	0xfe00e800

080044a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044a0:	b590      	push	{r4, r7, lr}
 80044a2:	b08b      	sub	sp, #44	; 0x2c
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044ac:	2327      	movs	r3, #39	; 0x27
 80044ae:	18fb      	adds	r3, r7, r3
 80044b0:	2200      	movs	r2, #0
 80044b2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80044bc:	2300      	movs	r3, #0
 80044be:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	2210      	movs	r2, #16
 80044c8:	4013      	ands	r3, r2
 80044ca:	d100      	bne.n	80044ce <I2C_IsErrorOccurred+0x2e>
 80044cc:	e082      	b.n	80045d4 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2210      	movs	r2, #16
 80044d4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044d6:	e060      	b.n	800459a <I2C_IsErrorOccurred+0xfa>
 80044d8:	2427      	movs	r4, #39	; 0x27
 80044da:	193b      	adds	r3, r7, r4
 80044dc:	193a      	adds	r2, r7, r4
 80044de:	7812      	ldrb	r2, [r2, #0]
 80044e0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	3301      	adds	r3, #1
 80044e6:	d058      	beq.n	800459a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044e8:	f7ff f936 	bl	8003758 <HAL_GetTick>
 80044ec:	0002      	movs	r2, r0
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d306      	bcc.n	8004506 <I2C_IsErrorOccurred+0x66>
 80044f8:	193b      	adds	r3, r7, r4
 80044fa:	193a      	adds	r2, r7, r4
 80044fc:	7812      	ldrb	r2, [r2, #0]
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d149      	bne.n	800459a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	2380      	movs	r3, #128	; 0x80
 800450e:	01db      	lsls	r3, r3, #7
 8004510:	4013      	ands	r3, r2
 8004512:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004514:	2013      	movs	r0, #19
 8004516:	183b      	adds	r3, r7, r0
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	2142      	movs	r1, #66	; 0x42
 800451c:	5c52      	ldrb	r2, [r2, r1]
 800451e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699a      	ldr	r2, [r3, #24]
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	401a      	ands	r2, r3
 800452c:	2380      	movs	r3, #128	; 0x80
 800452e:	021b      	lsls	r3, r3, #8
 8004530:	429a      	cmp	r2, r3
 8004532:	d126      	bne.n	8004582 <I2C_IsErrorOccurred+0xe2>
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	01db      	lsls	r3, r3, #7
 800453a:	429a      	cmp	r2, r3
 800453c:	d021      	beq.n	8004582 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800453e:	183b      	adds	r3, r7, r0
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b20      	cmp	r3, #32
 8004544:	d01d      	beq.n	8004582 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2180      	movs	r1, #128	; 0x80
 8004552:	01c9      	lsls	r1, r1, #7
 8004554:	430a      	orrs	r2, r1
 8004556:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004558:	f7ff f8fe 	bl	8003758 <HAL_GetTick>
 800455c:	0003      	movs	r3, r0
 800455e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004560:	e00f      	b.n	8004582 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004562:	f7ff f8f9 	bl	8003758 <HAL_GetTick>
 8004566:	0002      	movs	r2, r0
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b19      	cmp	r3, #25
 800456e:	d908      	bls.n	8004582 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	2220      	movs	r2, #32
 8004574:	4313      	orrs	r3, r2
 8004576:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004578:	2327      	movs	r3, #39	; 0x27
 800457a:	18fb      	adds	r3, r7, r3
 800457c:	2201      	movs	r2, #1
 800457e:	701a      	strb	r2, [r3, #0]

              break;
 8004580:	e00b      	b.n	800459a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	2220      	movs	r2, #32
 800458a:	4013      	ands	r3, r2
 800458c:	2127      	movs	r1, #39	; 0x27
 800458e:	187a      	adds	r2, r7, r1
 8004590:	1879      	adds	r1, r7, r1
 8004592:	7809      	ldrb	r1, [r1, #0]
 8004594:	7011      	strb	r1, [r2, #0]
 8004596:	2b20      	cmp	r3, #32
 8004598:	d1e3      	bne.n	8004562 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	2220      	movs	r2, #32
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b20      	cmp	r3, #32
 80045a6:	d004      	beq.n	80045b2 <I2C_IsErrorOccurred+0x112>
 80045a8:	2327      	movs	r3, #39	; 0x27
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d092      	beq.n	80044d8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80045b2:	2327      	movs	r3, #39	; 0x27
 80045b4:	18fb      	adds	r3, r7, r3
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d103      	bne.n	80045c4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2220      	movs	r2, #32
 80045c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	2204      	movs	r2, #4
 80045c8:	4313      	orrs	r3, r2
 80045ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80045cc:	2327      	movs	r3, #39	; 0x27
 80045ce:	18fb      	adds	r3, r7, r3
 80045d0:	2201      	movs	r2, #1
 80045d2:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	2380      	movs	r3, #128	; 0x80
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	4013      	ands	r3, r2
 80045e4:	d00c      	beq.n	8004600 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	2201      	movs	r2, #1
 80045ea:	4313      	orrs	r3, r2
 80045ec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2280      	movs	r2, #128	; 0x80
 80045f4:	0052      	lsls	r2, r2, #1
 80045f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045f8:	2327      	movs	r3, #39	; 0x27
 80045fa:	18fb      	adds	r3, r7, r3
 80045fc:	2201      	movs	r2, #1
 80045fe:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	2380      	movs	r3, #128	; 0x80
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4013      	ands	r3, r2
 8004608:	d00c      	beq.n	8004624 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	2208      	movs	r2, #8
 800460e:	4313      	orrs	r3, r2
 8004610:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2280      	movs	r2, #128	; 0x80
 8004618:	00d2      	lsls	r2, r2, #3
 800461a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800461c:	2327      	movs	r3, #39	; 0x27
 800461e:	18fb      	adds	r3, r7, r3
 8004620:	2201      	movs	r2, #1
 8004622:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	2380      	movs	r3, #128	; 0x80
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4013      	ands	r3, r2
 800462c:	d00c      	beq.n	8004648 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	2202      	movs	r2, #2
 8004632:	4313      	orrs	r3, r2
 8004634:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2280      	movs	r2, #128	; 0x80
 800463c:	0092      	lsls	r2, r2, #2
 800463e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004640:	2327      	movs	r3, #39	; 0x27
 8004642:	18fb      	adds	r3, r7, r3
 8004644:	2201      	movs	r2, #1
 8004646:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004648:	2327      	movs	r3, #39	; 0x27
 800464a:	18fb      	adds	r3, r7, r3
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01d      	beq.n	800468e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	0018      	movs	r0, r3
 8004656:	f7ff fda7 	bl	80041a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	490d      	ldr	r1, [pc, #52]	; (800469c <I2C_IsErrorOccurred+0x1fc>)
 8004666:	400a      	ands	r2, r1
 8004668:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	431a      	orrs	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2241      	movs	r2, #65	; 0x41
 800467a:	2120      	movs	r1, #32
 800467c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2242      	movs	r2, #66	; 0x42
 8004682:	2100      	movs	r1, #0
 8004684:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2240      	movs	r2, #64	; 0x40
 800468a:	2100      	movs	r1, #0
 800468c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800468e:	2327      	movs	r3, #39	; 0x27
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	781b      	ldrb	r3, [r3, #0]
}
 8004694:	0018      	movs	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	b00b      	add	sp, #44	; 0x2c
 800469a:	bd90      	pop	{r4, r7, pc}
 800469c:	fe00e800 	.word	0xfe00e800

080046a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80046a0:	b590      	push	{r4, r7, lr}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	0008      	movs	r0, r1
 80046aa:	0011      	movs	r1, r2
 80046ac:	607b      	str	r3, [r7, #4]
 80046ae:	240a      	movs	r4, #10
 80046b0:	193b      	adds	r3, r7, r4
 80046b2:	1c02      	adds	r2, r0, #0
 80046b4:	801a      	strh	r2, [r3, #0]
 80046b6:	2009      	movs	r0, #9
 80046b8:	183b      	adds	r3, r7, r0
 80046ba:	1c0a      	adds	r2, r1, #0
 80046bc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046be:	193b      	adds	r3, r7, r4
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	059b      	lsls	r3, r3, #22
 80046c4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046c6:	183b      	adds	r3, r7, r0
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	0419      	lsls	r1, r3, #16
 80046cc:	23ff      	movs	r3, #255	; 0xff
 80046ce:	041b      	lsls	r3, r3, #16
 80046d0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046d2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046da:	4313      	orrs	r3, r2
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	085b      	lsrs	r3, r3, #1
 80046e0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ea:	0d51      	lsrs	r1, r2, #21
 80046ec:	2280      	movs	r2, #128	; 0x80
 80046ee:	00d2      	lsls	r2, r2, #3
 80046f0:	400a      	ands	r2, r1
 80046f2:	4907      	ldr	r1, [pc, #28]	; (8004710 <I2C_TransferConfig+0x70>)
 80046f4:	430a      	orrs	r2, r1
 80046f6:	43d2      	mvns	r2, r2
 80046f8:	401a      	ands	r2, r3
 80046fa:	0011      	movs	r1, r2
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	430a      	orrs	r2, r1
 8004704:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	46bd      	mov	sp, r7
 800470a:	b007      	add	sp, #28
 800470c:	bd90      	pop	{r4, r7, pc}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	03ff63ff 	.word	0x03ff63ff

08004714 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2241      	movs	r2, #65	; 0x41
 8004722:	5c9b      	ldrb	r3, [r3, r2]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b20      	cmp	r3, #32
 8004728:	d138      	bne.n	800479c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2240      	movs	r2, #64	; 0x40
 800472e:	5c9b      	ldrb	r3, [r3, r2]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004734:	2302      	movs	r3, #2
 8004736:	e032      	b.n	800479e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2240      	movs	r2, #64	; 0x40
 800473c:	2101      	movs	r1, #1
 800473e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2241      	movs	r2, #65	; 0x41
 8004744:	2124      	movs	r1, #36	; 0x24
 8004746:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2101      	movs	r1, #1
 8004754:	438a      	bics	r2, r1
 8004756:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4911      	ldr	r1, [pc, #68]	; (80047a8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004764:	400a      	ands	r2, r1
 8004766:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6819      	ldr	r1, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2101      	movs	r1, #1
 8004784:	430a      	orrs	r2, r1
 8004786:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2241      	movs	r2, #65	; 0x41
 800478c:	2120      	movs	r1, #32
 800478e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2240      	movs	r2, #64	; 0x40
 8004794:	2100      	movs	r1, #0
 8004796:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	e000      	b.n	800479e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800479c:	2302      	movs	r3, #2
  }
}
 800479e:	0018      	movs	r0, r3
 80047a0:	46bd      	mov	sp, r7
 80047a2:	b002      	add	sp, #8
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	ffffefff 	.word	0xffffefff

080047ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2241      	movs	r2, #65	; 0x41
 80047ba:	5c9b      	ldrb	r3, [r3, r2]
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d139      	bne.n	8004836 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2240      	movs	r2, #64	; 0x40
 80047c6:	5c9b      	ldrb	r3, [r3, r2]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e033      	b.n	8004838 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2240      	movs	r2, #64	; 0x40
 80047d4:	2101      	movs	r1, #1
 80047d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2241      	movs	r2, #65	; 0x41
 80047dc:	2124      	movs	r1, #36	; 0x24
 80047de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2101      	movs	r1, #1
 80047ec:	438a      	bics	r2, r1
 80047ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4a11      	ldr	r2, [pc, #68]	; (8004840 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	021b      	lsls	r3, r3, #8
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2101      	movs	r1, #1
 800481e:	430a      	orrs	r2, r1
 8004820:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2241      	movs	r2, #65	; 0x41
 8004826:	2120      	movs	r1, #32
 8004828:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2240      	movs	r2, #64	; 0x40
 800482e:	2100      	movs	r1, #0
 8004830:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	e000      	b.n	8004838 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004836:	2302      	movs	r3, #2
  }
}
 8004838:	0018      	movs	r0, r3
 800483a:	46bd      	mov	sp, r7
 800483c:	b004      	add	sp, #16
 800483e:	bd80      	pop	{r7, pc}
 8004840:	fffff0ff 	.word	0xfffff0ff

08004844 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004844:	b5b0      	push	{r4, r5, r7, lr}
 8004846:	b08a      	sub	sp, #40	; 0x28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d102      	bne.n	8004858 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	f000 fbaf 	bl	8004fb6 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004858:	4bcf      	ldr	r3, [pc, #828]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	220c      	movs	r2, #12
 800485e:	4013      	ands	r3, r2
 8004860:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004862:	4bcd      	ldr	r3, [pc, #820]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	2380      	movs	r3, #128	; 0x80
 8004868:	025b      	lsls	r3, r3, #9
 800486a:	4013      	ands	r3, r2
 800486c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2201      	movs	r2, #1
 8004874:	4013      	ands	r3, r2
 8004876:	d100      	bne.n	800487a <HAL_RCC_OscConfig+0x36>
 8004878:	e07e      	b.n	8004978 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	2b08      	cmp	r3, #8
 800487e:	d007      	beq.n	8004890 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	2b0c      	cmp	r3, #12
 8004884:	d112      	bne.n	80048ac <HAL_RCC_OscConfig+0x68>
 8004886:	69fa      	ldr	r2, [r7, #28]
 8004888:	2380      	movs	r3, #128	; 0x80
 800488a:	025b      	lsls	r3, r3, #9
 800488c:	429a      	cmp	r2, r3
 800488e:	d10d      	bne.n	80048ac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004890:	4bc1      	ldr	r3, [pc, #772]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	2380      	movs	r3, #128	; 0x80
 8004896:	029b      	lsls	r3, r3, #10
 8004898:	4013      	ands	r3, r2
 800489a:	d100      	bne.n	800489e <HAL_RCC_OscConfig+0x5a>
 800489c:	e06b      	b.n	8004976 <HAL_RCC_OscConfig+0x132>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d167      	bne.n	8004976 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	f000 fb85 	bl	8004fb6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	2380      	movs	r3, #128	; 0x80
 80048b2:	025b      	lsls	r3, r3, #9
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d107      	bne.n	80048c8 <HAL_RCC_OscConfig+0x84>
 80048b8:	4bb7      	ldr	r3, [pc, #732]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	4bb6      	ldr	r3, [pc, #728]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 80048be:	2180      	movs	r1, #128	; 0x80
 80048c0:	0249      	lsls	r1, r1, #9
 80048c2:	430a      	orrs	r2, r1
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e027      	b.n	8004918 <HAL_RCC_OscConfig+0xd4>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	23a0      	movs	r3, #160	; 0xa0
 80048ce:	02db      	lsls	r3, r3, #11
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d10e      	bne.n	80048f2 <HAL_RCC_OscConfig+0xae>
 80048d4:	4bb0      	ldr	r3, [pc, #704]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4baf      	ldr	r3, [pc, #700]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 80048da:	2180      	movs	r1, #128	; 0x80
 80048dc:	02c9      	lsls	r1, r1, #11
 80048de:	430a      	orrs	r2, r1
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	4bad      	ldr	r3, [pc, #692]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	4bac      	ldr	r3, [pc, #688]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 80048e8:	2180      	movs	r1, #128	; 0x80
 80048ea:	0249      	lsls	r1, r1, #9
 80048ec:	430a      	orrs	r2, r1
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	e012      	b.n	8004918 <HAL_RCC_OscConfig+0xd4>
 80048f2:	4ba9      	ldr	r3, [pc, #676]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	4ba8      	ldr	r3, [pc, #672]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 80048f8:	49a8      	ldr	r1, [pc, #672]	; (8004b9c <HAL_RCC_OscConfig+0x358>)
 80048fa:	400a      	ands	r2, r1
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	4ba6      	ldr	r3, [pc, #664]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	2380      	movs	r3, #128	; 0x80
 8004904:	025b      	lsls	r3, r3, #9
 8004906:	4013      	ands	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4ba2      	ldr	r3, [pc, #648]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	4ba1      	ldr	r3, [pc, #644]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004912:	49a3      	ldr	r1, [pc, #652]	; (8004ba0 <HAL_RCC_OscConfig+0x35c>)
 8004914:	400a      	ands	r2, r1
 8004916:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d015      	beq.n	800494c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004920:	f7fe ff1a 	bl	8003758 <HAL_GetTick>
 8004924:	0003      	movs	r3, r0
 8004926:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004928:	e009      	b.n	800493e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800492a:	f7fe ff15 	bl	8003758 <HAL_GetTick>
 800492e:	0002      	movs	r2, r0
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b64      	cmp	r3, #100	; 0x64
 8004936:	d902      	bls.n	800493e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	f000 fb3c 	bl	8004fb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800493e:	4b96      	ldr	r3, [pc, #600]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	2380      	movs	r3, #128	; 0x80
 8004944:	029b      	lsls	r3, r3, #10
 8004946:	4013      	ands	r3, r2
 8004948:	d0ef      	beq.n	800492a <HAL_RCC_OscConfig+0xe6>
 800494a:	e015      	b.n	8004978 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494c:	f7fe ff04 	bl	8003758 <HAL_GetTick>
 8004950:	0003      	movs	r3, r0
 8004952:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004956:	f7fe feff 	bl	8003758 <HAL_GetTick>
 800495a:	0002      	movs	r2, r0
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b64      	cmp	r3, #100	; 0x64
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e326      	b.n	8004fb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004968:	4b8b      	ldr	r3, [pc, #556]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	2380      	movs	r3, #128	; 0x80
 800496e:	029b      	lsls	r3, r3, #10
 8004970:	4013      	ands	r3, r2
 8004972:	d1f0      	bne.n	8004956 <HAL_RCC_OscConfig+0x112>
 8004974:	e000      	b.n	8004978 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004976:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2202      	movs	r2, #2
 800497e:	4013      	ands	r3, r2
 8004980:	d100      	bne.n	8004984 <HAL_RCC_OscConfig+0x140>
 8004982:	e08b      	b.n	8004a9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	2b04      	cmp	r3, #4
 800498e:	d005      	beq.n	800499c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	2b0c      	cmp	r3, #12
 8004994:	d13e      	bne.n	8004a14 <HAL_RCC_OscConfig+0x1d0>
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d13b      	bne.n	8004a14 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800499c:	4b7e      	ldr	r3, [pc, #504]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2204      	movs	r2, #4
 80049a2:	4013      	ands	r3, r2
 80049a4:	d004      	beq.n	80049b0 <HAL_RCC_OscConfig+0x16c>
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e302      	b.n	8004fb6 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b0:	4b79      	ldr	r3, [pc, #484]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	4a7b      	ldr	r2, [pc, #492]	; (8004ba4 <HAL_RCC_OscConfig+0x360>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	0019      	movs	r1, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	021a      	lsls	r2, r3, #8
 80049c0:	4b75      	ldr	r3, [pc, #468]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 80049c2:	430a      	orrs	r2, r1
 80049c4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80049c6:	4b74      	ldr	r3, [pc, #464]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2209      	movs	r2, #9
 80049cc:	4393      	bics	r3, r2
 80049ce:	0019      	movs	r1, r3
 80049d0:	4b71      	ldr	r3, [pc, #452]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049d8:	f000 fc40 	bl	800525c <HAL_RCC_GetSysClockFreq>
 80049dc:	0001      	movs	r1, r0
 80049de:	4b6e      	ldr	r3, [pc, #440]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	091b      	lsrs	r3, r3, #4
 80049e4:	220f      	movs	r2, #15
 80049e6:	4013      	ands	r3, r2
 80049e8:	4a6f      	ldr	r2, [pc, #444]	; (8004ba8 <HAL_RCC_OscConfig+0x364>)
 80049ea:	5cd3      	ldrb	r3, [r2, r3]
 80049ec:	000a      	movs	r2, r1
 80049ee:	40da      	lsrs	r2, r3
 80049f0:	4b6e      	ldr	r3, [pc, #440]	; (8004bac <HAL_RCC_OscConfig+0x368>)
 80049f2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80049f4:	4b6e      	ldr	r3, [pc, #440]	; (8004bb0 <HAL_RCC_OscConfig+0x36c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2513      	movs	r5, #19
 80049fa:	197c      	adds	r4, r7, r5
 80049fc:	0018      	movs	r0, r3
 80049fe:	f7fe fe65 	bl	80036cc <HAL_InitTick>
 8004a02:	0003      	movs	r3, r0
 8004a04:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004a06:	197b      	adds	r3, r7, r5
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d046      	beq.n	8004a9c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8004a0e:	197b      	adds	r3, r7, r5
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	e2d0      	b.n	8004fb6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d027      	beq.n	8004a6a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004a1a:	4b5f      	ldr	r3, [pc, #380]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2209      	movs	r2, #9
 8004a20:	4393      	bics	r3, r2
 8004a22:	0019      	movs	r1, r3
 8004a24:	4b5c      	ldr	r3, [pc, #368]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2c:	f7fe fe94 	bl	8003758 <HAL_GetTick>
 8004a30:	0003      	movs	r3, r0
 8004a32:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a34:	e008      	b.n	8004a48 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a36:	f7fe fe8f 	bl	8003758 <HAL_GetTick>
 8004a3a:	0002      	movs	r2, r0
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e2b6      	b.n	8004fb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a48:	4b53      	ldr	r3, [pc, #332]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2204      	movs	r2, #4
 8004a4e:	4013      	ands	r3, r2
 8004a50:	d0f1      	beq.n	8004a36 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a52:	4b51      	ldr	r3, [pc, #324]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4a53      	ldr	r2, [pc, #332]	; (8004ba4 <HAL_RCC_OscConfig+0x360>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	0019      	movs	r1, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	021a      	lsls	r2, r3, #8
 8004a62:	4b4d      	ldr	r3, [pc, #308]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004a64:	430a      	orrs	r2, r1
 8004a66:	605a      	str	r2, [r3, #4]
 8004a68:	e018      	b.n	8004a9c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a6a:	4b4b      	ldr	r3, [pc, #300]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	4b4a      	ldr	r3, [pc, #296]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004a70:	2101      	movs	r1, #1
 8004a72:	438a      	bics	r2, r1
 8004a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a76:	f7fe fe6f 	bl	8003758 <HAL_GetTick>
 8004a7a:	0003      	movs	r3, r0
 8004a7c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a80:	f7fe fe6a 	bl	8003758 <HAL_GetTick>
 8004a84:	0002      	movs	r2, r0
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e291      	b.n	8004fb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a92:	4b41      	ldr	r3, [pc, #260]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2204      	movs	r2, #4
 8004a98:	4013      	ands	r3, r2
 8004a9a:	d1f1      	bne.n	8004a80 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2210      	movs	r2, #16
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d100      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x264>
 8004aa6:	e0a1      	b.n	8004bec <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d140      	bne.n	8004b30 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004aae:	4b3a      	ldr	r3, [pc, #232]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	2380      	movs	r3, #128	; 0x80
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d005      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x282>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e277      	b.n	8004fb6 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ac6:	4b34      	ldr	r3, [pc, #208]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	4a3a      	ldr	r2, [pc, #232]	; (8004bb4 <HAL_RCC_OscConfig+0x370>)
 8004acc:	4013      	ands	r3, r2
 8004ace:	0019      	movs	r1, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ad4:	4b30      	ldr	r3, [pc, #192]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ada:	4b2f      	ldr	r3, [pc, #188]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	021b      	lsls	r3, r3, #8
 8004ae0:	0a19      	lsrs	r1, r3, #8
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	061a      	lsls	r2, r3, #24
 8004ae8:	4b2b      	ldr	r3, [pc, #172]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	0b5b      	lsrs	r3, r3, #13
 8004af4:	3301      	adds	r3, #1
 8004af6:	2280      	movs	r2, #128	; 0x80
 8004af8:	0212      	lsls	r2, r2, #8
 8004afa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004afc:	4b26      	ldr	r3, [pc, #152]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	091b      	lsrs	r3, r3, #4
 8004b02:	210f      	movs	r1, #15
 8004b04:	400b      	ands	r3, r1
 8004b06:	4928      	ldr	r1, [pc, #160]	; (8004ba8 <HAL_RCC_OscConfig+0x364>)
 8004b08:	5ccb      	ldrb	r3, [r1, r3]
 8004b0a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004b0c:	4b27      	ldr	r3, [pc, #156]	; (8004bac <HAL_RCC_OscConfig+0x368>)
 8004b0e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004b10:	4b27      	ldr	r3, [pc, #156]	; (8004bb0 <HAL_RCC_OscConfig+0x36c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2513      	movs	r5, #19
 8004b16:	197c      	adds	r4, r7, r5
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f7fe fdd7 	bl	80036cc <HAL_InitTick>
 8004b1e:	0003      	movs	r3, r0
 8004b20:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004b22:	197b      	adds	r3, r7, r5
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d060      	beq.n	8004bec <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8004b2a:	197b      	adds	r3, r7, r5
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	e242      	b.n	8004fb6 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d03f      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b38:	4b17      	ldr	r3, [pc, #92]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4b16      	ldr	r3, [pc, #88]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004b3e:	2180      	movs	r1, #128	; 0x80
 8004b40:	0049      	lsls	r1, r1, #1
 8004b42:	430a      	orrs	r2, r1
 8004b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b46:	f7fe fe07 	bl	8003758 <HAL_GetTick>
 8004b4a:	0003      	movs	r3, r0
 8004b4c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b50:	f7fe fe02 	bl	8003758 <HAL_GetTick>
 8004b54:	0002      	movs	r2, r0
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e229      	b.n	8004fb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004b62:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	2380      	movs	r3, #128	; 0x80
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	d0f0      	beq.n	8004b50 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b6e:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	4a10      	ldr	r2, [pc, #64]	; (8004bb4 <HAL_RCC_OscConfig+0x370>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	0019      	movs	r1, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b82:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	021b      	lsls	r3, r3, #8
 8004b88:	0a19      	lsrs	r1, r3, #8
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	061a      	lsls	r2, r3, #24
 8004b90:	4b01      	ldr	r3, [pc, #4]	; (8004b98 <HAL_RCC_OscConfig+0x354>)
 8004b92:	430a      	orrs	r2, r1
 8004b94:	605a      	str	r2, [r3, #4]
 8004b96:	e029      	b.n	8004bec <HAL_RCC_OscConfig+0x3a8>
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	fffeffff 	.word	0xfffeffff
 8004ba0:	fffbffff 	.word	0xfffbffff
 8004ba4:	ffffe0ff 	.word	0xffffe0ff
 8004ba8:	08007710 	.word	0x08007710
 8004bac:	20000000 	.word	0x20000000
 8004bb0:	20000004 	.word	0x20000004
 8004bb4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004bb8:	4bbd      	ldr	r3, [pc, #756]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	4bbc      	ldr	r3, [pc, #752]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004bbe:	49bd      	ldr	r1, [pc, #756]	; (8004eb4 <HAL_RCC_OscConfig+0x670>)
 8004bc0:	400a      	ands	r2, r1
 8004bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc4:	f7fe fdc8 	bl	8003758 <HAL_GetTick>
 8004bc8:	0003      	movs	r3, r0
 8004bca:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bce:	f7fe fdc3 	bl	8003758 <HAL_GetTick>
 8004bd2:	0002      	movs	r2, r0
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e1ea      	b.n	8004fb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004be0:	4bb3      	ldr	r3, [pc, #716]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	2380      	movs	r3, #128	; 0x80
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4013      	ands	r3, r2
 8004bea:	d1f0      	bne.n	8004bce <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2208      	movs	r2, #8
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	d036      	beq.n	8004c64 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d019      	beq.n	8004c32 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bfe:	4bac      	ldr	r3, [pc, #688]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004c00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c02:	4bab      	ldr	r3, [pc, #684]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004c04:	2101      	movs	r1, #1
 8004c06:	430a      	orrs	r2, r1
 8004c08:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0a:	f7fe fda5 	bl	8003758 <HAL_GetTick>
 8004c0e:	0003      	movs	r3, r0
 8004c10:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c14:	f7fe fda0 	bl	8003758 <HAL_GetTick>
 8004c18:	0002      	movs	r2, r0
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e1c7      	b.n	8004fb6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c26:	4ba2      	ldr	r3, [pc, #648]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	d0f1      	beq.n	8004c14 <HAL_RCC_OscConfig+0x3d0>
 8004c30:	e018      	b.n	8004c64 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c32:	4b9f      	ldr	r3, [pc, #636]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004c34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c36:	4b9e      	ldr	r3, [pc, #632]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004c38:	2101      	movs	r1, #1
 8004c3a:	438a      	bics	r2, r1
 8004c3c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c3e:	f7fe fd8b 	bl	8003758 <HAL_GetTick>
 8004c42:	0003      	movs	r3, r0
 8004c44:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c48:	f7fe fd86 	bl	8003758 <HAL_GetTick>
 8004c4c:	0002      	movs	r2, r0
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e1ad      	b.n	8004fb6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c5a:	4b95      	ldr	r3, [pc, #596]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5e:	2202      	movs	r2, #2
 8004c60:	4013      	ands	r3, r2
 8004c62:	d1f1      	bne.n	8004c48 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2204      	movs	r2, #4
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	d100      	bne.n	8004c70 <HAL_RCC_OscConfig+0x42c>
 8004c6e:	e0ae      	b.n	8004dce <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c70:	2027      	movs	r0, #39	; 0x27
 8004c72:	183b      	adds	r3, r7, r0
 8004c74:	2200      	movs	r2, #0
 8004c76:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c78:	4b8d      	ldr	r3, [pc, #564]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c7c:	2380      	movs	r3, #128	; 0x80
 8004c7e:	055b      	lsls	r3, r3, #21
 8004c80:	4013      	ands	r3, r2
 8004c82:	d109      	bne.n	8004c98 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c84:	4b8a      	ldr	r3, [pc, #552]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c88:	4b89      	ldr	r3, [pc, #548]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004c8a:	2180      	movs	r1, #128	; 0x80
 8004c8c:	0549      	lsls	r1, r1, #21
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004c92:	183b      	adds	r3, r7, r0
 8004c94:	2201      	movs	r2, #1
 8004c96:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c98:	4b87      	ldr	r3, [pc, #540]	; (8004eb8 <HAL_RCC_OscConfig+0x674>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	2380      	movs	r3, #128	; 0x80
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	d11a      	bne.n	8004cda <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ca4:	4b84      	ldr	r3, [pc, #528]	; (8004eb8 <HAL_RCC_OscConfig+0x674>)
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	4b83      	ldr	r3, [pc, #524]	; (8004eb8 <HAL_RCC_OscConfig+0x674>)
 8004caa:	2180      	movs	r1, #128	; 0x80
 8004cac:	0049      	lsls	r1, r1, #1
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cb2:	f7fe fd51 	bl	8003758 <HAL_GetTick>
 8004cb6:	0003      	movs	r3, r0
 8004cb8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cbc:	f7fe fd4c 	bl	8003758 <HAL_GetTick>
 8004cc0:	0002      	movs	r2, r0
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b64      	cmp	r3, #100	; 0x64
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e173      	b.n	8004fb6 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cce:	4b7a      	ldr	r3, [pc, #488]	; (8004eb8 <HAL_RCC_OscConfig+0x674>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	2380      	movs	r3, #128	; 0x80
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	2380      	movs	r3, #128	; 0x80
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d107      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x4b2>
 8004ce6:	4b72      	ldr	r3, [pc, #456]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004ce8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cea:	4b71      	ldr	r3, [pc, #452]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004cec:	2180      	movs	r1, #128	; 0x80
 8004cee:	0049      	lsls	r1, r1, #1
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	651a      	str	r2, [r3, #80]	; 0x50
 8004cf4:	e031      	b.n	8004d5a <HAL_RCC_OscConfig+0x516>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10c      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4d4>
 8004cfe:	4b6c      	ldr	r3, [pc, #432]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004d00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d02:	4b6b      	ldr	r3, [pc, #428]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004d04:	496b      	ldr	r1, [pc, #428]	; (8004eb4 <HAL_RCC_OscConfig+0x670>)
 8004d06:	400a      	ands	r2, r1
 8004d08:	651a      	str	r2, [r3, #80]	; 0x50
 8004d0a:	4b69      	ldr	r3, [pc, #420]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004d0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d0e:	4b68      	ldr	r3, [pc, #416]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004d10:	496a      	ldr	r1, [pc, #424]	; (8004ebc <HAL_RCC_OscConfig+0x678>)
 8004d12:	400a      	ands	r2, r1
 8004d14:	651a      	str	r2, [r3, #80]	; 0x50
 8004d16:	e020      	b.n	8004d5a <HAL_RCC_OscConfig+0x516>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	23a0      	movs	r3, #160	; 0xa0
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d10e      	bne.n	8004d42 <HAL_RCC_OscConfig+0x4fe>
 8004d24:	4b62      	ldr	r3, [pc, #392]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004d26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d28:	4b61      	ldr	r3, [pc, #388]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004d2a:	2180      	movs	r1, #128	; 0x80
 8004d2c:	00c9      	lsls	r1, r1, #3
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	651a      	str	r2, [r3, #80]	; 0x50
 8004d32:	4b5f      	ldr	r3, [pc, #380]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004d34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d36:	4b5e      	ldr	r3, [pc, #376]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004d38:	2180      	movs	r1, #128	; 0x80
 8004d3a:	0049      	lsls	r1, r1, #1
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	651a      	str	r2, [r3, #80]	; 0x50
 8004d40:	e00b      	b.n	8004d5a <HAL_RCC_OscConfig+0x516>
 8004d42:	4b5b      	ldr	r3, [pc, #364]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004d44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d46:	4b5a      	ldr	r3, [pc, #360]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004d48:	495a      	ldr	r1, [pc, #360]	; (8004eb4 <HAL_RCC_OscConfig+0x670>)
 8004d4a:	400a      	ands	r2, r1
 8004d4c:	651a      	str	r2, [r3, #80]	; 0x50
 8004d4e:	4b58      	ldr	r3, [pc, #352]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004d50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d52:	4b57      	ldr	r3, [pc, #348]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004d54:	4959      	ldr	r1, [pc, #356]	; (8004ebc <HAL_RCC_OscConfig+0x678>)
 8004d56:	400a      	ands	r2, r1
 8004d58:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d015      	beq.n	8004d8e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d62:	f7fe fcf9 	bl	8003758 <HAL_GetTick>
 8004d66:	0003      	movs	r3, r0
 8004d68:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d6a:	e009      	b.n	8004d80 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d6c:	f7fe fcf4 	bl	8003758 <HAL_GetTick>
 8004d70:	0002      	movs	r2, r0
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	4a52      	ldr	r2, [pc, #328]	; (8004ec0 <HAL_RCC_OscConfig+0x67c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e11a      	b.n	8004fb6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d80:	4b4b      	ldr	r3, [pc, #300]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004d82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d84:	2380      	movs	r3, #128	; 0x80
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4013      	ands	r3, r2
 8004d8a:	d0ef      	beq.n	8004d6c <HAL_RCC_OscConfig+0x528>
 8004d8c:	e014      	b.n	8004db8 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d8e:	f7fe fce3 	bl	8003758 <HAL_GetTick>
 8004d92:	0003      	movs	r3, r0
 8004d94:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d96:	e009      	b.n	8004dac <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d98:	f7fe fcde 	bl	8003758 <HAL_GetTick>
 8004d9c:	0002      	movs	r2, r0
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	4a47      	ldr	r2, [pc, #284]	; (8004ec0 <HAL_RCC_OscConfig+0x67c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e104      	b.n	8004fb6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004dac:	4b40      	ldr	r3, [pc, #256]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004dae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004db0:	2380      	movs	r3, #128	; 0x80
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4013      	ands	r3, r2
 8004db6:	d1ef      	bne.n	8004d98 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004db8:	2327      	movs	r3, #39	; 0x27
 8004dba:	18fb      	adds	r3, r7, r3
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d105      	bne.n	8004dce <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc2:	4b3b      	ldr	r3, [pc, #236]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dc6:	4b3a      	ldr	r3, [pc, #232]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004dc8:	493e      	ldr	r1, [pc, #248]	; (8004ec4 <HAL_RCC_OscConfig+0x680>)
 8004dca:	400a      	ands	r2, r1
 8004dcc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	d049      	beq.n	8004e6c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d026      	beq.n	8004e2e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004de0:	4b33      	ldr	r3, [pc, #204]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	4b32      	ldr	r3, [pc, #200]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004de6:	2101      	movs	r1, #1
 8004de8:	430a      	orrs	r2, r1
 8004dea:	609a      	str	r2, [r3, #8]
 8004dec:	4b30      	ldr	r3, [pc, #192]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004df0:	4b2f      	ldr	r3, [pc, #188]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004df2:	2101      	movs	r1, #1
 8004df4:	430a      	orrs	r2, r1
 8004df6:	635a      	str	r2, [r3, #52]	; 0x34
 8004df8:	4b33      	ldr	r3, [pc, #204]	; (8004ec8 <HAL_RCC_OscConfig+0x684>)
 8004dfa:	6a1a      	ldr	r2, [r3, #32]
 8004dfc:	4b32      	ldr	r3, [pc, #200]	; (8004ec8 <HAL_RCC_OscConfig+0x684>)
 8004dfe:	2180      	movs	r1, #128	; 0x80
 8004e00:	0189      	lsls	r1, r1, #6
 8004e02:	430a      	orrs	r2, r1
 8004e04:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e06:	f7fe fca7 	bl	8003758 <HAL_GetTick>
 8004e0a:	0003      	movs	r3, r0
 8004e0c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e10:	f7fe fca2 	bl	8003758 <HAL_GetTick>
 8004e14:	0002      	movs	r2, r0
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e0c9      	b.n	8004fb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e22:	4b23      	ldr	r3, [pc, #140]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2202      	movs	r2, #2
 8004e28:	4013      	ands	r3, r2
 8004e2a:	d0f1      	beq.n	8004e10 <HAL_RCC_OscConfig+0x5cc>
 8004e2c:	e01e      	b.n	8004e6c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004e2e:	4b20      	ldr	r3, [pc, #128]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	4b1f      	ldr	r3, [pc, #124]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004e34:	2101      	movs	r1, #1
 8004e36:	438a      	bics	r2, r1
 8004e38:	609a      	str	r2, [r3, #8]
 8004e3a:	4b23      	ldr	r3, [pc, #140]	; (8004ec8 <HAL_RCC_OscConfig+0x684>)
 8004e3c:	6a1a      	ldr	r2, [r3, #32]
 8004e3e:	4b22      	ldr	r3, [pc, #136]	; (8004ec8 <HAL_RCC_OscConfig+0x684>)
 8004e40:	4922      	ldr	r1, [pc, #136]	; (8004ecc <HAL_RCC_OscConfig+0x688>)
 8004e42:	400a      	ands	r2, r1
 8004e44:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e46:	f7fe fc87 	bl	8003758 <HAL_GetTick>
 8004e4a:	0003      	movs	r3, r0
 8004e4c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e50:	f7fe fc82 	bl	8003758 <HAL_GetTick>
 8004e54:	0002      	movs	r2, r0
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e0a9      	b.n	8004fb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e62:	4b13      	ldr	r3, [pc, #76]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	2202      	movs	r2, #2
 8004e68:	4013      	ands	r3, r2
 8004e6a:	d1f1      	bne.n	8004e50 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d100      	bne.n	8004e76 <HAL_RCC_OscConfig+0x632>
 8004e74:	e09e      	b.n	8004fb4 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	2b0c      	cmp	r3, #12
 8004e7a:	d100      	bne.n	8004e7e <HAL_RCC_OscConfig+0x63a>
 8004e7c:	e077      	b.n	8004f6e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d158      	bne.n	8004f38 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e86:	4b0a      	ldr	r3, [pc, #40]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	4b09      	ldr	r3, [pc, #36]	; (8004eb0 <HAL_RCC_OscConfig+0x66c>)
 8004e8c:	4910      	ldr	r1, [pc, #64]	; (8004ed0 <HAL_RCC_OscConfig+0x68c>)
 8004e8e:	400a      	ands	r2, r1
 8004e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e92:	f7fe fc61 	bl	8003758 <HAL_GetTick>
 8004e96:	0003      	movs	r3, r0
 8004e98:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004e9a:	e01b      	b.n	8004ed4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e9c:	f7fe fc5c 	bl	8003758 <HAL_GetTick>
 8004ea0:	0002      	movs	r2, r0
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d914      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e083      	b.n	8004fb6 <HAL_RCC_OscConfig+0x772>
 8004eae:	46c0      	nop			; (mov r8, r8)
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	fffffeff 	.word	0xfffffeff
 8004eb8:	40007000 	.word	0x40007000
 8004ebc:	fffffbff 	.word	0xfffffbff
 8004ec0:	00001388 	.word	0x00001388
 8004ec4:	efffffff 	.word	0xefffffff
 8004ec8:	40010000 	.word	0x40010000
 8004ecc:	ffffdfff 	.word	0xffffdfff
 8004ed0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004ed4:	4b3a      	ldr	r3, [pc, #232]	; (8004fc0 <HAL_RCC_OscConfig+0x77c>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	2380      	movs	r3, #128	; 0x80
 8004eda:	049b      	lsls	r3, r3, #18
 8004edc:	4013      	ands	r3, r2
 8004ede:	d1dd      	bne.n	8004e9c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ee0:	4b37      	ldr	r3, [pc, #220]	; (8004fc0 <HAL_RCC_OscConfig+0x77c>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	4a37      	ldr	r2, [pc, #220]	; (8004fc4 <HAL_RCC_OscConfig+0x780>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	0019      	movs	r1, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	4b31      	ldr	r3, [pc, #196]	; (8004fc0 <HAL_RCC_OscConfig+0x77c>)
 8004efc:	430a      	orrs	r2, r1
 8004efe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f00:	4b2f      	ldr	r3, [pc, #188]	; (8004fc0 <HAL_RCC_OscConfig+0x77c>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	4b2e      	ldr	r3, [pc, #184]	; (8004fc0 <HAL_RCC_OscConfig+0x77c>)
 8004f06:	2180      	movs	r1, #128	; 0x80
 8004f08:	0449      	lsls	r1, r1, #17
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0e:	f7fe fc23 	bl	8003758 <HAL_GetTick>
 8004f12:	0003      	movs	r3, r0
 8004f14:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fe fc1e 	bl	8003758 <HAL_GetTick>
 8004f1c:	0002      	movs	r2, r0
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e045      	b.n	8004fb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004f2a:	4b25      	ldr	r3, [pc, #148]	; (8004fc0 <HAL_RCC_OscConfig+0x77c>)
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	2380      	movs	r3, #128	; 0x80
 8004f30:	049b      	lsls	r3, r3, #18
 8004f32:	4013      	ands	r3, r2
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0x6d4>
 8004f36:	e03d      	b.n	8004fb4 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f38:	4b21      	ldr	r3, [pc, #132]	; (8004fc0 <HAL_RCC_OscConfig+0x77c>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	4b20      	ldr	r3, [pc, #128]	; (8004fc0 <HAL_RCC_OscConfig+0x77c>)
 8004f3e:	4922      	ldr	r1, [pc, #136]	; (8004fc8 <HAL_RCC_OscConfig+0x784>)
 8004f40:	400a      	ands	r2, r1
 8004f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f44:	f7fe fc08 	bl	8003758 <HAL_GetTick>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f4e:	f7fe fc03 	bl	8003758 <HAL_GetTick>
 8004f52:	0002      	movs	r2, r0
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e02a      	b.n	8004fb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f60:	4b17      	ldr	r3, [pc, #92]	; (8004fc0 <HAL_RCC_OscConfig+0x77c>)
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	2380      	movs	r3, #128	; 0x80
 8004f66:	049b      	lsls	r3, r3, #18
 8004f68:	4013      	ands	r3, r2
 8004f6a:	d1f0      	bne.n	8004f4e <HAL_RCC_OscConfig+0x70a>
 8004f6c:	e022      	b.n	8004fb4 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e01d      	b.n	8004fb6 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f7a:	4b11      	ldr	r3, [pc, #68]	; (8004fc0 <HAL_RCC_OscConfig+0x77c>)
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f80:	69fa      	ldr	r2, [r7, #28]
 8004f82:	2380      	movs	r3, #128	; 0x80
 8004f84:	025b      	lsls	r3, r3, #9
 8004f86:	401a      	ands	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d10f      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004f90:	69fa      	ldr	r2, [r7, #28]
 8004f92:	23f0      	movs	r3, #240	; 0xf0
 8004f94:	039b      	lsls	r3, r3, #14
 8004f96:	401a      	ands	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d107      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004fa0:	69fa      	ldr	r2, [r7, #28]
 8004fa2:	23c0      	movs	r3, #192	; 0xc0
 8004fa4:	041b      	lsls	r3, r3, #16
 8004fa6:	401a      	ands	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d001      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	b00a      	add	sp, #40	; 0x28
 8004fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8004fbe:	46c0      	nop			; (mov r8, r8)
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	ff02ffff 	.word	0xff02ffff
 8004fc8:	feffffff 	.word	0xfeffffff

08004fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fcc:	b5b0      	push	{r4, r5, r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e128      	b.n	8005232 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fe0:	4b96      	ldr	r3, [pc, #600]	; (800523c <HAL_RCC_ClockConfig+0x270>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d91e      	bls.n	800502c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fee:	4b93      	ldr	r3, [pc, #588]	; (800523c <HAL_RCC_ClockConfig+0x270>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	4393      	bics	r3, r2
 8004ff6:	0019      	movs	r1, r3
 8004ff8:	4b90      	ldr	r3, [pc, #576]	; (800523c <HAL_RCC_ClockConfig+0x270>)
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005000:	f7fe fbaa 	bl	8003758 <HAL_GetTick>
 8005004:	0003      	movs	r3, r0
 8005006:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005008:	e009      	b.n	800501e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800500a:	f7fe fba5 	bl	8003758 <HAL_GetTick>
 800500e:	0002      	movs	r2, r0
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	4a8a      	ldr	r2, [pc, #552]	; (8005240 <HAL_RCC_ClockConfig+0x274>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d901      	bls.n	800501e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e109      	b.n	8005232 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800501e:	4b87      	ldr	r3, [pc, #540]	; (800523c <HAL_RCC_ClockConfig+0x270>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2201      	movs	r2, #1
 8005024:	4013      	ands	r3, r2
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d1ee      	bne.n	800500a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2202      	movs	r2, #2
 8005032:	4013      	ands	r3, r2
 8005034:	d009      	beq.n	800504a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005036:	4b83      	ldr	r3, [pc, #524]	; (8005244 <HAL_RCC_ClockConfig+0x278>)
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	22f0      	movs	r2, #240	; 0xf0
 800503c:	4393      	bics	r3, r2
 800503e:	0019      	movs	r1, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	4b7f      	ldr	r3, [pc, #508]	; (8005244 <HAL_RCC_ClockConfig+0x278>)
 8005046:	430a      	orrs	r2, r1
 8005048:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2201      	movs	r2, #1
 8005050:	4013      	ands	r3, r2
 8005052:	d100      	bne.n	8005056 <HAL_RCC_ClockConfig+0x8a>
 8005054:	e089      	b.n	800516a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b02      	cmp	r3, #2
 800505c:	d107      	bne.n	800506e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800505e:	4b79      	ldr	r3, [pc, #484]	; (8005244 <HAL_RCC_ClockConfig+0x278>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	2380      	movs	r3, #128	; 0x80
 8005064:	029b      	lsls	r3, r3, #10
 8005066:	4013      	ands	r3, r2
 8005068:	d120      	bne.n	80050ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e0e1      	b.n	8005232 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2b03      	cmp	r3, #3
 8005074:	d107      	bne.n	8005086 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005076:	4b73      	ldr	r3, [pc, #460]	; (8005244 <HAL_RCC_ClockConfig+0x278>)
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	2380      	movs	r3, #128	; 0x80
 800507c:	049b      	lsls	r3, r3, #18
 800507e:	4013      	ands	r3, r2
 8005080:	d114      	bne.n	80050ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e0d5      	b.n	8005232 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d106      	bne.n	800509c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800508e:	4b6d      	ldr	r3, [pc, #436]	; (8005244 <HAL_RCC_ClockConfig+0x278>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2204      	movs	r2, #4
 8005094:	4013      	ands	r3, r2
 8005096:	d109      	bne.n	80050ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e0ca      	b.n	8005232 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800509c:	4b69      	ldr	r3, [pc, #420]	; (8005244 <HAL_RCC_ClockConfig+0x278>)
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	2380      	movs	r3, #128	; 0x80
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4013      	ands	r3, r2
 80050a6:	d101      	bne.n	80050ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e0c2      	b.n	8005232 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ac:	4b65      	ldr	r3, [pc, #404]	; (8005244 <HAL_RCC_ClockConfig+0x278>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	2203      	movs	r2, #3
 80050b2:	4393      	bics	r3, r2
 80050b4:	0019      	movs	r1, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	4b62      	ldr	r3, [pc, #392]	; (8005244 <HAL_RCC_ClockConfig+0x278>)
 80050bc:	430a      	orrs	r2, r1
 80050be:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050c0:	f7fe fb4a 	bl	8003758 <HAL_GetTick>
 80050c4:	0003      	movs	r3, r0
 80050c6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d111      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050d0:	e009      	b.n	80050e6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050d2:	f7fe fb41 	bl	8003758 <HAL_GetTick>
 80050d6:	0002      	movs	r2, r0
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	4a58      	ldr	r2, [pc, #352]	; (8005240 <HAL_RCC_ClockConfig+0x274>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e0a5      	b.n	8005232 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050e6:	4b57      	ldr	r3, [pc, #348]	; (8005244 <HAL_RCC_ClockConfig+0x278>)
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	220c      	movs	r2, #12
 80050ec:	4013      	ands	r3, r2
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d1ef      	bne.n	80050d2 <HAL_RCC_ClockConfig+0x106>
 80050f2:	e03a      	b.n	800516a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d111      	bne.n	8005120 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050fc:	e009      	b.n	8005112 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050fe:	f7fe fb2b 	bl	8003758 <HAL_GetTick>
 8005102:	0002      	movs	r2, r0
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	4a4d      	ldr	r2, [pc, #308]	; (8005240 <HAL_RCC_ClockConfig+0x274>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e08f      	b.n	8005232 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005112:	4b4c      	ldr	r3, [pc, #304]	; (8005244 <HAL_RCC_ClockConfig+0x278>)
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	220c      	movs	r2, #12
 8005118:	4013      	ands	r3, r2
 800511a:	2b0c      	cmp	r3, #12
 800511c:	d1ef      	bne.n	80050fe <HAL_RCC_ClockConfig+0x132>
 800511e:	e024      	b.n	800516a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d11b      	bne.n	8005160 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005128:	e009      	b.n	800513e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800512a:	f7fe fb15 	bl	8003758 <HAL_GetTick>
 800512e:	0002      	movs	r2, r0
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	4a42      	ldr	r2, [pc, #264]	; (8005240 <HAL_RCC_ClockConfig+0x274>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d901      	bls.n	800513e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e079      	b.n	8005232 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800513e:	4b41      	ldr	r3, [pc, #260]	; (8005244 <HAL_RCC_ClockConfig+0x278>)
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	220c      	movs	r2, #12
 8005144:	4013      	ands	r3, r2
 8005146:	2b04      	cmp	r3, #4
 8005148:	d1ef      	bne.n	800512a <HAL_RCC_ClockConfig+0x15e>
 800514a:	e00e      	b.n	800516a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800514c:	f7fe fb04 	bl	8003758 <HAL_GetTick>
 8005150:	0002      	movs	r2, r0
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	4a3a      	ldr	r2, [pc, #232]	; (8005240 <HAL_RCC_ClockConfig+0x274>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e068      	b.n	8005232 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005160:	4b38      	ldr	r3, [pc, #224]	; (8005244 <HAL_RCC_ClockConfig+0x278>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	220c      	movs	r2, #12
 8005166:	4013      	ands	r3, r2
 8005168:	d1f0      	bne.n	800514c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800516a:	4b34      	ldr	r3, [pc, #208]	; (800523c <HAL_RCC_ClockConfig+0x270>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2201      	movs	r2, #1
 8005170:	4013      	ands	r3, r2
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	429a      	cmp	r2, r3
 8005176:	d21e      	bcs.n	80051b6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005178:	4b30      	ldr	r3, [pc, #192]	; (800523c <HAL_RCC_ClockConfig+0x270>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2201      	movs	r2, #1
 800517e:	4393      	bics	r3, r2
 8005180:	0019      	movs	r1, r3
 8005182:	4b2e      	ldr	r3, [pc, #184]	; (800523c <HAL_RCC_ClockConfig+0x270>)
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800518a:	f7fe fae5 	bl	8003758 <HAL_GetTick>
 800518e:	0003      	movs	r3, r0
 8005190:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005192:	e009      	b.n	80051a8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005194:	f7fe fae0 	bl	8003758 <HAL_GetTick>
 8005198:	0002      	movs	r2, r0
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	4a28      	ldr	r2, [pc, #160]	; (8005240 <HAL_RCC_ClockConfig+0x274>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e044      	b.n	8005232 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a8:	4b24      	ldr	r3, [pc, #144]	; (800523c <HAL_RCC_ClockConfig+0x270>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2201      	movs	r2, #1
 80051ae:	4013      	ands	r3, r2
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d1ee      	bne.n	8005194 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2204      	movs	r2, #4
 80051bc:	4013      	ands	r3, r2
 80051be:	d009      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051c0:	4b20      	ldr	r3, [pc, #128]	; (8005244 <HAL_RCC_ClockConfig+0x278>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	4a20      	ldr	r2, [pc, #128]	; (8005248 <HAL_RCC_ClockConfig+0x27c>)
 80051c6:	4013      	ands	r3, r2
 80051c8:	0019      	movs	r1, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	4b1d      	ldr	r3, [pc, #116]	; (8005244 <HAL_RCC_ClockConfig+0x278>)
 80051d0:	430a      	orrs	r2, r1
 80051d2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2208      	movs	r2, #8
 80051da:	4013      	ands	r3, r2
 80051dc:	d00a      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051de:	4b19      	ldr	r3, [pc, #100]	; (8005244 <HAL_RCC_ClockConfig+0x278>)
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	4a1a      	ldr	r2, [pc, #104]	; (800524c <HAL_RCC_ClockConfig+0x280>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	0019      	movs	r1, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	00da      	lsls	r2, r3, #3
 80051ee:	4b15      	ldr	r3, [pc, #84]	; (8005244 <HAL_RCC_ClockConfig+0x278>)
 80051f0:	430a      	orrs	r2, r1
 80051f2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051f4:	f000 f832 	bl	800525c <HAL_RCC_GetSysClockFreq>
 80051f8:	0001      	movs	r1, r0
 80051fa:	4b12      	ldr	r3, [pc, #72]	; (8005244 <HAL_RCC_ClockConfig+0x278>)
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	091b      	lsrs	r3, r3, #4
 8005200:	220f      	movs	r2, #15
 8005202:	4013      	ands	r3, r2
 8005204:	4a12      	ldr	r2, [pc, #72]	; (8005250 <HAL_RCC_ClockConfig+0x284>)
 8005206:	5cd3      	ldrb	r3, [r2, r3]
 8005208:	000a      	movs	r2, r1
 800520a:	40da      	lsrs	r2, r3
 800520c:	4b11      	ldr	r3, [pc, #68]	; (8005254 <HAL_RCC_ClockConfig+0x288>)
 800520e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005210:	4b11      	ldr	r3, [pc, #68]	; (8005258 <HAL_RCC_ClockConfig+0x28c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	250b      	movs	r5, #11
 8005216:	197c      	adds	r4, r7, r5
 8005218:	0018      	movs	r0, r3
 800521a:	f7fe fa57 	bl	80036cc <HAL_InitTick>
 800521e:	0003      	movs	r3, r0
 8005220:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005222:	197b      	adds	r3, r7, r5
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800522a:	197b      	adds	r3, r7, r5
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	e000      	b.n	8005232 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	0018      	movs	r0, r3
 8005234:	46bd      	mov	sp, r7
 8005236:	b004      	add	sp, #16
 8005238:	bdb0      	pop	{r4, r5, r7, pc}
 800523a:	46c0      	nop			; (mov r8, r8)
 800523c:	40022000 	.word	0x40022000
 8005240:	00001388 	.word	0x00001388
 8005244:	40021000 	.word	0x40021000
 8005248:	fffff8ff 	.word	0xfffff8ff
 800524c:	ffffc7ff 	.word	0xffffc7ff
 8005250:	08007710 	.word	0x08007710
 8005254:	20000000 	.word	0x20000000
 8005258:	20000004 	.word	0x20000004

0800525c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800525c:	b5b0      	push	{r4, r5, r7, lr}
 800525e:	b08e      	sub	sp, #56	; 0x38
 8005260:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005262:	4b4c      	ldr	r3, [pc, #304]	; (8005394 <HAL_RCC_GetSysClockFreq+0x138>)
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800526a:	230c      	movs	r3, #12
 800526c:	4013      	ands	r3, r2
 800526e:	2b0c      	cmp	r3, #12
 8005270:	d014      	beq.n	800529c <HAL_RCC_GetSysClockFreq+0x40>
 8005272:	d900      	bls.n	8005276 <HAL_RCC_GetSysClockFreq+0x1a>
 8005274:	e07b      	b.n	800536e <HAL_RCC_GetSysClockFreq+0x112>
 8005276:	2b04      	cmp	r3, #4
 8005278:	d002      	beq.n	8005280 <HAL_RCC_GetSysClockFreq+0x24>
 800527a:	2b08      	cmp	r3, #8
 800527c:	d00b      	beq.n	8005296 <HAL_RCC_GetSysClockFreq+0x3a>
 800527e:	e076      	b.n	800536e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005280:	4b44      	ldr	r3, [pc, #272]	; (8005394 <HAL_RCC_GetSysClockFreq+0x138>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2210      	movs	r2, #16
 8005286:	4013      	ands	r3, r2
 8005288:	d002      	beq.n	8005290 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800528a:	4b43      	ldr	r3, [pc, #268]	; (8005398 <HAL_RCC_GetSysClockFreq+0x13c>)
 800528c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800528e:	e07c      	b.n	800538a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005290:	4b42      	ldr	r3, [pc, #264]	; (800539c <HAL_RCC_GetSysClockFreq+0x140>)
 8005292:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005294:	e079      	b.n	800538a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005296:	4b42      	ldr	r3, [pc, #264]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x144>)
 8005298:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800529a:	e076      	b.n	800538a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800529c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529e:	0c9a      	lsrs	r2, r3, #18
 80052a0:	230f      	movs	r3, #15
 80052a2:	401a      	ands	r2, r3
 80052a4:	4b3f      	ldr	r3, [pc, #252]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x148>)
 80052a6:	5c9b      	ldrb	r3, [r3, r2]
 80052a8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80052aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ac:	0d9a      	lsrs	r2, r3, #22
 80052ae:	2303      	movs	r3, #3
 80052b0:	4013      	ands	r3, r2
 80052b2:	3301      	adds	r3, #1
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052b6:	4b37      	ldr	r3, [pc, #220]	; (8005394 <HAL_RCC_GetSysClockFreq+0x138>)
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	2380      	movs	r3, #128	; 0x80
 80052bc:	025b      	lsls	r3, r3, #9
 80052be:	4013      	ands	r3, r2
 80052c0:	d01a      	beq.n	80052f8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80052c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c4:	61bb      	str	r3, [r7, #24]
 80052c6:	2300      	movs	r3, #0
 80052c8:	61fb      	str	r3, [r7, #28]
 80052ca:	4a35      	ldr	r2, [pc, #212]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x144>)
 80052cc:	2300      	movs	r3, #0
 80052ce:	69b8      	ldr	r0, [r7, #24]
 80052d0:	69f9      	ldr	r1, [r7, #28]
 80052d2:	f7fa ffd7 	bl	8000284 <__aeabi_lmul>
 80052d6:	0002      	movs	r2, r0
 80052d8:	000b      	movs	r3, r1
 80052da:	0010      	movs	r0, r2
 80052dc:	0019      	movs	r1, r3
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f7fa ffab 	bl	8000244 <__aeabi_uldivmod>
 80052ee:	0002      	movs	r2, r0
 80052f0:	000b      	movs	r3, r1
 80052f2:	0013      	movs	r3, r2
 80052f4:	637b      	str	r3, [r7, #52]	; 0x34
 80052f6:	e037      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80052f8:	4b26      	ldr	r3, [pc, #152]	; (8005394 <HAL_RCC_GetSysClockFreq+0x138>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2210      	movs	r2, #16
 80052fe:	4013      	ands	r3, r2
 8005300:	d01a      	beq.n	8005338 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005304:	60bb      	str	r3, [r7, #8]
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	4a23      	ldr	r2, [pc, #140]	; (8005398 <HAL_RCC_GetSysClockFreq+0x13c>)
 800530c:	2300      	movs	r3, #0
 800530e:	68b8      	ldr	r0, [r7, #8]
 8005310:	68f9      	ldr	r1, [r7, #12]
 8005312:	f7fa ffb7 	bl	8000284 <__aeabi_lmul>
 8005316:	0002      	movs	r2, r0
 8005318:	000b      	movs	r3, r1
 800531a:	0010      	movs	r0, r2
 800531c:	0019      	movs	r1, r3
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	603b      	str	r3, [r7, #0]
 8005322:	2300      	movs	r3, #0
 8005324:	607b      	str	r3, [r7, #4]
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f7fa ff8b 	bl	8000244 <__aeabi_uldivmod>
 800532e:	0002      	movs	r2, r0
 8005330:	000b      	movs	r3, r1
 8005332:	0013      	movs	r3, r2
 8005334:	637b      	str	r3, [r7, #52]	; 0x34
 8005336:	e017      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533a:	0018      	movs	r0, r3
 800533c:	2300      	movs	r3, #0
 800533e:	0019      	movs	r1, r3
 8005340:	4a16      	ldr	r2, [pc, #88]	; (800539c <HAL_RCC_GetSysClockFreq+0x140>)
 8005342:	2300      	movs	r3, #0
 8005344:	f7fa ff9e 	bl	8000284 <__aeabi_lmul>
 8005348:	0002      	movs	r2, r0
 800534a:	000b      	movs	r3, r1
 800534c:	0010      	movs	r0, r2
 800534e:	0019      	movs	r1, r3
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	001c      	movs	r4, r3
 8005354:	2300      	movs	r3, #0
 8005356:	001d      	movs	r5, r3
 8005358:	0022      	movs	r2, r4
 800535a:	002b      	movs	r3, r5
 800535c:	f7fa ff72 	bl	8000244 <__aeabi_uldivmod>
 8005360:	0002      	movs	r2, r0
 8005362:	000b      	movs	r3, r1
 8005364:	0013      	movs	r3, r2
 8005366:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800536c:	e00d      	b.n	800538a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800536e:	4b09      	ldr	r3, [pc, #36]	; (8005394 <HAL_RCC_GetSysClockFreq+0x138>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	0b5b      	lsrs	r3, r3, #13
 8005374:	2207      	movs	r2, #7
 8005376:	4013      	ands	r3, r2
 8005378:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	3301      	adds	r3, #1
 800537e:	2280      	movs	r2, #128	; 0x80
 8005380:	0212      	lsls	r2, r2, #8
 8005382:	409a      	lsls	r2, r3
 8005384:	0013      	movs	r3, r2
 8005386:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005388:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800538c:	0018      	movs	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	b00e      	add	sp, #56	; 0x38
 8005392:	bdb0      	pop	{r4, r5, r7, pc}
 8005394:	40021000 	.word	0x40021000
 8005398:	003d0900 	.word	0x003d0900
 800539c:	00f42400 	.word	0x00f42400
 80053a0:	007a1200 	.word	0x007a1200
 80053a4:	08007728 	.word	0x08007728

080053a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053ac:	4b02      	ldr	r3, [pc, #8]	; (80053b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80053ae:	681b      	ldr	r3, [r3, #0]
}
 80053b0:	0018      	movs	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	46c0      	nop			; (mov r8, r8)
 80053b8:	20000000 	.word	0x20000000

080053bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053c0:	f7ff fff2 	bl	80053a8 <HAL_RCC_GetHCLKFreq>
 80053c4:	0001      	movs	r1, r0
 80053c6:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	0a1b      	lsrs	r3, r3, #8
 80053cc:	2207      	movs	r2, #7
 80053ce:	4013      	ands	r3, r2
 80053d0:	4a04      	ldr	r2, [pc, #16]	; (80053e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053d2:	5cd3      	ldrb	r3, [r2, r3]
 80053d4:	40d9      	lsrs	r1, r3
 80053d6:	000b      	movs	r3, r1
}
 80053d8:	0018      	movs	r0, r3
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	46c0      	nop			; (mov r8, r8)
 80053e0:	40021000 	.word	0x40021000
 80053e4:	08007720 	.word	0x08007720

080053e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053ec:	f7ff ffdc 	bl	80053a8 <HAL_RCC_GetHCLKFreq>
 80053f0:	0001      	movs	r1, r0
 80053f2:	4b06      	ldr	r3, [pc, #24]	; (800540c <HAL_RCC_GetPCLK2Freq+0x24>)
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	0adb      	lsrs	r3, r3, #11
 80053f8:	2207      	movs	r2, #7
 80053fa:	4013      	ands	r3, r2
 80053fc:	4a04      	ldr	r2, [pc, #16]	; (8005410 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053fe:	5cd3      	ldrb	r3, [r2, r3]
 8005400:	40d9      	lsrs	r1, r3
 8005402:	000b      	movs	r3, r1
}
 8005404:	0018      	movs	r0, r3
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	40021000 	.word	0x40021000
 8005410:	08007720 	.word	0x08007720

08005414 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800541c:	2317      	movs	r3, #23
 800541e:	18fb      	adds	r3, r7, r3
 8005420:	2200      	movs	r2, #0
 8005422:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2220      	movs	r2, #32
 800542a:	4013      	ands	r3, r2
 800542c:	d106      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	2380      	movs	r3, #128	; 0x80
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	4013      	ands	r3, r2
 8005438:	d100      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800543a:	e104      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800543c:	4bb1      	ldr	r3, [pc, #708]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800543e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005440:	2380      	movs	r3, #128	; 0x80
 8005442:	055b      	lsls	r3, r3, #21
 8005444:	4013      	ands	r3, r2
 8005446:	d10a      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005448:	4bae      	ldr	r3, [pc, #696]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800544a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800544c:	4bad      	ldr	r3, [pc, #692]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800544e:	2180      	movs	r1, #128	; 0x80
 8005450:	0549      	lsls	r1, r1, #21
 8005452:	430a      	orrs	r2, r1
 8005454:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005456:	2317      	movs	r3, #23
 8005458:	18fb      	adds	r3, r7, r3
 800545a:	2201      	movs	r2, #1
 800545c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800545e:	4baa      	ldr	r3, [pc, #680]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	2380      	movs	r3, #128	; 0x80
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	4013      	ands	r3, r2
 8005468:	d11a      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800546a:	4ba7      	ldr	r3, [pc, #668]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	4ba6      	ldr	r3, [pc, #664]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005470:	2180      	movs	r1, #128	; 0x80
 8005472:	0049      	lsls	r1, r1, #1
 8005474:	430a      	orrs	r2, r1
 8005476:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005478:	f7fe f96e 	bl	8003758 <HAL_GetTick>
 800547c:	0003      	movs	r3, r0
 800547e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005480:	e008      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005482:	f7fe f969 	bl	8003758 <HAL_GetTick>
 8005486:	0002      	movs	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b64      	cmp	r3, #100	; 0x64
 800548e:	d901      	bls.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e133      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005494:	4b9c      	ldr	r3, [pc, #624]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	2380      	movs	r3, #128	; 0x80
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	4013      	ands	r3, r2
 800549e:	d0f0      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80054a0:	4b98      	ldr	r3, [pc, #608]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	23c0      	movs	r3, #192	; 0xc0
 80054a6:	039b      	lsls	r3, r3, #14
 80054a8:	4013      	ands	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	23c0      	movs	r3, #192	; 0xc0
 80054b2:	039b      	lsls	r3, r3, #14
 80054b4:	4013      	ands	r3, r2
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d107      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	23c0      	movs	r3, #192	; 0xc0
 80054c2:	039b      	lsls	r3, r3, #14
 80054c4:	4013      	ands	r3, r2
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d013      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	23c0      	movs	r3, #192	; 0xc0
 80054d2:	029b      	lsls	r3, r3, #10
 80054d4:	401a      	ands	r2, r3
 80054d6:	23c0      	movs	r3, #192	; 0xc0
 80054d8:	029b      	lsls	r3, r3, #10
 80054da:	429a      	cmp	r2, r3
 80054dc:	d10a      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80054de:	4b89      	ldr	r3, [pc, #548]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	2380      	movs	r3, #128	; 0x80
 80054e4:	029b      	lsls	r3, r3, #10
 80054e6:	401a      	ands	r2, r3
 80054e8:	2380      	movs	r3, #128	; 0x80
 80054ea:	029b      	lsls	r3, r3, #10
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d101      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e103      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80054f4:	4b83      	ldr	r3, [pc, #524]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054f8:	23c0      	movs	r3, #192	; 0xc0
 80054fa:	029b      	lsls	r3, r3, #10
 80054fc:	4013      	ands	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d049      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	23c0      	movs	r3, #192	; 0xc0
 800550c:	029b      	lsls	r3, r3, #10
 800550e:	4013      	ands	r3, r2
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	429a      	cmp	r2, r3
 8005514:	d004      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2220      	movs	r2, #32
 800551c:	4013      	ands	r3, r2
 800551e:	d10d      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	23c0      	movs	r3, #192	; 0xc0
 8005526:	029b      	lsls	r3, r3, #10
 8005528:	4013      	ands	r3, r2
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	429a      	cmp	r2, r3
 800552e:	d034      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	2380      	movs	r3, #128	; 0x80
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	4013      	ands	r3, r2
 800553a:	d02e      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800553c:	4b71      	ldr	r3, [pc, #452]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800553e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005540:	4a72      	ldr	r2, [pc, #456]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005542:	4013      	ands	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005546:	4b6f      	ldr	r3, [pc, #444]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005548:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800554a:	4b6e      	ldr	r3, [pc, #440]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800554c:	2180      	movs	r1, #128	; 0x80
 800554e:	0309      	lsls	r1, r1, #12
 8005550:	430a      	orrs	r2, r1
 8005552:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005554:	4b6b      	ldr	r3, [pc, #428]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005556:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005558:	4b6a      	ldr	r3, [pc, #424]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800555a:	496d      	ldr	r1, [pc, #436]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800555c:	400a      	ands	r2, r1
 800555e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005560:	4b68      	ldr	r3, [pc, #416]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	2380      	movs	r3, #128	; 0x80
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	4013      	ands	r3, r2
 800556e:	d014      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005570:	f7fe f8f2 	bl	8003758 <HAL_GetTick>
 8005574:	0003      	movs	r3, r0
 8005576:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005578:	e009      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800557a:	f7fe f8ed 	bl	8003758 <HAL_GetTick>
 800557e:	0002      	movs	r2, r0
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	4a63      	ldr	r2, [pc, #396]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d901      	bls.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e0b6      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800558e:	4b5d      	ldr	r3, [pc, #372]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005590:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005592:	2380      	movs	r3, #128	; 0x80
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4013      	ands	r3, r2
 8005598:	d0ef      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	2380      	movs	r3, #128	; 0x80
 80055a0:	011b      	lsls	r3, r3, #4
 80055a2:	4013      	ands	r3, r2
 80055a4:	d01f      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	23c0      	movs	r3, #192	; 0xc0
 80055ac:	029b      	lsls	r3, r3, #10
 80055ae:	401a      	ands	r2, r3
 80055b0:	23c0      	movs	r3, #192	; 0xc0
 80055b2:	029b      	lsls	r3, r3, #10
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d10c      	bne.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80055b8:	4b52      	ldr	r3, [pc, #328]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a56      	ldr	r2, [pc, #344]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80055be:	4013      	ands	r3, r2
 80055c0:	0019      	movs	r1, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	23c0      	movs	r3, #192	; 0xc0
 80055c8:	039b      	lsls	r3, r3, #14
 80055ca:	401a      	ands	r2, r3
 80055cc:	4b4d      	ldr	r3, [pc, #308]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055ce:	430a      	orrs	r2, r1
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	4b4c      	ldr	r3, [pc, #304]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	23c0      	movs	r3, #192	; 0xc0
 80055dc:	029b      	lsls	r3, r3, #10
 80055de:	401a      	ands	r2, r3
 80055e0:	4b48      	ldr	r3, [pc, #288]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055e2:	430a      	orrs	r2, r1
 80055e4:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2220      	movs	r2, #32
 80055ec:	4013      	ands	r3, r2
 80055ee:	d01f      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	23c0      	movs	r3, #192	; 0xc0
 80055f6:	029b      	lsls	r3, r3, #10
 80055f8:	401a      	ands	r2, r3
 80055fa:	23c0      	movs	r3, #192	; 0xc0
 80055fc:	029b      	lsls	r3, r3, #10
 80055fe:	429a      	cmp	r2, r3
 8005600:	d10c      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8005602:	4b40      	ldr	r3, [pc, #256]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a44      	ldr	r2, [pc, #272]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005608:	4013      	ands	r3, r2
 800560a:	0019      	movs	r1, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	23c0      	movs	r3, #192	; 0xc0
 8005612:	039b      	lsls	r3, r3, #14
 8005614:	401a      	ands	r2, r3
 8005616:	4b3b      	ldr	r3, [pc, #236]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005618:	430a      	orrs	r2, r1
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	4b39      	ldr	r3, [pc, #228]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800561e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	23c0      	movs	r3, #192	; 0xc0
 8005626:	029b      	lsls	r3, r3, #10
 8005628:	401a      	ands	r2, r3
 800562a:	4b36      	ldr	r3, [pc, #216]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800562c:	430a      	orrs	r2, r1
 800562e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005630:	2317      	movs	r3, #23
 8005632:	18fb      	adds	r3, r7, r3
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d105      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800563a:	4b32      	ldr	r3, [pc, #200]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800563c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800563e:	4b31      	ldr	r3, [pc, #196]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005640:	4936      	ldr	r1, [pc, #216]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005642:	400a      	ands	r2, r1
 8005644:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2201      	movs	r2, #1
 800564c:	4013      	ands	r3, r2
 800564e:	d009      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005650:	4b2c      	ldr	r3, [pc, #176]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005654:	2203      	movs	r2, #3
 8005656:	4393      	bics	r3, r2
 8005658:	0019      	movs	r1, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	4b29      	ldr	r3, [pc, #164]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005660:	430a      	orrs	r2, r1
 8005662:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2202      	movs	r2, #2
 800566a:	4013      	ands	r3, r2
 800566c:	d009      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800566e:	4b25      	ldr	r3, [pc, #148]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005672:	220c      	movs	r2, #12
 8005674:	4393      	bics	r3, r2
 8005676:	0019      	movs	r1, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	4b21      	ldr	r3, [pc, #132]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800567e:	430a      	orrs	r2, r1
 8005680:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2204      	movs	r2, #4
 8005688:	4013      	ands	r3, r2
 800568a:	d009      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800568c:	4b1d      	ldr	r3, [pc, #116]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800568e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005690:	4a23      	ldr	r2, [pc, #140]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8005692:	4013      	ands	r3, r2
 8005694:	0019      	movs	r1, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	695a      	ldr	r2, [r3, #20]
 800569a:	4b1a      	ldr	r3, [pc, #104]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800569c:	430a      	orrs	r2, r1
 800569e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2208      	movs	r2, #8
 80056a6:	4013      	ands	r3, r2
 80056a8:	d009      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056aa:	4b16      	ldr	r3, [pc, #88]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ae:	4a1d      	ldr	r2, [pc, #116]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	0019      	movs	r1, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	699a      	ldr	r2, [r3, #24]
 80056b8:	4b12      	ldr	r3, [pc, #72]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056ba:	430a      	orrs	r2, r1
 80056bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2240      	movs	r2, #64	; 0x40
 80056c4:	4013      	ands	r3, r2
 80056c6:	d009      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056c8:	4b0e      	ldr	r3, [pc, #56]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056cc:	4a16      	ldr	r2, [pc, #88]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80056ce:	4013      	ands	r3, r2
 80056d0:	0019      	movs	r1, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1a      	ldr	r2, [r3, #32]
 80056d6:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056d8:	430a      	orrs	r2, r1
 80056da:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2280      	movs	r2, #128	; 0x80
 80056e2:	4013      	ands	r3, r2
 80056e4:	d009      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80056e6:	4b07      	ldr	r3, [pc, #28]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ea:	4a10      	ldr	r2, [pc, #64]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	0019      	movs	r1, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	69da      	ldr	r2, [r3, #28]
 80056f4:	4b03      	ldr	r3, [pc, #12]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056f6:	430a      	orrs	r2, r1
 80056f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	0018      	movs	r0, r3
 80056fe:	46bd      	mov	sp, r7
 8005700:	b006      	add	sp, #24
 8005702:	bd80      	pop	{r7, pc}
 8005704:	40021000 	.word	0x40021000
 8005708:	40007000 	.word	0x40007000
 800570c:	fffcffff 	.word	0xfffcffff
 8005710:	fff7ffff 	.word	0xfff7ffff
 8005714:	00001388 	.word	0x00001388
 8005718:	ffcfffff 	.word	0xffcfffff
 800571c:	efffffff 	.word	0xefffffff
 8005720:	fffff3ff 	.word	0xfffff3ff
 8005724:	ffffcfff 	.word	0xffffcfff
 8005728:	fbffffff 	.word	0xfbffffff
 800572c:	fff3ffff 	.word	0xfff3ffff

08005730 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005730:	b5b0      	push	{r4, r5, r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005738:	230f      	movs	r3, #15
 800573a:	18fb      	adds	r3, r7, r3
 800573c:	2201      	movs	r2, #1
 800573e:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e088      	b.n	800585c <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2221      	movs	r2, #33	; 0x21
 800574e:	5c9b      	ldrb	r3, [r3, r2]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d107      	bne.n	8005766 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	2100      	movs	r1, #0
 800575c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	0018      	movs	r0, r3
 8005762:	f7fd fd09 	bl	8003178 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2221      	movs	r2, #33	; 0x21
 800576a:	2102      	movs	r1, #2
 800576c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	2210      	movs	r2, #16
 8005776:	4013      	ands	r3, r2
 8005778:	2b10      	cmp	r3, #16
 800577a:	d05f      	beq.n	800583c <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	22ca      	movs	r2, #202	; 0xca
 8005782:	625a      	str	r2, [r3, #36]	; 0x24
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2253      	movs	r2, #83	; 0x53
 800578a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800578c:	250f      	movs	r5, #15
 800578e:	197c      	adds	r4, r7, r5
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	0018      	movs	r0, r3
 8005794:	f000 fc2c 	bl	8005ff0 <RTC_EnterInitMode>
 8005798:	0003      	movs	r3, r0
 800579a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800579c:	0028      	movs	r0, r5
 800579e:	183b      	adds	r3, r7, r0
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d12c      	bne.n	8005800 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	492c      	ldr	r1, [pc, #176]	; (8005864 <HAL_RTC_Init+0x134>)
 80057b2:	400a      	ands	r2, r1
 80057b4:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6899      	ldr	r1, [r3, #8]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	431a      	orrs	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	431a      	orrs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	68d2      	ldr	r2, [r2, #12]
 80057dc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6919      	ldr	r1, [r3, #16]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	041a      	lsls	r2, r3, #16
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80057f2:	183c      	adds	r4, r7, r0
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	0018      	movs	r0, r3
 80057f8:	f000 fc3e 	bl	8006078 <RTC_ExitInitMode>
 80057fc:	0003      	movs	r3, r0
 80057fe:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8005800:	230f      	movs	r3, #15
 8005802:	18fb      	adds	r3, r7, r3
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d113      	bne.n	8005832 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2103      	movs	r1, #3
 8005816:	438a      	bics	r2, r1
 8005818:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	69da      	ldr	r2, [r3, #28]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	22ff      	movs	r2, #255	; 0xff
 8005838:	625a      	str	r2, [r3, #36]	; 0x24
 800583a:	e003      	b.n	8005844 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800583c:	230f      	movs	r3, #15
 800583e:	18fb      	adds	r3, r7, r3
 8005840:	2200      	movs	r2, #0
 8005842:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8005844:	230f      	movs	r3, #15
 8005846:	18fb      	adds	r3, r7, r3
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d103      	bne.n	8005856 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2221      	movs	r2, #33	; 0x21
 8005852:	2101      	movs	r1, #1
 8005854:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005856:	230f      	movs	r3, #15
 8005858:	18fb      	adds	r3, r7, r3
 800585a:	781b      	ldrb	r3, [r3, #0]
}
 800585c:	0018      	movs	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	b004      	add	sp, #16
 8005862:	bdb0      	pop	{r4, r5, r7, pc}
 8005864:	ff8fffbf 	.word	0xff8fffbf

08005868 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005868:	b5b0      	push	{r4, r5, r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2220      	movs	r2, #32
 800587c:	5c9b      	ldrb	r3, [r3, r2]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d101      	bne.n	8005886 <HAL_RTC_SetTime+0x1e>
 8005882:	2302      	movs	r3, #2
 8005884:	e092      	b.n	80059ac <HAL_RTC_SetTime+0x144>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2220      	movs	r2, #32
 800588a:	2101      	movs	r1, #1
 800588c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2221      	movs	r2, #33	; 0x21
 8005892:	2102      	movs	r1, #2
 8005894:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d125      	bne.n	80058e8 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	2240      	movs	r2, #64	; 0x40
 80058a4:	4013      	ands	r3, r2
 80058a6:	d102      	bne.n	80058ae <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2200      	movs	r2, #0
 80058ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	0018      	movs	r0, r3
 80058b4:	f000 fc0a 	bl	80060cc <RTC_ByteToBcd2>
 80058b8:	0003      	movs	r3, r0
 80058ba:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	0018      	movs	r0, r3
 80058c2:	f000 fc03 	bl	80060cc <RTC_ByteToBcd2>
 80058c6:	0003      	movs	r3, r0
 80058c8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80058ca:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	789b      	ldrb	r3, [r3, #2]
 80058d0:	0018      	movs	r0, r3
 80058d2:	f000 fbfb 	bl	80060cc <RTC_ByteToBcd2>
 80058d6:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058d8:	0022      	movs	r2, r4
 80058da:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	78db      	ldrb	r3, [r3, #3]
 80058e0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]
 80058e6:	e017      	b.n	8005918 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	2240      	movs	r2, #64	; 0x40
 80058f0:	4013      	ands	r3, r2
 80058f2:	d102      	bne.n	80058fa <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2200      	movs	r2, #0
 80058f8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	785b      	ldrb	r3, [r3, #1]
 8005904:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005906:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800590c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	78db      	ldrb	r3, [r3, #3]
 8005912:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	22ca      	movs	r2, #202	; 0xca
 800591e:	625a      	str	r2, [r3, #36]	; 0x24
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2253      	movs	r2, #83	; 0x53
 8005926:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005928:	2513      	movs	r5, #19
 800592a:	197c      	adds	r4, r7, r5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	0018      	movs	r0, r3
 8005930:	f000 fb5e 	bl	8005ff0 <RTC_EnterInitMode>
 8005934:	0003      	movs	r3, r0
 8005936:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8005938:	0028      	movs	r0, r5
 800593a:	183b      	adds	r3, r7, r0
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d120      	bne.n	8005984 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	491a      	ldr	r1, [pc, #104]	; (80059b4 <HAL_RTC_SetTime+0x14c>)
 800594a:	400a      	ands	r2, r1
 800594c:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4917      	ldr	r1, [pc, #92]	; (80059b8 <HAL_RTC_SetTime+0x150>)
 800595a:	400a      	ands	r2, r1
 800595c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6899      	ldr	r1, [r3, #8]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	431a      	orrs	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005976:	183c      	adds	r4, r7, r0
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	0018      	movs	r0, r3
 800597c:	f000 fb7c 	bl	8006078 <RTC_ExitInitMode>
 8005980:	0003      	movs	r3, r0
 8005982:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8005984:	2313      	movs	r3, #19
 8005986:	18fb      	adds	r3, r7, r3
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d103      	bne.n	8005996 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2221      	movs	r2, #33	; 0x21
 8005992:	2101      	movs	r1, #1
 8005994:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	22ff      	movs	r2, #255	; 0xff
 800599c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2220      	movs	r2, #32
 80059a2:	2100      	movs	r1, #0
 80059a4:	5499      	strb	r1, [r3, r2]

  return status;
 80059a6:	2313      	movs	r3, #19
 80059a8:	18fb      	adds	r3, r7, r3
 80059aa:	781b      	ldrb	r3, [r3, #0]
}
 80059ac:	0018      	movs	r0, r3
 80059ae:	46bd      	mov	sp, r7
 80059b0:	b006      	add	sp, #24
 80059b2:	bdb0      	pop	{r4, r5, r7, pc}
 80059b4:	007f7f7f 	.word	0x007f7f7f
 80059b8:	fffbffff 	.word	0xfffbffff

080059bc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	045b      	lsls	r3, r3, #17
 80059de:	0c5a      	lsrs	r2, r3, #17
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a22      	ldr	r2, [pc, #136]	; (8005a74 <HAL_RTC_GetTime+0xb8>)
 80059ec:	4013      	ands	r3, r2
 80059ee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	0c1b      	lsrs	r3, r3, #16
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	223f      	movs	r2, #63	; 0x3f
 80059f8:	4013      	ands	r3, r2
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	0a1b      	lsrs	r3, r3, #8
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	227f      	movs	r2, #127	; 0x7f
 8005a08:	4013      	ands	r3, r2
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	227f      	movs	r2, #127	; 0x7f
 8005a16:	4013      	ands	r3, r2
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	0d9b      	lsrs	r3, r3, #22
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2201      	movs	r2, #1
 8005a26:	4013      	ands	r3, r2
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d11a      	bne.n	8005a6a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f000 fb68 	bl	800610e <RTC_Bcd2ToByte>
 8005a3e:	0003      	movs	r3, r0
 8005a40:	001a      	movs	r2, r3
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	785b      	ldrb	r3, [r3, #1]
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	f000 fb5f 	bl	800610e <RTC_Bcd2ToByte>
 8005a50:	0003      	movs	r3, r0
 8005a52:	001a      	movs	r2, r3
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	789b      	ldrb	r3, [r3, #2]
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	f000 fb56 	bl	800610e <RTC_Bcd2ToByte>
 8005a62:	0003      	movs	r3, r0
 8005a64:	001a      	movs	r2, r3
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	b006      	add	sp, #24
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	007f7f7f 	.word	0x007f7f7f

08005a78 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a78:	b5b0      	push	{r4, r5, r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	5c9b      	ldrb	r3, [r3, r2]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_RTC_SetDate+0x1e>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e07e      	b.n	8005b94 <HAL_RTC_SetDate+0x11c>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2221      	movs	r2, #33	; 0x21
 8005aa2:	2102      	movs	r1, #2
 8005aa4:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10e      	bne.n	8005aca <HAL_RTC_SetDate+0x52>
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	785b      	ldrb	r3, [r3, #1]
 8005ab0:	001a      	movs	r2, r3
 8005ab2:	2310      	movs	r3, #16
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	d008      	beq.n	8005aca <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	785b      	ldrb	r3, [r3, #1]
 8005abc:	2210      	movs	r2, #16
 8005abe:	4393      	bics	r3, r2
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	330a      	adds	r3, #10
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d11c      	bne.n	8005b0a <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	78db      	ldrb	r3, [r3, #3]
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	f000 faf9 	bl	80060cc <RTC_ByteToBcd2>
 8005ada:	0003      	movs	r3, r0
 8005adc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	785b      	ldrb	r3, [r3, #1]
 8005ae2:	0018      	movs	r0, r3
 8005ae4:	f000 faf2 	bl	80060cc <RTC_ByteToBcd2>
 8005ae8:	0003      	movs	r3, r0
 8005aea:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005aec:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	789b      	ldrb	r3, [r3, #2]
 8005af2:	0018      	movs	r0, r3
 8005af4:	f000 faea 	bl	80060cc <RTC_ByteToBcd2>
 8005af8:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005afa:	0022      	movs	r2, r4
 8005afc:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]
 8005b08:	e00e      	b.n	8005b28 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	78db      	ldrb	r3, [r3, #3]
 8005b0e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	785b      	ldrb	r3, [r3, #1]
 8005b14:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b16:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005b1c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b24:	4313      	orrs	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	22ca      	movs	r2, #202	; 0xca
 8005b2e:	625a      	str	r2, [r3, #36]	; 0x24
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2253      	movs	r2, #83	; 0x53
 8005b36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b38:	2513      	movs	r5, #19
 8005b3a:	197c      	adds	r4, r7, r5
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	0018      	movs	r0, r3
 8005b40:	f000 fa56 	bl	8005ff0 <RTC_EnterInitMode>
 8005b44:	0003      	movs	r3, r0
 8005b46:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8005b48:	0028      	movs	r0, r5
 8005b4a:	183b      	adds	r3, r7, r0
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10c      	bne.n	8005b6c <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	4910      	ldr	r1, [pc, #64]	; (8005b9c <HAL_RTC_SetDate+0x124>)
 8005b5a:	400a      	ands	r2, r1
 8005b5c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b5e:	183c      	adds	r4, r7, r0
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	0018      	movs	r0, r3
 8005b64:	f000 fa88 	bl	8006078 <RTC_ExitInitMode>
 8005b68:	0003      	movs	r3, r0
 8005b6a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8005b6c:	2313      	movs	r3, #19
 8005b6e:	18fb      	adds	r3, r7, r3
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d103      	bne.n	8005b7e <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2221      	movs	r2, #33	; 0x21
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	22ff      	movs	r2, #255	; 0xff
 8005b84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	5499      	strb	r1, [r3, r2]

  return status;
 8005b8e:	2313      	movs	r3, #19
 8005b90:	18fb      	adds	r3, r7, r3
 8005b92:	781b      	ldrb	r3, [r3, #0]
}
 8005b94:	0018      	movs	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	b006      	add	sp, #24
 8005b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8005b9c:	00ffff3f 	.word	0x00ffff3f

08005ba0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	4a21      	ldr	r2, [pc, #132]	; (8005c3c <HAL_RTC_GetDate+0x9c>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	0c1b      	lsrs	r3, r3, #16
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	0a1b      	lsrs	r3, r3, #8
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	221f      	movs	r2, #31
 8005bce:	4013      	ands	r3, r2
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	223f      	movs	r2, #63	; 0x3f
 8005bdc:	4013      	ands	r3, r2
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	0b5b      	lsrs	r3, r3, #13
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2207      	movs	r2, #7
 8005bec:	4013      	ands	r3, r2
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d11a      	bne.n	8005c30 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	78db      	ldrb	r3, [r3, #3]
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f000 fa85 	bl	800610e <RTC_Bcd2ToByte>
 8005c04:	0003      	movs	r3, r0
 8005c06:	001a      	movs	r2, r3
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	785b      	ldrb	r3, [r3, #1]
 8005c10:	0018      	movs	r0, r3
 8005c12:	f000 fa7c 	bl	800610e <RTC_Bcd2ToByte>
 8005c16:	0003      	movs	r3, r0
 8005c18:	001a      	movs	r2, r3
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	789b      	ldrb	r3, [r3, #2]
 8005c22:	0018      	movs	r0, r3
 8005c24:	f000 fa73 	bl	800610e <RTC_Bcd2ToByte>
 8005c28:	0003      	movs	r3, r0
 8005c2a:	001a      	movs	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	0018      	movs	r0, r3
 8005c34:	46bd      	mov	sp, r7
 8005c36:	b006      	add	sp, #24
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	46c0      	nop			; (mov r8, r8)
 8005c3c:	00ffff3f 	.word	0x00ffff3f

08005c40 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005c40:	b590      	push	{r4, r7, lr}
 8005c42:	b089      	sub	sp, #36	; 0x24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005c4c:	4ba7      	ldr	r3, [pc, #668]	; (8005eec <HAL_RTC_SetAlarm_IT+0x2ac>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	22fa      	movs	r2, #250	; 0xfa
 8005c52:	01d1      	lsls	r1, r2, #7
 8005c54:	0018      	movs	r0, r3
 8005c56:	f7fa fa69 	bl	800012c <__udivsi3>
 8005c5a:	0003      	movs	r3, r0
 8005c5c:	001a      	movs	r2, r3
 8005c5e:	0013      	movs	r3, r2
 8005c60:	015b      	lsls	r3, r3, #5
 8005c62:	1a9b      	subs	r3, r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	189b      	adds	r3, r3, r2
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2220      	movs	r2, #32
 8005c78:	5c9b      	ldrb	r3, [r3, r2]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_RTC_SetAlarm_IT+0x42>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e130      	b.n	8005ee4 <HAL_RTC_SetAlarm_IT+0x2a4>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2220      	movs	r2, #32
 8005c86:	2101      	movs	r1, #1
 8005c88:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2221      	movs	r2, #33	; 0x21
 8005c8e:	2102      	movs	r1, #2
 8005c90:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d136      	bne.n	8005d06 <HAL_RTC_SetAlarm_IT+0xc6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	2240      	movs	r2, #64	; 0x40
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	d102      	bne.n	8005caa <HAL_RTC_SetAlarm_IT+0x6a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	0018      	movs	r0, r3
 8005cb0:	f000 fa0c 	bl	80060cc <RTC_ByteToBcd2>
 8005cb4:	0003      	movs	r3, r0
 8005cb6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	785b      	ldrb	r3, [r3, #1]
 8005cbc:	0018      	movs	r0, r3
 8005cbe:	f000 fa05 	bl	80060cc <RTC_ByteToBcd2>
 8005cc2:	0003      	movs	r3, r0
 8005cc4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005cc6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	789b      	ldrb	r3, [r3, #2]
 8005ccc:	0018      	movs	r0, r3
 8005cce:	f000 f9fd 	bl	80060cc <RTC_ByteToBcd2>
 8005cd2:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005cd4:	0022      	movs	r2, r4
 8005cd6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	78db      	ldrb	r3, [r3, #3]
 8005cdc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	5c9b      	ldrb	r3, [r3, r2]
 8005ce8:	0018      	movs	r0, r3
 8005cea:	f000 f9ef 	bl	80060cc <RTC_ByteToBcd2>
 8005cee:	0003      	movs	r3, r0
 8005cf0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005cf2:	0022      	movs	r2, r4
 8005cf4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005cfa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005d00:	4313      	orrs	r3, r2
 8005d02:	61fb      	str	r3, [r7, #28]
 8005d04:	e022      	b.n	8005d4c <HAL_RTC_SetAlarm_IT+0x10c>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	2240      	movs	r2, #64	; 0x40
 8005d0e:	4013      	ands	r3, r2
 8005d10:	d102      	bne.n	8005d18 <HAL_RTC_SetAlarm_IT+0xd8>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2200      	movs	r2, #0
 8005d16:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	785b      	ldrb	r3, [r3, #1]
 8005d22:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005d24:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005d2a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	78db      	ldrb	r3, [r3, #3]
 8005d30:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005d32:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2120      	movs	r1, #32
 8005d38:	5c5b      	ldrb	r3, [r3, r1]
 8005d3a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005d3c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005d42:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005d54:	4313      	orrs	r3, r2
 8005d56:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	22ca      	movs	r2, #202	; 0xca
 8005d5e:	625a      	str	r2, [r3, #36]	; 0x24
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2253      	movs	r2, #83	; 0x53
 8005d66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d6c:	2380      	movs	r3, #128	; 0x80
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d146      	bne.n	8005e02 <HAL_RTC_SetAlarm_IT+0x1c2>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689a      	ldr	r2, [r3, #8]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	495c      	ldr	r1, [pc, #368]	; (8005ef0 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8005d80:	400a      	ands	r2, r1
 8005d82:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	22ff      	movs	r2, #255	; 0xff
 8005d8c:	401a      	ands	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4958      	ldr	r1, [pc, #352]	; (8005ef4 <HAL_RTC_SetAlarm_IT+0x2b4>)
 8005d94:	430a      	orrs	r2, r1
 8005d96:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10d      	bne.n	8005dc0 <HAL_RTC_SetAlarm_IT+0x180>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	22ff      	movs	r2, #255	; 0xff
 8005daa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2221      	movs	r2, #33	; 0x21
 8005db0:	2103      	movs	r1, #3
 8005db2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2220      	movs	r2, #32
 8005db8:	2100      	movs	r1, #0
 8005dba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e091      	b.n	8005ee4 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	4013      	ands	r3, r2
 8005dca:	d0e5      	beq.n	8005d98 <HAL_RTC_SetAlarm_IT+0x158>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	69fa      	ldr	r2, [r7, #28]
 8005dd2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2180      	movs	r1, #128	; 0x80
 8005de8:	0049      	lsls	r1, r1, #1
 8005dea:	430a      	orrs	r2, r1
 8005dec:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2180      	movs	r1, #128	; 0x80
 8005dfa:	0149      	lsls	r1, r1, #5
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	609a      	str	r2, [r3, #8]
 8005e00:	e055      	b.n	8005eae <HAL_RTC_SetAlarm_IT+0x26e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	493a      	ldr	r1, [pc, #232]	; (8005ef8 <HAL_RTC_SetAlarm_IT+0x2b8>)
 8005e0e:	400a      	ands	r2, r1
 8005e10:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	22ff      	movs	r2, #255	; 0xff
 8005e1a:	401a      	ands	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4936      	ldr	r1, [pc, #216]	; (8005efc <HAL_RTC_SetAlarm_IT+0x2bc>)
 8005e22:	430a      	orrs	r2, r1
 8005e24:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005e26:	4b31      	ldr	r3, [pc, #196]	; (8005eec <HAL_RTC_SetAlarm_IT+0x2ac>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	22fa      	movs	r2, #250	; 0xfa
 8005e2c:	01d1      	lsls	r1, r2, #7
 8005e2e:	0018      	movs	r0, r3
 8005e30:	f7fa f97c 	bl	800012c <__udivsi3>
 8005e34:	0003      	movs	r3, r0
 8005e36:	001a      	movs	r2, r3
 8005e38:	0013      	movs	r3, r2
 8005e3a:	015b      	lsls	r3, r3, #5
 8005e3c:	1a9b      	subs	r3, r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	189b      	adds	r3, r3, r2
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10d      	bne.n	8005e6e <HAL_RTC_SetAlarm_IT+0x22e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	22ff      	movs	r2, #255	; 0xff
 8005e58:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2221      	movs	r2, #33	; 0x21
 8005e5e:	2103      	movs	r1, #3
 8005e60:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2220      	movs	r2, #32
 8005e66:	2100      	movs	r1, #0
 8005e68:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e03a      	b.n	8005ee4 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	2202      	movs	r2, #2
 8005e76:	4013      	ands	r3, r2
 8005e78:	d0e5      	beq.n	8005e46 <HAL_RTC_SetAlarm_IT+0x206>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2180      	movs	r1, #128	; 0x80
 8005e96:	0089      	lsls	r1, r1, #2
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689a      	ldr	r2, [r3, #8]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2180      	movs	r1, #128	; 0x80
 8005ea8:	0189      	lsls	r1, r1, #6
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005eae:	4b14      	ldr	r3, [pc, #80]	; (8005f00 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	4b13      	ldr	r3, [pc, #76]	; (8005f00 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8005eb4:	2180      	movs	r1, #128	; 0x80
 8005eb6:	0289      	lsls	r1, r1, #10
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005ebc:	4b10      	ldr	r3, [pc, #64]	; (8005f00 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	4b0f      	ldr	r3, [pc, #60]	; (8005f00 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8005ec2:	2180      	movs	r1, #128	; 0x80
 8005ec4:	0289      	lsls	r1, r1, #10
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	22ff      	movs	r2, #255	; 0xff
 8005ed0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2221      	movs	r2, #33	; 0x21
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2220      	movs	r2, #32
 8005ede:	2100      	movs	r1, #0
 8005ee0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	b009      	add	sp, #36	; 0x24
 8005eea:	bd90      	pop	{r4, r7, pc}
 8005eec:	20000000 	.word	0x20000000
 8005ef0:	fffffeff 	.word	0xfffffeff
 8005ef4:	fffffe7f 	.word	0xfffffe7f
 8005ef8:	fffffdff 	.word	0xfffffdff
 8005efc:	fffffd7f 	.word	0xfffffd7f
 8005f00:	40010400 	.word	0x40010400

08005f04 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005f0c:	4b21      	ldr	r3, [pc, #132]	; (8005f94 <HAL_RTC_AlarmIRQHandler+0x90>)
 8005f0e:	2280      	movs	r2, #128	; 0x80
 8005f10:	0292      	lsls	r2, r2, #10
 8005f12:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689a      	ldr	r2, [r3, #8]
 8005f1a:	2380      	movs	r3, #128	; 0x80
 8005f1c:	015b      	lsls	r3, r3, #5
 8005f1e:	4013      	ands	r3, r2
 8005f20:	d014      	beq.n	8005f4c <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	2380      	movs	r3, #128	; 0x80
 8005f2a:	005b      	lsls	r3, r3, #1
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	d00d      	beq.n	8005f4c <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	22ff      	movs	r2, #255	; 0xff
 8005f38:	401a      	ands	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4916      	ldr	r1, [pc, #88]	; (8005f98 <HAL_RTC_AlarmIRQHandler+0x94>)
 8005f40:	430a      	orrs	r2, r1
 8005f42:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	0018      	movs	r0, r3
 8005f48:	f7fd f8aa 	bl	80030a0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	2380      	movs	r3, #128	; 0x80
 8005f54:	019b      	lsls	r3, r3, #6
 8005f56:	4013      	ands	r3, r2
 8005f58:	d014      	beq.n	8005f84 <HAL_RTC_AlarmIRQHandler+0x80>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68da      	ldr	r2, [r3, #12]
 8005f60:	2380      	movs	r3, #128	; 0x80
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4013      	ands	r3, r2
 8005f66:	d00d      	beq.n	8005f84 <HAL_RTC_AlarmIRQHandler+0x80>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	22ff      	movs	r2, #255	; 0xff
 8005f70:	401a      	ands	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4909      	ldr	r1, [pc, #36]	; (8005f9c <HAL_RTC_AlarmIRQHandler+0x98>)
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	0018      	movs	r0, r3
 8005f80:	f000 f8e4 	bl	800614c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2221      	movs	r2, #33	; 0x21
 8005f88:	2101      	movs	r1, #1
 8005f8a:	5499      	strb	r1, [r3, r2]
}
 8005f8c:	46c0      	nop			; (mov r8, r8)
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b002      	add	sp, #8
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	40010400 	.word	0x40010400
 8005f98:	fffffe7f 	.word	0xfffffe7f
 8005f9c:	fffffd7f 	.word	0xfffffd7f

08005fa0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a0e      	ldr	r2, [pc, #56]	; (8005fec <HAL_RTC_WaitForSynchro+0x4c>)
 8005fb2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fb4:	f7fd fbd0 	bl	8003758 <HAL_GetTick>
 8005fb8:	0003      	movs	r3, r0
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005fbc:	e00a      	b.n	8005fd4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005fbe:	f7fd fbcb 	bl	8003758 <HAL_GetTick>
 8005fc2:	0002      	movs	r2, r0
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	1ad2      	subs	r2, r2, r3
 8005fc8:	23fa      	movs	r3, #250	; 0xfa
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d901      	bls.n	8005fd4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e006      	b.n	8005fe2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	4013      	ands	r3, r2
 8005fde:	d0ee      	beq.n	8005fbe <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	0018      	movs	r0, r3
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	b004      	add	sp, #16
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	46c0      	nop			; (mov r8, r8)
 8005fec:	00017f5f 	.word	0x00017f5f

08005ff0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005ffc:	230f      	movs	r3, #15
 8005ffe:	18fb      	adds	r3, r7, r3
 8006000:	2200      	movs	r2, #0
 8006002:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	2240      	movs	r2, #64	; 0x40
 800600c:	4013      	ands	r3, r2
 800600e:	d12c      	bne.n	800606a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2180      	movs	r1, #128	; 0x80
 800601c:	430a      	orrs	r2, r1
 800601e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006020:	f7fd fb9a 	bl	8003758 <HAL_GetTick>
 8006024:	0003      	movs	r3, r0
 8006026:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006028:	e014      	b.n	8006054 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800602a:	f7fd fb95 	bl	8003758 <HAL_GetTick>
 800602e:	0002      	movs	r2, r0
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	1ad2      	subs	r2, r2, r3
 8006034:	200f      	movs	r0, #15
 8006036:	183b      	adds	r3, r7, r0
 8006038:	1839      	adds	r1, r7, r0
 800603a:	7809      	ldrb	r1, [r1, #0]
 800603c:	7019      	strb	r1, [r3, #0]
 800603e:	23fa      	movs	r3, #250	; 0xfa
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	429a      	cmp	r2, r3
 8006044:	d906      	bls.n	8006054 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2221      	movs	r2, #33	; 0x21
 800604a:	2104      	movs	r1, #4
 800604c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800604e:	183b      	adds	r3, r7, r0
 8006050:	2201      	movs	r2, #1
 8006052:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	2240      	movs	r2, #64	; 0x40
 800605c:	4013      	ands	r3, r2
 800605e:	d104      	bne.n	800606a <RTC_EnterInitMode+0x7a>
 8006060:	230f      	movs	r3, #15
 8006062:	18fb      	adds	r3, r7, r3
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d1df      	bne.n	800602a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800606a:	230f      	movs	r3, #15
 800606c:	18fb      	adds	r3, r7, r3
 800606e:	781b      	ldrb	r3, [r3, #0]
}
 8006070:	0018      	movs	r0, r3
 8006072:	46bd      	mov	sp, r7
 8006074:	b004      	add	sp, #16
 8006076:	bd80      	pop	{r7, pc}

08006078 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006078:	b590      	push	{r4, r7, lr}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006080:	240f      	movs	r4, #15
 8006082:	193b      	adds	r3, r7, r4
 8006084:	2200      	movs	r2, #0
 8006086:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2180      	movs	r1, #128	; 0x80
 8006094:	438a      	bics	r2, r1
 8006096:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	2220      	movs	r2, #32
 80060a0:	4013      	ands	r3, r2
 80060a2:	d10c      	bne.n	80060be <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	0018      	movs	r0, r3
 80060a8:	f7ff ff7a 	bl	8005fa0 <HAL_RTC_WaitForSynchro>
 80060ac:	1e03      	subs	r3, r0, #0
 80060ae:	d006      	beq.n	80060be <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2221      	movs	r2, #33	; 0x21
 80060b4:	2104      	movs	r1, #4
 80060b6:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80060b8:	193b      	adds	r3, r7, r4
 80060ba:	2201      	movs	r2, #1
 80060bc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80060be:	230f      	movs	r3, #15
 80060c0:	18fb      	adds	r3, r7, r3
 80060c2:	781b      	ldrb	r3, [r3, #0]
}
 80060c4:	0018      	movs	r0, r3
 80060c6:	46bd      	mov	sp, r7
 80060c8:	b005      	add	sp, #20
 80060ca:	bd90      	pop	{r4, r7, pc}

080060cc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	0002      	movs	r2, r0
 80060d4:	1dfb      	adds	r3, r7, #7
 80060d6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80060d8:	2300      	movs	r3, #0
 80060da:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80060dc:	e007      	b.n	80060ee <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	3301      	adds	r3, #1
 80060e2:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80060e4:	1dfb      	adds	r3, r7, #7
 80060e6:	1dfa      	adds	r2, r7, #7
 80060e8:	7812      	ldrb	r2, [r2, #0]
 80060ea:	3a0a      	subs	r2, #10
 80060ec:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80060ee:	1dfb      	adds	r3, r7, #7
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	2b09      	cmp	r3, #9
 80060f4:	d8f3      	bhi.n	80060de <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	1dfb      	adds	r3, r7, #7
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	4313      	orrs	r3, r2
 8006104:	b2db      	uxtb	r3, r3
}
 8006106:	0018      	movs	r0, r3
 8006108:	46bd      	mov	sp, r7
 800610a:	b004      	add	sp, #16
 800610c:	bd80      	pop	{r7, pc}

0800610e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b084      	sub	sp, #16
 8006112:	af00      	add	r7, sp, #0
 8006114:	0002      	movs	r2, r0
 8006116:	1dfb      	adds	r3, r7, #7
 8006118:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800611e:	1dfb      	adds	r3, r7, #7
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	091b      	lsrs	r3, r3, #4
 8006124:	b2db      	uxtb	r3, r3
 8006126:	001a      	movs	r2, r3
 8006128:	0013      	movs	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	189b      	adds	r3, r3, r2
 800612e:	005b      	lsls	r3, r3, #1
 8006130:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	b2da      	uxtb	r2, r3
 8006136:	1dfb      	adds	r3, r7, #7
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	210f      	movs	r1, #15
 800613c:	400b      	ands	r3, r1
 800613e:	b2db      	uxtb	r3, r3
 8006140:	18d3      	adds	r3, r2, r3
 8006142:	b2db      	uxtb	r3, r3
}
 8006144:	0018      	movs	r0, r3
 8006146:	46bd      	mov	sp, r7
 8006148:	b004      	add	sp, #16
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006154:	46c0      	nop			; (mov r8, r8)
 8006156:	46bd      	mov	sp, r7
 8006158:	b002      	add	sp, #8
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e044      	b.n	80061f8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006172:	2b00      	cmp	r3, #0
 8006174:	d107      	bne.n	8006186 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2278      	movs	r2, #120	; 0x78
 800617a:	2100      	movs	r1, #0
 800617c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	0018      	movs	r0, r3
 8006182:	f7fd f819 	bl	80031b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2224      	movs	r2, #36	; 0x24
 800618a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2101      	movs	r1, #1
 8006198:	438a      	bics	r2, r1
 800619a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	0018      	movs	r0, r3
 80061a0:	f000 f8d0 	bl	8006344 <UART_SetConfig>
 80061a4:	0003      	movs	r3, r0
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d101      	bne.n	80061ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e024      	b.n	80061f8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	0018      	movs	r0, r3
 80061ba:	f000 fb47 	bl	800684c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	490d      	ldr	r1, [pc, #52]	; (8006200 <HAL_UART_Init+0xa4>)
 80061ca:	400a      	ands	r2, r1
 80061cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	212a      	movs	r1, #42	; 0x2a
 80061da:	438a      	bics	r2, r1
 80061dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2101      	movs	r1, #1
 80061ea:	430a      	orrs	r2, r1
 80061ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	0018      	movs	r0, r3
 80061f2:	f000 fbdf 	bl	80069b4 <UART_CheckIdleState>
 80061f6:	0003      	movs	r3, r0
}
 80061f8:	0018      	movs	r0, r3
 80061fa:	46bd      	mov	sp, r7
 80061fc:	b002      	add	sp, #8
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	ffffb7ff 	.word	0xffffb7ff

08006204 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08a      	sub	sp, #40	; 0x28
 8006208:	af02      	add	r7, sp, #8
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	603b      	str	r3, [r7, #0]
 8006210:	1dbb      	adds	r3, r7, #6
 8006212:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006218:	2b20      	cmp	r3, #32
 800621a:	d000      	beq.n	800621e <HAL_UART_Transmit+0x1a>
 800621c:	e08c      	b.n	8006338 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <HAL_UART_Transmit+0x28>
 8006224:	1dbb      	adds	r3, r7, #6
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e084      	b.n	800633a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	2380      	movs	r3, #128	; 0x80
 8006236:	015b      	lsls	r3, r3, #5
 8006238:	429a      	cmp	r2, r3
 800623a:	d109      	bne.n	8006250 <HAL_UART_Transmit+0x4c>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d105      	bne.n	8006250 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2201      	movs	r2, #1
 8006248:	4013      	ands	r3, r2
 800624a:	d001      	beq.n	8006250 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e074      	b.n	800633a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2284      	movs	r2, #132	; 0x84
 8006254:	2100      	movs	r1, #0
 8006256:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2221      	movs	r2, #33	; 0x21
 800625c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800625e:	f7fd fa7b 	bl	8003758 <HAL_GetTick>
 8006262:	0003      	movs	r3, r0
 8006264:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	1dba      	adds	r2, r7, #6
 800626a:	2150      	movs	r1, #80	; 0x50
 800626c:	8812      	ldrh	r2, [r2, #0]
 800626e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	1dba      	adds	r2, r7, #6
 8006274:	2152      	movs	r1, #82	; 0x52
 8006276:	8812      	ldrh	r2, [r2, #0]
 8006278:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	689a      	ldr	r2, [r3, #8]
 800627e:	2380      	movs	r3, #128	; 0x80
 8006280:	015b      	lsls	r3, r3, #5
 8006282:	429a      	cmp	r2, r3
 8006284:	d108      	bne.n	8006298 <HAL_UART_Transmit+0x94>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d104      	bne.n	8006298 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800628e:	2300      	movs	r3, #0
 8006290:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	61bb      	str	r3, [r7, #24]
 8006296:	e003      	b.n	80062a0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800629c:	2300      	movs	r3, #0
 800629e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062a0:	e02f      	b.n	8006302 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	0013      	movs	r3, r2
 80062ac:	2200      	movs	r2, #0
 80062ae:	2180      	movs	r1, #128	; 0x80
 80062b0:	f000 fc28 	bl	8006b04 <UART_WaitOnFlagUntilTimeout>
 80062b4:	1e03      	subs	r3, r0, #0
 80062b6:	d004      	beq.n	80062c2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2220      	movs	r2, #32
 80062bc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e03b      	b.n	800633a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10b      	bne.n	80062e0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	001a      	movs	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	05d2      	lsls	r2, r2, #23
 80062d4:	0dd2      	lsrs	r2, r2, #23
 80062d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	3302      	adds	r3, #2
 80062dc:	61bb      	str	r3, [r7, #24]
 80062de:	e007      	b.n	80062f0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	781a      	ldrb	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	3301      	adds	r3, #1
 80062ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2252      	movs	r2, #82	; 0x52
 80062f4:	5a9b      	ldrh	r3, [r3, r2]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	3b01      	subs	r3, #1
 80062fa:	b299      	uxth	r1, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2252      	movs	r2, #82	; 0x52
 8006300:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2252      	movs	r2, #82	; 0x52
 8006306:	5a9b      	ldrh	r3, [r3, r2]
 8006308:	b29b      	uxth	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1c9      	bne.n	80062a2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	0013      	movs	r3, r2
 8006318:	2200      	movs	r2, #0
 800631a:	2140      	movs	r1, #64	; 0x40
 800631c:	f000 fbf2 	bl	8006b04 <UART_WaitOnFlagUntilTimeout>
 8006320:	1e03      	subs	r3, r0, #0
 8006322:	d004      	beq.n	800632e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2220      	movs	r2, #32
 8006328:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e005      	b.n	800633a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2220      	movs	r2, #32
 8006332:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006334:	2300      	movs	r3, #0
 8006336:	e000      	b.n	800633a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006338:	2302      	movs	r3, #2
  }
}
 800633a:	0018      	movs	r0, r3
 800633c:	46bd      	mov	sp, r7
 800633e:	b008      	add	sp, #32
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006344:	b5b0      	push	{r4, r5, r7, lr}
 8006346:	b08e      	sub	sp, #56	; 0x38
 8006348:	af00      	add	r7, sp, #0
 800634a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800634c:	231a      	movs	r3, #26
 800634e:	2218      	movs	r2, #24
 8006350:	189b      	adds	r3, r3, r2
 8006352:	19db      	adds	r3, r3, r7
 8006354:	2200      	movs	r2, #0
 8006356:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	431a      	orrs	r2, r3
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	431a      	orrs	r2, r3
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	4313      	orrs	r3, r2
 800636e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4ac6      	ldr	r2, [pc, #792]	; (8006690 <UART_SetConfig+0x34c>)
 8006378:	4013      	ands	r3, r2
 800637a:	0019      	movs	r1, r3
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006382:	430a      	orrs	r2, r1
 8006384:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	4ac1      	ldr	r2, [pc, #772]	; (8006694 <UART_SetConfig+0x350>)
 800638e:	4013      	ands	r3, r2
 8006390:	0019      	movs	r1, r3
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4abb      	ldr	r2, [pc, #748]	; (8006698 <UART_SetConfig+0x354>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d004      	beq.n	80063b8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063b4:	4313      	orrs	r3, r2
 80063b6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	4ab7      	ldr	r2, [pc, #732]	; (800669c <UART_SetConfig+0x358>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	0019      	movs	r1, r3
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063ca:	430a      	orrs	r2, r1
 80063cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4ab3      	ldr	r2, [pc, #716]	; (80066a0 <UART_SetConfig+0x35c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d131      	bne.n	800643c <UART_SetConfig+0xf8>
 80063d8:	4bb2      	ldr	r3, [pc, #712]	; (80066a4 <UART_SetConfig+0x360>)
 80063da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063dc:	2203      	movs	r2, #3
 80063de:	4013      	ands	r3, r2
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d01d      	beq.n	8006420 <UART_SetConfig+0xdc>
 80063e4:	d823      	bhi.n	800642e <UART_SetConfig+0xea>
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d00c      	beq.n	8006404 <UART_SetConfig+0xc0>
 80063ea:	d820      	bhi.n	800642e <UART_SetConfig+0xea>
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <UART_SetConfig+0xb2>
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d00e      	beq.n	8006412 <UART_SetConfig+0xce>
 80063f4:	e01b      	b.n	800642e <UART_SetConfig+0xea>
 80063f6:	231b      	movs	r3, #27
 80063f8:	2218      	movs	r2, #24
 80063fa:	189b      	adds	r3, r3, r2
 80063fc:	19db      	adds	r3, r3, r7
 80063fe:	2201      	movs	r2, #1
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	e09c      	b.n	800653e <UART_SetConfig+0x1fa>
 8006404:	231b      	movs	r3, #27
 8006406:	2218      	movs	r2, #24
 8006408:	189b      	adds	r3, r3, r2
 800640a:	19db      	adds	r3, r3, r7
 800640c:	2202      	movs	r2, #2
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	e095      	b.n	800653e <UART_SetConfig+0x1fa>
 8006412:	231b      	movs	r3, #27
 8006414:	2218      	movs	r2, #24
 8006416:	189b      	adds	r3, r3, r2
 8006418:	19db      	adds	r3, r3, r7
 800641a:	2204      	movs	r2, #4
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	e08e      	b.n	800653e <UART_SetConfig+0x1fa>
 8006420:	231b      	movs	r3, #27
 8006422:	2218      	movs	r2, #24
 8006424:	189b      	adds	r3, r3, r2
 8006426:	19db      	adds	r3, r3, r7
 8006428:	2208      	movs	r2, #8
 800642a:	701a      	strb	r2, [r3, #0]
 800642c:	e087      	b.n	800653e <UART_SetConfig+0x1fa>
 800642e:	231b      	movs	r3, #27
 8006430:	2218      	movs	r2, #24
 8006432:	189b      	adds	r3, r3, r2
 8006434:	19db      	adds	r3, r3, r7
 8006436:	2210      	movs	r2, #16
 8006438:	701a      	strb	r2, [r3, #0]
 800643a:	e080      	b.n	800653e <UART_SetConfig+0x1fa>
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a99      	ldr	r2, [pc, #612]	; (80066a8 <UART_SetConfig+0x364>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d131      	bne.n	80064aa <UART_SetConfig+0x166>
 8006446:	4b97      	ldr	r3, [pc, #604]	; (80066a4 <UART_SetConfig+0x360>)
 8006448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800644a:	220c      	movs	r2, #12
 800644c:	4013      	ands	r3, r2
 800644e:	2b0c      	cmp	r3, #12
 8006450:	d01d      	beq.n	800648e <UART_SetConfig+0x14a>
 8006452:	d823      	bhi.n	800649c <UART_SetConfig+0x158>
 8006454:	2b08      	cmp	r3, #8
 8006456:	d00c      	beq.n	8006472 <UART_SetConfig+0x12e>
 8006458:	d820      	bhi.n	800649c <UART_SetConfig+0x158>
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <UART_SetConfig+0x120>
 800645e:	2b04      	cmp	r3, #4
 8006460:	d00e      	beq.n	8006480 <UART_SetConfig+0x13c>
 8006462:	e01b      	b.n	800649c <UART_SetConfig+0x158>
 8006464:	231b      	movs	r3, #27
 8006466:	2218      	movs	r2, #24
 8006468:	189b      	adds	r3, r3, r2
 800646a:	19db      	adds	r3, r3, r7
 800646c:	2200      	movs	r2, #0
 800646e:	701a      	strb	r2, [r3, #0]
 8006470:	e065      	b.n	800653e <UART_SetConfig+0x1fa>
 8006472:	231b      	movs	r3, #27
 8006474:	2218      	movs	r2, #24
 8006476:	189b      	adds	r3, r3, r2
 8006478:	19db      	adds	r3, r3, r7
 800647a:	2202      	movs	r2, #2
 800647c:	701a      	strb	r2, [r3, #0]
 800647e:	e05e      	b.n	800653e <UART_SetConfig+0x1fa>
 8006480:	231b      	movs	r3, #27
 8006482:	2218      	movs	r2, #24
 8006484:	189b      	adds	r3, r3, r2
 8006486:	19db      	adds	r3, r3, r7
 8006488:	2204      	movs	r2, #4
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	e057      	b.n	800653e <UART_SetConfig+0x1fa>
 800648e:	231b      	movs	r3, #27
 8006490:	2218      	movs	r2, #24
 8006492:	189b      	adds	r3, r3, r2
 8006494:	19db      	adds	r3, r3, r7
 8006496:	2208      	movs	r2, #8
 8006498:	701a      	strb	r2, [r3, #0]
 800649a:	e050      	b.n	800653e <UART_SetConfig+0x1fa>
 800649c:	231b      	movs	r3, #27
 800649e:	2218      	movs	r2, #24
 80064a0:	189b      	adds	r3, r3, r2
 80064a2:	19db      	adds	r3, r3, r7
 80064a4:	2210      	movs	r2, #16
 80064a6:	701a      	strb	r2, [r3, #0]
 80064a8:	e049      	b.n	800653e <UART_SetConfig+0x1fa>
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a7a      	ldr	r2, [pc, #488]	; (8006698 <UART_SetConfig+0x354>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d13e      	bne.n	8006532 <UART_SetConfig+0x1ee>
 80064b4:	4b7b      	ldr	r3, [pc, #492]	; (80066a4 <UART_SetConfig+0x360>)
 80064b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064b8:	23c0      	movs	r3, #192	; 0xc0
 80064ba:	011b      	lsls	r3, r3, #4
 80064bc:	4013      	ands	r3, r2
 80064be:	22c0      	movs	r2, #192	; 0xc0
 80064c0:	0112      	lsls	r2, r2, #4
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d027      	beq.n	8006516 <UART_SetConfig+0x1d2>
 80064c6:	22c0      	movs	r2, #192	; 0xc0
 80064c8:	0112      	lsls	r2, r2, #4
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d82a      	bhi.n	8006524 <UART_SetConfig+0x1e0>
 80064ce:	2280      	movs	r2, #128	; 0x80
 80064d0:	0112      	lsls	r2, r2, #4
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d011      	beq.n	80064fa <UART_SetConfig+0x1b6>
 80064d6:	2280      	movs	r2, #128	; 0x80
 80064d8:	0112      	lsls	r2, r2, #4
 80064da:	4293      	cmp	r3, r2
 80064dc:	d822      	bhi.n	8006524 <UART_SetConfig+0x1e0>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d004      	beq.n	80064ec <UART_SetConfig+0x1a8>
 80064e2:	2280      	movs	r2, #128	; 0x80
 80064e4:	00d2      	lsls	r2, r2, #3
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d00e      	beq.n	8006508 <UART_SetConfig+0x1c4>
 80064ea:	e01b      	b.n	8006524 <UART_SetConfig+0x1e0>
 80064ec:	231b      	movs	r3, #27
 80064ee:	2218      	movs	r2, #24
 80064f0:	189b      	adds	r3, r3, r2
 80064f2:	19db      	adds	r3, r3, r7
 80064f4:	2200      	movs	r2, #0
 80064f6:	701a      	strb	r2, [r3, #0]
 80064f8:	e021      	b.n	800653e <UART_SetConfig+0x1fa>
 80064fa:	231b      	movs	r3, #27
 80064fc:	2218      	movs	r2, #24
 80064fe:	189b      	adds	r3, r3, r2
 8006500:	19db      	adds	r3, r3, r7
 8006502:	2202      	movs	r2, #2
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	e01a      	b.n	800653e <UART_SetConfig+0x1fa>
 8006508:	231b      	movs	r3, #27
 800650a:	2218      	movs	r2, #24
 800650c:	189b      	adds	r3, r3, r2
 800650e:	19db      	adds	r3, r3, r7
 8006510:	2204      	movs	r2, #4
 8006512:	701a      	strb	r2, [r3, #0]
 8006514:	e013      	b.n	800653e <UART_SetConfig+0x1fa>
 8006516:	231b      	movs	r3, #27
 8006518:	2218      	movs	r2, #24
 800651a:	189b      	adds	r3, r3, r2
 800651c:	19db      	adds	r3, r3, r7
 800651e:	2208      	movs	r2, #8
 8006520:	701a      	strb	r2, [r3, #0]
 8006522:	e00c      	b.n	800653e <UART_SetConfig+0x1fa>
 8006524:	231b      	movs	r3, #27
 8006526:	2218      	movs	r2, #24
 8006528:	189b      	adds	r3, r3, r2
 800652a:	19db      	adds	r3, r3, r7
 800652c:	2210      	movs	r2, #16
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	e005      	b.n	800653e <UART_SetConfig+0x1fa>
 8006532:	231b      	movs	r3, #27
 8006534:	2218      	movs	r2, #24
 8006536:	189b      	adds	r3, r3, r2
 8006538:	19db      	adds	r3, r3, r7
 800653a:	2210      	movs	r2, #16
 800653c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a55      	ldr	r2, [pc, #340]	; (8006698 <UART_SetConfig+0x354>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d000      	beq.n	800654a <UART_SetConfig+0x206>
 8006548:	e084      	b.n	8006654 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800654a:	231b      	movs	r3, #27
 800654c:	2218      	movs	r2, #24
 800654e:	189b      	adds	r3, r3, r2
 8006550:	19db      	adds	r3, r3, r7
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	2b08      	cmp	r3, #8
 8006556:	d01d      	beq.n	8006594 <UART_SetConfig+0x250>
 8006558:	dc20      	bgt.n	800659c <UART_SetConfig+0x258>
 800655a:	2b04      	cmp	r3, #4
 800655c:	d015      	beq.n	800658a <UART_SetConfig+0x246>
 800655e:	dc1d      	bgt.n	800659c <UART_SetConfig+0x258>
 8006560:	2b00      	cmp	r3, #0
 8006562:	d002      	beq.n	800656a <UART_SetConfig+0x226>
 8006564:	2b02      	cmp	r3, #2
 8006566:	d005      	beq.n	8006574 <UART_SetConfig+0x230>
 8006568:	e018      	b.n	800659c <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800656a:	f7fe ff27 	bl	80053bc <HAL_RCC_GetPCLK1Freq>
 800656e:	0003      	movs	r3, r0
 8006570:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006572:	e01c      	b.n	80065ae <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006574:	4b4b      	ldr	r3, [pc, #300]	; (80066a4 <UART_SetConfig+0x360>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2210      	movs	r2, #16
 800657a:	4013      	ands	r3, r2
 800657c:	d002      	beq.n	8006584 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800657e:	4b4b      	ldr	r3, [pc, #300]	; (80066ac <UART_SetConfig+0x368>)
 8006580:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006582:	e014      	b.n	80065ae <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8006584:	4b4a      	ldr	r3, [pc, #296]	; (80066b0 <UART_SetConfig+0x36c>)
 8006586:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006588:	e011      	b.n	80065ae <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800658a:	f7fe fe67 	bl	800525c <HAL_RCC_GetSysClockFreq>
 800658e:	0003      	movs	r3, r0
 8006590:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006592:	e00c      	b.n	80065ae <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006594:	2380      	movs	r3, #128	; 0x80
 8006596:	021b      	lsls	r3, r3, #8
 8006598:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800659a:	e008      	b.n	80065ae <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80065a0:	231a      	movs	r3, #26
 80065a2:	2218      	movs	r2, #24
 80065a4:	189b      	adds	r3, r3, r2
 80065a6:	19db      	adds	r3, r3, r7
 80065a8:	2201      	movs	r2, #1
 80065aa:	701a      	strb	r2, [r3, #0]
        break;
 80065ac:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d100      	bne.n	80065b6 <UART_SetConfig+0x272>
 80065b4:	e132      	b.n	800681c <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	0013      	movs	r3, r2
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	189b      	adds	r3, r3, r2
 80065c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d305      	bcc.n	80065d2 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d906      	bls.n	80065e0 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80065d2:	231a      	movs	r3, #26
 80065d4:	2218      	movs	r2, #24
 80065d6:	189b      	adds	r3, r3, r2
 80065d8:	19db      	adds	r3, r3, r7
 80065da:	2201      	movs	r2, #1
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	e11d      	b.n	800681c <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80065e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e2:	613b      	str	r3, [r7, #16]
 80065e4:	2300      	movs	r3, #0
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	6939      	ldr	r1, [r7, #16]
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	000b      	movs	r3, r1
 80065ee:	0e1b      	lsrs	r3, r3, #24
 80065f0:	0010      	movs	r0, r2
 80065f2:	0205      	lsls	r5, r0, #8
 80065f4:	431d      	orrs	r5, r3
 80065f6:	000b      	movs	r3, r1
 80065f8:	021c      	lsls	r4, r3, #8
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	085b      	lsrs	r3, r3, #1
 8006600:	60bb      	str	r3, [r7, #8]
 8006602:	2300      	movs	r3, #0
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	68b8      	ldr	r0, [r7, #8]
 8006608:	68f9      	ldr	r1, [r7, #12]
 800660a:	1900      	adds	r0, r0, r4
 800660c:	4169      	adcs	r1, r5
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	603b      	str	r3, [r7, #0]
 8006614:	2300      	movs	r3, #0
 8006616:	607b      	str	r3, [r7, #4]
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f7f9 fe12 	bl	8000244 <__aeabi_uldivmod>
 8006620:	0002      	movs	r2, r0
 8006622:	000b      	movs	r3, r1
 8006624:	0013      	movs	r3, r2
 8006626:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800662a:	23c0      	movs	r3, #192	; 0xc0
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	429a      	cmp	r2, r3
 8006630:	d309      	bcc.n	8006646 <UART_SetConfig+0x302>
 8006632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006634:	2380      	movs	r3, #128	; 0x80
 8006636:	035b      	lsls	r3, r3, #13
 8006638:	429a      	cmp	r2, r3
 800663a:	d204      	bcs.n	8006646 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006642:	60da      	str	r2, [r3, #12]
 8006644:	e0ea      	b.n	800681c <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8006646:	231a      	movs	r3, #26
 8006648:	2218      	movs	r2, #24
 800664a:	189b      	adds	r3, r3, r2
 800664c:	19db      	adds	r3, r3, r7
 800664e:	2201      	movs	r2, #1
 8006650:	701a      	strb	r2, [r3, #0]
 8006652:	e0e3      	b.n	800681c <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	69da      	ldr	r2, [r3, #28]
 8006658:	2380      	movs	r3, #128	; 0x80
 800665a:	021b      	lsls	r3, r3, #8
 800665c:	429a      	cmp	r2, r3
 800665e:	d000      	beq.n	8006662 <UART_SetConfig+0x31e>
 8006660:	e085      	b.n	800676e <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8006662:	231b      	movs	r3, #27
 8006664:	2218      	movs	r2, #24
 8006666:	189b      	adds	r3, r3, r2
 8006668:	19db      	adds	r3, r3, r7
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b08      	cmp	r3, #8
 800666e:	d837      	bhi.n	80066e0 <UART_SetConfig+0x39c>
 8006670:	009a      	lsls	r2, r3, #2
 8006672:	4b10      	ldr	r3, [pc, #64]	; (80066b4 <UART_SetConfig+0x370>)
 8006674:	18d3      	adds	r3, r2, r3
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800667a:	f7fe fe9f 	bl	80053bc <HAL_RCC_GetPCLK1Freq>
 800667e:	0003      	movs	r3, r0
 8006680:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006682:	e036      	b.n	80066f2 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006684:	f7fe feb0 	bl	80053e8 <HAL_RCC_GetPCLK2Freq>
 8006688:	0003      	movs	r3, r0
 800668a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800668c:	e031      	b.n	80066f2 <UART_SetConfig+0x3ae>
 800668e:	46c0      	nop			; (mov r8, r8)
 8006690:	efff69f3 	.word	0xefff69f3
 8006694:	ffffcfff 	.word	0xffffcfff
 8006698:	40004800 	.word	0x40004800
 800669c:	fffff4ff 	.word	0xfffff4ff
 80066a0:	40013800 	.word	0x40013800
 80066a4:	40021000 	.word	0x40021000
 80066a8:	40004400 	.word	0x40004400
 80066ac:	003d0900 	.word	0x003d0900
 80066b0:	00f42400 	.word	0x00f42400
 80066b4:	08007734 	.word	0x08007734
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066b8:	4b60      	ldr	r3, [pc, #384]	; (800683c <UART_SetConfig+0x4f8>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2210      	movs	r2, #16
 80066be:	4013      	ands	r3, r2
 80066c0:	d002      	beq.n	80066c8 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80066c2:	4b5f      	ldr	r3, [pc, #380]	; (8006840 <UART_SetConfig+0x4fc>)
 80066c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066c6:	e014      	b.n	80066f2 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80066c8:	4b5e      	ldr	r3, [pc, #376]	; (8006844 <UART_SetConfig+0x500>)
 80066ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066cc:	e011      	b.n	80066f2 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ce:	f7fe fdc5 	bl	800525c <HAL_RCC_GetSysClockFreq>
 80066d2:	0003      	movs	r3, r0
 80066d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066d6:	e00c      	b.n	80066f2 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066d8:	2380      	movs	r3, #128	; 0x80
 80066da:	021b      	lsls	r3, r3, #8
 80066dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066de:	e008      	b.n	80066f2 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80066e4:	231a      	movs	r3, #26
 80066e6:	2218      	movs	r2, #24
 80066e8:	189b      	adds	r3, r3, r2
 80066ea:	19db      	adds	r3, r3, r7
 80066ec:	2201      	movs	r2, #1
 80066ee:	701a      	strb	r2, [r3, #0]
        break;
 80066f0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d100      	bne.n	80066fa <UART_SetConfig+0x3b6>
 80066f8:	e090      	b.n	800681c <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fc:	005a      	lsls	r2, r3, #1
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	085b      	lsrs	r3, r3, #1
 8006704:	18d2      	adds	r2, r2, r3
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	0019      	movs	r1, r3
 800670c:	0010      	movs	r0, r2
 800670e:	f7f9 fd0d 	bl	800012c <__udivsi3>
 8006712:	0003      	movs	r3, r0
 8006714:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006718:	2b0f      	cmp	r3, #15
 800671a:	d921      	bls.n	8006760 <UART_SetConfig+0x41c>
 800671c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800671e:	2380      	movs	r3, #128	; 0x80
 8006720:	025b      	lsls	r3, r3, #9
 8006722:	429a      	cmp	r2, r3
 8006724:	d21c      	bcs.n	8006760 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	b29a      	uxth	r2, r3
 800672a:	200e      	movs	r0, #14
 800672c:	2418      	movs	r4, #24
 800672e:	1903      	adds	r3, r0, r4
 8006730:	19db      	adds	r3, r3, r7
 8006732:	210f      	movs	r1, #15
 8006734:	438a      	bics	r2, r1
 8006736:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673a:	085b      	lsrs	r3, r3, #1
 800673c:	b29b      	uxth	r3, r3
 800673e:	2207      	movs	r2, #7
 8006740:	4013      	ands	r3, r2
 8006742:	b299      	uxth	r1, r3
 8006744:	1903      	adds	r3, r0, r4
 8006746:	19db      	adds	r3, r3, r7
 8006748:	1902      	adds	r2, r0, r4
 800674a:	19d2      	adds	r2, r2, r7
 800674c:	8812      	ldrh	r2, [r2, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	1902      	adds	r2, r0, r4
 8006758:	19d2      	adds	r2, r2, r7
 800675a:	8812      	ldrh	r2, [r2, #0]
 800675c:	60da      	str	r2, [r3, #12]
 800675e:	e05d      	b.n	800681c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8006760:	231a      	movs	r3, #26
 8006762:	2218      	movs	r2, #24
 8006764:	189b      	adds	r3, r3, r2
 8006766:	19db      	adds	r3, r3, r7
 8006768:	2201      	movs	r2, #1
 800676a:	701a      	strb	r2, [r3, #0]
 800676c:	e056      	b.n	800681c <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800676e:	231b      	movs	r3, #27
 8006770:	2218      	movs	r2, #24
 8006772:	189b      	adds	r3, r3, r2
 8006774:	19db      	adds	r3, r3, r7
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	2b08      	cmp	r3, #8
 800677a:	d822      	bhi.n	80067c2 <UART_SetConfig+0x47e>
 800677c:	009a      	lsls	r2, r3, #2
 800677e:	4b32      	ldr	r3, [pc, #200]	; (8006848 <UART_SetConfig+0x504>)
 8006780:	18d3      	adds	r3, r2, r3
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006786:	f7fe fe19 	bl	80053bc <HAL_RCC_GetPCLK1Freq>
 800678a:	0003      	movs	r3, r0
 800678c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800678e:	e021      	b.n	80067d4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006790:	f7fe fe2a 	bl	80053e8 <HAL_RCC_GetPCLK2Freq>
 8006794:	0003      	movs	r3, r0
 8006796:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006798:	e01c      	b.n	80067d4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800679a:	4b28      	ldr	r3, [pc, #160]	; (800683c <UART_SetConfig+0x4f8>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2210      	movs	r2, #16
 80067a0:	4013      	ands	r3, r2
 80067a2:	d002      	beq.n	80067aa <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80067a4:	4b26      	ldr	r3, [pc, #152]	; (8006840 <UART_SetConfig+0x4fc>)
 80067a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067a8:	e014      	b.n	80067d4 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80067aa:	4b26      	ldr	r3, [pc, #152]	; (8006844 <UART_SetConfig+0x500>)
 80067ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067ae:	e011      	b.n	80067d4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067b0:	f7fe fd54 	bl	800525c <HAL_RCC_GetSysClockFreq>
 80067b4:	0003      	movs	r3, r0
 80067b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067b8:	e00c      	b.n	80067d4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ba:	2380      	movs	r3, #128	; 0x80
 80067bc:	021b      	lsls	r3, r3, #8
 80067be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067c0:	e008      	b.n	80067d4 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80067c6:	231a      	movs	r3, #26
 80067c8:	2218      	movs	r2, #24
 80067ca:	189b      	adds	r3, r3, r2
 80067cc:	19db      	adds	r3, r3, r7
 80067ce:	2201      	movs	r2, #1
 80067d0:	701a      	strb	r2, [r3, #0]
        break;
 80067d2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80067d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d020      	beq.n	800681c <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	085a      	lsrs	r2, r3, #1
 80067e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e2:	18d2      	adds	r2, r2, r3
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	0019      	movs	r1, r3
 80067ea:	0010      	movs	r0, r2
 80067ec:	f7f9 fc9e 	bl	800012c <__udivsi3>
 80067f0:	0003      	movs	r3, r0
 80067f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	2b0f      	cmp	r3, #15
 80067f8:	d90a      	bls.n	8006810 <UART_SetConfig+0x4cc>
 80067fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067fc:	2380      	movs	r3, #128	; 0x80
 80067fe:	025b      	lsls	r3, r3, #9
 8006800:	429a      	cmp	r2, r3
 8006802:	d205      	bcs.n	8006810 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006806:	b29a      	uxth	r2, r3
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	60da      	str	r2, [r3, #12]
 800680e:	e005      	b.n	800681c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8006810:	231a      	movs	r3, #26
 8006812:	2218      	movs	r2, #24
 8006814:	189b      	adds	r3, r3, r2
 8006816:	19db      	adds	r3, r3, r7
 8006818:	2201      	movs	r2, #1
 800681a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	2200      	movs	r2, #0
 8006820:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	2200      	movs	r2, #0
 8006826:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006828:	231a      	movs	r3, #26
 800682a:	2218      	movs	r2, #24
 800682c:	189b      	adds	r3, r3, r2
 800682e:	19db      	adds	r3, r3, r7
 8006830:	781b      	ldrb	r3, [r3, #0]
}
 8006832:	0018      	movs	r0, r3
 8006834:	46bd      	mov	sp, r7
 8006836:	b00e      	add	sp, #56	; 0x38
 8006838:	bdb0      	pop	{r4, r5, r7, pc}
 800683a:	46c0      	nop			; (mov r8, r8)
 800683c:	40021000 	.word	0x40021000
 8006840:	003d0900 	.word	0x003d0900
 8006844:	00f42400 	.word	0x00f42400
 8006848:	08007758 	.word	0x08007758

0800684c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	2201      	movs	r2, #1
 800685a:	4013      	ands	r3, r2
 800685c:	d00b      	beq.n	8006876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	4a4a      	ldr	r2, [pc, #296]	; (8006990 <UART_AdvFeatureConfig+0x144>)
 8006866:	4013      	ands	r3, r2
 8006868:	0019      	movs	r1, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	2202      	movs	r2, #2
 800687c:	4013      	ands	r3, r2
 800687e:	d00b      	beq.n	8006898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	4a43      	ldr	r2, [pc, #268]	; (8006994 <UART_AdvFeatureConfig+0x148>)
 8006888:	4013      	ands	r3, r2
 800688a:	0019      	movs	r1, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	430a      	orrs	r2, r1
 8006896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689c:	2204      	movs	r2, #4
 800689e:	4013      	ands	r3, r2
 80068a0:	d00b      	beq.n	80068ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	4a3b      	ldr	r2, [pc, #236]	; (8006998 <UART_AdvFeatureConfig+0x14c>)
 80068aa:	4013      	ands	r3, r2
 80068ac:	0019      	movs	r1, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	430a      	orrs	r2, r1
 80068b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	2208      	movs	r2, #8
 80068c0:	4013      	ands	r3, r2
 80068c2:	d00b      	beq.n	80068dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	4a34      	ldr	r2, [pc, #208]	; (800699c <UART_AdvFeatureConfig+0x150>)
 80068cc:	4013      	ands	r3, r2
 80068ce:	0019      	movs	r1, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e0:	2210      	movs	r2, #16
 80068e2:	4013      	ands	r3, r2
 80068e4:	d00b      	beq.n	80068fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	4a2c      	ldr	r2, [pc, #176]	; (80069a0 <UART_AdvFeatureConfig+0x154>)
 80068ee:	4013      	ands	r3, r2
 80068f0:	0019      	movs	r1, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006902:	2220      	movs	r2, #32
 8006904:	4013      	ands	r3, r2
 8006906:	d00b      	beq.n	8006920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	4a25      	ldr	r2, [pc, #148]	; (80069a4 <UART_AdvFeatureConfig+0x158>)
 8006910:	4013      	ands	r3, r2
 8006912:	0019      	movs	r1, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006924:	2240      	movs	r2, #64	; 0x40
 8006926:	4013      	ands	r3, r2
 8006928:	d01d      	beq.n	8006966 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	4a1d      	ldr	r2, [pc, #116]	; (80069a8 <UART_AdvFeatureConfig+0x15c>)
 8006932:	4013      	ands	r3, r2
 8006934:	0019      	movs	r1, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006946:	2380      	movs	r3, #128	; 0x80
 8006948:	035b      	lsls	r3, r3, #13
 800694a:	429a      	cmp	r2, r3
 800694c:	d10b      	bne.n	8006966 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	4a15      	ldr	r2, [pc, #84]	; (80069ac <UART_AdvFeatureConfig+0x160>)
 8006956:	4013      	ands	r3, r2
 8006958:	0019      	movs	r1, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696a:	2280      	movs	r2, #128	; 0x80
 800696c:	4013      	ands	r3, r2
 800696e:	d00b      	beq.n	8006988 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	4a0e      	ldr	r2, [pc, #56]	; (80069b0 <UART_AdvFeatureConfig+0x164>)
 8006978:	4013      	ands	r3, r2
 800697a:	0019      	movs	r1, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	605a      	str	r2, [r3, #4]
  }
}
 8006988:	46c0      	nop			; (mov r8, r8)
 800698a:	46bd      	mov	sp, r7
 800698c:	b002      	add	sp, #8
 800698e:	bd80      	pop	{r7, pc}
 8006990:	fffdffff 	.word	0xfffdffff
 8006994:	fffeffff 	.word	0xfffeffff
 8006998:	fffbffff 	.word	0xfffbffff
 800699c:	ffff7fff 	.word	0xffff7fff
 80069a0:	ffffefff 	.word	0xffffefff
 80069a4:	ffffdfff 	.word	0xffffdfff
 80069a8:	ffefffff 	.word	0xffefffff
 80069ac:	ff9fffff 	.word	0xff9fffff
 80069b0:	fff7ffff 	.word	0xfff7ffff

080069b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b092      	sub	sp, #72	; 0x48
 80069b8:	af02      	add	r7, sp, #8
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2284      	movs	r2, #132	; 0x84
 80069c0:	2100      	movs	r1, #0
 80069c2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069c4:	f7fc fec8 	bl	8003758 <HAL_GetTick>
 80069c8:	0003      	movs	r3, r0
 80069ca:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2208      	movs	r2, #8
 80069d4:	4013      	ands	r3, r2
 80069d6:	2b08      	cmp	r3, #8
 80069d8:	d12c      	bne.n	8006a34 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069dc:	2280      	movs	r2, #128	; 0x80
 80069de:	0391      	lsls	r1, r2, #14
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	4a46      	ldr	r2, [pc, #280]	; (8006afc <UART_CheckIdleState+0x148>)
 80069e4:	9200      	str	r2, [sp, #0]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f000 f88c 	bl	8006b04 <UART_WaitOnFlagUntilTimeout>
 80069ec:	1e03      	subs	r3, r0, #0
 80069ee:	d021      	beq.n	8006a34 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069f0:	f3ef 8310 	mrs	r3, PRIMASK
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80069f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80069fa:	2301      	movs	r3, #1
 80069fc:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a00:	f383 8810 	msr	PRIMASK, r3
}
 8006a04:	46c0      	nop			; (mov r8, r8)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2180      	movs	r1, #128	; 0x80
 8006a12:	438a      	bics	r2, r1
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1c:	f383 8810 	msr	PRIMASK, r3
}
 8006a20:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2220      	movs	r2, #32
 8006a26:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2278      	movs	r2, #120	; 0x78
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e05f      	b.n	8006af4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2204      	movs	r2, #4
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	2b04      	cmp	r3, #4
 8006a40:	d146      	bne.n	8006ad0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a44:	2280      	movs	r2, #128	; 0x80
 8006a46:	03d1      	lsls	r1, r2, #15
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	4a2c      	ldr	r2, [pc, #176]	; (8006afc <UART_CheckIdleState+0x148>)
 8006a4c:	9200      	str	r2, [sp, #0]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f000 f858 	bl	8006b04 <UART_WaitOnFlagUntilTimeout>
 8006a54:	1e03      	subs	r3, r0, #0
 8006a56:	d03b      	beq.n	8006ad0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a58:	f3ef 8310 	mrs	r3, PRIMASK
 8006a5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a60:	637b      	str	r3, [r7, #52]	; 0x34
 8006a62:	2301      	movs	r3, #1
 8006a64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f383 8810 	msr	PRIMASK, r3
}
 8006a6c:	46c0      	nop			; (mov r8, r8)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4921      	ldr	r1, [pc, #132]	; (8006b00 <UART_CheckIdleState+0x14c>)
 8006a7a:	400a      	ands	r2, r1
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f383 8810 	msr	PRIMASK, r3
}
 8006a88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a90:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a92:	633b      	str	r3, [r7, #48]	; 0x30
 8006a94:	2301      	movs	r3, #1
 8006a96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	f383 8810 	msr	PRIMASK, r3
}
 8006a9e:	46c0      	nop			; (mov r8, r8)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689a      	ldr	r2, [r3, #8]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2101      	movs	r1, #1
 8006aac:	438a      	bics	r2, r1
 8006aae:	609a      	str	r2, [r3, #8]
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	f383 8810 	msr	PRIMASK, r3
}
 8006aba:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2280      	movs	r2, #128	; 0x80
 8006ac0:	2120      	movs	r1, #32
 8006ac2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2278      	movs	r2, #120	; 0x78
 8006ac8:	2100      	movs	r1, #0
 8006aca:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e011      	b.n	8006af4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2280      	movs	r2, #128	; 0x80
 8006ada:	2120      	movs	r1, #32
 8006adc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2278      	movs	r2, #120	; 0x78
 8006aee:	2100      	movs	r1, #0
 8006af0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	0018      	movs	r0, r3
 8006af6:	46bd      	mov	sp, r7
 8006af8:	b010      	add	sp, #64	; 0x40
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	01ffffff 	.word	0x01ffffff
 8006b00:	fffffedf 	.word	0xfffffedf

08006b04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	1dfb      	adds	r3, r7, #7
 8006b12:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b14:	e04b      	b.n	8006bae <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	d048      	beq.n	8006bae <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b1c:	f7fc fe1c 	bl	8003758 <HAL_GetTick>
 8006b20:	0002      	movs	r2, r0
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d302      	bcc.n	8006b32 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e04b      	b.n	8006bce <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2204      	movs	r2, #4
 8006b3e:	4013      	ands	r3, r2
 8006b40:	d035      	beq.n	8006bae <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	2208      	movs	r2, #8
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d111      	bne.n	8006b74 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2208      	movs	r2, #8
 8006b56:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	0018      	movs	r0, r3
 8006b5c:	f000 f83c 	bl	8006bd8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2284      	movs	r2, #132	; 0x84
 8006b64:	2108      	movs	r1, #8
 8006b66:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2278      	movs	r2, #120	; 0x78
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e02c      	b.n	8006bce <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	69da      	ldr	r2, [r3, #28]
 8006b7a:	2380      	movs	r3, #128	; 0x80
 8006b7c:	011b      	lsls	r3, r3, #4
 8006b7e:	401a      	ands	r2, r3
 8006b80:	2380      	movs	r3, #128	; 0x80
 8006b82:	011b      	lsls	r3, r3, #4
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d112      	bne.n	8006bae <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2280      	movs	r2, #128	; 0x80
 8006b8e:	0112      	lsls	r2, r2, #4
 8006b90:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	0018      	movs	r0, r3
 8006b96:	f000 f81f 	bl	8006bd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2284      	movs	r2, #132	; 0x84
 8006b9e:	2120      	movs	r1, #32
 8006ba0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2278      	movs	r2, #120	; 0x78
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e00f      	b.n	8006bce <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	425a      	negs	r2, r3
 8006bbe:	4153      	adcs	r3, r2
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	001a      	movs	r2, r3
 8006bc4:	1dfb      	adds	r3, r7, #7
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d0a4      	beq.n	8006b16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	0018      	movs	r0, r3
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	b004      	add	sp, #16
 8006bd4:	bd80      	pop	{r7, pc}
	...

08006bd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08e      	sub	sp, #56	; 0x38
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006be0:	f3ef 8310 	mrs	r3, PRIMASK
 8006be4:	617b      	str	r3, [r7, #20]
  return(result);
 8006be6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006be8:	637b      	str	r3, [r7, #52]	; 0x34
 8006bea:	2301      	movs	r3, #1
 8006bec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	f383 8810 	msr	PRIMASK, r3
}
 8006bf4:	46c0      	nop			; (mov r8, r8)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4926      	ldr	r1, [pc, #152]	; (8006c9c <UART_EndRxTransfer+0xc4>)
 8006c02:	400a      	ands	r2, r1
 8006c04:	601a      	str	r2, [r3, #0]
 8006c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	f383 8810 	msr	PRIMASK, r3
}
 8006c10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c12:	f3ef 8310 	mrs	r3, PRIMASK
 8006c16:	623b      	str	r3, [r7, #32]
  return(result);
 8006c18:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	f383 8810 	msr	PRIMASK, r3
}
 8006c26:	46c0      	nop			; (mov r8, r8)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	689a      	ldr	r2, [r3, #8]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2101      	movs	r1, #1
 8006c34:	438a      	bics	r2, r1
 8006c36:	609a      	str	r2, [r3, #8]
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3e:	f383 8810 	msr	PRIMASK, r3
}
 8006c42:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d118      	bne.n	8006c7e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8006c50:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c52:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c56:	2301      	movs	r3, #1
 8006c58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f383 8810 	msr	PRIMASK, r3
}
 8006c60:	46c0      	nop			; (mov r8, r8)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2110      	movs	r1, #16
 8006c6e:	438a      	bics	r2, r1
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f383 8810 	msr	PRIMASK, r3
}
 8006c7c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2280      	movs	r2, #128	; 0x80
 8006c82:	2120      	movs	r1, #32
 8006c84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006c92:	46c0      	nop			; (mov r8, r8)
 8006c94:	46bd      	mov	sp, r7
 8006c96:	b00e      	add	sp, #56	; 0x38
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	46c0      	nop			; (mov r8, r8)
 8006c9c:	fffffedf 	.word	0xfffffedf

08006ca0 <__errno>:
 8006ca0:	4b01      	ldr	r3, [pc, #4]	; (8006ca8 <__errno+0x8>)
 8006ca2:	6818      	ldr	r0, [r3, #0]
 8006ca4:	4770      	bx	lr
 8006ca6:	46c0      	nop			; (mov r8, r8)
 8006ca8:	2000000c 	.word	0x2000000c

08006cac <__libc_init_array>:
 8006cac:	b570      	push	{r4, r5, r6, lr}
 8006cae:	2600      	movs	r6, #0
 8006cb0:	4d0c      	ldr	r5, [pc, #48]	; (8006ce4 <__libc_init_array+0x38>)
 8006cb2:	4c0d      	ldr	r4, [pc, #52]	; (8006ce8 <__libc_init_array+0x3c>)
 8006cb4:	1b64      	subs	r4, r4, r5
 8006cb6:	10a4      	asrs	r4, r4, #2
 8006cb8:	42a6      	cmp	r6, r4
 8006cba:	d109      	bne.n	8006cd0 <__libc_init_array+0x24>
 8006cbc:	2600      	movs	r6, #0
 8006cbe:	f000 fc8b 	bl	80075d8 <_init>
 8006cc2:	4d0a      	ldr	r5, [pc, #40]	; (8006cec <__libc_init_array+0x40>)
 8006cc4:	4c0a      	ldr	r4, [pc, #40]	; (8006cf0 <__libc_init_array+0x44>)
 8006cc6:	1b64      	subs	r4, r4, r5
 8006cc8:	10a4      	asrs	r4, r4, #2
 8006cca:	42a6      	cmp	r6, r4
 8006ccc:	d105      	bne.n	8006cda <__libc_init_array+0x2e>
 8006cce:	bd70      	pop	{r4, r5, r6, pc}
 8006cd0:	00b3      	lsls	r3, r6, #2
 8006cd2:	58eb      	ldr	r3, [r5, r3]
 8006cd4:	4798      	blx	r3
 8006cd6:	3601      	adds	r6, #1
 8006cd8:	e7ee      	b.n	8006cb8 <__libc_init_array+0xc>
 8006cda:	00b3      	lsls	r3, r6, #2
 8006cdc:	58eb      	ldr	r3, [r5, r3]
 8006cde:	4798      	blx	r3
 8006ce0:	3601      	adds	r6, #1
 8006ce2:	e7f2      	b.n	8006cca <__libc_init_array+0x1e>
 8006ce4:	080077b8 	.word	0x080077b8
 8006ce8:	080077b8 	.word	0x080077b8
 8006cec:	080077b8 	.word	0x080077b8
 8006cf0:	080077bc 	.word	0x080077bc

08006cf4 <memset>:
 8006cf4:	0003      	movs	r3, r0
 8006cf6:	1882      	adds	r2, r0, r2
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d100      	bne.n	8006cfe <memset+0xa>
 8006cfc:	4770      	bx	lr
 8006cfe:	7019      	strb	r1, [r3, #0]
 8006d00:	3301      	adds	r3, #1
 8006d02:	e7f9      	b.n	8006cf8 <memset+0x4>

08006d04 <siprintf>:
 8006d04:	b40e      	push	{r1, r2, r3}
 8006d06:	b500      	push	{lr}
 8006d08:	490b      	ldr	r1, [pc, #44]	; (8006d38 <siprintf+0x34>)
 8006d0a:	b09c      	sub	sp, #112	; 0x70
 8006d0c:	ab1d      	add	r3, sp, #116	; 0x74
 8006d0e:	9002      	str	r0, [sp, #8]
 8006d10:	9006      	str	r0, [sp, #24]
 8006d12:	9107      	str	r1, [sp, #28]
 8006d14:	9104      	str	r1, [sp, #16]
 8006d16:	4809      	ldr	r0, [pc, #36]	; (8006d3c <siprintf+0x38>)
 8006d18:	4909      	ldr	r1, [pc, #36]	; (8006d40 <siprintf+0x3c>)
 8006d1a:	cb04      	ldmia	r3!, {r2}
 8006d1c:	9105      	str	r1, [sp, #20]
 8006d1e:	6800      	ldr	r0, [r0, #0]
 8006d20:	a902      	add	r1, sp, #8
 8006d22:	9301      	str	r3, [sp, #4]
 8006d24:	f000 f870 	bl	8006e08 <_svfiprintf_r>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	9a02      	ldr	r2, [sp, #8]
 8006d2c:	7013      	strb	r3, [r2, #0]
 8006d2e:	b01c      	add	sp, #112	; 0x70
 8006d30:	bc08      	pop	{r3}
 8006d32:	b003      	add	sp, #12
 8006d34:	4718      	bx	r3
 8006d36:	46c0      	nop			; (mov r8, r8)
 8006d38:	7fffffff 	.word	0x7fffffff
 8006d3c:	2000000c 	.word	0x2000000c
 8006d40:	ffff0208 	.word	0xffff0208

08006d44 <__ssputs_r>:
 8006d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d46:	688e      	ldr	r6, [r1, #8]
 8006d48:	b085      	sub	sp, #20
 8006d4a:	0007      	movs	r7, r0
 8006d4c:	000c      	movs	r4, r1
 8006d4e:	9203      	str	r2, [sp, #12]
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	429e      	cmp	r6, r3
 8006d54:	d83c      	bhi.n	8006dd0 <__ssputs_r+0x8c>
 8006d56:	2390      	movs	r3, #144	; 0x90
 8006d58:	898a      	ldrh	r2, [r1, #12]
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	421a      	tst	r2, r3
 8006d5e:	d034      	beq.n	8006dca <__ssputs_r+0x86>
 8006d60:	6909      	ldr	r1, [r1, #16]
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	6960      	ldr	r0, [r4, #20]
 8006d66:	1a5b      	subs	r3, r3, r1
 8006d68:	9302      	str	r3, [sp, #8]
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	4343      	muls	r3, r0
 8006d6e:	0fdd      	lsrs	r5, r3, #31
 8006d70:	18ed      	adds	r5, r5, r3
 8006d72:	9b01      	ldr	r3, [sp, #4]
 8006d74:	9802      	ldr	r0, [sp, #8]
 8006d76:	3301      	adds	r3, #1
 8006d78:	181b      	adds	r3, r3, r0
 8006d7a:	106d      	asrs	r5, r5, #1
 8006d7c:	42ab      	cmp	r3, r5
 8006d7e:	d900      	bls.n	8006d82 <__ssputs_r+0x3e>
 8006d80:	001d      	movs	r5, r3
 8006d82:	0553      	lsls	r3, r2, #21
 8006d84:	d532      	bpl.n	8006dec <__ssputs_r+0xa8>
 8006d86:	0029      	movs	r1, r5
 8006d88:	0038      	movs	r0, r7
 8006d8a:	f000 fb53 	bl	8007434 <_malloc_r>
 8006d8e:	1e06      	subs	r6, r0, #0
 8006d90:	d109      	bne.n	8006da6 <__ssputs_r+0x62>
 8006d92:	230c      	movs	r3, #12
 8006d94:	603b      	str	r3, [r7, #0]
 8006d96:	2340      	movs	r3, #64	; 0x40
 8006d98:	2001      	movs	r0, #1
 8006d9a:	89a2      	ldrh	r2, [r4, #12]
 8006d9c:	4240      	negs	r0, r0
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	81a3      	strh	r3, [r4, #12]
 8006da2:	b005      	add	sp, #20
 8006da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006da6:	9a02      	ldr	r2, [sp, #8]
 8006da8:	6921      	ldr	r1, [r4, #16]
 8006daa:	f000 faba 	bl	8007322 <memcpy>
 8006dae:	89a3      	ldrh	r3, [r4, #12]
 8006db0:	4a14      	ldr	r2, [pc, #80]	; (8006e04 <__ssputs_r+0xc0>)
 8006db2:	401a      	ands	r2, r3
 8006db4:	2380      	movs	r3, #128	; 0x80
 8006db6:	4313      	orrs	r3, r2
 8006db8:	81a3      	strh	r3, [r4, #12]
 8006dba:	9b02      	ldr	r3, [sp, #8]
 8006dbc:	6126      	str	r6, [r4, #16]
 8006dbe:	18f6      	adds	r6, r6, r3
 8006dc0:	6026      	str	r6, [r4, #0]
 8006dc2:	6165      	str	r5, [r4, #20]
 8006dc4:	9e01      	ldr	r6, [sp, #4]
 8006dc6:	1aed      	subs	r5, r5, r3
 8006dc8:	60a5      	str	r5, [r4, #8]
 8006dca:	9b01      	ldr	r3, [sp, #4]
 8006dcc:	429e      	cmp	r6, r3
 8006dce:	d900      	bls.n	8006dd2 <__ssputs_r+0x8e>
 8006dd0:	9e01      	ldr	r6, [sp, #4]
 8006dd2:	0032      	movs	r2, r6
 8006dd4:	9903      	ldr	r1, [sp, #12]
 8006dd6:	6820      	ldr	r0, [r4, #0]
 8006dd8:	f000 faac 	bl	8007334 <memmove>
 8006ddc:	68a3      	ldr	r3, [r4, #8]
 8006dde:	2000      	movs	r0, #0
 8006de0:	1b9b      	subs	r3, r3, r6
 8006de2:	60a3      	str	r3, [r4, #8]
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	199e      	adds	r6, r3, r6
 8006de8:	6026      	str	r6, [r4, #0]
 8006dea:	e7da      	b.n	8006da2 <__ssputs_r+0x5e>
 8006dec:	002a      	movs	r2, r5
 8006dee:	0038      	movs	r0, r7
 8006df0:	f000 fb96 	bl	8007520 <_realloc_r>
 8006df4:	1e06      	subs	r6, r0, #0
 8006df6:	d1e0      	bne.n	8006dba <__ssputs_r+0x76>
 8006df8:	0038      	movs	r0, r7
 8006dfa:	6921      	ldr	r1, [r4, #16]
 8006dfc:	f000 faae 	bl	800735c <_free_r>
 8006e00:	e7c7      	b.n	8006d92 <__ssputs_r+0x4e>
 8006e02:	46c0      	nop			; (mov r8, r8)
 8006e04:	fffffb7f 	.word	0xfffffb7f

08006e08 <_svfiprintf_r>:
 8006e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e0a:	b0a1      	sub	sp, #132	; 0x84
 8006e0c:	9003      	str	r0, [sp, #12]
 8006e0e:	001d      	movs	r5, r3
 8006e10:	898b      	ldrh	r3, [r1, #12]
 8006e12:	000f      	movs	r7, r1
 8006e14:	0016      	movs	r6, r2
 8006e16:	061b      	lsls	r3, r3, #24
 8006e18:	d511      	bpl.n	8006e3e <_svfiprintf_r+0x36>
 8006e1a:	690b      	ldr	r3, [r1, #16]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10e      	bne.n	8006e3e <_svfiprintf_r+0x36>
 8006e20:	2140      	movs	r1, #64	; 0x40
 8006e22:	f000 fb07 	bl	8007434 <_malloc_r>
 8006e26:	6038      	str	r0, [r7, #0]
 8006e28:	6138      	str	r0, [r7, #16]
 8006e2a:	2800      	cmp	r0, #0
 8006e2c:	d105      	bne.n	8006e3a <_svfiprintf_r+0x32>
 8006e2e:	230c      	movs	r3, #12
 8006e30:	9a03      	ldr	r2, [sp, #12]
 8006e32:	3801      	subs	r0, #1
 8006e34:	6013      	str	r3, [r2, #0]
 8006e36:	b021      	add	sp, #132	; 0x84
 8006e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e3a:	2340      	movs	r3, #64	; 0x40
 8006e3c:	617b      	str	r3, [r7, #20]
 8006e3e:	2300      	movs	r3, #0
 8006e40:	ac08      	add	r4, sp, #32
 8006e42:	6163      	str	r3, [r4, #20]
 8006e44:	3320      	adds	r3, #32
 8006e46:	7663      	strb	r3, [r4, #25]
 8006e48:	3310      	adds	r3, #16
 8006e4a:	76a3      	strb	r3, [r4, #26]
 8006e4c:	9507      	str	r5, [sp, #28]
 8006e4e:	0035      	movs	r5, r6
 8006e50:	782b      	ldrb	r3, [r5, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <_svfiprintf_r+0x52>
 8006e56:	2b25      	cmp	r3, #37	; 0x25
 8006e58:	d147      	bne.n	8006eea <_svfiprintf_r+0xe2>
 8006e5a:	1bab      	subs	r3, r5, r6
 8006e5c:	9305      	str	r3, [sp, #20]
 8006e5e:	42b5      	cmp	r5, r6
 8006e60:	d00c      	beq.n	8006e7c <_svfiprintf_r+0x74>
 8006e62:	0032      	movs	r2, r6
 8006e64:	0039      	movs	r1, r7
 8006e66:	9803      	ldr	r0, [sp, #12]
 8006e68:	f7ff ff6c 	bl	8006d44 <__ssputs_r>
 8006e6c:	1c43      	adds	r3, r0, #1
 8006e6e:	d100      	bne.n	8006e72 <_svfiprintf_r+0x6a>
 8006e70:	e0ae      	b.n	8006fd0 <_svfiprintf_r+0x1c8>
 8006e72:	6962      	ldr	r2, [r4, #20]
 8006e74:	9b05      	ldr	r3, [sp, #20]
 8006e76:	4694      	mov	ip, r2
 8006e78:	4463      	add	r3, ip
 8006e7a:	6163      	str	r3, [r4, #20]
 8006e7c:	782b      	ldrb	r3, [r5, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d100      	bne.n	8006e84 <_svfiprintf_r+0x7c>
 8006e82:	e0a5      	b.n	8006fd0 <_svfiprintf_r+0x1c8>
 8006e84:	2201      	movs	r2, #1
 8006e86:	2300      	movs	r3, #0
 8006e88:	4252      	negs	r2, r2
 8006e8a:	6062      	str	r2, [r4, #4]
 8006e8c:	a904      	add	r1, sp, #16
 8006e8e:	3254      	adds	r2, #84	; 0x54
 8006e90:	1852      	adds	r2, r2, r1
 8006e92:	1c6e      	adds	r6, r5, #1
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	60e3      	str	r3, [r4, #12]
 8006e98:	60a3      	str	r3, [r4, #8]
 8006e9a:	7013      	strb	r3, [r2, #0]
 8006e9c:	65a3      	str	r3, [r4, #88]	; 0x58
 8006e9e:	2205      	movs	r2, #5
 8006ea0:	7831      	ldrb	r1, [r6, #0]
 8006ea2:	4854      	ldr	r0, [pc, #336]	; (8006ff4 <_svfiprintf_r+0x1ec>)
 8006ea4:	f000 fa32 	bl	800730c <memchr>
 8006ea8:	1c75      	adds	r5, r6, #1
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	d11f      	bne.n	8006eee <_svfiprintf_r+0xe6>
 8006eae:	6822      	ldr	r2, [r4, #0]
 8006eb0:	06d3      	lsls	r3, r2, #27
 8006eb2:	d504      	bpl.n	8006ebe <_svfiprintf_r+0xb6>
 8006eb4:	2353      	movs	r3, #83	; 0x53
 8006eb6:	a904      	add	r1, sp, #16
 8006eb8:	185b      	adds	r3, r3, r1
 8006eba:	2120      	movs	r1, #32
 8006ebc:	7019      	strb	r1, [r3, #0]
 8006ebe:	0713      	lsls	r3, r2, #28
 8006ec0:	d504      	bpl.n	8006ecc <_svfiprintf_r+0xc4>
 8006ec2:	2353      	movs	r3, #83	; 0x53
 8006ec4:	a904      	add	r1, sp, #16
 8006ec6:	185b      	adds	r3, r3, r1
 8006ec8:	212b      	movs	r1, #43	; 0x2b
 8006eca:	7019      	strb	r1, [r3, #0]
 8006ecc:	7833      	ldrb	r3, [r6, #0]
 8006ece:	2b2a      	cmp	r3, #42	; 0x2a
 8006ed0:	d016      	beq.n	8006f00 <_svfiprintf_r+0xf8>
 8006ed2:	0035      	movs	r5, r6
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	200a      	movs	r0, #10
 8006ed8:	68e3      	ldr	r3, [r4, #12]
 8006eda:	782a      	ldrb	r2, [r5, #0]
 8006edc:	1c6e      	adds	r6, r5, #1
 8006ede:	3a30      	subs	r2, #48	; 0x30
 8006ee0:	2a09      	cmp	r2, #9
 8006ee2:	d94e      	bls.n	8006f82 <_svfiprintf_r+0x17a>
 8006ee4:	2900      	cmp	r1, #0
 8006ee6:	d111      	bne.n	8006f0c <_svfiprintf_r+0x104>
 8006ee8:	e017      	b.n	8006f1a <_svfiprintf_r+0x112>
 8006eea:	3501      	adds	r5, #1
 8006eec:	e7b0      	b.n	8006e50 <_svfiprintf_r+0x48>
 8006eee:	4b41      	ldr	r3, [pc, #260]	; (8006ff4 <_svfiprintf_r+0x1ec>)
 8006ef0:	6822      	ldr	r2, [r4, #0]
 8006ef2:	1ac0      	subs	r0, r0, r3
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	4083      	lsls	r3, r0
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	002e      	movs	r6, r5
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	e7ce      	b.n	8006e9e <_svfiprintf_r+0x96>
 8006f00:	9b07      	ldr	r3, [sp, #28]
 8006f02:	1d19      	adds	r1, r3, #4
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	9107      	str	r1, [sp, #28]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	db01      	blt.n	8006f10 <_svfiprintf_r+0x108>
 8006f0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f0e:	e004      	b.n	8006f1a <_svfiprintf_r+0x112>
 8006f10:	425b      	negs	r3, r3
 8006f12:	60e3      	str	r3, [r4, #12]
 8006f14:	2302      	movs	r3, #2
 8006f16:	4313      	orrs	r3, r2
 8006f18:	6023      	str	r3, [r4, #0]
 8006f1a:	782b      	ldrb	r3, [r5, #0]
 8006f1c:	2b2e      	cmp	r3, #46	; 0x2e
 8006f1e:	d10a      	bne.n	8006f36 <_svfiprintf_r+0x12e>
 8006f20:	786b      	ldrb	r3, [r5, #1]
 8006f22:	2b2a      	cmp	r3, #42	; 0x2a
 8006f24:	d135      	bne.n	8006f92 <_svfiprintf_r+0x18a>
 8006f26:	9b07      	ldr	r3, [sp, #28]
 8006f28:	3502      	adds	r5, #2
 8006f2a:	1d1a      	adds	r2, r3, #4
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	9207      	str	r2, [sp, #28]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	db2b      	blt.n	8006f8c <_svfiprintf_r+0x184>
 8006f34:	9309      	str	r3, [sp, #36]	; 0x24
 8006f36:	4e30      	ldr	r6, [pc, #192]	; (8006ff8 <_svfiprintf_r+0x1f0>)
 8006f38:	2203      	movs	r2, #3
 8006f3a:	0030      	movs	r0, r6
 8006f3c:	7829      	ldrb	r1, [r5, #0]
 8006f3e:	f000 f9e5 	bl	800730c <memchr>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d006      	beq.n	8006f54 <_svfiprintf_r+0x14c>
 8006f46:	2340      	movs	r3, #64	; 0x40
 8006f48:	1b80      	subs	r0, r0, r6
 8006f4a:	4083      	lsls	r3, r0
 8006f4c:	6822      	ldr	r2, [r4, #0]
 8006f4e:	3501      	adds	r5, #1
 8006f50:	4313      	orrs	r3, r2
 8006f52:	6023      	str	r3, [r4, #0]
 8006f54:	7829      	ldrb	r1, [r5, #0]
 8006f56:	2206      	movs	r2, #6
 8006f58:	4828      	ldr	r0, [pc, #160]	; (8006ffc <_svfiprintf_r+0x1f4>)
 8006f5a:	1c6e      	adds	r6, r5, #1
 8006f5c:	7621      	strb	r1, [r4, #24]
 8006f5e:	f000 f9d5 	bl	800730c <memchr>
 8006f62:	2800      	cmp	r0, #0
 8006f64:	d03c      	beq.n	8006fe0 <_svfiprintf_r+0x1d8>
 8006f66:	4b26      	ldr	r3, [pc, #152]	; (8007000 <_svfiprintf_r+0x1f8>)
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d125      	bne.n	8006fb8 <_svfiprintf_r+0x1b0>
 8006f6c:	2207      	movs	r2, #7
 8006f6e:	9b07      	ldr	r3, [sp, #28]
 8006f70:	3307      	adds	r3, #7
 8006f72:	4393      	bics	r3, r2
 8006f74:	3308      	adds	r3, #8
 8006f76:	9307      	str	r3, [sp, #28]
 8006f78:	6963      	ldr	r3, [r4, #20]
 8006f7a:	9a04      	ldr	r2, [sp, #16]
 8006f7c:	189b      	adds	r3, r3, r2
 8006f7e:	6163      	str	r3, [r4, #20]
 8006f80:	e765      	b.n	8006e4e <_svfiprintf_r+0x46>
 8006f82:	4343      	muls	r3, r0
 8006f84:	0035      	movs	r5, r6
 8006f86:	2101      	movs	r1, #1
 8006f88:	189b      	adds	r3, r3, r2
 8006f8a:	e7a6      	b.n	8006eda <_svfiprintf_r+0xd2>
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	425b      	negs	r3, r3
 8006f90:	e7d0      	b.n	8006f34 <_svfiprintf_r+0x12c>
 8006f92:	2300      	movs	r3, #0
 8006f94:	200a      	movs	r0, #10
 8006f96:	001a      	movs	r2, r3
 8006f98:	3501      	adds	r5, #1
 8006f9a:	6063      	str	r3, [r4, #4]
 8006f9c:	7829      	ldrb	r1, [r5, #0]
 8006f9e:	1c6e      	adds	r6, r5, #1
 8006fa0:	3930      	subs	r1, #48	; 0x30
 8006fa2:	2909      	cmp	r1, #9
 8006fa4:	d903      	bls.n	8006fae <_svfiprintf_r+0x1a6>
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0c5      	beq.n	8006f36 <_svfiprintf_r+0x12e>
 8006faa:	9209      	str	r2, [sp, #36]	; 0x24
 8006fac:	e7c3      	b.n	8006f36 <_svfiprintf_r+0x12e>
 8006fae:	4342      	muls	r2, r0
 8006fb0:	0035      	movs	r5, r6
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	1852      	adds	r2, r2, r1
 8006fb6:	e7f1      	b.n	8006f9c <_svfiprintf_r+0x194>
 8006fb8:	ab07      	add	r3, sp, #28
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	003a      	movs	r2, r7
 8006fbe:	0021      	movs	r1, r4
 8006fc0:	4b10      	ldr	r3, [pc, #64]	; (8007004 <_svfiprintf_r+0x1fc>)
 8006fc2:	9803      	ldr	r0, [sp, #12]
 8006fc4:	e000      	b.n	8006fc8 <_svfiprintf_r+0x1c0>
 8006fc6:	bf00      	nop
 8006fc8:	9004      	str	r0, [sp, #16]
 8006fca:	9b04      	ldr	r3, [sp, #16]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	d1d3      	bne.n	8006f78 <_svfiprintf_r+0x170>
 8006fd0:	89bb      	ldrh	r3, [r7, #12]
 8006fd2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006fd4:	065b      	lsls	r3, r3, #25
 8006fd6:	d400      	bmi.n	8006fda <_svfiprintf_r+0x1d2>
 8006fd8:	e72d      	b.n	8006e36 <_svfiprintf_r+0x2e>
 8006fda:	2001      	movs	r0, #1
 8006fdc:	4240      	negs	r0, r0
 8006fde:	e72a      	b.n	8006e36 <_svfiprintf_r+0x2e>
 8006fe0:	ab07      	add	r3, sp, #28
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	003a      	movs	r2, r7
 8006fe6:	0021      	movs	r1, r4
 8006fe8:	4b06      	ldr	r3, [pc, #24]	; (8007004 <_svfiprintf_r+0x1fc>)
 8006fea:	9803      	ldr	r0, [sp, #12]
 8006fec:	f000 f87c 	bl	80070e8 <_printf_i>
 8006ff0:	e7ea      	b.n	8006fc8 <_svfiprintf_r+0x1c0>
 8006ff2:	46c0      	nop			; (mov r8, r8)
 8006ff4:	0800777c 	.word	0x0800777c
 8006ff8:	08007782 	.word	0x08007782
 8006ffc:	08007786 	.word	0x08007786
 8007000:	00000000 	.word	0x00000000
 8007004:	08006d45 	.word	0x08006d45

08007008 <_printf_common>:
 8007008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800700a:	0015      	movs	r5, r2
 800700c:	9301      	str	r3, [sp, #4]
 800700e:	688a      	ldr	r2, [r1, #8]
 8007010:	690b      	ldr	r3, [r1, #16]
 8007012:	000c      	movs	r4, r1
 8007014:	9000      	str	r0, [sp, #0]
 8007016:	4293      	cmp	r3, r2
 8007018:	da00      	bge.n	800701c <_printf_common+0x14>
 800701a:	0013      	movs	r3, r2
 800701c:	0022      	movs	r2, r4
 800701e:	602b      	str	r3, [r5, #0]
 8007020:	3243      	adds	r2, #67	; 0x43
 8007022:	7812      	ldrb	r2, [r2, #0]
 8007024:	2a00      	cmp	r2, #0
 8007026:	d001      	beq.n	800702c <_printf_common+0x24>
 8007028:	3301      	adds	r3, #1
 800702a:	602b      	str	r3, [r5, #0]
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	069b      	lsls	r3, r3, #26
 8007030:	d502      	bpl.n	8007038 <_printf_common+0x30>
 8007032:	682b      	ldr	r3, [r5, #0]
 8007034:	3302      	adds	r3, #2
 8007036:	602b      	str	r3, [r5, #0]
 8007038:	6822      	ldr	r2, [r4, #0]
 800703a:	2306      	movs	r3, #6
 800703c:	0017      	movs	r7, r2
 800703e:	401f      	ands	r7, r3
 8007040:	421a      	tst	r2, r3
 8007042:	d027      	beq.n	8007094 <_printf_common+0x8c>
 8007044:	0023      	movs	r3, r4
 8007046:	3343      	adds	r3, #67	; 0x43
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	1e5a      	subs	r2, r3, #1
 800704c:	4193      	sbcs	r3, r2
 800704e:	6822      	ldr	r2, [r4, #0]
 8007050:	0692      	lsls	r2, r2, #26
 8007052:	d430      	bmi.n	80070b6 <_printf_common+0xae>
 8007054:	0022      	movs	r2, r4
 8007056:	9901      	ldr	r1, [sp, #4]
 8007058:	9800      	ldr	r0, [sp, #0]
 800705a:	9e08      	ldr	r6, [sp, #32]
 800705c:	3243      	adds	r2, #67	; 0x43
 800705e:	47b0      	blx	r6
 8007060:	1c43      	adds	r3, r0, #1
 8007062:	d025      	beq.n	80070b0 <_printf_common+0xa8>
 8007064:	2306      	movs	r3, #6
 8007066:	6820      	ldr	r0, [r4, #0]
 8007068:	682a      	ldr	r2, [r5, #0]
 800706a:	68e1      	ldr	r1, [r4, #12]
 800706c:	2500      	movs	r5, #0
 800706e:	4003      	ands	r3, r0
 8007070:	2b04      	cmp	r3, #4
 8007072:	d103      	bne.n	800707c <_printf_common+0x74>
 8007074:	1a8d      	subs	r5, r1, r2
 8007076:	43eb      	mvns	r3, r5
 8007078:	17db      	asrs	r3, r3, #31
 800707a:	401d      	ands	r5, r3
 800707c:	68a3      	ldr	r3, [r4, #8]
 800707e:	6922      	ldr	r2, [r4, #16]
 8007080:	4293      	cmp	r3, r2
 8007082:	dd01      	ble.n	8007088 <_printf_common+0x80>
 8007084:	1a9b      	subs	r3, r3, r2
 8007086:	18ed      	adds	r5, r5, r3
 8007088:	2700      	movs	r7, #0
 800708a:	42bd      	cmp	r5, r7
 800708c:	d120      	bne.n	80070d0 <_printf_common+0xc8>
 800708e:	2000      	movs	r0, #0
 8007090:	e010      	b.n	80070b4 <_printf_common+0xac>
 8007092:	3701      	adds	r7, #1
 8007094:	68e3      	ldr	r3, [r4, #12]
 8007096:	682a      	ldr	r2, [r5, #0]
 8007098:	1a9b      	subs	r3, r3, r2
 800709a:	42bb      	cmp	r3, r7
 800709c:	ddd2      	ble.n	8007044 <_printf_common+0x3c>
 800709e:	0022      	movs	r2, r4
 80070a0:	2301      	movs	r3, #1
 80070a2:	9901      	ldr	r1, [sp, #4]
 80070a4:	9800      	ldr	r0, [sp, #0]
 80070a6:	9e08      	ldr	r6, [sp, #32]
 80070a8:	3219      	adds	r2, #25
 80070aa:	47b0      	blx	r6
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	d1f0      	bne.n	8007092 <_printf_common+0x8a>
 80070b0:	2001      	movs	r0, #1
 80070b2:	4240      	negs	r0, r0
 80070b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070b6:	2030      	movs	r0, #48	; 0x30
 80070b8:	18e1      	adds	r1, r4, r3
 80070ba:	3143      	adds	r1, #67	; 0x43
 80070bc:	7008      	strb	r0, [r1, #0]
 80070be:	0021      	movs	r1, r4
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	3145      	adds	r1, #69	; 0x45
 80070c4:	7809      	ldrb	r1, [r1, #0]
 80070c6:	18a2      	adds	r2, r4, r2
 80070c8:	3243      	adds	r2, #67	; 0x43
 80070ca:	3302      	adds	r3, #2
 80070cc:	7011      	strb	r1, [r2, #0]
 80070ce:	e7c1      	b.n	8007054 <_printf_common+0x4c>
 80070d0:	0022      	movs	r2, r4
 80070d2:	2301      	movs	r3, #1
 80070d4:	9901      	ldr	r1, [sp, #4]
 80070d6:	9800      	ldr	r0, [sp, #0]
 80070d8:	9e08      	ldr	r6, [sp, #32]
 80070da:	321a      	adds	r2, #26
 80070dc:	47b0      	blx	r6
 80070de:	1c43      	adds	r3, r0, #1
 80070e0:	d0e6      	beq.n	80070b0 <_printf_common+0xa8>
 80070e2:	3701      	adds	r7, #1
 80070e4:	e7d1      	b.n	800708a <_printf_common+0x82>
	...

080070e8 <_printf_i>:
 80070e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ea:	b08b      	sub	sp, #44	; 0x2c
 80070ec:	9206      	str	r2, [sp, #24]
 80070ee:	000a      	movs	r2, r1
 80070f0:	3243      	adds	r2, #67	; 0x43
 80070f2:	9307      	str	r3, [sp, #28]
 80070f4:	9005      	str	r0, [sp, #20]
 80070f6:	9204      	str	r2, [sp, #16]
 80070f8:	7e0a      	ldrb	r2, [r1, #24]
 80070fa:	000c      	movs	r4, r1
 80070fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80070fe:	2a78      	cmp	r2, #120	; 0x78
 8007100:	d807      	bhi.n	8007112 <_printf_i+0x2a>
 8007102:	2a62      	cmp	r2, #98	; 0x62
 8007104:	d809      	bhi.n	800711a <_printf_i+0x32>
 8007106:	2a00      	cmp	r2, #0
 8007108:	d100      	bne.n	800710c <_printf_i+0x24>
 800710a:	e0c1      	b.n	8007290 <_printf_i+0x1a8>
 800710c:	2a58      	cmp	r2, #88	; 0x58
 800710e:	d100      	bne.n	8007112 <_printf_i+0x2a>
 8007110:	e08c      	b.n	800722c <_printf_i+0x144>
 8007112:	0026      	movs	r6, r4
 8007114:	3642      	adds	r6, #66	; 0x42
 8007116:	7032      	strb	r2, [r6, #0]
 8007118:	e022      	b.n	8007160 <_printf_i+0x78>
 800711a:	0010      	movs	r0, r2
 800711c:	3863      	subs	r0, #99	; 0x63
 800711e:	2815      	cmp	r0, #21
 8007120:	d8f7      	bhi.n	8007112 <_printf_i+0x2a>
 8007122:	f7f8 fff9 	bl	8000118 <__gnu_thumb1_case_shi>
 8007126:	0016      	.short	0x0016
 8007128:	fff6001f 	.word	0xfff6001f
 800712c:	fff6fff6 	.word	0xfff6fff6
 8007130:	001ffff6 	.word	0x001ffff6
 8007134:	fff6fff6 	.word	0xfff6fff6
 8007138:	fff6fff6 	.word	0xfff6fff6
 800713c:	003600a8 	.word	0x003600a8
 8007140:	fff6009a 	.word	0xfff6009a
 8007144:	00b9fff6 	.word	0x00b9fff6
 8007148:	0036fff6 	.word	0x0036fff6
 800714c:	fff6fff6 	.word	0xfff6fff6
 8007150:	009e      	.short	0x009e
 8007152:	0026      	movs	r6, r4
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	3642      	adds	r6, #66	; 0x42
 8007158:	1d11      	adds	r1, r2, #4
 800715a:	6019      	str	r1, [r3, #0]
 800715c:	6813      	ldr	r3, [r2, #0]
 800715e:	7033      	strb	r3, [r6, #0]
 8007160:	2301      	movs	r3, #1
 8007162:	e0a7      	b.n	80072b4 <_printf_i+0x1cc>
 8007164:	6808      	ldr	r0, [r1, #0]
 8007166:	6819      	ldr	r1, [r3, #0]
 8007168:	1d0a      	adds	r2, r1, #4
 800716a:	0605      	lsls	r5, r0, #24
 800716c:	d50b      	bpl.n	8007186 <_printf_i+0x9e>
 800716e:	680d      	ldr	r5, [r1, #0]
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	2d00      	cmp	r5, #0
 8007174:	da03      	bge.n	800717e <_printf_i+0x96>
 8007176:	232d      	movs	r3, #45	; 0x2d
 8007178:	9a04      	ldr	r2, [sp, #16]
 800717a:	426d      	negs	r5, r5
 800717c:	7013      	strb	r3, [r2, #0]
 800717e:	4b61      	ldr	r3, [pc, #388]	; (8007304 <_printf_i+0x21c>)
 8007180:	270a      	movs	r7, #10
 8007182:	9303      	str	r3, [sp, #12]
 8007184:	e01b      	b.n	80071be <_printf_i+0xd6>
 8007186:	680d      	ldr	r5, [r1, #0]
 8007188:	601a      	str	r2, [r3, #0]
 800718a:	0641      	lsls	r1, r0, #25
 800718c:	d5f1      	bpl.n	8007172 <_printf_i+0x8a>
 800718e:	b22d      	sxth	r5, r5
 8007190:	e7ef      	b.n	8007172 <_printf_i+0x8a>
 8007192:	680d      	ldr	r5, [r1, #0]
 8007194:	6819      	ldr	r1, [r3, #0]
 8007196:	1d08      	adds	r0, r1, #4
 8007198:	6018      	str	r0, [r3, #0]
 800719a:	062e      	lsls	r6, r5, #24
 800719c:	d501      	bpl.n	80071a2 <_printf_i+0xba>
 800719e:	680d      	ldr	r5, [r1, #0]
 80071a0:	e003      	b.n	80071aa <_printf_i+0xc2>
 80071a2:	066d      	lsls	r5, r5, #25
 80071a4:	d5fb      	bpl.n	800719e <_printf_i+0xb6>
 80071a6:	680d      	ldr	r5, [r1, #0]
 80071a8:	b2ad      	uxth	r5, r5
 80071aa:	4b56      	ldr	r3, [pc, #344]	; (8007304 <_printf_i+0x21c>)
 80071ac:	2708      	movs	r7, #8
 80071ae:	9303      	str	r3, [sp, #12]
 80071b0:	2a6f      	cmp	r2, #111	; 0x6f
 80071b2:	d000      	beq.n	80071b6 <_printf_i+0xce>
 80071b4:	3702      	adds	r7, #2
 80071b6:	0023      	movs	r3, r4
 80071b8:	2200      	movs	r2, #0
 80071ba:	3343      	adds	r3, #67	; 0x43
 80071bc:	701a      	strb	r2, [r3, #0]
 80071be:	6863      	ldr	r3, [r4, #4]
 80071c0:	60a3      	str	r3, [r4, #8]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	db03      	blt.n	80071ce <_printf_i+0xe6>
 80071c6:	2204      	movs	r2, #4
 80071c8:	6821      	ldr	r1, [r4, #0]
 80071ca:	4391      	bics	r1, r2
 80071cc:	6021      	str	r1, [r4, #0]
 80071ce:	2d00      	cmp	r5, #0
 80071d0:	d102      	bne.n	80071d8 <_printf_i+0xf0>
 80071d2:	9e04      	ldr	r6, [sp, #16]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00c      	beq.n	80071f2 <_printf_i+0x10a>
 80071d8:	9e04      	ldr	r6, [sp, #16]
 80071da:	0028      	movs	r0, r5
 80071dc:	0039      	movs	r1, r7
 80071de:	f7f9 f82b 	bl	8000238 <__aeabi_uidivmod>
 80071e2:	9b03      	ldr	r3, [sp, #12]
 80071e4:	3e01      	subs	r6, #1
 80071e6:	5c5b      	ldrb	r3, [r3, r1]
 80071e8:	7033      	strb	r3, [r6, #0]
 80071ea:	002b      	movs	r3, r5
 80071ec:	0005      	movs	r5, r0
 80071ee:	429f      	cmp	r7, r3
 80071f0:	d9f3      	bls.n	80071da <_printf_i+0xf2>
 80071f2:	2f08      	cmp	r7, #8
 80071f4:	d109      	bne.n	800720a <_printf_i+0x122>
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	07db      	lsls	r3, r3, #31
 80071fa:	d506      	bpl.n	800720a <_printf_i+0x122>
 80071fc:	6863      	ldr	r3, [r4, #4]
 80071fe:	6922      	ldr	r2, [r4, #16]
 8007200:	4293      	cmp	r3, r2
 8007202:	dc02      	bgt.n	800720a <_printf_i+0x122>
 8007204:	2330      	movs	r3, #48	; 0x30
 8007206:	3e01      	subs	r6, #1
 8007208:	7033      	strb	r3, [r6, #0]
 800720a:	9b04      	ldr	r3, [sp, #16]
 800720c:	1b9b      	subs	r3, r3, r6
 800720e:	6123      	str	r3, [r4, #16]
 8007210:	9b07      	ldr	r3, [sp, #28]
 8007212:	0021      	movs	r1, r4
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	9805      	ldr	r0, [sp, #20]
 8007218:	9b06      	ldr	r3, [sp, #24]
 800721a:	aa09      	add	r2, sp, #36	; 0x24
 800721c:	f7ff fef4 	bl	8007008 <_printf_common>
 8007220:	1c43      	adds	r3, r0, #1
 8007222:	d14c      	bne.n	80072be <_printf_i+0x1d6>
 8007224:	2001      	movs	r0, #1
 8007226:	4240      	negs	r0, r0
 8007228:	b00b      	add	sp, #44	; 0x2c
 800722a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800722c:	3145      	adds	r1, #69	; 0x45
 800722e:	700a      	strb	r2, [r1, #0]
 8007230:	4a34      	ldr	r2, [pc, #208]	; (8007304 <_printf_i+0x21c>)
 8007232:	9203      	str	r2, [sp, #12]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	6821      	ldr	r1, [r4, #0]
 8007238:	ca20      	ldmia	r2!, {r5}
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	0608      	lsls	r0, r1, #24
 800723e:	d516      	bpl.n	800726e <_printf_i+0x186>
 8007240:	07cb      	lsls	r3, r1, #31
 8007242:	d502      	bpl.n	800724a <_printf_i+0x162>
 8007244:	2320      	movs	r3, #32
 8007246:	4319      	orrs	r1, r3
 8007248:	6021      	str	r1, [r4, #0]
 800724a:	2710      	movs	r7, #16
 800724c:	2d00      	cmp	r5, #0
 800724e:	d1b2      	bne.n	80071b6 <_printf_i+0xce>
 8007250:	2320      	movs	r3, #32
 8007252:	6822      	ldr	r2, [r4, #0]
 8007254:	439a      	bics	r2, r3
 8007256:	6022      	str	r2, [r4, #0]
 8007258:	e7ad      	b.n	80071b6 <_printf_i+0xce>
 800725a:	2220      	movs	r2, #32
 800725c:	6809      	ldr	r1, [r1, #0]
 800725e:	430a      	orrs	r2, r1
 8007260:	6022      	str	r2, [r4, #0]
 8007262:	0022      	movs	r2, r4
 8007264:	2178      	movs	r1, #120	; 0x78
 8007266:	3245      	adds	r2, #69	; 0x45
 8007268:	7011      	strb	r1, [r2, #0]
 800726a:	4a27      	ldr	r2, [pc, #156]	; (8007308 <_printf_i+0x220>)
 800726c:	e7e1      	b.n	8007232 <_printf_i+0x14a>
 800726e:	0648      	lsls	r0, r1, #25
 8007270:	d5e6      	bpl.n	8007240 <_printf_i+0x158>
 8007272:	b2ad      	uxth	r5, r5
 8007274:	e7e4      	b.n	8007240 <_printf_i+0x158>
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	680d      	ldr	r5, [r1, #0]
 800727a:	1d10      	adds	r0, r2, #4
 800727c:	6949      	ldr	r1, [r1, #20]
 800727e:	6018      	str	r0, [r3, #0]
 8007280:	6813      	ldr	r3, [r2, #0]
 8007282:	062e      	lsls	r6, r5, #24
 8007284:	d501      	bpl.n	800728a <_printf_i+0x1a2>
 8007286:	6019      	str	r1, [r3, #0]
 8007288:	e002      	b.n	8007290 <_printf_i+0x1a8>
 800728a:	066d      	lsls	r5, r5, #25
 800728c:	d5fb      	bpl.n	8007286 <_printf_i+0x19e>
 800728e:	8019      	strh	r1, [r3, #0]
 8007290:	2300      	movs	r3, #0
 8007292:	9e04      	ldr	r6, [sp, #16]
 8007294:	6123      	str	r3, [r4, #16]
 8007296:	e7bb      	b.n	8007210 <_printf_i+0x128>
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	1d11      	adds	r1, r2, #4
 800729c:	6019      	str	r1, [r3, #0]
 800729e:	6816      	ldr	r6, [r2, #0]
 80072a0:	2100      	movs	r1, #0
 80072a2:	0030      	movs	r0, r6
 80072a4:	6862      	ldr	r2, [r4, #4]
 80072a6:	f000 f831 	bl	800730c <memchr>
 80072aa:	2800      	cmp	r0, #0
 80072ac:	d001      	beq.n	80072b2 <_printf_i+0x1ca>
 80072ae:	1b80      	subs	r0, r0, r6
 80072b0:	6060      	str	r0, [r4, #4]
 80072b2:	6863      	ldr	r3, [r4, #4]
 80072b4:	6123      	str	r3, [r4, #16]
 80072b6:	2300      	movs	r3, #0
 80072b8:	9a04      	ldr	r2, [sp, #16]
 80072ba:	7013      	strb	r3, [r2, #0]
 80072bc:	e7a8      	b.n	8007210 <_printf_i+0x128>
 80072be:	6923      	ldr	r3, [r4, #16]
 80072c0:	0032      	movs	r2, r6
 80072c2:	9906      	ldr	r1, [sp, #24]
 80072c4:	9805      	ldr	r0, [sp, #20]
 80072c6:	9d07      	ldr	r5, [sp, #28]
 80072c8:	47a8      	blx	r5
 80072ca:	1c43      	adds	r3, r0, #1
 80072cc:	d0aa      	beq.n	8007224 <_printf_i+0x13c>
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	079b      	lsls	r3, r3, #30
 80072d2:	d415      	bmi.n	8007300 <_printf_i+0x218>
 80072d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d6:	68e0      	ldr	r0, [r4, #12]
 80072d8:	4298      	cmp	r0, r3
 80072da:	daa5      	bge.n	8007228 <_printf_i+0x140>
 80072dc:	0018      	movs	r0, r3
 80072de:	e7a3      	b.n	8007228 <_printf_i+0x140>
 80072e0:	0022      	movs	r2, r4
 80072e2:	2301      	movs	r3, #1
 80072e4:	9906      	ldr	r1, [sp, #24]
 80072e6:	9805      	ldr	r0, [sp, #20]
 80072e8:	9e07      	ldr	r6, [sp, #28]
 80072ea:	3219      	adds	r2, #25
 80072ec:	47b0      	blx	r6
 80072ee:	1c43      	adds	r3, r0, #1
 80072f0:	d098      	beq.n	8007224 <_printf_i+0x13c>
 80072f2:	3501      	adds	r5, #1
 80072f4:	68e3      	ldr	r3, [r4, #12]
 80072f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072f8:	1a9b      	subs	r3, r3, r2
 80072fa:	42ab      	cmp	r3, r5
 80072fc:	dcf0      	bgt.n	80072e0 <_printf_i+0x1f8>
 80072fe:	e7e9      	b.n	80072d4 <_printf_i+0x1ec>
 8007300:	2500      	movs	r5, #0
 8007302:	e7f7      	b.n	80072f4 <_printf_i+0x20c>
 8007304:	0800778d 	.word	0x0800778d
 8007308:	0800779e 	.word	0x0800779e

0800730c <memchr>:
 800730c:	b2c9      	uxtb	r1, r1
 800730e:	1882      	adds	r2, r0, r2
 8007310:	4290      	cmp	r0, r2
 8007312:	d101      	bne.n	8007318 <memchr+0xc>
 8007314:	2000      	movs	r0, #0
 8007316:	4770      	bx	lr
 8007318:	7803      	ldrb	r3, [r0, #0]
 800731a:	428b      	cmp	r3, r1
 800731c:	d0fb      	beq.n	8007316 <memchr+0xa>
 800731e:	3001      	adds	r0, #1
 8007320:	e7f6      	b.n	8007310 <memchr+0x4>

08007322 <memcpy>:
 8007322:	2300      	movs	r3, #0
 8007324:	b510      	push	{r4, lr}
 8007326:	429a      	cmp	r2, r3
 8007328:	d100      	bne.n	800732c <memcpy+0xa>
 800732a:	bd10      	pop	{r4, pc}
 800732c:	5ccc      	ldrb	r4, [r1, r3]
 800732e:	54c4      	strb	r4, [r0, r3]
 8007330:	3301      	adds	r3, #1
 8007332:	e7f8      	b.n	8007326 <memcpy+0x4>

08007334 <memmove>:
 8007334:	b510      	push	{r4, lr}
 8007336:	4288      	cmp	r0, r1
 8007338:	d902      	bls.n	8007340 <memmove+0xc>
 800733a:	188b      	adds	r3, r1, r2
 800733c:	4298      	cmp	r0, r3
 800733e:	d303      	bcc.n	8007348 <memmove+0x14>
 8007340:	2300      	movs	r3, #0
 8007342:	e007      	b.n	8007354 <memmove+0x20>
 8007344:	5c8b      	ldrb	r3, [r1, r2]
 8007346:	5483      	strb	r3, [r0, r2]
 8007348:	3a01      	subs	r2, #1
 800734a:	d2fb      	bcs.n	8007344 <memmove+0x10>
 800734c:	bd10      	pop	{r4, pc}
 800734e:	5ccc      	ldrb	r4, [r1, r3]
 8007350:	54c4      	strb	r4, [r0, r3]
 8007352:	3301      	adds	r3, #1
 8007354:	429a      	cmp	r2, r3
 8007356:	d1fa      	bne.n	800734e <memmove+0x1a>
 8007358:	e7f8      	b.n	800734c <memmove+0x18>
	...

0800735c <_free_r>:
 800735c:	b570      	push	{r4, r5, r6, lr}
 800735e:	0005      	movs	r5, r0
 8007360:	2900      	cmp	r1, #0
 8007362:	d010      	beq.n	8007386 <_free_r+0x2a>
 8007364:	1f0c      	subs	r4, r1, #4
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	da00      	bge.n	800736e <_free_r+0x12>
 800736c:	18e4      	adds	r4, r4, r3
 800736e:	0028      	movs	r0, r5
 8007370:	f000 f918 	bl	80075a4 <__malloc_lock>
 8007374:	4a1d      	ldr	r2, [pc, #116]	; (80073ec <_free_r+0x90>)
 8007376:	6813      	ldr	r3, [r2, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d105      	bne.n	8007388 <_free_r+0x2c>
 800737c:	6063      	str	r3, [r4, #4]
 800737e:	6014      	str	r4, [r2, #0]
 8007380:	0028      	movs	r0, r5
 8007382:	f000 f917 	bl	80075b4 <__malloc_unlock>
 8007386:	bd70      	pop	{r4, r5, r6, pc}
 8007388:	42a3      	cmp	r3, r4
 800738a:	d908      	bls.n	800739e <_free_r+0x42>
 800738c:	6821      	ldr	r1, [r4, #0]
 800738e:	1860      	adds	r0, r4, r1
 8007390:	4283      	cmp	r3, r0
 8007392:	d1f3      	bne.n	800737c <_free_r+0x20>
 8007394:	6818      	ldr	r0, [r3, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	1841      	adds	r1, r0, r1
 800739a:	6021      	str	r1, [r4, #0]
 800739c:	e7ee      	b.n	800737c <_free_r+0x20>
 800739e:	001a      	movs	r2, r3
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <_free_r+0x4e>
 80073a6:	42a3      	cmp	r3, r4
 80073a8:	d9f9      	bls.n	800739e <_free_r+0x42>
 80073aa:	6811      	ldr	r1, [r2, #0]
 80073ac:	1850      	adds	r0, r2, r1
 80073ae:	42a0      	cmp	r0, r4
 80073b0:	d10b      	bne.n	80073ca <_free_r+0x6e>
 80073b2:	6820      	ldr	r0, [r4, #0]
 80073b4:	1809      	adds	r1, r1, r0
 80073b6:	1850      	adds	r0, r2, r1
 80073b8:	6011      	str	r1, [r2, #0]
 80073ba:	4283      	cmp	r3, r0
 80073bc:	d1e0      	bne.n	8007380 <_free_r+0x24>
 80073be:	6818      	ldr	r0, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	1841      	adds	r1, r0, r1
 80073c4:	6011      	str	r1, [r2, #0]
 80073c6:	6053      	str	r3, [r2, #4]
 80073c8:	e7da      	b.n	8007380 <_free_r+0x24>
 80073ca:	42a0      	cmp	r0, r4
 80073cc:	d902      	bls.n	80073d4 <_free_r+0x78>
 80073ce:	230c      	movs	r3, #12
 80073d0:	602b      	str	r3, [r5, #0]
 80073d2:	e7d5      	b.n	8007380 <_free_r+0x24>
 80073d4:	6821      	ldr	r1, [r4, #0]
 80073d6:	1860      	adds	r0, r4, r1
 80073d8:	4283      	cmp	r3, r0
 80073da:	d103      	bne.n	80073e4 <_free_r+0x88>
 80073dc:	6818      	ldr	r0, [r3, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	1841      	adds	r1, r0, r1
 80073e2:	6021      	str	r1, [r4, #0]
 80073e4:	6063      	str	r3, [r4, #4]
 80073e6:	6054      	str	r4, [r2, #4]
 80073e8:	e7ca      	b.n	8007380 <_free_r+0x24>
 80073ea:	46c0      	nop			; (mov r8, r8)
 80073ec:	200001f0 	.word	0x200001f0

080073f0 <sbrk_aligned>:
 80073f0:	b570      	push	{r4, r5, r6, lr}
 80073f2:	4e0f      	ldr	r6, [pc, #60]	; (8007430 <sbrk_aligned+0x40>)
 80073f4:	000d      	movs	r5, r1
 80073f6:	6831      	ldr	r1, [r6, #0]
 80073f8:	0004      	movs	r4, r0
 80073fa:	2900      	cmp	r1, #0
 80073fc:	d102      	bne.n	8007404 <sbrk_aligned+0x14>
 80073fe:	f000 f8bf 	bl	8007580 <_sbrk_r>
 8007402:	6030      	str	r0, [r6, #0]
 8007404:	0029      	movs	r1, r5
 8007406:	0020      	movs	r0, r4
 8007408:	f000 f8ba 	bl	8007580 <_sbrk_r>
 800740c:	1c43      	adds	r3, r0, #1
 800740e:	d00a      	beq.n	8007426 <sbrk_aligned+0x36>
 8007410:	2303      	movs	r3, #3
 8007412:	1cc5      	adds	r5, r0, #3
 8007414:	439d      	bics	r5, r3
 8007416:	42a8      	cmp	r0, r5
 8007418:	d007      	beq.n	800742a <sbrk_aligned+0x3a>
 800741a:	1a29      	subs	r1, r5, r0
 800741c:	0020      	movs	r0, r4
 800741e:	f000 f8af 	bl	8007580 <_sbrk_r>
 8007422:	1c43      	adds	r3, r0, #1
 8007424:	d101      	bne.n	800742a <sbrk_aligned+0x3a>
 8007426:	2501      	movs	r5, #1
 8007428:	426d      	negs	r5, r5
 800742a:	0028      	movs	r0, r5
 800742c:	bd70      	pop	{r4, r5, r6, pc}
 800742e:	46c0      	nop			; (mov r8, r8)
 8007430:	200001f4 	.word	0x200001f4

08007434 <_malloc_r>:
 8007434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007436:	2203      	movs	r2, #3
 8007438:	1ccb      	adds	r3, r1, #3
 800743a:	4393      	bics	r3, r2
 800743c:	3308      	adds	r3, #8
 800743e:	0006      	movs	r6, r0
 8007440:	001f      	movs	r7, r3
 8007442:	2b0c      	cmp	r3, #12
 8007444:	d232      	bcs.n	80074ac <_malloc_r+0x78>
 8007446:	270c      	movs	r7, #12
 8007448:	42b9      	cmp	r1, r7
 800744a:	d831      	bhi.n	80074b0 <_malloc_r+0x7c>
 800744c:	0030      	movs	r0, r6
 800744e:	f000 f8a9 	bl	80075a4 <__malloc_lock>
 8007452:	4d32      	ldr	r5, [pc, #200]	; (800751c <_malloc_r+0xe8>)
 8007454:	682b      	ldr	r3, [r5, #0]
 8007456:	001c      	movs	r4, r3
 8007458:	2c00      	cmp	r4, #0
 800745a:	d12e      	bne.n	80074ba <_malloc_r+0x86>
 800745c:	0039      	movs	r1, r7
 800745e:	0030      	movs	r0, r6
 8007460:	f7ff ffc6 	bl	80073f0 <sbrk_aligned>
 8007464:	0004      	movs	r4, r0
 8007466:	1c43      	adds	r3, r0, #1
 8007468:	d11e      	bne.n	80074a8 <_malloc_r+0x74>
 800746a:	682c      	ldr	r4, [r5, #0]
 800746c:	0025      	movs	r5, r4
 800746e:	2d00      	cmp	r5, #0
 8007470:	d14a      	bne.n	8007508 <_malloc_r+0xd4>
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	0029      	movs	r1, r5
 8007476:	18e3      	adds	r3, r4, r3
 8007478:	0030      	movs	r0, r6
 800747a:	9301      	str	r3, [sp, #4]
 800747c:	f000 f880 	bl	8007580 <_sbrk_r>
 8007480:	9b01      	ldr	r3, [sp, #4]
 8007482:	4283      	cmp	r3, r0
 8007484:	d143      	bne.n	800750e <_malloc_r+0xda>
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	3703      	adds	r7, #3
 800748a:	1aff      	subs	r7, r7, r3
 800748c:	2303      	movs	r3, #3
 800748e:	439f      	bics	r7, r3
 8007490:	3708      	adds	r7, #8
 8007492:	2f0c      	cmp	r7, #12
 8007494:	d200      	bcs.n	8007498 <_malloc_r+0x64>
 8007496:	270c      	movs	r7, #12
 8007498:	0039      	movs	r1, r7
 800749a:	0030      	movs	r0, r6
 800749c:	f7ff ffa8 	bl	80073f0 <sbrk_aligned>
 80074a0:	1c43      	adds	r3, r0, #1
 80074a2:	d034      	beq.n	800750e <_malloc_r+0xda>
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	19df      	adds	r7, r3, r7
 80074a8:	6027      	str	r7, [r4, #0]
 80074aa:	e013      	b.n	80074d4 <_malloc_r+0xa0>
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	dacb      	bge.n	8007448 <_malloc_r+0x14>
 80074b0:	230c      	movs	r3, #12
 80074b2:	2500      	movs	r5, #0
 80074b4:	6033      	str	r3, [r6, #0]
 80074b6:	0028      	movs	r0, r5
 80074b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80074ba:	6822      	ldr	r2, [r4, #0]
 80074bc:	1bd1      	subs	r1, r2, r7
 80074be:	d420      	bmi.n	8007502 <_malloc_r+0xce>
 80074c0:	290b      	cmp	r1, #11
 80074c2:	d917      	bls.n	80074f4 <_malloc_r+0xc0>
 80074c4:	19e2      	adds	r2, r4, r7
 80074c6:	6027      	str	r7, [r4, #0]
 80074c8:	42a3      	cmp	r3, r4
 80074ca:	d111      	bne.n	80074f0 <_malloc_r+0xbc>
 80074cc:	602a      	str	r2, [r5, #0]
 80074ce:	6863      	ldr	r3, [r4, #4]
 80074d0:	6011      	str	r1, [r2, #0]
 80074d2:	6053      	str	r3, [r2, #4]
 80074d4:	0030      	movs	r0, r6
 80074d6:	0025      	movs	r5, r4
 80074d8:	f000 f86c 	bl	80075b4 <__malloc_unlock>
 80074dc:	2207      	movs	r2, #7
 80074de:	350b      	adds	r5, #11
 80074e0:	1d23      	adds	r3, r4, #4
 80074e2:	4395      	bics	r5, r2
 80074e4:	1aea      	subs	r2, r5, r3
 80074e6:	429d      	cmp	r5, r3
 80074e8:	d0e5      	beq.n	80074b6 <_malloc_r+0x82>
 80074ea:	1b5b      	subs	r3, r3, r5
 80074ec:	50a3      	str	r3, [r4, r2]
 80074ee:	e7e2      	b.n	80074b6 <_malloc_r+0x82>
 80074f0:	605a      	str	r2, [r3, #4]
 80074f2:	e7ec      	b.n	80074ce <_malloc_r+0x9a>
 80074f4:	6862      	ldr	r2, [r4, #4]
 80074f6:	42a3      	cmp	r3, r4
 80074f8:	d101      	bne.n	80074fe <_malloc_r+0xca>
 80074fa:	602a      	str	r2, [r5, #0]
 80074fc:	e7ea      	b.n	80074d4 <_malloc_r+0xa0>
 80074fe:	605a      	str	r2, [r3, #4]
 8007500:	e7e8      	b.n	80074d4 <_malloc_r+0xa0>
 8007502:	0023      	movs	r3, r4
 8007504:	6864      	ldr	r4, [r4, #4]
 8007506:	e7a7      	b.n	8007458 <_malloc_r+0x24>
 8007508:	002c      	movs	r4, r5
 800750a:	686d      	ldr	r5, [r5, #4]
 800750c:	e7af      	b.n	800746e <_malloc_r+0x3a>
 800750e:	230c      	movs	r3, #12
 8007510:	0030      	movs	r0, r6
 8007512:	6033      	str	r3, [r6, #0]
 8007514:	f000 f84e 	bl	80075b4 <__malloc_unlock>
 8007518:	e7cd      	b.n	80074b6 <_malloc_r+0x82>
 800751a:	46c0      	nop			; (mov r8, r8)
 800751c:	200001f0 	.word	0x200001f0

08007520 <_realloc_r>:
 8007520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007522:	0007      	movs	r7, r0
 8007524:	000e      	movs	r6, r1
 8007526:	0014      	movs	r4, r2
 8007528:	2900      	cmp	r1, #0
 800752a:	d105      	bne.n	8007538 <_realloc_r+0x18>
 800752c:	0011      	movs	r1, r2
 800752e:	f7ff ff81 	bl	8007434 <_malloc_r>
 8007532:	0005      	movs	r5, r0
 8007534:	0028      	movs	r0, r5
 8007536:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007538:	2a00      	cmp	r2, #0
 800753a:	d103      	bne.n	8007544 <_realloc_r+0x24>
 800753c:	f7ff ff0e 	bl	800735c <_free_r>
 8007540:	0025      	movs	r5, r4
 8007542:	e7f7      	b.n	8007534 <_realloc_r+0x14>
 8007544:	f000 f83e 	bl	80075c4 <_malloc_usable_size_r>
 8007548:	9001      	str	r0, [sp, #4]
 800754a:	4284      	cmp	r4, r0
 800754c:	d803      	bhi.n	8007556 <_realloc_r+0x36>
 800754e:	0035      	movs	r5, r6
 8007550:	0843      	lsrs	r3, r0, #1
 8007552:	42a3      	cmp	r3, r4
 8007554:	d3ee      	bcc.n	8007534 <_realloc_r+0x14>
 8007556:	0021      	movs	r1, r4
 8007558:	0038      	movs	r0, r7
 800755a:	f7ff ff6b 	bl	8007434 <_malloc_r>
 800755e:	1e05      	subs	r5, r0, #0
 8007560:	d0e8      	beq.n	8007534 <_realloc_r+0x14>
 8007562:	9b01      	ldr	r3, [sp, #4]
 8007564:	0022      	movs	r2, r4
 8007566:	429c      	cmp	r4, r3
 8007568:	d900      	bls.n	800756c <_realloc_r+0x4c>
 800756a:	001a      	movs	r2, r3
 800756c:	0031      	movs	r1, r6
 800756e:	0028      	movs	r0, r5
 8007570:	f7ff fed7 	bl	8007322 <memcpy>
 8007574:	0031      	movs	r1, r6
 8007576:	0038      	movs	r0, r7
 8007578:	f7ff fef0 	bl	800735c <_free_r>
 800757c:	e7da      	b.n	8007534 <_realloc_r+0x14>
	...

08007580 <_sbrk_r>:
 8007580:	2300      	movs	r3, #0
 8007582:	b570      	push	{r4, r5, r6, lr}
 8007584:	4d06      	ldr	r5, [pc, #24]	; (80075a0 <_sbrk_r+0x20>)
 8007586:	0004      	movs	r4, r0
 8007588:	0008      	movs	r0, r1
 800758a:	602b      	str	r3, [r5, #0]
 800758c:	f7fb fe7c 	bl	8003288 <_sbrk>
 8007590:	1c43      	adds	r3, r0, #1
 8007592:	d103      	bne.n	800759c <_sbrk_r+0x1c>
 8007594:	682b      	ldr	r3, [r5, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d000      	beq.n	800759c <_sbrk_r+0x1c>
 800759a:	6023      	str	r3, [r4, #0]
 800759c:	bd70      	pop	{r4, r5, r6, pc}
 800759e:	46c0      	nop			; (mov r8, r8)
 80075a0:	200001f8 	.word	0x200001f8

080075a4 <__malloc_lock>:
 80075a4:	b510      	push	{r4, lr}
 80075a6:	4802      	ldr	r0, [pc, #8]	; (80075b0 <__malloc_lock+0xc>)
 80075a8:	f000 f814 	bl	80075d4 <__retarget_lock_acquire_recursive>
 80075ac:	bd10      	pop	{r4, pc}
 80075ae:	46c0      	nop			; (mov r8, r8)
 80075b0:	200001fc 	.word	0x200001fc

080075b4 <__malloc_unlock>:
 80075b4:	b510      	push	{r4, lr}
 80075b6:	4802      	ldr	r0, [pc, #8]	; (80075c0 <__malloc_unlock+0xc>)
 80075b8:	f000 f80d 	bl	80075d6 <__retarget_lock_release_recursive>
 80075bc:	bd10      	pop	{r4, pc}
 80075be:	46c0      	nop			; (mov r8, r8)
 80075c0:	200001fc 	.word	0x200001fc

080075c4 <_malloc_usable_size_r>:
 80075c4:	1f0b      	subs	r3, r1, #4
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	1f18      	subs	r0, r3, #4
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	da01      	bge.n	80075d2 <_malloc_usable_size_r+0xe>
 80075ce:	580b      	ldr	r3, [r1, r0]
 80075d0:	18c0      	adds	r0, r0, r3
 80075d2:	4770      	bx	lr

080075d4 <__retarget_lock_acquire_recursive>:
 80075d4:	4770      	bx	lr

080075d6 <__retarget_lock_release_recursive>:
 80075d6:	4770      	bx	lr

080075d8 <_init>:
 80075d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075da:	46c0      	nop			; (mov r8, r8)
 80075dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075de:	bc08      	pop	{r3}
 80075e0:	469e      	mov	lr, r3
 80075e2:	4770      	bx	lr

080075e4 <_fini>:
 80075e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e6:	46c0      	nop			; (mov r8, r8)
 80075e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ea:	bc08      	pop	{r3}
 80075ec:	469e      	mov	lr, r3
 80075ee:	4770      	bx	lr
