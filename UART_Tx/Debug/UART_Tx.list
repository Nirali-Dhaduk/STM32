
UART_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080035a8  080035a8  000135a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003614  08003614  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003614  08003614  00013614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800361c  0800361c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800361c  0800361c  0001361c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003620  08003620  00013620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08003630  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08003630  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e98  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000193c  00000000  00000000  00029ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0002b808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000710  00000000  00000000  0002bfb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012d59  00000000  00000000  0002c6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f34  00000000  00000000  0003f419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073d0a  00000000  00000000  0004934d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bd057  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a58  00000000  00000000  000bd0a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003590 	.word	0x08003590

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003590 	.word	0x08003590

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 f9ac 	bl	8000808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f810 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f8a6 	bl	8000604 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004b8:	f000 f874 	bl	80005a4 <MX_USART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_UART_Receive_IT(&huart1, test, sizeof(test));
 80004bc:	4903      	ldr	r1, [pc, #12]	; (80004cc <main+0x24>)
 80004be:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <main+0x28>)
 80004c0:	2205      	movs	r2, #5
 80004c2:	0018      	movs	r0, r3
 80004c4:	f001 fd56 	bl	8001f74 <HAL_UART_Receive_IT>
 80004c8:	e7f8      	b.n	80004bc <main+0x14>
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	200000b0 	.word	0x200000b0
 80004d0:	20000028 	.word	0x20000028

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b09d      	sub	sp, #116	; 0x74
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	2438      	movs	r4, #56	; 0x38
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	0018      	movs	r0, r3
 80004e0:	2338      	movs	r3, #56	; 0x38
 80004e2:	001a      	movs	r2, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	f003 f84b 	bl	8003580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ea:	2324      	movs	r3, #36	; 0x24
 80004ec:	18fb      	adds	r3, r7, r3
 80004ee:	0018      	movs	r0, r3
 80004f0:	2314      	movs	r3, #20
 80004f2:	001a      	movs	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	f003 f843 	bl	8003580 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004fa:	003b      	movs	r3, r7
 80004fc:	0018      	movs	r0, r3
 80004fe:	2324      	movs	r3, #36	; 0x24
 8000500:	001a      	movs	r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	f003 f83c 	bl	8003580 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000508:	4b24      	ldr	r3, [pc, #144]	; (800059c <SystemClock_Config+0xc8>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a24      	ldr	r2, [pc, #144]	; (80005a0 <SystemClock_Config+0xcc>)
 800050e:	401a      	ands	r2, r3
 8000510:	4b22      	ldr	r3, [pc, #136]	; (800059c <SystemClock_Config+0xc8>)
 8000512:	2180      	movs	r1, #128	; 0x80
 8000514:	0109      	lsls	r1, r1, #4
 8000516:	430a      	orrs	r2, r1
 8000518:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800051a:	0021      	movs	r1, r4
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2202      	movs	r2, #2
 8000520:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2201      	movs	r2, #1
 8000526:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2210      	movs	r2, #16
 800052c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2200      	movs	r2, #0
 8000532:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000534:	187b      	adds	r3, r7, r1
 8000536:	0018      	movs	r0, r3
 8000538:	f000 fcb2 	bl	8000ea0 <HAL_RCC_OscConfig>
 800053c:	1e03      	subs	r3, r0, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000540:	f000 f8a8 	bl	8000694 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000544:	2124      	movs	r1, #36	; 0x24
 8000546:	187b      	adds	r3, r7, r1
 8000548:	220f      	movs	r2, #15
 800054a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2201      	movs	r2, #1
 8000550:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2100      	movs	r1, #0
 8000568:	0018      	movs	r0, r3
 800056a:	f001 f85d 	bl	8001628 <HAL_RCC_ClockConfig>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000572:	f000 f88f 	bl	8000694 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000576:	003b      	movs	r3, r7
 8000578:	2201      	movs	r2, #1
 800057a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800057c:	003b      	movs	r3, r7
 800057e:	2200      	movs	r2, #0
 8000580:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000582:	003b      	movs	r3, r7
 8000584:	0018      	movs	r0, r3
 8000586:	f001 fa73 	bl	8001a70 <HAL_RCCEx_PeriphCLKConfig>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800058e:	f000 f881 	bl	8000694 <Error_Handler>
  }
}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	b01d      	add	sp, #116	; 0x74
 8000598:	bd90      	pop	{r4, r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	40007000 	.word	0x40007000
 80005a0:	ffffe7ff 	.word	0xffffe7ff

080005a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <MX_USART1_UART_Init+0x58>)
 80005aa:	4a15      	ldr	r2, [pc, #84]	; (8000600 <MX_USART1_UART_Init+0x5c>)
 80005ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005ae:	4b13      	ldr	r3, [pc, #76]	; (80005fc <MX_USART1_UART_Init+0x58>)
 80005b0:	22e1      	movs	r2, #225	; 0xe1
 80005b2:	0252      	lsls	r2, r2, #9
 80005b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005b6:	4b11      	ldr	r3, [pc, #68]	; (80005fc <MX_USART1_UART_Init+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <MX_USART1_UART_Init+0x58>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <MX_USART1_UART_Init+0x58>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <MX_USART1_UART_Init+0x58>)
 80005ca:	220c      	movs	r2, #12
 80005cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <MX_USART1_UART_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <MX_USART1_UART_Init+0x58>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <MX_USART1_UART_Init+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <MX_USART1_UART_Init+0x58>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005e6:	4b05      	ldr	r3, [pc, #20]	; (80005fc <MX_USART1_UART_Init+0x58>)
 80005e8:	0018      	movs	r0, r3
 80005ea:	f001 fbcf 	bl	8001d8c <HAL_UART_Init>
 80005ee:	1e03      	subs	r3, r0, #0
 80005f0:	d001      	beq.n	80005f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005f2:	f000 f84f 	bl	8000694 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000028 	.word	0x20000028
 8000600:	40013800 	.word	0x40013800

08000604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_GPIO_Init+0x58>)
 800060c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800060e:	4b13      	ldr	r3, [pc, #76]	; (800065c <MX_GPIO_Init+0x58>)
 8000610:	2104      	movs	r1, #4
 8000612:	430a      	orrs	r2, r1
 8000614:	62da      	str	r2, [r3, #44]	; 0x2c
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_GPIO_Init+0x58>)
 8000618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800061a:	2204      	movs	r2, #4
 800061c:	4013      	ands	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_GPIO_Init+0x58>)
 8000624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <MX_GPIO_Init+0x58>)
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	430a      	orrs	r2, r1
 800062c:	62da      	str	r2, [r3, #44]	; 0x2c
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_GPIO_Init+0x58>)
 8000630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	4013      	ands	r3, r2
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <MX_GPIO_Init+0x58>)
 800063c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <MX_GPIO_Init+0x58>)
 8000640:	2101      	movs	r1, #1
 8000642:	430a      	orrs	r2, r1
 8000644:	62da      	str	r2, [r3, #44]	; 0x2c
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <MX_GPIO_Init+0x58>)
 8000648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064a:	2201      	movs	r2, #1
 800064c:	4013      	ands	r3, r2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b004      	add	sp, #16
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	40021000 	.word	0x40021000

08000660 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, test, sizeof(test), 1000);
 8000668:	23fa      	movs	r3, #250	; 0xfa
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <HAL_UART_RxCpltCallback+0x2c>)
 800066e:	4808      	ldr	r0, [pc, #32]	; (8000690 <HAL_UART_RxCpltCallback+0x30>)
 8000670:	2205      	movs	r2, #5
 8000672:	f001 fbdf 	bl	8001e34 <HAL_UART_Transmit>
	  HAL_UART_Receive_IT(&huart1, test, sizeof(test));
 8000676:	4905      	ldr	r1, [pc, #20]	; (800068c <HAL_UART_RxCpltCallback+0x2c>)
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <HAL_UART_RxCpltCallback+0x30>)
 800067a:	2205      	movs	r2, #5
 800067c:	0018      	movs	r0, r3
 800067e:	f001 fc79 	bl	8001f74 <HAL_UART_Receive_IT>


}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b002      	add	sp, #8
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	200000b0 	.word	0x200000b0
 8000690:	20000028 	.word	0x20000028

08000694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000698:	b672      	cpsid	i
}
 800069a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800069c:	e7fe      	b.n	800069c <Error_Handler+0x8>
	...

080006a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <HAL_MspInit+0x24>)
 80006a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_MspInit+0x24>)
 80006aa:	2101      	movs	r1, #1
 80006ac:	430a      	orrs	r2, r1
 80006ae:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <HAL_MspInit+0x24>)
 80006b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <HAL_MspInit+0x24>)
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	0549      	lsls	r1, r1, #21
 80006ba:	430a      	orrs	r2, r1
 80006bc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000

080006c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b089      	sub	sp, #36	; 0x24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	240c      	movs	r4, #12
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	0018      	movs	r0, r3
 80006d6:	2314      	movs	r3, #20
 80006d8:	001a      	movs	r2, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	f002 ff50 	bl	8003580 <memset>
  if(huart->Instance==USART1)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a1c      	ldr	r2, [pc, #112]	; (8000758 <HAL_UART_MspInit+0x90>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d132      	bne.n	8000750 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006ea:	4b1c      	ldr	r3, [pc, #112]	; (800075c <HAL_UART_MspInit+0x94>)
 80006ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ee:	4b1b      	ldr	r3, [pc, #108]	; (800075c <HAL_UART_MspInit+0x94>)
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	01c9      	lsls	r1, r1, #7
 80006f4:	430a      	orrs	r2, r1
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <HAL_UART_MspInit+0x94>)
 80006fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <HAL_UART_MspInit+0x94>)
 80006fe:	2101      	movs	r1, #1
 8000700:	430a      	orrs	r2, r1
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <HAL_UART_MspInit+0x94>)
 8000706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000708:	2201      	movs	r2, #1
 800070a:	4013      	ands	r3, r2
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	22c0      	movs	r2, #192	; 0xc0
 8000714:	00d2      	lsls	r2, r2, #3
 8000716:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	0021      	movs	r1, r4
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2202      	movs	r2, #2
 800071e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2203      	movs	r2, #3
 800072a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2204      	movs	r2, #4
 8000730:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	187a      	adds	r2, r7, r1
 8000734:	23a0      	movs	r3, #160	; 0xa0
 8000736:	05db      	lsls	r3, r3, #23
 8000738:	0011      	movs	r1, r2
 800073a:	0018      	movs	r0, r3
 800073c:	f000 fa3a 	bl	8000bb4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	201b      	movs	r0, #27
 8000746:	f000 f97b 	bl	8000a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800074a:	201b      	movs	r0, #27
 800074c:	f000 f98d 	bl	8000a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b009      	add	sp, #36	; 0x24
 8000756:	bd90      	pop	{r4, r7, pc}
 8000758:	40013800 	.word	0x40013800
 800075c:	40021000 	.word	0x40021000

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <NMI_Handler+0x4>

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000784:	f000 f894 	bl	80008b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <USART1_IRQHandler+0x14>)
 8000796:	0018      	movs	r0, r3
 8000798:	f001 fc4a 	bl	8002030 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	20000028 	.word	0x20000028

080007a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80007b4:	480d      	ldr	r0, [pc, #52]	; (80007ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007b6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007b8:	f7ff fff6 	bl	80007a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007bc:	480c      	ldr	r0, [pc, #48]	; (80007f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80007be:	490d      	ldr	r1, [pc, #52]	; (80007f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c0:	4a0d      	ldr	r2, [pc, #52]	; (80007f8 <LoopForever+0xe>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c4:	e002      	b.n	80007cc <LoopCopyDataInit>

080007c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ca:	3304      	adds	r3, #4

080007cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d0:	d3f9      	bcc.n	80007c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d2:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d4:	4c0a      	ldr	r4, [pc, #40]	; (8000800 <LoopForever+0x16>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d8:	e001      	b.n	80007de <LoopFillZerobss>

080007da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007dc:	3204      	adds	r2, #4

080007de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e0:	d3fb      	bcc.n	80007da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007e2:	f002 fea9 	bl	8003538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007e6:	f7ff fe5f 	bl	80004a8 <main>

080007ea <LoopForever>:

LoopForever:
    b LoopForever
 80007ea:	e7fe      	b.n	80007ea <LoopForever>
  ldr   r0, =_estack
 80007ec:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007f8:	08003624 	.word	0x08003624
  ldr r2, =_sbss
 80007fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000800:	200000bc 	.word	0x200000bc

08000804 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000804:	e7fe      	b.n	8000804 <ADC1_COMP_IRQHandler>
	...

08000808 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000814:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <HAL_Init+0x3c>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <HAL_Init+0x3c>)
 800081a:	2140      	movs	r1, #64	; 0x40
 800081c:	430a      	orrs	r2, r1
 800081e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000820:	2000      	movs	r0, #0
 8000822:	f000 f811 	bl	8000848 <HAL_InitTick>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d003      	beq.n	8000832 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	2201      	movs	r2, #1
 800082e:	701a      	strb	r2, [r3, #0]
 8000830:	e001      	b.n	8000836 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000832:	f7ff ff35 	bl	80006a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	781b      	ldrb	r3, [r3, #0]
}
 800083a:	0018      	movs	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	b002      	add	sp, #8
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	40022000 	.word	0x40022000

08000848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <HAL_InitTick+0x5c>)
 8000852:	681c      	ldr	r4, [r3, #0]
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <HAL_InitTick+0x60>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	0019      	movs	r1, r3
 800085a:	23fa      	movs	r3, #250	; 0xfa
 800085c:	0098      	lsls	r0, r3, #2
 800085e:	f7ff fc53 	bl	8000108 <__udivsi3>
 8000862:	0003      	movs	r3, r0
 8000864:	0019      	movs	r1, r3
 8000866:	0020      	movs	r0, r4
 8000868:	f7ff fc4e 	bl	8000108 <__udivsi3>
 800086c:	0003      	movs	r3, r0
 800086e:	0018      	movs	r0, r3
 8000870:	f000 f90b 	bl	8000a8a <HAL_SYSTICK_Config>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d001      	beq.n	800087c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000878:	2301      	movs	r3, #1
 800087a:	e00f      	b.n	800089c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b03      	cmp	r3, #3
 8000880:	d80b      	bhi.n	800089a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	2301      	movs	r3, #1
 8000886:	425b      	negs	r3, r3
 8000888:	2200      	movs	r2, #0
 800088a:	0018      	movs	r0, r3
 800088c:	f000 f8d8 	bl	8000a40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_InitTick+0x64>)
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000896:	2300      	movs	r3, #0
 8000898:	e000      	b.n	800089c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
}
 800089c:	0018      	movs	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	b003      	add	sp, #12
 80008a2:	bd90      	pop	{r4, r7, pc}
 80008a4:	20000000 	.word	0x20000000
 80008a8:	20000008 	.word	0x20000008
 80008ac:	20000004 	.word	0x20000004

080008b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <HAL_IncTick+0x1c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	001a      	movs	r2, r3
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <HAL_IncTick+0x20>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	18d2      	adds	r2, r2, r3
 80008c0:	4b03      	ldr	r3, [pc, #12]	; (80008d0 <HAL_IncTick+0x20>)
 80008c2:	601a      	str	r2, [r3, #0]
}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	20000008 	.word	0x20000008
 80008d0:	200000b8 	.word	0x200000b8

080008d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  return uwTick;
 80008d8:	4b02      	ldr	r3, [pc, #8]	; (80008e4 <HAL_GetTick+0x10>)
 80008da:	681b      	ldr	r3, [r3, #0]
}
 80008dc:	0018      	movs	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	200000b8 	.word	0x200000b8

080008e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	0002      	movs	r2, r0
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b7f      	cmp	r3, #127	; 0x7f
 80008fa:	d809      	bhi.n	8000910 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008fc:	1dfb      	adds	r3, r7, #7
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	001a      	movs	r2, r3
 8000902:	231f      	movs	r3, #31
 8000904:	401a      	ands	r2, r3
 8000906:	4b04      	ldr	r3, [pc, #16]	; (8000918 <__NVIC_EnableIRQ+0x30>)
 8000908:	2101      	movs	r1, #1
 800090a:	4091      	lsls	r1, r2
 800090c:	000a      	movs	r2, r1
 800090e:	601a      	str	r2, [r3, #0]
  }
}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	b002      	add	sp, #8
 8000916:	bd80      	pop	{r7, pc}
 8000918:	e000e100 	.word	0xe000e100

0800091c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	0002      	movs	r2, r0
 8000924:	6039      	str	r1, [r7, #0]
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b7f      	cmp	r3, #127	; 0x7f
 8000930:	d828      	bhi.n	8000984 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000932:	4a2f      	ldr	r2, [pc, #188]	; (80009f0 <__NVIC_SetPriority+0xd4>)
 8000934:	1dfb      	adds	r3, r7, #7
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b25b      	sxtb	r3, r3
 800093a:	089b      	lsrs	r3, r3, #2
 800093c:	33c0      	adds	r3, #192	; 0xc0
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	589b      	ldr	r3, [r3, r2]
 8000942:	1dfa      	adds	r2, r7, #7
 8000944:	7812      	ldrb	r2, [r2, #0]
 8000946:	0011      	movs	r1, r2
 8000948:	2203      	movs	r2, #3
 800094a:	400a      	ands	r2, r1
 800094c:	00d2      	lsls	r2, r2, #3
 800094e:	21ff      	movs	r1, #255	; 0xff
 8000950:	4091      	lsls	r1, r2
 8000952:	000a      	movs	r2, r1
 8000954:	43d2      	mvns	r2, r2
 8000956:	401a      	ands	r2, r3
 8000958:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	019b      	lsls	r3, r3, #6
 800095e:	22ff      	movs	r2, #255	; 0xff
 8000960:	401a      	ands	r2, r3
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	0018      	movs	r0, r3
 8000968:	2303      	movs	r3, #3
 800096a:	4003      	ands	r3, r0
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000970:	481f      	ldr	r0, [pc, #124]	; (80009f0 <__NVIC_SetPriority+0xd4>)
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	b25b      	sxtb	r3, r3
 8000978:	089b      	lsrs	r3, r3, #2
 800097a:	430a      	orrs	r2, r1
 800097c:	33c0      	adds	r3, #192	; 0xc0
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000982:	e031      	b.n	80009e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000984:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <__NVIC_SetPriority+0xd8>)
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	0019      	movs	r1, r3
 800098c:	230f      	movs	r3, #15
 800098e:	400b      	ands	r3, r1
 8000990:	3b08      	subs	r3, #8
 8000992:	089b      	lsrs	r3, r3, #2
 8000994:	3306      	adds	r3, #6
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	18d3      	adds	r3, r2, r3
 800099a:	3304      	adds	r3, #4
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	1dfa      	adds	r2, r7, #7
 80009a0:	7812      	ldrb	r2, [r2, #0]
 80009a2:	0011      	movs	r1, r2
 80009a4:	2203      	movs	r2, #3
 80009a6:	400a      	ands	r2, r1
 80009a8:	00d2      	lsls	r2, r2, #3
 80009aa:	21ff      	movs	r1, #255	; 0xff
 80009ac:	4091      	lsls	r1, r2
 80009ae:	000a      	movs	r2, r1
 80009b0:	43d2      	mvns	r2, r2
 80009b2:	401a      	ands	r2, r3
 80009b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	019b      	lsls	r3, r3, #6
 80009ba:	22ff      	movs	r2, #255	; 0xff
 80009bc:	401a      	ands	r2, r3
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	0018      	movs	r0, r3
 80009c4:	2303      	movs	r3, #3
 80009c6:	4003      	ands	r3, r0
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009cc:	4809      	ldr	r0, [pc, #36]	; (80009f4 <__NVIC_SetPriority+0xd8>)
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	001c      	movs	r4, r3
 80009d4:	230f      	movs	r3, #15
 80009d6:	4023      	ands	r3, r4
 80009d8:	3b08      	subs	r3, #8
 80009da:	089b      	lsrs	r3, r3, #2
 80009dc:	430a      	orrs	r2, r1
 80009de:	3306      	adds	r3, #6
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	18c3      	adds	r3, r0, r3
 80009e4:	3304      	adds	r3, #4
 80009e6:	601a      	str	r2, [r3, #0]
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b003      	add	sp, #12
 80009ee:	bd90      	pop	{r4, r7, pc}
 80009f0:	e000e100 	.word	0xe000e100
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	1e5a      	subs	r2, r3, #1
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	045b      	lsls	r3, r3, #17
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d301      	bcc.n	8000a10 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	e010      	b.n	8000a32 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <SysTick_Config+0x44>)
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	3a01      	subs	r2, #1
 8000a16:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a18:	2301      	movs	r3, #1
 8000a1a:	425b      	negs	r3, r3
 8000a1c:	2103      	movs	r1, #3
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f7ff ff7c 	bl	800091c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <SysTick_Config+0x44>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2a:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <SysTick_Config+0x44>)
 8000a2c:	2207      	movs	r2, #7
 8000a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	0018      	movs	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b002      	add	sp, #8
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	e000e010 	.word	0xe000e010

08000a40 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	607a      	str	r2, [r7, #4]
 8000a4a:	210f      	movs	r1, #15
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	1c02      	adds	r2, r0, #0
 8000a50:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	b25b      	sxtb	r3, r3
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f7ff ff5d 	bl	800091c <__NVIC_SetPriority>
}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b004      	add	sp, #16
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	0002      	movs	r2, r0
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff ff33 	bl	80008e8 <__NVIC_EnableIRQ>
}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b002      	add	sp, #8
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff ffaf 	bl	80009f8 <SysTick_Config>
 8000a9a:	0003      	movs	r3, r0
}
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b002      	add	sp, #8
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000aac:	230f      	movs	r3, #15
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2225      	movs	r2, #37	; 0x25
 8000ab8:	5c9b      	ldrb	r3, [r3, r2]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d008      	beq.n	8000ad2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2204      	movs	r2, #4
 8000ac4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2224      	movs	r2, #36	; 0x24
 8000aca:	2100      	movs	r1, #0
 8000acc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e024      	b.n	8000b1c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	210e      	movs	r1, #14
 8000ade:	438a      	bics	r2, r1
 8000ae0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2101      	movs	r1, #1
 8000aee:	438a      	bics	r2, r1
 8000af0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	221c      	movs	r2, #28
 8000af8:	401a      	ands	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	2101      	movs	r1, #1
 8000b00:	4091      	lsls	r1, r2
 8000b02:	000a      	movs	r2, r1
 8000b04:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2225      	movs	r2, #37	; 0x25
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2224      	movs	r2, #36	; 0x24
 8000b12:	2100      	movs	r1, #0
 8000b14:	5499      	strb	r1, [r3, r2]

    return status;
 8000b16:	230f      	movs	r3, #15
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b004      	add	sp, #16
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b2c:	210f      	movs	r1, #15
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2225      	movs	r2, #37	; 0x25
 8000b38:	5c9b      	ldrb	r3, [r3, r2]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d006      	beq.n	8000b4e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2204      	movs	r2, #4
 8000b44:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
 8000b4c:	e02a      	b.n	8000ba4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	210e      	movs	r1, #14
 8000b5a:	438a      	bics	r2, r1
 8000b5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2101      	movs	r1, #1
 8000b6a:	438a      	bics	r2, r1
 8000b6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	221c      	movs	r2, #28
 8000b74:	401a      	ands	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	4091      	lsls	r1, r2
 8000b7e:	000a      	movs	r2, r1
 8000b80:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2225      	movs	r2, #37	; 0x25
 8000b86:	2101      	movs	r1, #1
 8000b88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2224      	movs	r2, #36	; 0x24
 8000b8e:	2100      	movs	r1, #0
 8000b90:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d004      	beq.n	8000ba4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	0010      	movs	r0, r2
 8000ba2:	4798      	blx	r3
    }
  }
  return status;
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	781b      	ldrb	r3, [r3, #0]
}
 8000baa:	0018      	movs	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b004      	add	sp, #16
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000bca:	e14f      	b.n	8000e6c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	4091      	lsls	r1, r2
 8000bd6:	000a      	movs	r2, r1
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d100      	bne.n	8000be4 <HAL_GPIO_Init+0x30>
 8000be2:	e140      	b.n	8000e66 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	2203      	movs	r2, #3
 8000bea:	4013      	ands	r3, r2
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d005      	beq.n	8000bfc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d130      	bne.n	8000c5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	2203      	movs	r2, #3
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	0013      	movs	r3, r2
 8000c0c:	43da      	mvns	r2, r3
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68da      	ldr	r2, [r3, #12]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	409a      	lsls	r2, r3
 8000c1e:	0013      	movs	r3, r2
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c32:	2201      	movs	r2, #1
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
 8000c38:	0013      	movs	r3, r2
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	091b      	lsrs	r3, r3, #4
 8000c48:	2201      	movs	r2, #1
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
 8000c50:	0013      	movs	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2203      	movs	r2, #3
 8000c64:	4013      	ands	r3, r2
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d017      	beq.n	8000c9a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2203      	movs	r2, #3
 8000c76:	409a      	lsls	r2, r3
 8000c78:	0013      	movs	r3, r2
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	409a      	lsls	r2, r3
 8000c8c:	0013      	movs	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d123      	bne.n	8000cee <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	08da      	lsrs	r2, r3, #3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3208      	adds	r2, #8
 8000cae:	0092      	lsls	r2, r2, #2
 8000cb0:	58d3      	ldr	r3, [r2, r3]
 8000cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	2207      	movs	r2, #7
 8000cb8:	4013      	ands	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	220f      	movs	r2, #15
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	691a      	ldr	r2, [r3, #16]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	2107      	movs	r1, #7
 8000cd2:	400b      	ands	r3, r1
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	0013      	movs	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	08da      	lsrs	r2, r3, #3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3208      	adds	r2, #8
 8000ce8:	0092      	lsls	r2, r2, #2
 8000cea:	6939      	ldr	r1, [r7, #16]
 8000cec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	409a      	lsls	r2, r3
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	409a      	lsls	r2, r3
 8000d14:	0013      	movs	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	23c0      	movs	r3, #192	; 0xc0
 8000d28:	029b      	lsls	r3, r3, #10
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	d100      	bne.n	8000d30 <HAL_GPIO_Init+0x17c>
 8000d2e:	e09a      	b.n	8000e66 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d30:	4b54      	ldr	r3, [pc, #336]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d34:	4b53      	ldr	r3, [pc, #332]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000d36:	2101      	movs	r1, #1
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d3c:	4a52      	ldr	r2, [pc, #328]	; (8000e88 <HAL_GPIO_Init+0x2d4>)
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	089b      	lsrs	r3, r3, #2
 8000d42:	3302      	adds	r3, #2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	589b      	ldr	r3, [r3, r2]
 8000d48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	4013      	ands	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	220f      	movs	r2, #15
 8000d54:	409a      	lsls	r2, r3
 8000d56:	0013      	movs	r3, r2
 8000d58:	43da      	mvns	r2, r3
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	23a0      	movs	r3, #160	; 0xa0
 8000d64:	05db      	lsls	r3, r3, #23
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d019      	beq.n	8000d9e <HAL_GPIO_Init+0x1ea>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a47      	ldr	r2, [pc, #284]	; (8000e8c <HAL_GPIO_Init+0x2d8>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d013      	beq.n	8000d9a <HAL_GPIO_Init+0x1e6>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a46      	ldr	r2, [pc, #280]	; (8000e90 <HAL_GPIO_Init+0x2dc>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d00d      	beq.n	8000d96 <HAL_GPIO_Init+0x1e2>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a45      	ldr	r2, [pc, #276]	; (8000e94 <HAL_GPIO_Init+0x2e0>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d007      	beq.n	8000d92 <HAL_GPIO_Init+0x1de>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a44      	ldr	r2, [pc, #272]	; (8000e98 <HAL_GPIO_Init+0x2e4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d101      	bne.n	8000d8e <HAL_GPIO_Init+0x1da>
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	e008      	b.n	8000da0 <HAL_GPIO_Init+0x1ec>
 8000d8e:	2306      	movs	r3, #6
 8000d90:	e006      	b.n	8000da0 <HAL_GPIO_Init+0x1ec>
 8000d92:	2303      	movs	r3, #3
 8000d94:	e004      	b.n	8000da0 <HAL_GPIO_Init+0x1ec>
 8000d96:	2302      	movs	r3, #2
 8000d98:	e002      	b.n	8000da0 <HAL_GPIO_Init+0x1ec>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e000      	b.n	8000da0 <HAL_GPIO_Init+0x1ec>
 8000d9e:	2300      	movs	r3, #0
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	2103      	movs	r1, #3
 8000da4:	400a      	ands	r2, r1
 8000da6:	0092      	lsls	r2, r2, #2
 8000da8:	4093      	lsls	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000db0:	4935      	ldr	r1, [pc, #212]	; (8000e88 <HAL_GPIO_Init+0x2d4>)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	3302      	adds	r3, #2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dbe:	4b37      	ldr	r3, [pc, #220]	; (8000e9c <HAL_GPIO_Init+0x2e8>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	2380      	movs	r3, #128	; 0x80
 8000dd4:	035b      	lsls	r3, r3, #13
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000de2:	4b2e      	ldr	r3, [pc, #184]	; (8000e9c <HAL_GPIO_Init+0x2e8>)
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000de8:	4b2c      	ldr	r3, [pc, #176]	; (8000e9c <HAL_GPIO_Init+0x2e8>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	43da      	mvns	r2, r3
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	039b      	lsls	r3, r3, #14
 8000e00:	4013      	ands	r3, r2
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e0c:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <HAL_GPIO_Init+0x2e8>)
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000e12:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <HAL_GPIO_Init+0x2e8>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	2380      	movs	r3, #128	; 0x80
 8000e28:	029b      	lsls	r3, r3, #10
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <HAL_GPIO_Init+0x2e8>)
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <HAL_GPIO_Init+0x2e8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	43da      	mvns	r2, r3
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	025b      	lsls	r3, r3, #9
 8000e54:	4013      	ands	r3, r2
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <HAL_GPIO_Init+0x2e8>)
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	40da      	lsrs	r2, r3
 8000e74:	1e13      	subs	r3, r2, #0
 8000e76:	d000      	beq.n	8000e7a <HAL_GPIO_Init+0x2c6>
 8000e78:	e6a8      	b.n	8000bcc <HAL_GPIO_Init+0x18>
  }
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b006      	add	sp, #24
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010000 	.word	0x40010000
 8000e8c:	50000400 	.word	0x50000400
 8000e90:	50000800 	.word	0x50000800
 8000e94:	50000c00 	.word	0x50000c00
 8000e98:	50001c00 	.word	0x50001c00
 8000e9c:	40010400 	.word	0x40010400

08000ea0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d102      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	f000 fbaf 	bl	8001612 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eb4:	4bcf      	ldr	r3, [pc, #828]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	220c      	movs	r2, #12
 8000eba:	4013      	ands	r3, r2
 8000ebc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ebe:	4bcd      	ldr	r3, [pc, #820]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	2380      	movs	r3, #128	; 0x80
 8000ec4:	025b      	lsls	r3, r3, #9
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d100      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x36>
 8000ed4:	e07e      	b.n	8000fd4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ed6:	6a3b      	ldr	r3, [r7, #32]
 8000ed8:	2b08      	cmp	r3, #8
 8000eda:	d007      	beq.n	8000eec <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000edc:	6a3b      	ldr	r3, [r7, #32]
 8000ede:	2b0c      	cmp	r3, #12
 8000ee0:	d112      	bne.n	8000f08 <HAL_RCC_OscConfig+0x68>
 8000ee2:	69fa      	ldr	r2, [r7, #28]
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	025b      	lsls	r3, r3, #9
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d10d      	bne.n	8000f08 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eec:	4bc1      	ldr	r3, [pc, #772]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	029b      	lsls	r3, r3, #10
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d100      	bne.n	8000efa <HAL_RCC_OscConfig+0x5a>
 8000ef8:	e06b      	b.n	8000fd2 <HAL_RCC_OscConfig+0x132>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d167      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	f000 fb85 	bl	8001612 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	025b      	lsls	r3, r3, #9
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d107      	bne.n	8000f24 <HAL_RCC_OscConfig+0x84>
 8000f14:	4bb7      	ldr	r3, [pc, #732]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4bb6      	ldr	r3, [pc, #728]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f1a:	2180      	movs	r1, #128	; 0x80
 8000f1c:	0249      	lsls	r1, r1, #9
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	e027      	b.n	8000f74 <HAL_RCC_OscConfig+0xd4>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	23a0      	movs	r3, #160	; 0xa0
 8000f2a:	02db      	lsls	r3, r3, #11
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d10e      	bne.n	8000f4e <HAL_RCC_OscConfig+0xae>
 8000f30:	4bb0      	ldr	r3, [pc, #704]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4baf      	ldr	r3, [pc, #700]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f36:	2180      	movs	r1, #128	; 0x80
 8000f38:	02c9      	lsls	r1, r1, #11
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	4bad      	ldr	r3, [pc, #692]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	4bac      	ldr	r3, [pc, #688]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f44:	2180      	movs	r1, #128	; 0x80
 8000f46:	0249      	lsls	r1, r1, #9
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	e012      	b.n	8000f74 <HAL_RCC_OscConfig+0xd4>
 8000f4e:	4ba9      	ldr	r3, [pc, #676]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	4ba8      	ldr	r3, [pc, #672]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f54:	49a8      	ldr	r1, [pc, #672]	; (80011f8 <HAL_RCC_OscConfig+0x358>)
 8000f56:	400a      	ands	r2, r1
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	4ba6      	ldr	r3, [pc, #664]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	025b      	lsls	r3, r3, #9
 8000f62:	4013      	ands	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4ba2      	ldr	r3, [pc, #648]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4ba1      	ldr	r3, [pc, #644]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f6e:	49a3      	ldr	r1, [pc, #652]	; (80011fc <HAL_RCC_OscConfig+0x35c>)
 8000f70:	400a      	ands	r2, r1
 8000f72:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d015      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fcaa 	bl	80008d4 <HAL_GetTick>
 8000f80:	0003      	movs	r3, r0
 8000f82:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f84:	e009      	b.n	8000f9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f86:	f7ff fca5 	bl	80008d4 <HAL_GetTick>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b64      	cmp	r3, #100	; 0x64
 8000f92:	d902      	bls.n	8000f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	f000 fb3c 	bl	8001612 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f9a:	4b96      	ldr	r3, [pc, #600]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	029b      	lsls	r3, r3, #10
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d0ef      	beq.n	8000f86 <HAL_RCC_OscConfig+0xe6>
 8000fa6:	e015      	b.n	8000fd4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fc94 	bl	80008d4 <HAL_GetTick>
 8000fac:	0003      	movs	r3, r0
 8000fae:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fb0:	e008      	b.n	8000fc4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fb2:	f7ff fc8f 	bl	80008d4 <HAL_GetTick>
 8000fb6:	0002      	movs	r2, r0
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b64      	cmp	r3, #100	; 0x64
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e326      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fc4:	4b8b      	ldr	r3, [pc, #556]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	029b      	lsls	r3, r3, #10
 8000fcc:	4013      	ands	r3, r2
 8000fce:	d1f0      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x112>
 8000fd0:	e000      	b.n	8000fd4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2202      	movs	r2, #2
 8000fda:	4013      	ands	r3, r2
 8000fdc:	d100      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x140>
 8000fde:	e08b      	b.n	80010f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d005      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fec:	6a3b      	ldr	r3, [r7, #32]
 8000fee:	2b0c      	cmp	r3, #12
 8000ff0:	d13e      	bne.n	8001070 <HAL_RCC_OscConfig+0x1d0>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d13b      	bne.n	8001070 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000ff8:	4b7e      	ldr	r3, [pc, #504]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	4013      	ands	r3, r2
 8001000:	d004      	beq.n	800100c <HAL_RCC_OscConfig+0x16c>
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e302      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100c:	4b79      	ldr	r3, [pc, #484]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	4a7b      	ldr	r2, [pc, #492]	; (8001200 <HAL_RCC_OscConfig+0x360>)
 8001012:	4013      	ands	r3, r2
 8001014:	0019      	movs	r1, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	021a      	lsls	r2, r3, #8
 800101c:	4b75      	ldr	r3, [pc, #468]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 800101e:	430a      	orrs	r2, r1
 8001020:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001022:	4b74      	ldr	r3, [pc, #464]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2209      	movs	r2, #9
 8001028:	4393      	bics	r3, r2
 800102a:	0019      	movs	r1, r3
 800102c:	4b71      	ldr	r3, [pc, #452]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	430a      	orrs	r2, r1
 8001032:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001034:	f000 fc40 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 8001038:	0001      	movs	r1, r0
 800103a:	4b6e      	ldr	r3, [pc, #440]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	220f      	movs	r2, #15
 8001042:	4013      	ands	r3, r2
 8001044:	4a6f      	ldr	r2, [pc, #444]	; (8001204 <HAL_RCC_OscConfig+0x364>)
 8001046:	5cd3      	ldrb	r3, [r2, r3]
 8001048:	000a      	movs	r2, r1
 800104a:	40da      	lsrs	r2, r3
 800104c:	4b6e      	ldr	r3, [pc, #440]	; (8001208 <HAL_RCC_OscConfig+0x368>)
 800104e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001050:	4b6e      	ldr	r3, [pc, #440]	; (800120c <HAL_RCC_OscConfig+0x36c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2513      	movs	r5, #19
 8001056:	197c      	adds	r4, r7, r5
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff fbf5 	bl	8000848 <HAL_InitTick>
 800105e:	0003      	movs	r3, r0
 8001060:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001062:	197b      	adds	r3, r7, r5
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d046      	beq.n	80010f8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800106a:	197b      	adds	r3, r7, r5
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	e2d0      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d027      	beq.n	80010c6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001076:	4b5f      	ldr	r3, [pc, #380]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2209      	movs	r2, #9
 800107c:	4393      	bics	r3, r2
 800107e:	0019      	movs	r1, r3
 8001080:	4b5c      	ldr	r3, [pc, #368]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	430a      	orrs	r2, r1
 8001086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001088:	f7ff fc24 	bl	80008d4 <HAL_GetTick>
 800108c:	0003      	movs	r3, r0
 800108e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001090:	e008      	b.n	80010a4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001092:	f7ff fc1f 	bl	80008d4 <HAL_GetTick>
 8001096:	0002      	movs	r2, r0
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e2b6      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010a4:	4b53      	ldr	r3, [pc, #332]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2204      	movs	r2, #4
 80010aa:	4013      	ands	r3, r2
 80010ac:	d0f1      	beq.n	8001092 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ae:	4b51      	ldr	r3, [pc, #324]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	4a53      	ldr	r2, [pc, #332]	; (8001200 <HAL_RCC_OscConfig+0x360>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	0019      	movs	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	021a      	lsls	r2, r3, #8
 80010be:	4b4d      	ldr	r3, [pc, #308]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 80010c0:	430a      	orrs	r2, r1
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	e018      	b.n	80010f8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010c6:	4b4b      	ldr	r3, [pc, #300]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4b4a      	ldr	r3, [pc, #296]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 80010cc:	2101      	movs	r1, #1
 80010ce:	438a      	bics	r2, r1
 80010d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d2:	f7ff fbff 	bl	80008d4 <HAL_GetTick>
 80010d6:	0003      	movs	r3, r0
 80010d8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010dc:	f7ff fbfa 	bl	80008d4 <HAL_GetTick>
 80010e0:	0002      	movs	r2, r0
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e291      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010ee:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2204      	movs	r2, #4
 80010f4:	4013      	ands	r3, r2
 80010f6:	d1f1      	bne.n	80010dc <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2210      	movs	r2, #16
 80010fe:	4013      	ands	r3, r2
 8001100:	d100      	bne.n	8001104 <HAL_RCC_OscConfig+0x264>
 8001102:	e0a1      	b.n	8001248 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001104:	6a3b      	ldr	r3, [r7, #32]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d140      	bne.n	800118c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800110a:	4b3a      	ldr	r3, [pc, #232]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4013      	ands	r3, r2
 8001114:	d005      	beq.n	8001122 <HAL_RCC_OscConfig+0x282>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e277      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001122:	4b34      	ldr	r3, [pc, #208]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	4a3a      	ldr	r2, [pc, #232]	; (8001210 <HAL_RCC_OscConfig+0x370>)
 8001128:	4013      	ands	r3, r2
 800112a:	0019      	movs	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001130:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8001132:	430a      	orrs	r2, r1
 8001134:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001136:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	0a19      	lsrs	r1, r3, #8
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	061a      	lsls	r2, r3, #24
 8001144:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8001146:	430a      	orrs	r2, r1
 8001148:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	0b5b      	lsrs	r3, r3, #13
 8001150:	3301      	adds	r3, #1
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	0212      	lsls	r2, r2, #8
 8001156:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001158:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	091b      	lsrs	r3, r3, #4
 800115e:	210f      	movs	r1, #15
 8001160:	400b      	ands	r3, r1
 8001162:	4928      	ldr	r1, [pc, #160]	; (8001204 <HAL_RCC_OscConfig+0x364>)
 8001164:	5ccb      	ldrb	r3, [r1, r3]
 8001166:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <HAL_RCC_OscConfig+0x368>)
 800116a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <HAL_RCC_OscConfig+0x36c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2513      	movs	r5, #19
 8001172:	197c      	adds	r4, r7, r5
 8001174:	0018      	movs	r0, r3
 8001176:	f7ff fb67 	bl	8000848 <HAL_InitTick>
 800117a:	0003      	movs	r3, r0
 800117c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800117e:	197b      	adds	r3, r7, r5
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d060      	beq.n	8001248 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001186:	197b      	adds	r3, r7, r5
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	e242      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d03f      	beq.n	8001214 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	0049      	lsls	r1, r1, #1
 800119e:	430a      	orrs	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a2:	f7ff fb97 	bl	80008d4 <HAL_GetTick>
 80011a6:	0003      	movs	r3, r0
 80011a8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011ac:	f7ff fb92 	bl	80008d4 <HAL_GetTick>
 80011b0:	0002      	movs	r2, r0
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e229      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	2380      	movs	r3, #128	; 0x80
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4013      	ands	r3, r2
 80011c8:	d0f0      	beq.n	80011ac <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	4a10      	ldr	r2, [pc, #64]	; (8001210 <HAL_RCC_OscConfig+0x370>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	0019      	movs	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 80011da:	430a      	orrs	r2, r1
 80011dc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011de:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	0a19      	lsrs	r1, r3, #8
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	061a      	lsls	r2, r3, #24
 80011ec:	4b01      	ldr	r3, [pc, #4]	; (80011f4 <HAL_RCC_OscConfig+0x354>)
 80011ee:	430a      	orrs	r2, r1
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	e029      	b.n	8001248 <HAL_RCC_OscConfig+0x3a8>
 80011f4:	40021000 	.word	0x40021000
 80011f8:	fffeffff 	.word	0xfffeffff
 80011fc:	fffbffff 	.word	0xfffbffff
 8001200:	ffffe0ff 	.word	0xffffe0ff
 8001204:	080035a8 	.word	0x080035a8
 8001208:	20000000 	.word	0x20000000
 800120c:	20000004 	.word	0x20000004
 8001210:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001214:	4bbd      	ldr	r3, [pc, #756]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4bbc      	ldr	r3, [pc, #752]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 800121a:	49bd      	ldr	r1, [pc, #756]	; (8001510 <HAL_RCC_OscConfig+0x670>)
 800121c:	400a      	ands	r2, r1
 800121e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fb58 	bl	80008d4 <HAL_GetTick>
 8001224:	0003      	movs	r3, r0
 8001226:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800122a:	f7ff fb53 	bl	80008d4 <HAL_GetTick>
 800122e:	0002      	movs	r2, r0
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e1ea      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800123c:	4bb3      	ldr	r3, [pc, #716]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4013      	ands	r3, r2
 8001246:	d1f0      	bne.n	800122a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2208      	movs	r2, #8
 800124e:	4013      	ands	r3, r2
 8001250:	d036      	beq.n	80012c0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d019      	beq.n	800128e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800125a:	4bac      	ldr	r3, [pc, #688]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 800125c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800125e:	4bab      	ldr	r3, [pc, #684]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 8001260:	2101      	movs	r1, #1
 8001262:	430a      	orrs	r2, r1
 8001264:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001266:	f7ff fb35 	bl	80008d4 <HAL_GetTick>
 800126a:	0003      	movs	r3, r0
 800126c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001270:	f7ff fb30 	bl	80008d4 <HAL_GetTick>
 8001274:	0002      	movs	r2, r0
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e1c7      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001282:	4ba2      	ldr	r3, [pc, #648]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 8001284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001286:	2202      	movs	r2, #2
 8001288:	4013      	ands	r3, r2
 800128a:	d0f1      	beq.n	8001270 <HAL_RCC_OscConfig+0x3d0>
 800128c:	e018      	b.n	80012c0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800128e:	4b9f      	ldr	r3, [pc, #636]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 8001290:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001292:	4b9e      	ldr	r3, [pc, #632]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 8001294:	2101      	movs	r1, #1
 8001296:	438a      	bics	r2, r1
 8001298:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129a:	f7ff fb1b 	bl	80008d4 <HAL_GetTick>
 800129e:	0003      	movs	r3, r0
 80012a0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a4:	f7ff fb16 	bl	80008d4 <HAL_GetTick>
 80012a8:	0002      	movs	r2, r0
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e1ad      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012b6:	4b95      	ldr	r3, [pc, #596]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 80012b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ba:	2202      	movs	r2, #2
 80012bc:	4013      	ands	r3, r2
 80012be:	d1f1      	bne.n	80012a4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2204      	movs	r2, #4
 80012c6:	4013      	ands	r3, r2
 80012c8:	d100      	bne.n	80012cc <HAL_RCC_OscConfig+0x42c>
 80012ca:	e0ae      	b.n	800142a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012cc:	2027      	movs	r0, #39	; 0x27
 80012ce:	183b      	adds	r3, r7, r0
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d4:	4b8d      	ldr	r3, [pc, #564]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 80012d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	055b      	lsls	r3, r3, #21
 80012dc:	4013      	ands	r3, r2
 80012de:	d109      	bne.n	80012f4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e0:	4b8a      	ldr	r3, [pc, #552]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 80012e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012e4:	4b89      	ldr	r3, [pc, #548]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 80012e6:	2180      	movs	r1, #128	; 0x80
 80012e8:	0549      	lsls	r1, r1, #21
 80012ea:	430a      	orrs	r2, r1
 80012ec:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80012ee:	183b      	adds	r3, r7, r0
 80012f0:	2201      	movs	r2, #1
 80012f2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f4:	4b87      	ldr	r3, [pc, #540]	; (8001514 <HAL_RCC_OscConfig+0x674>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4013      	ands	r3, r2
 80012fe:	d11a      	bne.n	8001336 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001300:	4b84      	ldr	r3, [pc, #528]	; (8001514 <HAL_RCC_OscConfig+0x674>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b83      	ldr	r3, [pc, #524]	; (8001514 <HAL_RCC_OscConfig+0x674>)
 8001306:	2180      	movs	r1, #128	; 0x80
 8001308:	0049      	lsls	r1, r1, #1
 800130a:	430a      	orrs	r2, r1
 800130c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800130e:	f7ff fae1 	bl	80008d4 <HAL_GetTick>
 8001312:	0003      	movs	r3, r0
 8001314:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001318:	f7ff fadc 	bl	80008d4 <HAL_GetTick>
 800131c:	0002      	movs	r2, r0
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e173      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132a:	4b7a      	ldr	r3, [pc, #488]	; (8001514 <HAL_RCC_OscConfig+0x674>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4013      	ands	r3, r2
 8001334:	d0f0      	beq.n	8001318 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	429a      	cmp	r2, r3
 8001340:	d107      	bne.n	8001352 <HAL_RCC_OscConfig+0x4b2>
 8001342:	4b72      	ldr	r3, [pc, #456]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 8001344:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001346:	4b71      	ldr	r3, [pc, #452]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 8001348:	2180      	movs	r1, #128	; 0x80
 800134a:	0049      	lsls	r1, r1, #1
 800134c:	430a      	orrs	r2, r1
 800134e:	651a      	str	r2, [r3, #80]	; 0x50
 8001350:	e031      	b.n	80013b6 <HAL_RCC_OscConfig+0x516>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d10c      	bne.n	8001374 <HAL_RCC_OscConfig+0x4d4>
 800135a:	4b6c      	ldr	r3, [pc, #432]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 800135c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800135e:	4b6b      	ldr	r3, [pc, #428]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 8001360:	496b      	ldr	r1, [pc, #428]	; (8001510 <HAL_RCC_OscConfig+0x670>)
 8001362:	400a      	ands	r2, r1
 8001364:	651a      	str	r2, [r3, #80]	; 0x50
 8001366:	4b69      	ldr	r3, [pc, #420]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 8001368:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800136a:	4b68      	ldr	r3, [pc, #416]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 800136c:	496a      	ldr	r1, [pc, #424]	; (8001518 <HAL_RCC_OscConfig+0x678>)
 800136e:	400a      	ands	r2, r1
 8001370:	651a      	str	r2, [r3, #80]	; 0x50
 8001372:	e020      	b.n	80013b6 <HAL_RCC_OscConfig+0x516>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	23a0      	movs	r3, #160	; 0xa0
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	429a      	cmp	r2, r3
 800137e:	d10e      	bne.n	800139e <HAL_RCC_OscConfig+0x4fe>
 8001380:	4b62      	ldr	r3, [pc, #392]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 8001382:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001384:	4b61      	ldr	r3, [pc, #388]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 8001386:	2180      	movs	r1, #128	; 0x80
 8001388:	00c9      	lsls	r1, r1, #3
 800138a:	430a      	orrs	r2, r1
 800138c:	651a      	str	r2, [r3, #80]	; 0x50
 800138e:	4b5f      	ldr	r3, [pc, #380]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 8001390:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001392:	4b5e      	ldr	r3, [pc, #376]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	0049      	lsls	r1, r1, #1
 8001398:	430a      	orrs	r2, r1
 800139a:	651a      	str	r2, [r3, #80]	; 0x50
 800139c:	e00b      	b.n	80013b6 <HAL_RCC_OscConfig+0x516>
 800139e:	4b5b      	ldr	r3, [pc, #364]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 80013a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013a2:	4b5a      	ldr	r3, [pc, #360]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 80013a4:	495a      	ldr	r1, [pc, #360]	; (8001510 <HAL_RCC_OscConfig+0x670>)
 80013a6:	400a      	ands	r2, r1
 80013a8:	651a      	str	r2, [r3, #80]	; 0x50
 80013aa:	4b58      	ldr	r3, [pc, #352]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 80013ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013ae:	4b57      	ldr	r3, [pc, #348]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 80013b0:	4959      	ldr	r1, [pc, #356]	; (8001518 <HAL_RCC_OscConfig+0x678>)
 80013b2:	400a      	ands	r2, r1
 80013b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d015      	beq.n	80013ea <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013be:	f7ff fa89 	bl	80008d4 <HAL_GetTick>
 80013c2:	0003      	movs	r3, r0
 80013c4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013c6:	e009      	b.n	80013dc <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c8:	f7ff fa84 	bl	80008d4 <HAL_GetTick>
 80013cc:	0002      	movs	r2, r0
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	4a52      	ldr	r2, [pc, #328]	; (800151c <HAL_RCC_OscConfig+0x67c>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e11a      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013dc:	4b4b      	ldr	r3, [pc, #300]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 80013de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4013      	ands	r3, r2
 80013e6:	d0ef      	beq.n	80013c8 <HAL_RCC_OscConfig+0x528>
 80013e8:	e014      	b.n	8001414 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ea:	f7ff fa73 	bl	80008d4 <HAL_GetTick>
 80013ee:	0003      	movs	r3, r0
 80013f0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013f2:	e009      	b.n	8001408 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f4:	f7ff fa6e 	bl	80008d4 <HAL_GetTick>
 80013f8:	0002      	movs	r2, r0
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	4a47      	ldr	r2, [pc, #284]	; (800151c <HAL_RCC_OscConfig+0x67c>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e104      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001408:	4b40      	ldr	r3, [pc, #256]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 800140a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4013      	ands	r3, r2
 8001412:	d1ef      	bne.n	80013f4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001414:	2327      	movs	r3, #39	; 0x27
 8001416:	18fb      	adds	r3, r7, r3
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d105      	bne.n	800142a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800141e:	4b3b      	ldr	r3, [pc, #236]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 8001420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001422:	4b3a      	ldr	r3, [pc, #232]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 8001424:	493e      	ldr	r1, [pc, #248]	; (8001520 <HAL_RCC_OscConfig+0x680>)
 8001426:	400a      	ands	r2, r1
 8001428:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2220      	movs	r2, #32
 8001430:	4013      	ands	r3, r2
 8001432:	d049      	beq.n	80014c8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d026      	beq.n	800148a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800143c:	4b33      	ldr	r3, [pc, #204]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	4b32      	ldr	r3, [pc, #200]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 8001442:	2101      	movs	r1, #1
 8001444:	430a      	orrs	r2, r1
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	4b30      	ldr	r3, [pc, #192]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 800144a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800144c:	4b2f      	ldr	r3, [pc, #188]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 800144e:	2101      	movs	r1, #1
 8001450:	430a      	orrs	r2, r1
 8001452:	635a      	str	r2, [r3, #52]	; 0x34
 8001454:	4b33      	ldr	r3, [pc, #204]	; (8001524 <HAL_RCC_OscConfig+0x684>)
 8001456:	6a1a      	ldr	r2, [r3, #32]
 8001458:	4b32      	ldr	r3, [pc, #200]	; (8001524 <HAL_RCC_OscConfig+0x684>)
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	0189      	lsls	r1, r1, #6
 800145e:	430a      	orrs	r2, r1
 8001460:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001462:	f7ff fa37 	bl	80008d4 <HAL_GetTick>
 8001466:	0003      	movs	r3, r0
 8001468:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800146c:	f7ff fa32 	bl	80008d4 <HAL_GetTick>
 8001470:	0002      	movs	r2, r0
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e0c9      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800147e:	4b23      	ldr	r3, [pc, #140]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2202      	movs	r2, #2
 8001484:	4013      	ands	r3, r2
 8001486:	d0f1      	beq.n	800146c <HAL_RCC_OscConfig+0x5cc>
 8001488:	e01e      	b.n	80014c8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	4b1f      	ldr	r3, [pc, #124]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 8001490:	2101      	movs	r1, #1
 8001492:	438a      	bics	r2, r1
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	4b23      	ldr	r3, [pc, #140]	; (8001524 <HAL_RCC_OscConfig+0x684>)
 8001498:	6a1a      	ldr	r2, [r3, #32]
 800149a:	4b22      	ldr	r3, [pc, #136]	; (8001524 <HAL_RCC_OscConfig+0x684>)
 800149c:	4922      	ldr	r1, [pc, #136]	; (8001528 <HAL_RCC_OscConfig+0x688>)
 800149e:	400a      	ands	r2, r1
 80014a0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a2:	f7ff fa17 	bl	80008d4 <HAL_GetTick>
 80014a6:	0003      	movs	r3, r0
 80014a8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014ac:	f7ff fa12 	bl	80008d4 <HAL_GetTick>
 80014b0:	0002      	movs	r2, r0
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e0a9      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2202      	movs	r2, #2
 80014c4:	4013      	ands	r3, r2
 80014c6:	d1f1      	bne.n	80014ac <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d100      	bne.n	80014d2 <HAL_RCC_OscConfig+0x632>
 80014d0:	e09e      	b.n	8001610 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014d2:	6a3b      	ldr	r3, [r7, #32]
 80014d4:	2b0c      	cmp	r3, #12
 80014d6:	d100      	bne.n	80014da <HAL_RCC_OscConfig+0x63a>
 80014d8:	e077      	b.n	80015ca <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d158      	bne.n	8001594 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_RCC_OscConfig+0x66c>)
 80014e8:	4910      	ldr	r1, [pc, #64]	; (800152c <HAL_RCC_OscConfig+0x68c>)
 80014ea:	400a      	ands	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ee:	f7ff f9f1 	bl	80008d4 <HAL_GetTick>
 80014f2:	0003      	movs	r3, r0
 80014f4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014f6:	e01b      	b.n	8001530 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f8:	f7ff f9ec 	bl	80008d4 <HAL_GetTick>
 80014fc:	0002      	movs	r2, r0
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d914      	bls.n	8001530 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e083      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	40021000 	.word	0x40021000
 8001510:	fffffeff 	.word	0xfffffeff
 8001514:	40007000 	.word	0x40007000
 8001518:	fffffbff 	.word	0xfffffbff
 800151c:	00001388 	.word	0x00001388
 8001520:	efffffff 	.word	0xefffffff
 8001524:	40010000 	.word	0x40010000
 8001528:	ffffdfff 	.word	0xffffdfff
 800152c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001530:	4b3a      	ldr	r3, [pc, #232]	; (800161c <HAL_RCC_OscConfig+0x77c>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	049b      	lsls	r3, r3, #18
 8001538:	4013      	ands	r3, r2
 800153a:	d1dd      	bne.n	80014f8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800153c:	4b37      	ldr	r3, [pc, #220]	; (800161c <HAL_RCC_OscConfig+0x77c>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	4a37      	ldr	r2, [pc, #220]	; (8001620 <HAL_RCC_OscConfig+0x780>)
 8001542:	4013      	ands	r3, r2
 8001544:	0019      	movs	r1, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001554:	431a      	orrs	r2, r3
 8001556:	4b31      	ldr	r3, [pc, #196]	; (800161c <HAL_RCC_OscConfig+0x77c>)
 8001558:	430a      	orrs	r2, r1
 800155a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800155c:	4b2f      	ldr	r3, [pc, #188]	; (800161c <HAL_RCC_OscConfig+0x77c>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b2e      	ldr	r3, [pc, #184]	; (800161c <HAL_RCC_OscConfig+0x77c>)
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	0449      	lsls	r1, r1, #17
 8001566:	430a      	orrs	r2, r1
 8001568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156a:	f7ff f9b3 	bl	80008d4 <HAL_GetTick>
 800156e:	0003      	movs	r3, r0
 8001570:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001574:	f7ff f9ae 	bl	80008d4 <HAL_GetTick>
 8001578:	0002      	movs	r2, r0
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e045      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001586:	4b25      	ldr	r3, [pc, #148]	; (800161c <HAL_RCC_OscConfig+0x77c>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	049b      	lsls	r3, r3, #18
 800158e:	4013      	ands	r3, r2
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x6d4>
 8001592:	e03d      	b.n	8001610 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <HAL_RCC_OscConfig+0x77c>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b20      	ldr	r3, [pc, #128]	; (800161c <HAL_RCC_OscConfig+0x77c>)
 800159a:	4922      	ldr	r1, [pc, #136]	; (8001624 <HAL_RCC_OscConfig+0x784>)
 800159c:	400a      	ands	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff f998 	bl	80008d4 <HAL_GetTick>
 80015a4:	0003      	movs	r3, r0
 80015a6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015aa:	f7ff f993 	bl	80008d4 <HAL_GetTick>
 80015ae:	0002      	movs	r2, r0
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e02a      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <HAL_RCC_OscConfig+0x77c>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	049b      	lsls	r3, r3, #18
 80015c4:	4013      	ands	r3, r2
 80015c6:	d1f0      	bne.n	80015aa <HAL_RCC_OscConfig+0x70a>
 80015c8:	e022      	b.n	8001610 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e01d      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_RCC_OscConfig+0x77c>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015dc:	69fa      	ldr	r2, [r7, #28]
 80015de:	2380      	movs	r3, #128	; 0x80
 80015e0:	025b      	lsls	r3, r3, #9
 80015e2:	401a      	ands	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d10f      	bne.n	800160c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015ec:	69fa      	ldr	r2, [r7, #28]
 80015ee:	23f0      	movs	r3, #240	; 0xf0
 80015f0:	039b      	lsls	r3, r3, #14
 80015f2:	401a      	ands	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d107      	bne.n	800160c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80015fc:	69fa      	ldr	r2, [r7, #28]
 80015fe:	23c0      	movs	r3, #192	; 0xc0
 8001600:	041b      	lsls	r3, r3, #16
 8001602:	401a      	ands	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001608:	429a      	cmp	r2, r3
 800160a:	d001      	beq.n	8001610 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e000      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b00a      	add	sp, #40	; 0x28
 8001618:	bdb0      	pop	{r4, r5, r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	40021000 	.word	0x40021000
 8001620:	ff02ffff 	.word	0xff02ffff
 8001624:	feffffff 	.word	0xfeffffff

08001628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001628:	b5b0      	push	{r4, r5, r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e128      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800163c:	4b96      	ldr	r3, [pc, #600]	; (8001898 <HAL_RCC_ClockConfig+0x270>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2201      	movs	r2, #1
 8001642:	4013      	ands	r3, r2
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d91e      	bls.n	8001688 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	4b93      	ldr	r3, [pc, #588]	; (8001898 <HAL_RCC_ClockConfig+0x270>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2201      	movs	r2, #1
 8001650:	4393      	bics	r3, r2
 8001652:	0019      	movs	r1, r3
 8001654:	4b90      	ldr	r3, [pc, #576]	; (8001898 <HAL_RCC_ClockConfig+0x270>)
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800165c:	f7ff f93a 	bl	80008d4 <HAL_GetTick>
 8001660:	0003      	movs	r3, r0
 8001662:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001664:	e009      	b.n	800167a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001666:	f7ff f935 	bl	80008d4 <HAL_GetTick>
 800166a:	0002      	movs	r2, r0
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	4a8a      	ldr	r2, [pc, #552]	; (800189c <HAL_RCC_ClockConfig+0x274>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e109      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800167a:	4b87      	ldr	r3, [pc, #540]	; (8001898 <HAL_RCC_ClockConfig+0x270>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2201      	movs	r2, #1
 8001680:	4013      	ands	r3, r2
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d1ee      	bne.n	8001666 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2202      	movs	r2, #2
 800168e:	4013      	ands	r3, r2
 8001690:	d009      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001692:	4b83      	ldr	r3, [pc, #524]	; (80018a0 <HAL_RCC_ClockConfig+0x278>)
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	22f0      	movs	r2, #240	; 0xf0
 8001698:	4393      	bics	r3, r2
 800169a:	0019      	movs	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	4b7f      	ldr	r3, [pc, #508]	; (80018a0 <HAL_RCC_ClockConfig+0x278>)
 80016a2:	430a      	orrs	r2, r1
 80016a4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2201      	movs	r2, #1
 80016ac:	4013      	ands	r3, r2
 80016ae:	d100      	bne.n	80016b2 <HAL_RCC_ClockConfig+0x8a>
 80016b0:	e089      	b.n	80017c6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d107      	bne.n	80016ca <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016ba:	4b79      	ldr	r3, [pc, #484]	; (80018a0 <HAL_RCC_ClockConfig+0x278>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	029b      	lsls	r3, r3, #10
 80016c2:	4013      	ands	r3, r2
 80016c4:	d120      	bne.n	8001708 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e0e1      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016d2:	4b73      	ldr	r3, [pc, #460]	; (80018a0 <HAL_RCC_ClockConfig+0x278>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	049b      	lsls	r3, r3, #18
 80016da:	4013      	ands	r3, r2
 80016dc:	d114      	bne.n	8001708 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e0d5      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d106      	bne.n	80016f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016ea:	4b6d      	ldr	r3, [pc, #436]	; (80018a0 <HAL_RCC_ClockConfig+0x278>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2204      	movs	r2, #4
 80016f0:	4013      	ands	r3, r2
 80016f2:	d109      	bne.n	8001708 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0ca      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016f8:	4b69      	ldr	r3, [pc, #420]	; (80018a0 <HAL_RCC_ClockConfig+0x278>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4013      	ands	r3, r2
 8001702:	d101      	bne.n	8001708 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0c2      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001708:	4b65      	ldr	r3, [pc, #404]	; (80018a0 <HAL_RCC_ClockConfig+0x278>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2203      	movs	r2, #3
 800170e:	4393      	bics	r3, r2
 8001710:	0019      	movs	r1, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	4b62      	ldr	r3, [pc, #392]	; (80018a0 <HAL_RCC_ClockConfig+0x278>)
 8001718:	430a      	orrs	r2, r1
 800171a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800171c:	f7ff f8da 	bl	80008d4 <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d111      	bne.n	8001750 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800172c:	e009      	b.n	8001742 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172e:	f7ff f8d1 	bl	80008d4 <HAL_GetTick>
 8001732:	0002      	movs	r2, r0
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	4a58      	ldr	r2, [pc, #352]	; (800189c <HAL_RCC_ClockConfig+0x274>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e0a5      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001742:	4b57      	ldr	r3, [pc, #348]	; (80018a0 <HAL_RCC_ClockConfig+0x278>)
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	220c      	movs	r2, #12
 8001748:	4013      	ands	r3, r2
 800174a:	2b08      	cmp	r3, #8
 800174c:	d1ef      	bne.n	800172e <HAL_RCC_ClockConfig+0x106>
 800174e:	e03a      	b.n	80017c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b03      	cmp	r3, #3
 8001756:	d111      	bne.n	800177c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001758:	e009      	b.n	800176e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175a:	f7ff f8bb 	bl	80008d4 <HAL_GetTick>
 800175e:	0002      	movs	r2, r0
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	4a4d      	ldr	r2, [pc, #308]	; (800189c <HAL_RCC_ClockConfig+0x274>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e08f      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800176e:	4b4c      	ldr	r3, [pc, #304]	; (80018a0 <HAL_RCC_ClockConfig+0x278>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	220c      	movs	r2, #12
 8001774:	4013      	ands	r3, r2
 8001776:	2b0c      	cmp	r3, #12
 8001778:	d1ef      	bne.n	800175a <HAL_RCC_ClockConfig+0x132>
 800177a:	e024      	b.n	80017c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d11b      	bne.n	80017bc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001784:	e009      	b.n	800179a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001786:	f7ff f8a5 	bl	80008d4 <HAL_GetTick>
 800178a:	0002      	movs	r2, r0
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	4a42      	ldr	r2, [pc, #264]	; (800189c <HAL_RCC_ClockConfig+0x274>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e079      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800179a:	4b41      	ldr	r3, [pc, #260]	; (80018a0 <HAL_RCC_ClockConfig+0x278>)
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	220c      	movs	r2, #12
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d1ef      	bne.n	8001786 <HAL_RCC_ClockConfig+0x15e>
 80017a6:	e00e      	b.n	80017c6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a8:	f7ff f894 	bl	80008d4 <HAL_GetTick>
 80017ac:	0002      	movs	r2, r0
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	4a3a      	ldr	r2, [pc, #232]	; (800189c <HAL_RCC_ClockConfig+0x274>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e068      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80017bc:	4b38      	ldr	r3, [pc, #224]	; (80018a0 <HAL_RCC_ClockConfig+0x278>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	220c      	movs	r2, #12
 80017c2:	4013      	ands	r3, r2
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017c6:	4b34      	ldr	r3, [pc, #208]	; (8001898 <HAL_RCC_ClockConfig+0x270>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2201      	movs	r2, #1
 80017cc:	4013      	ands	r3, r2
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d21e      	bcs.n	8001812 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d4:	4b30      	ldr	r3, [pc, #192]	; (8001898 <HAL_RCC_ClockConfig+0x270>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2201      	movs	r2, #1
 80017da:	4393      	bics	r3, r2
 80017dc:	0019      	movs	r1, r3
 80017de:	4b2e      	ldr	r3, [pc, #184]	; (8001898 <HAL_RCC_ClockConfig+0x270>)
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017e6:	f7ff f875 	bl	80008d4 <HAL_GetTick>
 80017ea:	0003      	movs	r3, r0
 80017ec:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ee:	e009      	b.n	8001804 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f0:	f7ff f870 	bl	80008d4 <HAL_GetTick>
 80017f4:	0002      	movs	r2, r0
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	4a28      	ldr	r2, [pc, #160]	; (800189c <HAL_RCC_ClockConfig+0x274>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e044      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001804:	4b24      	ldr	r3, [pc, #144]	; (8001898 <HAL_RCC_ClockConfig+0x270>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2201      	movs	r2, #1
 800180a:	4013      	ands	r3, r2
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d1ee      	bne.n	80017f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2204      	movs	r2, #4
 8001818:	4013      	ands	r3, r2
 800181a:	d009      	beq.n	8001830 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800181c:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <HAL_RCC_ClockConfig+0x278>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4a20      	ldr	r2, [pc, #128]	; (80018a4 <HAL_RCC_ClockConfig+0x27c>)
 8001822:	4013      	ands	r3, r2
 8001824:	0019      	movs	r1, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <HAL_RCC_ClockConfig+0x278>)
 800182c:	430a      	orrs	r2, r1
 800182e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2208      	movs	r2, #8
 8001836:	4013      	ands	r3, r2
 8001838:	d00a      	beq.n	8001850 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800183a:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <HAL_RCC_ClockConfig+0x278>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	4a1a      	ldr	r2, [pc, #104]	; (80018a8 <HAL_RCC_ClockConfig+0x280>)
 8001840:	4013      	ands	r3, r2
 8001842:	0019      	movs	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	00da      	lsls	r2, r3, #3
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <HAL_RCC_ClockConfig+0x278>)
 800184c:	430a      	orrs	r2, r1
 800184e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001850:	f000 f832 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 8001854:	0001      	movs	r1, r0
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_RCC_ClockConfig+0x278>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	091b      	lsrs	r3, r3, #4
 800185c:	220f      	movs	r2, #15
 800185e:	4013      	ands	r3, r2
 8001860:	4a12      	ldr	r2, [pc, #72]	; (80018ac <HAL_RCC_ClockConfig+0x284>)
 8001862:	5cd3      	ldrb	r3, [r2, r3]
 8001864:	000a      	movs	r2, r1
 8001866:	40da      	lsrs	r2, r3
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_RCC_ClockConfig+0x288>)
 800186a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <HAL_RCC_ClockConfig+0x28c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	250b      	movs	r5, #11
 8001872:	197c      	adds	r4, r7, r5
 8001874:	0018      	movs	r0, r3
 8001876:	f7fe ffe7 	bl	8000848 <HAL_InitTick>
 800187a:	0003      	movs	r3, r0
 800187c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800187e:	197b      	adds	r3, r7, r5
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001886:	197b      	adds	r3, r7, r5
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	e000      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	0018      	movs	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	b004      	add	sp, #16
 8001894:	bdb0      	pop	{r4, r5, r7, pc}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	40022000 	.word	0x40022000
 800189c:	00001388 	.word	0x00001388
 80018a0:	40021000 	.word	0x40021000
 80018a4:	fffff8ff 	.word	0xfffff8ff
 80018a8:	ffffc7ff 	.word	0xffffc7ff
 80018ac:	080035a8 	.word	0x080035a8
 80018b0:	20000000 	.word	0x20000000
 80018b4:	20000004 	.word	0x20000004

080018b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b8:	b5b0      	push	{r4, r5, r7, lr}
 80018ba:	b08e      	sub	sp, #56	; 0x38
 80018bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80018be:	4b4c      	ldr	r3, [pc, #304]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018c6:	230c      	movs	r3, #12
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b0c      	cmp	r3, #12
 80018cc:	d014      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x40>
 80018ce:	d900      	bls.n	80018d2 <HAL_RCC_GetSysClockFreq+0x1a>
 80018d0:	e07b      	b.n	80019ca <HAL_RCC_GetSysClockFreq+0x112>
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d002      	beq.n	80018dc <HAL_RCC_GetSysClockFreq+0x24>
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d00b      	beq.n	80018f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80018da:	e076      	b.n	80019ca <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018dc:	4b44      	ldr	r3, [pc, #272]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2210      	movs	r2, #16
 80018e2:	4013      	ands	r3, r2
 80018e4:	d002      	beq.n	80018ec <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80018e6:	4b43      	ldr	r3, [pc, #268]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80018e8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80018ea:	e07c      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80018ec:	4b42      	ldr	r3, [pc, #264]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x140>)
 80018ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018f0:	e079      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018f2:	4b42      	ldr	r3, [pc, #264]	; (80019fc <HAL_RCC_GetSysClockFreq+0x144>)
 80018f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018f6:	e076      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80018f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fa:	0c9a      	lsrs	r2, r3, #18
 80018fc:	230f      	movs	r3, #15
 80018fe:	401a      	ands	r2, r3
 8001900:	4b3f      	ldr	r3, [pc, #252]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x148>)
 8001902:	5c9b      	ldrb	r3, [r3, r2]
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001908:	0d9a      	lsrs	r2, r3, #22
 800190a:	2303      	movs	r3, #3
 800190c:	4013      	ands	r3, r2
 800190e:	3301      	adds	r3, #1
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001912:	4b37      	ldr	r3, [pc, #220]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	025b      	lsls	r3, r3, #9
 800191a:	4013      	ands	r3, r2
 800191c:	d01a      	beq.n	8001954 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800191e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	4a35      	ldr	r2, [pc, #212]	; (80019fc <HAL_RCC_GetSysClockFreq+0x144>)
 8001928:	2300      	movs	r3, #0
 800192a:	69b8      	ldr	r0, [r7, #24]
 800192c:	69f9      	ldr	r1, [r7, #28]
 800192e:	f7fe fc97 	bl	8000260 <__aeabi_lmul>
 8001932:	0002      	movs	r2, r0
 8001934:	000b      	movs	r3, r1
 8001936:	0010      	movs	r0, r2
 8001938:	0019      	movs	r1, r3
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f7fe fc6b 	bl	8000220 <__aeabi_uldivmod>
 800194a:	0002      	movs	r2, r0
 800194c:	000b      	movs	r3, r1
 800194e:	0013      	movs	r3, r2
 8001950:	637b      	str	r3, [r7, #52]	; 0x34
 8001952:	e037      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001954:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2210      	movs	r2, #16
 800195a:	4013      	ands	r3, r2
 800195c:	d01a      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800195e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4a23      	ldr	r2, [pc, #140]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001968:	2300      	movs	r3, #0
 800196a:	68b8      	ldr	r0, [r7, #8]
 800196c:	68f9      	ldr	r1, [r7, #12]
 800196e:	f7fe fc77 	bl	8000260 <__aeabi_lmul>
 8001972:	0002      	movs	r2, r0
 8001974:	000b      	movs	r3, r1
 8001976:	0010      	movs	r0, r2
 8001978:	0019      	movs	r1, r3
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f7fe fc4b 	bl	8000220 <__aeabi_uldivmod>
 800198a:	0002      	movs	r2, r0
 800198c:	000b      	movs	r3, r1
 800198e:	0013      	movs	r3, r2
 8001990:	637b      	str	r3, [r7, #52]	; 0x34
 8001992:	e017      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001996:	0018      	movs	r0, r3
 8001998:	2300      	movs	r3, #0
 800199a:	0019      	movs	r1, r3
 800199c:	4a16      	ldr	r2, [pc, #88]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x140>)
 800199e:	2300      	movs	r3, #0
 80019a0:	f7fe fc5e 	bl	8000260 <__aeabi_lmul>
 80019a4:	0002      	movs	r2, r0
 80019a6:	000b      	movs	r3, r1
 80019a8:	0010      	movs	r0, r2
 80019aa:	0019      	movs	r1, r3
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	001c      	movs	r4, r3
 80019b0:	2300      	movs	r3, #0
 80019b2:	001d      	movs	r5, r3
 80019b4:	0022      	movs	r2, r4
 80019b6:	002b      	movs	r3, r5
 80019b8:	f7fe fc32 	bl	8000220 <__aeabi_uldivmod>
 80019bc:	0002      	movs	r2, r0
 80019be:	000b      	movs	r3, r1
 80019c0:	0013      	movs	r3, r2
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80019c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019c8:	e00d      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	0b5b      	lsrs	r3, r3, #13
 80019d0:	2207      	movs	r2, #7
 80019d2:	4013      	ands	r3, r2
 80019d4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	3301      	adds	r3, #1
 80019da:	2280      	movs	r2, #128	; 0x80
 80019dc:	0212      	lsls	r2, r2, #8
 80019de:	409a      	lsls	r2, r3
 80019e0:	0013      	movs	r3, r2
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019e4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80019e8:	0018      	movs	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b00e      	add	sp, #56	; 0x38
 80019ee:	bdb0      	pop	{r4, r5, r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	003d0900 	.word	0x003d0900
 80019f8:	00f42400 	.word	0x00f42400
 80019fc:	007a1200 	.word	0x007a1200
 8001a00:	080035c0 	.word	0x080035c0

08001a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a08:	4b02      	ldr	r3, [pc, #8]	; (8001a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	20000000 	.word	0x20000000

08001a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a1c:	f7ff fff2 	bl	8001a04 <HAL_RCC_GetHCLKFreq>
 8001a20:	0001      	movs	r1, r0
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	2207      	movs	r2, #7
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a2e:	5cd3      	ldrb	r3, [r2, r3]
 8001a30:	40d9      	lsrs	r1, r3
 8001a32:	000b      	movs	r3, r1
}
 8001a34:	0018      	movs	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	080035b8 	.word	0x080035b8

08001a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a48:	f7ff ffdc 	bl	8001a04 <HAL_RCC_GetHCLKFreq>
 8001a4c:	0001      	movs	r1, r0
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	0adb      	lsrs	r3, r3, #11
 8001a54:	2207      	movs	r2, #7
 8001a56:	4013      	ands	r3, r2
 8001a58:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a5a:	5cd3      	ldrb	r3, [r2, r3]
 8001a5c:	40d9      	lsrs	r1, r3
 8001a5e:	000b      	movs	r3, r1
}
 8001a60:	0018      	movs	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	080035b8 	.word	0x080035b8

08001a70 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001a78:	2317      	movs	r3, #23
 8001a7a:	18fb      	adds	r3, r7, r3
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2220      	movs	r2, #32
 8001a86:	4013      	ands	r3, r2
 8001a88:	d106      	bne.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	4013      	ands	r3, r2
 8001a94:	d100      	bne.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001a96:	e104      	b.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a98:	4bb1      	ldr	r3, [pc, #708]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	055b      	lsls	r3, r3, #21
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d10a      	bne.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa4:	4bae      	ldr	r3, [pc, #696]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001aa8:	4bad      	ldr	r3, [pc, #692]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001aaa:	2180      	movs	r1, #128	; 0x80
 8001aac:	0549      	lsls	r1, r1, #21
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001ab2:	2317      	movs	r3, #23
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aba:	4baa      	ldr	r3, [pc, #680]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d11a      	bne.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac6:	4ba7      	ldr	r3, [pc, #668]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4ba6      	ldr	r3, [pc, #664]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001acc:	2180      	movs	r1, #128	; 0x80
 8001ace:	0049      	lsls	r1, r1, #1
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad4:	f7fe fefe 	bl	80008d4 <HAL_GetTick>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	e008      	b.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ade:	f7fe fef9 	bl	80008d4 <HAL_GetTick>
 8001ae2:	0002      	movs	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b64      	cmp	r3, #100	; 0x64
 8001aea:	d901      	bls.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e133      	b.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af0:	4b9c      	ldr	r3, [pc, #624]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4013      	ands	r3, r2
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001afc:	4b98      	ldr	r3, [pc, #608]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	23c0      	movs	r3, #192	; 0xc0
 8001b02:	039b      	lsls	r3, r3, #14
 8001b04:	4013      	ands	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	23c0      	movs	r3, #192	; 0xc0
 8001b0e:	039b      	lsls	r3, r3, #14
 8001b10:	4013      	ands	r3, r2
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d107      	bne.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	23c0      	movs	r3, #192	; 0xc0
 8001b1e:	039b      	lsls	r3, r3, #14
 8001b20:	4013      	ands	r3, r2
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d013      	beq.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	23c0      	movs	r3, #192	; 0xc0
 8001b2e:	029b      	lsls	r3, r3, #10
 8001b30:	401a      	ands	r2, r3
 8001b32:	23c0      	movs	r3, #192	; 0xc0
 8001b34:	029b      	lsls	r3, r3, #10
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d10a      	bne.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001b3a:	4b89      	ldr	r3, [pc, #548]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	029b      	lsls	r3, r3, #10
 8001b42:	401a      	ands	r2, r3
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	029b      	lsls	r3, r3, #10
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e103      	b.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001b50:	4b83      	ldr	r3, [pc, #524]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b54:	23c0      	movs	r3, #192	; 0xc0
 8001b56:	029b      	lsls	r3, r3, #10
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d049      	beq.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	23c0      	movs	r3, #192	; 0xc0
 8001b68:	029b      	lsls	r3, r3, #10
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d004      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2220      	movs	r2, #32
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d10d      	bne.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	23c0      	movs	r3, #192	; 0xc0
 8001b82:	029b      	lsls	r3, r3, #10
 8001b84:	4013      	ands	r3, r2
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d034      	beq.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	4013      	ands	r3, r2
 8001b96:	d02e      	beq.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001b98:	4b71      	ldr	r3, [pc, #452]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b9c:	4a72      	ldr	r2, [pc, #456]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ba2:	4b6f      	ldr	r3, [pc, #444]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ba4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ba6:	4b6e      	ldr	r3, [pc, #440]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ba8:	2180      	movs	r1, #128	; 0x80
 8001baa:	0309      	lsls	r1, r1, #12
 8001bac:	430a      	orrs	r2, r1
 8001bae:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bb0:	4b6b      	ldr	r3, [pc, #428]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bb4:	4b6a      	ldr	r3, [pc, #424]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bb6:	496d      	ldr	r1, [pc, #436]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001bb8:	400a      	ands	r2, r1
 8001bba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001bbc:	4b68      	ldr	r3, [pc, #416]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d014      	beq.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7fe fe82 	bl	80008d4 <HAL_GetTick>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bd4:	e009      	b.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd6:	f7fe fe7d 	bl	80008d4 <HAL_GetTick>
 8001bda:	0002      	movs	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	4a63      	ldr	r2, [pc, #396]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e0b6      	b.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bea:	4b5d      	ldr	r3, [pc, #372]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d0ef      	beq.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d01f      	beq.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	23c0      	movs	r3, #192	; 0xc0
 8001c08:	029b      	lsls	r3, r3, #10
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	23c0      	movs	r3, #192	; 0xc0
 8001c0e:	029b      	lsls	r3, r3, #10
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d10c      	bne.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001c14:	4b52      	ldr	r3, [pc, #328]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a56      	ldr	r2, [pc, #344]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	23c0      	movs	r3, #192	; 0xc0
 8001c24:	039b      	lsls	r3, r3, #14
 8001c26:	401a      	ands	r2, r3
 8001c28:	4b4d      	ldr	r3, [pc, #308]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	4b4c      	ldr	r3, [pc, #304]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c30:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	23c0      	movs	r3, #192	; 0xc0
 8001c38:	029b      	lsls	r3, r3, #10
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	4b48      	ldr	r3, [pc, #288]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2220      	movs	r2, #32
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d01f      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	23c0      	movs	r3, #192	; 0xc0
 8001c52:	029b      	lsls	r3, r3, #10
 8001c54:	401a      	ands	r2, r3
 8001c56:	23c0      	movs	r3, #192	; 0xc0
 8001c58:	029b      	lsls	r3, r3, #10
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001c5e:	4b40      	ldr	r3, [pc, #256]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a44      	ldr	r2, [pc, #272]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	0019      	movs	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	23c0      	movs	r3, #192	; 0xc0
 8001c6e:	039b      	lsls	r3, r3, #14
 8001c70:	401a      	ands	r2, r3
 8001c72:	4b3b      	ldr	r3, [pc, #236]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c74:	430a      	orrs	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	4b39      	ldr	r3, [pc, #228]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c7a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	23c0      	movs	r3, #192	; 0xc0
 8001c82:	029b      	lsls	r3, r3, #10
 8001c84:	401a      	ands	r2, r3
 8001c86:	4b36      	ldr	r3, [pc, #216]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c8c:	2317      	movs	r3, #23
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d105      	bne.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c96:	4b32      	ldr	r3, [pc, #200]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c9a:	4b31      	ldr	r3, [pc, #196]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c9c:	4936      	ldr	r1, [pc, #216]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d009      	beq.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cac:	4b2c      	ldr	r3, [pc, #176]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	4393      	bics	r3, r2
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d009      	beq.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cca:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cce:	220c      	movs	r2, #12
 8001cd0:	4393      	bics	r3, r2
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d009      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cec:	4a23      	ldr	r2, [pc, #140]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695a      	ldr	r2, [r3, #20]
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2208      	movs	r2, #8
 8001d02:	4013      	ands	r3, r2
 8001d04:	d009      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d06:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0a:	4a1d      	ldr	r2, [pc, #116]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	0019      	movs	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	699a      	ldr	r2, [r3, #24]
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d16:	430a      	orrs	r2, r1
 8001d18:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2240      	movs	r2, #64	; 0x40
 8001d20:	4013      	ands	r3, r2
 8001d22:	d009      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d24:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d28:	4a16      	ldr	r2, [pc, #88]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	0019      	movs	r1, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1a      	ldr	r2, [r3, #32]
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d34:	430a      	orrs	r2, r1
 8001d36:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2280      	movs	r2, #128	; 0x80
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d009      	beq.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	4a10      	ldr	r2, [pc, #64]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	0019      	movs	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69da      	ldr	r2, [r3, #28]
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d52:	430a      	orrs	r2, r1
 8001d54:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b006      	add	sp, #24
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40007000 	.word	0x40007000
 8001d68:	fffcffff 	.word	0xfffcffff
 8001d6c:	fff7ffff 	.word	0xfff7ffff
 8001d70:	00001388 	.word	0x00001388
 8001d74:	ffcfffff 	.word	0xffcfffff
 8001d78:	efffffff 	.word	0xefffffff
 8001d7c:	fffff3ff 	.word	0xfffff3ff
 8001d80:	ffffcfff 	.word	0xffffcfff
 8001d84:	fbffffff 	.word	0xfbffffff
 8001d88:	fff3ffff 	.word	0xfff3ffff

08001d8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e044      	b.n	8001e28 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d107      	bne.n	8001db6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2278      	movs	r2, #120	; 0x78
 8001daa:	2100      	movs	r1, #0
 8001dac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	0018      	movs	r0, r3
 8001db2:	f7fe fc89 	bl	80006c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2224      	movs	r2, #36	; 0x24
 8001dba:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	438a      	bics	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f000 fc2c 	bl	800262c <UART_SetConfig>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e024      	b.n	8001e28 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	0018      	movs	r0, r3
 8001dea:	f000 fea3 	bl	8002b34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	490d      	ldr	r1, [pc, #52]	; (8001e30 <HAL_UART_Init+0xa4>)
 8001dfa:	400a      	ands	r2, r1
 8001dfc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	212a      	movs	r1, #42	; 0x2a
 8001e0a:	438a      	bics	r2, r1
 8001e0c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2101      	movs	r1, #1
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	0018      	movs	r0, r3
 8001e22:	f000 ff3b 	bl	8002c9c <UART_CheckIdleState>
 8001e26:	0003      	movs	r3, r0
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b002      	add	sp, #8
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	ffffb7ff 	.word	0xffffb7ff

08001e34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	1dbb      	adds	r3, r7, #6
 8001e42:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e48:	2b20      	cmp	r3, #32
 8001e4a:	d000      	beq.n	8001e4e <HAL_UART_Transmit+0x1a>
 8001e4c:	e08c      	b.n	8001f68 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_UART_Transmit+0x28>
 8001e54:	1dbb      	adds	r3, r7, #6
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e084      	b.n	8001f6a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	015b      	lsls	r3, r3, #5
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d109      	bne.n	8001e80 <HAL_UART_Transmit+0x4c>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d105      	bne.n	8001e80 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2201      	movs	r2, #1
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d001      	beq.n	8001e80 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e074      	b.n	8001f6a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2284      	movs	r2, #132	; 0x84
 8001e84:	2100      	movs	r1, #0
 8001e86:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2221      	movs	r2, #33	; 0x21
 8001e8c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e8e:	f7fe fd21 	bl	80008d4 <HAL_GetTick>
 8001e92:	0003      	movs	r3, r0
 8001e94:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1dba      	adds	r2, r7, #6
 8001e9a:	2150      	movs	r1, #80	; 0x50
 8001e9c:	8812      	ldrh	r2, [r2, #0]
 8001e9e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1dba      	adds	r2, r7, #6
 8001ea4:	2152      	movs	r1, #82	; 0x52
 8001ea6:	8812      	ldrh	r2, [r2, #0]
 8001ea8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	015b      	lsls	r3, r3, #5
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d108      	bne.n	8001ec8 <HAL_UART_Transmit+0x94>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d104      	bne.n	8001ec8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	61bb      	str	r3, [r7, #24]
 8001ec6:	e003      	b.n	8001ed0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ed0:	e02f      	b.n	8001f32 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	0013      	movs	r3, r2
 8001edc:	2200      	movs	r2, #0
 8001ede:	2180      	movs	r1, #128	; 0x80
 8001ee0:	f000 ff84 	bl	8002dec <UART_WaitOnFlagUntilTimeout>
 8001ee4:	1e03      	subs	r3, r0, #0
 8001ee6:	d004      	beq.n	8001ef2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2220      	movs	r2, #32
 8001eec:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e03b      	b.n	8001f6a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10b      	bne.n	8001f10 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	001a      	movs	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	05d2      	lsls	r2, r2, #23
 8001f04:	0dd2      	lsrs	r2, r2, #23
 8001f06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	61bb      	str	r3, [r7, #24]
 8001f0e:	e007      	b.n	8001f20 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	781a      	ldrb	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2252      	movs	r2, #82	; 0x52
 8001f24:	5a9b      	ldrh	r3, [r3, r2]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b299      	uxth	r1, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2252      	movs	r2, #82	; 0x52
 8001f30:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2252      	movs	r2, #82	; 0x52
 8001f36:	5a9b      	ldrh	r3, [r3, r2]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1c9      	bne.n	8001ed2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	0013      	movs	r3, r2
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2140      	movs	r1, #64	; 0x40
 8001f4c:	f000 ff4e 	bl	8002dec <UART_WaitOnFlagUntilTimeout>
 8001f50:	1e03      	subs	r3, r0, #0
 8001f52:	d004      	beq.n	8001f5e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2220      	movs	r2, #32
 8001f58:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e005      	b.n	8001f6a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2220      	movs	r2, #32
 8001f62:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	e000      	b.n	8001f6a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8001f68:	2302      	movs	r3, #2
  }
}
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b008      	add	sp, #32
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	1dbb      	adds	r3, r7, #6
 8001f80:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2280      	movs	r2, #128	; 0x80
 8001f86:	589b      	ldr	r3, [r3, r2]
 8001f88:	2b20      	cmp	r3, #32
 8001f8a:	d14a      	bne.n	8002022 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_UART_Receive_IT+0x26>
 8001f92:	1dbb      	adds	r3, r7, #6
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e042      	b.n	8002024 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	015b      	lsls	r3, r3, #5
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d109      	bne.n	8001fbe <HAL_UART_Receive_IT+0x4a>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d105      	bne.n	8001fbe <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d001      	beq.n	8001fbe <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e032      	b.n	8002024 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a18      	ldr	r2, [pc, #96]	; (800202c <HAL_UART_Receive_IT+0xb8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d020      	beq.n	8002010 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	041b      	lsls	r3, r3, #16
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d019      	beq.n	8002010 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fdc:	f3ef 8310 	mrs	r3, PRIMASK
 8001fe0:	613b      	str	r3, [r7, #16]
  return(result);
 8001fe2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f383 8810 	msr	PRIMASK, r3
}
 8001ff0:	46c0      	nop			; (mov r8, r8)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2180      	movs	r1, #128	; 0x80
 8001ffe:	04c9      	lsls	r1, r1, #19
 8002000:	430a      	orrs	r2, r1
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	f383 8810 	msr	PRIMASK, r3
}
 800200e:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002010:	1dbb      	adds	r3, r7, #6
 8002012:	881a      	ldrh	r2, [r3, #0]
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	0018      	movs	r0, r3
 800201a:	f000 ff51 	bl	8002ec0 <UART_Start_Receive_IT>
 800201e:	0003      	movs	r3, r0
 8002020:	e000      	b.n	8002024 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8002022:	2302      	movs	r3, #2
  }
}
 8002024:	0018      	movs	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	b008      	add	sp, #32
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40004800 	.word	0x40004800

08002030 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b0ab      	sub	sp, #172	; 0xac
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	22a4      	movs	r2, #164	; 0xa4
 8002040:	18b9      	adds	r1, r7, r2
 8002042:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	20a0      	movs	r0, #160	; 0xa0
 800204c:	1839      	adds	r1, r7, r0
 800204e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	219c      	movs	r1, #156	; 0x9c
 8002058:	1879      	adds	r1, r7, r1
 800205a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800205c:	0011      	movs	r1, r2
 800205e:	18bb      	adds	r3, r7, r2
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a99      	ldr	r2, [pc, #612]	; (80022c8 <HAL_UART_IRQHandler+0x298>)
 8002064:	4013      	ands	r3, r2
 8002066:	2298      	movs	r2, #152	; 0x98
 8002068:	18bc      	adds	r4, r7, r2
 800206a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800206c:	18bb      	adds	r3, r7, r2
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d114      	bne.n	800209e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002074:	187b      	adds	r3, r7, r1
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2220      	movs	r2, #32
 800207a:	4013      	ands	r3, r2
 800207c:	d00f      	beq.n	800209e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800207e:	183b      	adds	r3, r7, r0
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2220      	movs	r2, #32
 8002084:	4013      	ands	r3, r2
 8002086:	d00a      	beq.n	800209e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800208c:	2b00      	cmp	r3, #0
 800208e:	d100      	bne.n	8002092 <HAL_UART_IRQHandler+0x62>
 8002090:	e2a0      	b.n	80025d4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	0010      	movs	r0, r2
 800209a:	4798      	blx	r3
      }
      return;
 800209c:	e29a      	b.n	80025d4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800209e:	2398      	movs	r3, #152	; 0x98
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d100      	bne.n	80020aa <HAL_UART_IRQHandler+0x7a>
 80020a8:	e114      	b.n	80022d4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80020aa:	239c      	movs	r3, #156	; 0x9c
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2201      	movs	r2, #1
 80020b2:	4013      	ands	r3, r2
 80020b4:	d106      	bne.n	80020c4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80020b6:	23a0      	movs	r3, #160	; 0xa0
 80020b8:	18fb      	adds	r3, r7, r3
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a83      	ldr	r2, [pc, #524]	; (80022cc <HAL_UART_IRQHandler+0x29c>)
 80020be:	4013      	ands	r3, r2
 80020c0:	d100      	bne.n	80020c4 <HAL_UART_IRQHandler+0x94>
 80020c2:	e107      	b.n	80022d4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80020c4:	23a4      	movs	r3, #164	; 0xa4
 80020c6:	18fb      	adds	r3, r7, r3
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2201      	movs	r2, #1
 80020cc:	4013      	ands	r3, r2
 80020ce:	d012      	beq.n	80020f6 <HAL_UART_IRQHandler+0xc6>
 80020d0:	23a0      	movs	r3, #160	; 0xa0
 80020d2:	18fb      	adds	r3, r7, r3
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4013      	ands	r3, r2
 80020dc:	d00b      	beq.n	80020f6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2201      	movs	r2, #1
 80020e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2284      	movs	r2, #132	; 0x84
 80020ea:	589b      	ldr	r3, [r3, r2]
 80020ec:	2201      	movs	r2, #1
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2184      	movs	r1, #132	; 0x84
 80020f4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80020f6:	23a4      	movs	r3, #164	; 0xa4
 80020f8:	18fb      	adds	r3, r7, r3
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2202      	movs	r2, #2
 80020fe:	4013      	ands	r3, r2
 8002100:	d011      	beq.n	8002126 <HAL_UART_IRQHandler+0xf6>
 8002102:	239c      	movs	r3, #156	; 0x9c
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2201      	movs	r2, #1
 800210a:	4013      	ands	r3, r2
 800210c:	d00b      	beq.n	8002126 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2202      	movs	r2, #2
 8002114:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2284      	movs	r2, #132	; 0x84
 800211a:	589b      	ldr	r3, [r3, r2]
 800211c:	2204      	movs	r2, #4
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2184      	movs	r1, #132	; 0x84
 8002124:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002126:	23a4      	movs	r3, #164	; 0xa4
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2204      	movs	r2, #4
 800212e:	4013      	ands	r3, r2
 8002130:	d011      	beq.n	8002156 <HAL_UART_IRQHandler+0x126>
 8002132:	239c      	movs	r3, #156	; 0x9c
 8002134:	18fb      	adds	r3, r7, r3
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2201      	movs	r2, #1
 800213a:	4013      	ands	r3, r2
 800213c:	d00b      	beq.n	8002156 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2204      	movs	r2, #4
 8002144:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2284      	movs	r2, #132	; 0x84
 800214a:	589b      	ldr	r3, [r3, r2]
 800214c:	2202      	movs	r2, #2
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2184      	movs	r1, #132	; 0x84
 8002154:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002156:	23a4      	movs	r3, #164	; 0xa4
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2208      	movs	r2, #8
 800215e:	4013      	ands	r3, r2
 8002160:	d017      	beq.n	8002192 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002162:	23a0      	movs	r3, #160	; 0xa0
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2220      	movs	r2, #32
 800216a:	4013      	ands	r3, r2
 800216c:	d105      	bne.n	800217a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800216e:	239c      	movs	r3, #156	; 0x9c
 8002170:	18fb      	adds	r3, r7, r3
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2201      	movs	r2, #1
 8002176:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002178:	d00b      	beq.n	8002192 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2208      	movs	r2, #8
 8002180:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2284      	movs	r2, #132	; 0x84
 8002186:	589b      	ldr	r3, [r3, r2]
 8002188:	2208      	movs	r2, #8
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2184      	movs	r1, #132	; 0x84
 8002190:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002192:	23a4      	movs	r3, #164	; 0xa4
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	4013      	ands	r3, r2
 800219e:	d013      	beq.n	80021c8 <HAL_UART_IRQHandler+0x198>
 80021a0:	23a0      	movs	r3, #160	; 0xa0
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	04db      	lsls	r3, r3, #19
 80021aa:	4013      	ands	r3, r2
 80021ac:	d00c      	beq.n	80021c8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2280      	movs	r2, #128	; 0x80
 80021b4:	0112      	lsls	r2, r2, #4
 80021b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2284      	movs	r2, #132	; 0x84
 80021bc:	589b      	ldr	r3, [r3, r2]
 80021be:	2220      	movs	r2, #32
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2184      	movs	r1, #132	; 0x84
 80021c6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2284      	movs	r2, #132	; 0x84
 80021cc:	589b      	ldr	r3, [r3, r2]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d100      	bne.n	80021d4 <HAL_UART_IRQHandler+0x1a4>
 80021d2:	e201      	b.n	80025d8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80021d4:	23a4      	movs	r3, #164	; 0xa4
 80021d6:	18fb      	adds	r3, r7, r3
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2220      	movs	r2, #32
 80021dc:	4013      	ands	r3, r2
 80021de:	d00e      	beq.n	80021fe <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80021e0:	23a0      	movs	r3, #160	; 0xa0
 80021e2:	18fb      	adds	r3, r7, r3
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2220      	movs	r2, #32
 80021e8:	4013      	ands	r3, r2
 80021ea:	d008      	beq.n	80021fe <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d004      	beq.n	80021fe <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	0010      	movs	r0, r2
 80021fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2284      	movs	r2, #132	; 0x84
 8002202:	589b      	ldr	r3, [r3, r2]
 8002204:	2194      	movs	r1, #148	; 0x94
 8002206:	187a      	adds	r2, r7, r1
 8002208:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2240      	movs	r2, #64	; 0x40
 8002212:	4013      	ands	r3, r2
 8002214:	2b40      	cmp	r3, #64	; 0x40
 8002216:	d004      	beq.n	8002222 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002218:	187b      	adds	r3, r7, r1
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2228      	movs	r2, #40	; 0x28
 800221e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002220:	d047      	beq.n	80022b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	0018      	movs	r0, r3
 8002226:	f000 ff15 	bl	8003054 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2240      	movs	r2, #64	; 0x40
 8002232:	4013      	ands	r3, r2
 8002234:	2b40      	cmp	r3, #64	; 0x40
 8002236:	d137      	bne.n	80022a8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002238:	f3ef 8310 	mrs	r3, PRIMASK
 800223c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800223e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002240:	2090      	movs	r0, #144	; 0x90
 8002242:	183a      	adds	r2, r7, r0
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	2301      	movs	r3, #1
 8002248:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800224a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800224c:	f383 8810 	msr	PRIMASK, r3
}
 8002250:	46c0      	nop			; (mov r8, r8)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2140      	movs	r1, #64	; 0x40
 800225e:	438a      	bics	r2, r1
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	183b      	adds	r3, r7, r0
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002268:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800226a:	f383 8810 	msr	PRIMASK, r3
}
 800226e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002274:	2b00      	cmp	r3, #0
 8002276:	d012      	beq.n	800229e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800227c:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <HAL_UART_IRQHandler+0x2a0>)
 800227e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002284:	0018      	movs	r0, r3
 8002286:	f7fe fc4d 	bl	8000b24 <HAL_DMA_Abort_IT>
 800228a:	1e03      	subs	r3, r0, #0
 800228c:	d01a      	beq.n	80022c4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002298:	0018      	movs	r0, r3
 800229a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800229c:	e012      	b.n	80022c4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f000 f9af 	bl	8002604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022a6:	e00d      	b.n	80022c4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	0018      	movs	r0, r3
 80022ac:	f000 f9aa 	bl	8002604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022b0:	e008      	b.n	80022c4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	0018      	movs	r0, r3
 80022b6:	f000 f9a5 	bl	8002604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2284      	movs	r2, #132	; 0x84
 80022be:	2100      	movs	r1, #0
 80022c0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80022c2:	e189      	b.n	80025d8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022c4:	46c0      	nop			; (mov r8, r8)
    return;
 80022c6:	e187      	b.n	80025d8 <HAL_UART_IRQHandler+0x5a8>
 80022c8:	0000080f 	.word	0x0000080f
 80022cc:	04000120 	.word	0x04000120
 80022d0:	0800311d 	.word	0x0800311d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d000      	beq.n	80022de <HAL_UART_IRQHandler+0x2ae>
 80022dc:	e13b      	b.n	8002556 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80022de:	23a4      	movs	r3, #164	; 0xa4
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2210      	movs	r2, #16
 80022e6:	4013      	ands	r3, r2
 80022e8:	d100      	bne.n	80022ec <HAL_UART_IRQHandler+0x2bc>
 80022ea:	e134      	b.n	8002556 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80022ec:	23a0      	movs	r3, #160	; 0xa0
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2210      	movs	r2, #16
 80022f4:	4013      	ands	r3, r2
 80022f6:	d100      	bne.n	80022fa <HAL_UART_IRQHandler+0x2ca>
 80022f8:	e12d      	b.n	8002556 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2210      	movs	r2, #16
 8002300:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2240      	movs	r2, #64	; 0x40
 800230a:	4013      	ands	r3, r2
 800230c:	2b40      	cmp	r3, #64	; 0x40
 800230e:	d000      	beq.n	8002312 <HAL_UART_IRQHandler+0x2e2>
 8002310:	e0a1      	b.n	8002456 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	217e      	movs	r1, #126	; 0x7e
 800231c:	187b      	adds	r3, r7, r1
 800231e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002320:	187b      	adds	r3, r7, r1
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d100      	bne.n	800232a <HAL_UART_IRQHandler+0x2fa>
 8002328:	e158      	b.n	80025dc <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2258      	movs	r2, #88	; 0x58
 800232e:	5a9b      	ldrh	r3, [r3, r2]
 8002330:	187a      	adds	r2, r7, r1
 8002332:	8812      	ldrh	r2, [r2, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d300      	bcc.n	800233a <HAL_UART_IRQHandler+0x30a>
 8002338:	e150      	b.n	80025dc <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	187a      	adds	r2, r7, r1
 800233e:	215a      	movs	r1, #90	; 0x5a
 8002340:	8812      	ldrh	r2, [r2, #0]
 8002342:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2220      	movs	r2, #32
 800234e:	4013      	ands	r3, r2
 8002350:	d16f      	bne.n	8002432 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002352:	f3ef 8310 	mrs	r3, PRIMASK
 8002356:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800235a:	67bb      	str	r3, [r7, #120]	; 0x78
 800235c:	2301      	movs	r3, #1
 800235e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002362:	f383 8810 	msr	PRIMASK, r3
}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	499e      	ldr	r1, [pc, #632]	; (80025ec <HAL_UART_IRQHandler+0x5bc>)
 8002374:	400a      	ands	r2, r1
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800237a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800237c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237e:	f383 8810 	msr	PRIMASK, r3
}
 8002382:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002384:	f3ef 8310 	mrs	r3, PRIMASK
 8002388:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800238a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800238c:	677b      	str	r3, [r7, #116]	; 0x74
 800238e:	2301      	movs	r3, #1
 8002390:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002394:	f383 8810 	msr	PRIMASK, r3
}
 8002398:	46c0      	nop			; (mov r8, r8)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2101      	movs	r1, #1
 80023a6:	438a      	bics	r2, r1
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ac:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023b0:	f383 8810 	msr	PRIMASK, r3
}
 80023b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023b6:	f3ef 8310 	mrs	r3, PRIMASK
 80023ba:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80023bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023be:	673b      	str	r3, [r7, #112]	; 0x70
 80023c0:	2301      	movs	r3, #1
 80023c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023c6:	f383 8810 	msr	PRIMASK, r3
}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2140      	movs	r1, #64	; 0x40
 80023d8:	438a      	bics	r2, r1
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023de:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023e2:	f383 8810 	msr	PRIMASK, r3
}
 80023e6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2280      	movs	r2, #128	; 0x80
 80023ec:	2120      	movs	r1, #32
 80023ee:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023f6:	f3ef 8310 	mrs	r3, PRIMASK
 80023fa:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80023fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002400:	2301      	movs	r3, #1
 8002402:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002404:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002406:	f383 8810 	msr	PRIMASK, r3
}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2110      	movs	r1, #16
 8002418:	438a      	bics	r2, r1
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800241e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002422:	f383 8810 	msr	PRIMASK, r3
}
 8002426:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800242c:	0018      	movs	r0, r3
 800242e:	f7fe fb39 	bl	8000aa4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2202      	movs	r2, #2
 8002436:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2258      	movs	r2, #88	; 0x58
 800243c:	5a9a      	ldrh	r2, [r3, r2]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	215a      	movs	r1, #90	; 0x5a
 8002442:	5a5b      	ldrh	r3, [r3, r1]
 8002444:	b29b      	uxth	r3, r3
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	b29a      	uxth	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	0011      	movs	r1, r2
 800244e:	0018      	movs	r0, r3
 8002450:	f000 f8e0 	bl	8002614 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002454:	e0c2      	b.n	80025dc <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2258      	movs	r2, #88	; 0x58
 800245a:	5a99      	ldrh	r1, [r3, r2]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	225a      	movs	r2, #90	; 0x5a
 8002460:	5a9b      	ldrh	r3, [r3, r2]
 8002462:	b29a      	uxth	r2, r3
 8002464:	208e      	movs	r0, #142	; 0x8e
 8002466:	183b      	adds	r3, r7, r0
 8002468:	1a8a      	subs	r2, r1, r2
 800246a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	225a      	movs	r2, #90	; 0x5a
 8002470:	5a9b      	ldrh	r3, [r3, r2]
 8002472:	b29b      	uxth	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d100      	bne.n	800247a <HAL_UART_IRQHandler+0x44a>
 8002478:	e0b2      	b.n	80025e0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800247a:	183b      	adds	r3, r7, r0
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d100      	bne.n	8002484 <HAL_UART_IRQHandler+0x454>
 8002482:	e0ad      	b.n	80025e0 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002484:	f3ef 8310 	mrs	r3, PRIMASK
 8002488:	60fb      	str	r3, [r7, #12]
  return(result);
 800248a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800248c:	2488      	movs	r4, #136	; 0x88
 800248e:	193a      	adds	r2, r7, r4
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	2301      	movs	r3, #1
 8002494:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f383 8810 	msr	PRIMASK, r3
}
 800249c:	46c0      	nop			; (mov r8, r8)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4951      	ldr	r1, [pc, #324]	; (80025f0 <HAL_UART_IRQHandler+0x5c0>)
 80024aa:	400a      	ands	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	193b      	adds	r3, r7, r4
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f383 8810 	msr	PRIMASK, r3
}
 80024ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024bc:	f3ef 8310 	mrs	r3, PRIMASK
 80024c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80024c2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024c4:	2484      	movs	r4, #132	; 0x84
 80024c6:	193a      	adds	r2, r7, r4
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	2301      	movs	r3, #1
 80024cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f383 8810 	msr	PRIMASK, r3
}
 80024d4:	46c0      	nop			; (mov r8, r8)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2101      	movs	r1, #1
 80024e2:	438a      	bics	r2, r1
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	193b      	adds	r3, r7, r4
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	f383 8810 	msr	PRIMASK, r3
}
 80024f2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2280      	movs	r2, #128	; 0x80
 80024f8:	2120      	movs	r1, #32
 80024fa:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002508:	f3ef 8310 	mrs	r3, PRIMASK
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002510:	2480      	movs	r4, #128	; 0x80
 8002512:	193a      	adds	r2, r7, r4
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	2301      	movs	r3, #1
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800251a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251c:	f383 8810 	msr	PRIMASK, r3
}
 8002520:	46c0      	nop			; (mov r8, r8)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2110      	movs	r1, #16
 800252e:	438a      	bics	r2, r1
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	193b      	adds	r3, r7, r4
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253a:	f383 8810 	msr	PRIMASK, r3
}
 800253e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002546:	183b      	adds	r3, r7, r0
 8002548:	881a      	ldrh	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	0011      	movs	r1, r2
 800254e:	0018      	movs	r0, r3
 8002550:	f000 f860 	bl	8002614 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002554:	e044      	b.n	80025e0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002556:	23a4      	movs	r3, #164	; 0xa4
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	035b      	lsls	r3, r3, #13
 8002560:	4013      	ands	r3, r2
 8002562:	d010      	beq.n	8002586 <HAL_UART_IRQHandler+0x556>
 8002564:	239c      	movs	r3, #156	; 0x9c
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	03db      	lsls	r3, r3, #15
 800256e:	4013      	ands	r3, r2
 8002570:	d009      	beq.n	8002586 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2280      	movs	r2, #128	; 0x80
 8002578:	0352      	lsls	r2, r2, #13
 800257a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	0018      	movs	r0, r3
 8002580:	f000 ffd2 	bl	8003528 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002584:	e02f      	b.n	80025e6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002586:	23a4      	movs	r3, #164	; 0xa4
 8002588:	18fb      	adds	r3, r7, r3
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2280      	movs	r2, #128	; 0x80
 800258e:	4013      	ands	r3, r2
 8002590:	d00f      	beq.n	80025b2 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002592:	23a0      	movs	r3, #160	; 0xa0
 8002594:	18fb      	adds	r3, r7, r3
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2280      	movs	r2, #128	; 0x80
 800259a:	4013      	ands	r3, r2
 800259c:	d009      	beq.n	80025b2 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d01e      	beq.n	80025e4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	0010      	movs	r0, r2
 80025ae:	4798      	blx	r3
    }
    return;
 80025b0:	e018      	b.n	80025e4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80025b2:	23a4      	movs	r3, #164	; 0xa4
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2240      	movs	r2, #64	; 0x40
 80025ba:	4013      	ands	r3, r2
 80025bc:	d013      	beq.n	80025e6 <HAL_UART_IRQHandler+0x5b6>
 80025be:	23a0      	movs	r3, #160	; 0xa0
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2240      	movs	r2, #64	; 0x40
 80025c6:	4013      	ands	r3, r2
 80025c8:	d00d      	beq.n	80025e6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	0018      	movs	r0, r3
 80025ce:	f000 fdbc 	bl	800314a <UART_EndTransmit_IT>
    return;
 80025d2:	e008      	b.n	80025e6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80025d4:	46c0      	nop			; (mov r8, r8)
 80025d6:	e006      	b.n	80025e6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80025d8:	46c0      	nop			; (mov r8, r8)
 80025da:	e004      	b.n	80025e6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	e002      	b.n	80025e6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	e000      	b.n	80025e6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80025e4:	46c0      	nop			; (mov r8, r8)
  }

}
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b02b      	add	sp, #172	; 0xac
 80025ea:	bd90      	pop	{r4, r7, pc}
 80025ec:	fffffeff 	.word	0xfffffeff
 80025f0:	fffffedf 	.word	0xfffffedf

080025f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80025fc:	46c0      	nop			; (mov r8, r8)
 80025fe:	46bd      	mov	sp, r7
 8002600:	b002      	add	sp, #8
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800260c:	46c0      	nop			; (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b002      	add	sp, #8
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	000a      	movs	r2, r1
 800261e:	1cbb      	adds	r3, r7, #2
 8002620:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	46bd      	mov	sp, r7
 8002626:	b002      	add	sp, #8
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800262c:	b5b0      	push	{r4, r5, r7, lr}
 800262e:	b08e      	sub	sp, #56	; 0x38
 8002630:	af00      	add	r7, sp, #0
 8002632:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002634:	231a      	movs	r3, #26
 8002636:	2218      	movs	r2, #24
 8002638:	189b      	adds	r3, r3, r2
 800263a:	19db      	adds	r3, r3, r7
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	431a      	orrs	r2, r3
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	431a      	orrs	r2, r3
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	4313      	orrs	r3, r2
 8002656:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4ac6      	ldr	r2, [pc, #792]	; (8002978 <UART_SetConfig+0x34c>)
 8002660:	4013      	ands	r3, r2
 8002662:	0019      	movs	r1, r3
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800266a:	430a      	orrs	r2, r1
 800266c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4ac1      	ldr	r2, [pc, #772]	; (800297c <UART_SetConfig+0x350>)
 8002676:	4013      	ands	r3, r2
 8002678:	0019      	movs	r1, r3
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4abb      	ldr	r2, [pc, #748]	; (8002980 <UART_SetConfig+0x354>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d004      	beq.n	80026a0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800269c:	4313      	orrs	r3, r2
 800269e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	4ab7      	ldr	r2, [pc, #732]	; (8002984 <UART_SetConfig+0x358>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	0019      	movs	r1, r3
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026b2:	430a      	orrs	r2, r1
 80026b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4ab3      	ldr	r2, [pc, #716]	; (8002988 <UART_SetConfig+0x35c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d131      	bne.n	8002724 <UART_SetConfig+0xf8>
 80026c0:	4bb2      	ldr	r3, [pc, #712]	; (800298c <UART_SetConfig+0x360>)
 80026c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c4:	2203      	movs	r2, #3
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d01d      	beq.n	8002708 <UART_SetConfig+0xdc>
 80026cc:	d823      	bhi.n	8002716 <UART_SetConfig+0xea>
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d00c      	beq.n	80026ec <UART_SetConfig+0xc0>
 80026d2:	d820      	bhi.n	8002716 <UART_SetConfig+0xea>
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <UART_SetConfig+0xb2>
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d00e      	beq.n	80026fa <UART_SetConfig+0xce>
 80026dc:	e01b      	b.n	8002716 <UART_SetConfig+0xea>
 80026de:	231b      	movs	r3, #27
 80026e0:	2218      	movs	r2, #24
 80026e2:	189b      	adds	r3, r3, r2
 80026e4:	19db      	adds	r3, r3, r7
 80026e6:	2201      	movs	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
 80026ea:	e09c      	b.n	8002826 <UART_SetConfig+0x1fa>
 80026ec:	231b      	movs	r3, #27
 80026ee:	2218      	movs	r2, #24
 80026f0:	189b      	adds	r3, r3, r2
 80026f2:	19db      	adds	r3, r3, r7
 80026f4:	2202      	movs	r2, #2
 80026f6:	701a      	strb	r2, [r3, #0]
 80026f8:	e095      	b.n	8002826 <UART_SetConfig+0x1fa>
 80026fa:	231b      	movs	r3, #27
 80026fc:	2218      	movs	r2, #24
 80026fe:	189b      	adds	r3, r3, r2
 8002700:	19db      	adds	r3, r3, r7
 8002702:	2204      	movs	r2, #4
 8002704:	701a      	strb	r2, [r3, #0]
 8002706:	e08e      	b.n	8002826 <UART_SetConfig+0x1fa>
 8002708:	231b      	movs	r3, #27
 800270a:	2218      	movs	r2, #24
 800270c:	189b      	adds	r3, r3, r2
 800270e:	19db      	adds	r3, r3, r7
 8002710:	2208      	movs	r2, #8
 8002712:	701a      	strb	r2, [r3, #0]
 8002714:	e087      	b.n	8002826 <UART_SetConfig+0x1fa>
 8002716:	231b      	movs	r3, #27
 8002718:	2218      	movs	r2, #24
 800271a:	189b      	adds	r3, r3, r2
 800271c:	19db      	adds	r3, r3, r7
 800271e:	2210      	movs	r2, #16
 8002720:	701a      	strb	r2, [r3, #0]
 8002722:	e080      	b.n	8002826 <UART_SetConfig+0x1fa>
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a99      	ldr	r2, [pc, #612]	; (8002990 <UART_SetConfig+0x364>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d131      	bne.n	8002792 <UART_SetConfig+0x166>
 800272e:	4b97      	ldr	r3, [pc, #604]	; (800298c <UART_SetConfig+0x360>)
 8002730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002732:	220c      	movs	r2, #12
 8002734:	4013      	ands	r3, r2
 8002736:	2b0c      	cmp	r3, #12
 8002738:	d01d      	beq.n	8002776 <UART_SetConfig+0x14a>
 800273a:	d823      	bhi.n	8002784 <UART_SetConfig+0x158>
 800273c:	2b08      	cmp	r3, #8
 800273e:	d00c      	beq.n	800275a <UART_SetConfig+0x12e>
 8002740:	d820      	bhi.n	8002784 <UART_SetConfig+0x158>
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <UART_SetConfig+0x120>
 8002746:	2b04      	cmp	r3, #4
 8002748:	d00e      	beq.n	8002768 <UART_SetConfig+0x13c>
 800274a:	e01b      	b.n	8002784 <UART_SetConfig+0x158>
 800274c:	231b      	movs	r3, #27
 800274e:	2218      	movs	r2, #24
 8002750:	189b      	adds	r3, r3, r2
 8002752:	19db      	adds	r3, r3, r7
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	e065      	b.n	8002826 <UART_SetConfig+0x1fa>
 800275a:	231b      	movs	r3, #27
 800275c:	2218      	movs	r2, #24
 800275e:	189b      	adds	r3, r3, r2
 8002760:	19db      	adds	r3, r3, r7
 8002762:	2202      	movs	r2, #2
 8002764:	701a      	strb	r2, [r3, #0]
 8002766:	e05e      	b.n	8002826 <UART_SetConfig+0x1fa>
 8002768:	231b      	movs	r3, #27
 800276a:	2218      	movs	r2, #24
 800276c:	189b      	adds	r3, r3, r2
 800276e:	19db      	adds	r3, r3, r7
 8002770:	2204      	movs	r2, #4
 8002772:	701a      	strb	r2, [r3, #0]
 8002774:	e057      	b.n	8002826 <UART_SetConfig+0x1fa>
 8002776:	231b      	movs	r3, #27
 8002778:	2218      	movs	r2, #24
 800277a:	189b      	adds	r3, r3, r2
 800277c:	19db      	adds	r3, r3, r7
 800277e:	2208      	movs	r2, #8
 8002780:	701a      	strb	r2, [r3, #0]
 8002782:	e050      	b.n	8002826 <UART_SetConfig+0x1fa>
 8002784:	231b      	movs	r3, #27
 8002786:	2218      	movs	r2, #24
 8002788:	189b      	adds	r3, r3, r2
 800278a:	19db      	adds	r3, r3, r7
 800278c:	2210      	movs	r2, #16
 800278e:	701a      	strb	r2, [r3, #0]
 8002790:	e049      	b.n	8002826 <UART_SetConfig+0x1fa>
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a7a      	ldr	r2, [pc, #488]	; (8002980 <UART_SetConfig+0x354>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d13e      	bne.n	800281a <UART_SetConfig+0x1ee>
 800279c:	4b7b      	ldr	r3, [pc, #492]	; (800298c <UART_SetConfig+0x360>)
 800279e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027a0:	23c0      	movs	r3, #192	; 0xc0
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	4013      	ands	r3, r2
 80027a6:	22c0      	movs	r2, #192	; 0xc0
 80027a8:	0112      	lsls	r2, r2, #4
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d027      	beq.n	80027fe <UART_SetConfig+0x1d2>
 80027ae:	22c0      	movs	r2, #192	; 0xc0
 80027b0:	0112      	lsls	r2, r2, #4
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d82a      	bhi.n	800280c <UART_SetConfig+0x1e0>
 80027b6:	2280      	movs	r2, #128	; 0x80
 80027b8:	0112      	lsls	r2, r2, #4
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d011      	beq.n	80027e2 <UART_SetConfig+0x1b6>
 80027be:	2280      	movs	r2, #128	; 0x80
 80027c0:	0112      	lsls	r2, r2, #4
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d822      	bhi.n	800280c <UART_SetConfig+0x1e0>
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d004      	beq.n	80027d4 <UART_SetConfig+0x1a8>
 80027ca:	2280      	movs	r2, #128	; 0x80
 80027cc:	00d2      	lsls	r2, r2, #3
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00e      	beq.n	80027f0 <UART_SetConfig+0x1c4>
 80027d2:	e01b      	b.n	800280c <UART_SetConfig+0x1e0>
 80027d4:	231b      	movs	r3, #27
 80027d6:	2218      	movs	r2, #24
 80027d8:	189b      	adds	r3, r3, r2
 80027da:	19db      	adds	r3, r3, r7
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	e021      	b.n	8002826 <UART_SetConfig+0x1fa>
 80027e2:	231b      	movs	r3, #27
 80027e4:	2218      	movs	r2, #24
 80027e6:	189b      	adds	r3, r3, r2
 80027e8:	19db      	adds	r3, r3, r7
 80027ea:	2202      	movs	r2, #2
 80027ec:	701a      	strb	r2, [r3, #0]
 80027ee:	e01a      	b.n	8002826 <UART_SetConfig+0x1fa>
 80027f0:	231b      	movs	r3, #27
 80027f2:	2218      	movs	r2, #24
 80027f4:	189b      	adds	r3, r3, r2
 80027f6:	19db      	adds	r3, r3, r7
 80027f8:	2204      	movs	r2, #4
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	e013      	b.n	8002826 <UART_SetConfig+0x1fa>
 80027fe:	231b      	movs	r3, #27
 8002800:	2218      	movs	r2, #24
 8002802:	189b      	adds	r3, r3, r2
 8002804:	19db      	adds	r3, r3, r7
 8002806:	2208      	movs	r2, #8
 8002808:	701a      	strb	r2, [r3, #0]
 800280a:	e00c      	b.n	8002826 <UART_SetConfig+0x1fa>
 800280c:	231b      	movs	r3, #27
 800280e:	2218      	movs	r2, #24
 8002810:	189b      	adds	r3, r3, r2
 8002812:	19db      	adds	r3, r3, r7
 8002814:	2210      	movs	r2, #16
 8002816:	701a      	strb	r2, [r3, #0]
 8002818:	e005      	b.n	8002826 <UART_SetConfig+0x1fa>
 800281a:	231b      	movs	r3, #27
 800281c:	2218      	movs	r2, #24
 800281e:	189b      	adds	r3, r3, r2
 8002820:	19db      	adds	r3, r3, r7
 8002822:	2210      	movs	r2, #16
 8002824:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a55      	ldr	r2, [pc, #340]	; (8002980 <UART_SetConfig+0x354>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d000      	beq.n	8002832 <UART_SetConfig+0x206>
 8002830:	e084      	b.n	800293c <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002832:	231b      	movs	r3, #27
 8002834:	2218      	movs	r2, #24
 8002836:	189b      	adds	r3, r3, r2
 8002838:	19db      	adds	r3, r3, r7
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b08      	cmp	r3, #8
 800283e:	d01d      	beq.n	800287c <UART_SetConfig+0x250>
 8002840:	dc20      	bgt.n	8002884 <UART_SetConfig+0x258>
 8002842:	2b04      	cmp	r3, #4
 8002844:	d015      	beq.n	8002872 <UART_SetConfig+0x246>
 8002846:	dc1d      	bgt.n	8002884 <UART_SetConfig+0x258>
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <UART_SetConfig+0x226>
 800284c:	2b02      	cmp	r3, #2
 800284e:	d005      	beq.n	800285c <UART_SetConfig+0x230>
 8002850:	e018      	b.n	8002884 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002852:	f7ff f8e1 	bl	8001a18 <HAL_RCC_GetPCLK1Freq>
 8002856:	0003      	movs	r3, r0
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800285a:	e01c      	b.n	8002896 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800285c:	4b4b      	ldr	r3, [pc, #300]	; (800298c <UART_SetConfig+0x360>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2210      	movs	r2, #16
 8002862:	4013      	ands	r3, r2
 8002864:	d002      	beq.n	800286c <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002866:	4b4b      	ldr	r3, [pc, #300]	; (8002994 <UART_SetConfig+0x368>)
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800286a:	e014      	b.n	8002896 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 800286c:	4b4a      	ldr	r3, [pc, #296]	; (8002998 <UART_SetConfig+0x36c>)
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002870:	e011      	b.n	8002896 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002872:	f7ff f821 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 8002876:	0003      	movs	r3, r0
 8002878:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800287a:	e00c      	b.n	8002896 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800287c:	2380      	movs	r3, #128	; 0x80
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002882:	e008      	b.n	8002896 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002888:	231a      	movs	r3, #26
 800288a:	2218      	movs	r2, #24
 800288c:	189b      	adds	r3, r3, r2
 800288e:	19db      	adds	r3, r3, r7
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
        break;
 8002894:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002898:	2b00      	cmp	r3, #0
 800289a:	d100      	bne.n	800289e <UART_SetConfig+0x272>
 800289c:	e132      	b.n	8002b04 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	0013      	movs	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	189b      	adds	r3, r3, r2
 80028a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d305      	bcc.n	80028ba <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80028b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d906      	bls.n	80028c8 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80028ba:	231a      	movs	r3, #26
 80028bc:	2218      	movs	r2, #24
 80028be:	189b      	adds	r3, r3, r2
 80028c0:	19db      	adds	r3, r3, r7
 80028c2:	2201      	movs	r2, #1
 80028c4:	701a      	strb	r2, [r3, #0]
 80028c6:	e11d      	b.n	8002b04 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80028c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	6939      	ldr	r1, [r7, #16]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	000b      	movs	r3, r1
 80028d6:	0e1b      	lsrs	r3, r3, #24
 80028d8:	0010      	movs	r0, r2
 80028da:	0205      	lsls	r5, r0, #8
 80028dc:	431d      	orrs	r5, r3
 80028de:	000b      	movs	r3, r1
 80028e0:	021c      	lsls	r4, r3, #8
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	085b      	lsrs	r3, r3, #1
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68b8      	ldr	r0, [r7, #8]
 80028f0:	68f9      	ldr	r1, [r7, #12]
 80028f2:	1900      	adds	r0, r0, r4
 80028f4:	4169      	adcs	r1, r5
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	2300      	movs	r3, #0
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f7fd fc8c 	bl	8000220 <__aeabi_uldivmod>
 8002908:	0002      	movs	r2, r0
 800290a:	000b      	movs	r3, r1
 800290c:	0013      	movs	r3, r2
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002912:	23c0      	movs	r3, #192	; 0xc0
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	429a      	cmp	r2, r3
 8002918:	d309      	bcc.n	800292e <UART_SetConfig+0x302>
 800291a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	035b      	lsls	r3, r3, #13
 8002920:	429a      	cmp	r2, r3
 8002922:	d204      	bcs.n	800292e <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800292a:	60da      	str	r2, [r3, #12]
 800292c:	e0ea      	b.n	8002b04 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 800292e:	231a      	movs	r3, #26
 8002930:	2218      	movs	r2, #24
 8002932:	189b      	adds	r3, r3, r2
 8002934:	19db      	adds	r3, r3, r7
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
 800293a:	e0e3      	b.n	8002b04 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	69da      	ldr	r2, [r3, #28]
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	021b      	lsls	r3, r3, #8
 8002944:	429a      	cmp	r2, r3
 8002946:	d000      	beq.n	800294a <UART_SetConfig+0x31e>
 8002948:	e085      	b.n	8002a56 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800294a:	231b      	movs	r3, #27
 800294c:	2218      	movs	r2, #24
 800294e:	189b      	adds	r3, r3, r2
 8002950:	19db      	adds	r3, r3, r7
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b08      	cmp	r3, #8
 8002956:	d837      	bhi.n	80029c8 <UART_SetConfig+0x39c>
 8002958:	009a      	lsls	r2, r3, #2
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <UART_SetConfig+0x370>)
 800295c:	18d3      	adds	r3, r2, r3
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002962:	f7ff f859 	bl	8001a18 <HAL_RCC_GetPCLK1Freq>
 8002966:	0003      	movs	r3, r0
 8002968:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800296a:	e036      	b.n	80029da <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800296c:	f7ff f86a 	bl	8001a44 <HAL_RCC_GetPCLK2Freq>
 8002970:	0003      	movs	r3, r0
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002974:	e031      	b.n	80029da <UART_SetConfig+0x3ae>
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	efff69f3 	.word	0xefff69f3
 800297c:	ffffcfff 	.word	0xffffcfff
 8002980:	40004800 	.word	0x40004800
 8002984:	fffff4ff 	.word	0xfffff4ff
 8002988:	40013800 	.word	0x40013800
 800298c:	40021000 	.word	0x40021000
 8002990:	40004400 	.word	0x40004400
 8002994:	003d0900 	.word	0x003d0900
 8002998:	00f42400 	.word	0x00f42400
 800299c:	080035cc 	.word	0x080035cc
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029a0:	4b60      	ldr	r3, [pc, #384]	; (8002b24 <UART_SetConfig+0x4f8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2210      	movs	r2, #16
 80029a6:	4013      	ands	r3, r2
 80029a8:	d002      	beq.n	80029b0 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80029aa:	4b5f      	ldr	r3, [pc, #380]	; (8002b28 <UART_SetConfig+0x4fc>)
 80029ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80029ae:	e014      	b.n	80029da <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80029b0:	4b5e      	ldr	r3, [pc, #376]	; (8002b2c <UART_SetConfig+0x500>)
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029b4:	e011      	b.n	80029da <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029b6:	f7fe ff7f 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 80029ba:	0003      	movs	r3, r0
 80029bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029be:	e00c      	b.n	80029da <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029c6:	e008      	b.n	80029da <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80029cc:	231a      	movs	r3, #26
 80029ce:	2218      	movs	r2, #24
 80029d0:	189b      	adds	r3, r3, r2
 80029d2:	19db      	adds	r3, r3, r7
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]
        break;
 80029d8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d100      	bne.n	80029e2 <UART_SetConfig+0x3b6>
 80029e0:	e090      	b.n	8002b04 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e4:	005a      	lsls	r2, r3, #1
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	085b      	lsrs	r3, r3, #1
 80029ec:	18d2      	adds	r2, r2, r3
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	0019      	movs	r1, r3
 80029f4:	0010      	movs	r0, r2
 80029f6:	f7fd fb87 	bl	8000108 <__udivsi3>
 80029fa:	0003      	movs	r3, r0
 80029fc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a00:	2b0f      	cmp	r3, #15
 8002a02:	d921      	bls.n	8002a48 <UART_SetConfig+0x41c>
 8002a04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	025b      	lsls	r3, r3, #9
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d21c      	bcs.n	8002a48 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	200e      	movs	r0, #14
 8002a14:	2418      	movs	r4, #24
 8002a16:	1903      	adds	r3, r0, r4
 8002a18:	19db      	adds	r3, r3, r7
 8002a1a:	210f      	movs	r1, #15
 8002a1c:	438a      	bics	r2, r1
 8002a1e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a22:	085b      	lsrs	r3, r3, #1
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2207      	movs	r2, #7
 8002a28:	4013      	ands	r3, r2
 8002a2a:	b299      	uxth	r1, r3
 8002a2c:	1903      	adds	r3, r0, r4
 8002a2e:	19db      	adds	r3, r3, r7
 8002a30:	1902      	adds	r2, r0, r4
 8002a32:	19d2      	adds	r2, r2, r7
 8002a34:	8812      	ldrh	r2, [r2, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	1902      	adds	r2, r0, r4
 8002a40:	19d2      	adds	r2, r2, r7
 8002a42:	8812      	ldrh	r2, [r2, #0]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	e05d      	b.n	8002b04 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002a48:	231a      	movs	r3, #26
 8002a4a:	2218      	movs	r2, #24
 8002a4c:	189b      	adds	r3, r3, r2
 8002a4e:	19db      	adds	r3, r3, r7
 8002a50:	2201      	movs	r2, #1
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	e056      	b.n	8002b04 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a56:	231b      	movs	r3, #27
 8002a58:	2218      	movs	r2, #24
 8002a5a:	189b      	adds	r3, r3, r2
 8002a5c:	19db      	adds	r3, r3, r7
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d822      	bhi.n	8002aaa <UART_SetConfig+0x47e>
 8002a64:	009a      	lsls	r2, r3, #2
 8002a66:	4b32      	ldr	r3, [pc, #200]	; (8002b30 <UART_SetConfig+0x504>)
 8002a68:	18d3      	adds	r3, r2, r3
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a6e:	f7fe ffd3 	bl	8001a18 <HAL_RCC_GetPCLK1Freq>
 8002a72:	0003      	movs	r3, r0
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a76:	e021      	b.n	8002abc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a78:	f7fe ffe4 	bl	8001a44 <HAL_RCC_GetPCLK2Freq>
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a80:	e01c      	b.n	8002abc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a82:	4b28      	ldr	r3, [pc, #160]	; (8002b24 <UART_SetConfig+0x4f8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2210      	movs	r2, #16
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d002      	beq.n	8002a92 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002a8c:	4b26      	ldr	r3, [pc, #152]	; (8002b28 <UART_SetConfig+0x4fc>)
 8002a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002a90:	e014      	b.n	8002abc <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002a92:	4b26      	ldr	r3, [pc, #152]	; (8002b2c <UART_SetConfig+0x500>)
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a96:	e011      	b.n	8002abc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a98:	f7fe ff0e 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002aa0:	e00c      	b.n	8002abc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002aa8:	e008      	b.n	8002abc <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002aae:	231a      	movs	r3, #26
 8002ab0:	2218      	movs	r2, #24
 8002ab2:	189b      	adds	r3, r3, r2
 8002ab4:	19db      	adds	r3, r3, r7
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
        break;
 8002aba:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d020      	beq.n	8002b04 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	085a      	lsrs	r2, r3, #1
 8002ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aca:	18d2      	adds	r2, r2, r3
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	0010      	movs	r0, r2
 8002ad4:	f7fd fb18 	bl	8000108 <__udivsi3>
 8002ad8:	0003      	movs	r3, r0
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ade:	2b0f      	cmp	r3, #15
 8002ae0:	d90a      	bls.n	8002af8 <UART_SetConfig+0x4cc>
 8002ae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	025b      	lsls	r3, r3, #9
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d205      	bcs.n	8002af8 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	e005      	b.n	8002b04 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002af8:	231a      	movs	r3, #26
 8002afa:	2218      	movs	r2, #24
 8002afc:	189b      	adds	r3, r3, r2
 8002afe:	19db      	adds	r3, r3, r7
 8002b00:	2201      	movs	r2, #1
 8002b02:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2200      	movs	r2, #0
 8002b08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002b10:	231a      	movs	r3, #26
 8002b12:	2218      	movs	r2, #24
 8002b14:	189b      	adds	r3, r3, r2
 8002b16:	19db      	adds	r3, r3, r7
 8002b18:	781b      	ldrb	r3, [r3, #0]
}
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b00e      	add	sp, #56	; 0x38
 8002b20:	bdb0      	pop	{r4, r5, r7, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	40021000 	.word	0x40021000
 8002b28:	003d0900 	.word	0x003d0900
 8002b2c:	00f42400 	.word	0x00f42400
 8002b30:	080035f0 	.word	0x080035f0

08002b34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	2201      	movs	r2, #1
 8002b42:	4013      	ands	r3, r2
 8002b44:	d00b      	beq.n	8002b5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	4a4a      	ldr	r2, [pc, #296]	; (8002c78 <UART_AdvFeatureConfig+0x144>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	0019      	movs	r1, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	2202      	movs	r2, #2
 8002b64:	4013      	ands	r3, r2
 8002b66:	d00b      	beq.n	8002b80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4a43      	ldr	r2, [pc, #268]	; (8002c7c <UART_AdvFeatureConfig+0x148>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	0019      	movs	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	2204      	movs	r2, #4
 8002b86:	4013      	ands	r3, r2
 8002b88:	d00b      	beq.n	8002ba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	4a3b      	ldr	r2, [pc, #236]	; (8002c80 <UART_AdvFeatureConfig+0x14c>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	0019      	movs	r1, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	2208      	movs	r2, #8
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d00b      	beq.n	8002bc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4a34      	ldr	r2, [pc, #208]	; (8002c84 <UART_AdvFeatureConfig+0x150>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	0019      	movs	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	2210      	movs	r2, #16
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d00b      	beq.n	8002be6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4a2c      	ldr	r2, [pc, #176]	; (8002c88 <UART_AdvFeatureConfig+0x154>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	0019      	movs	r1, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	2220      	movs	r2, #32
 8002bec:	4013      	ands	r3, r2
 8002bee:	d00b      	beq.n	8002c08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	4a25      	ldr	r2, [pc, #148]	; (8002c8c <UART_AdvFeatureConfig+0x158>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	2240      	movs	r2, #64	; 0x40
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d01d      	beq.n	8002c4e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <UART_AdvFeatureConfig+0x15c>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	0019      	movs	r1, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c2e:	2380      	movs	r3, #128	; 0x80
 8002c30:	035b      	lsls	r3, r3, #13
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d10b      	bne.n	8002c4e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	4a15      	ldr	r2, [pc, #84]	; (8002c94 <UART_AdvFeatureConfig+0x160>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	0019      	movs	r1, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	2280      	movs	r2, #128	; 0x80
 8002c54:	4013      	ands	r3, r2
 8002c56:	d00b      	beq.n	8002c70 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4a0e      	ldr	r2, [pc, #56]	; (8002c98 <UART_AdvFeatureConfig+0x164>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	0019      	movs	r1, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	605a      	str	r2, [r3, #4]
  }
}
 8002c70:	46c0      	nop			; (mov r8, r8)
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b002      	add	sp, #8
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	fffdffff 	.word	0xfffdffff
 8002c7c:	fffeffff 	.word	0xfffeffff
 8002c80:	fffbffff 	.word	0xfffbffff
 8002c84:	ffff7fff 	.word	0xffff7fff
 8002c88:	ffffefff 	.word	0xffffefff
 8002c8c:	ffffdfff 	.word	0xffffdfff
 8002c90:	ffefffff 	.word	0xffefffff
 8002c94:	ff9fffff 	.word	0xff9fffff
 8002c98:	fff7ffff 	.word	0xfff7ffff

08002c9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b092      	sub	sp, #72	; 0x48
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2284      	movs	r2, #132	; 0x84
 8002ca8:	2100      	movs	r1, #0
 8002caa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cac:	f7fd fe12 	bl	80008d4 <HAL_GetTick>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2208      	movs	r2, #8
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d12c      	bne.n	8002d1c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc4:	2280      	movs	r2, #128	; 0x80
 8002cc6:	0391      	lsls	r1, r2, #14
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	4a46      	ldr	r2, [pc, #280]	; (8002de4 <UART_CheckIdleState+0x148>)
 8002ccc:	9200      	str	r2, [sp, #0]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f000 f88c 	bl	8002dec <UART_WaitOnFlagUntilTimeout>
 8002cd4:	1e03      	subs	r3, r0, #0
 8002cd6:	d021      	beq.n	8002d1c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002ce0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce8:	f383 8810 	msr	PRIMASK, r3
}
 8002cec:	46c0      	nop			; (mov r8, r8)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2180      	movs	r1, #128	; 0x80
 8002cfa:	438a      	bics	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d04:	f383 8810 	msr	PRIMASK, r3
}
 8002d08:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2278      	movs	r2, #120	; 0x78
 8002d14:	2100      	movs	r1, #0
 8002d16:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e05f      	b.n	8002ddc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2204      	movs	r2, #4
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d146      	bne.n	8002db8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d2c:	2280      	movs	r2, #128	; 0x80
 8002d2e:	03d1      	lsls	r1, r2, #15
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	4a2c      	ldr	r2, [pc, #176]	; (8002de4 <UART_CheckIdleState+0x148>)
 8002d34:	9200      	str	r2, [sp, #0]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f000 f858 	bl	8002dec <UART_WaitOnFlagUntilTimeout>
 8002d3c:	1e03      	subs	r3, r0, #0
 8002d3e:	d03b      	beq.n	8002db8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d40:	f3ef 8310 	mrs	r3, PRIMASK
 8002d44:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d46:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d48:	637b      	str	r3, [r7, #52]	; 0x34
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f383 8810 	msr	PRIMASK, r3
}
 8002d54:	46c0      	nop			; (mov r8, r8)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4921      	ldr	r1, [pc, #132]	; (8002de8 <UART_CheckIdleState+0x14c>)
 8002d62:	400a      	ands	r2, r1
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f383 8810 	msr	PRIMASK, r3
}
 8002d70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d72:	f3ef 8310 	mrs	r3, PRIMASK
 8002d76:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d78:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f383 8810 	msr	PRIMASK, r3
}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2101      	movs	r1, #1
 8002d94:	438a      	bics	r2, r1
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	f383 8810 	msr	PRIMASK, r3
}
 8002da2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2280      	movs	r2, #128	; 0x80
 8002da8:	2120      	movs	r1, #32
 8002daa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2278      	movs	r2, #120	; 0x78
 8002db0:	2100      	movs	r1, #0
 8002db2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e011      	b.n	8002ddc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2280      	movs	r2, #128	; 0x80
 8002dc2:	2120      	movs	r1, #32
 8002dc4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2278      	movs	r2, #120	; 0x78
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	0018      	movs	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b010      	add	sp, #64	; 0x40
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	01ffffff 	.word	0x01ffffff
 8002de8:	fffffedf 	.word	0xfffffedf

08002dec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	1dfb      	adds	r3, r7, #7
 8002dfa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dfc:	e04b      	b.n	8002e96 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	3301      	adds	r3, #1
 8002e02:	d048      	beq.n	8002e96 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e04:	f7fd fd66 	bl	80008d4 <HAL_GetTick>
 8002e08:	0002      	movs	r2, r0
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d302      	bcc.n	8002e1a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e04b      	b.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2204      	movs	r2, #4
 8002e26:	4013      	ands	r3, r2
 8002e28:	d035      	beq.n	8002e96 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	2208      	movs	r2, #8
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d111      	bne.n	8002e5c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2208      	movs	r2, #8
 8002e3e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	0018      	movs	r0, r3
 8002e44:	f000 f906 	bl	8003054 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2284      	movs	r2, #132	; 0x84
 8002e4c:	2108      	movs	r1, #8
 8002e4e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2278      	movs	r2, #120	; 0x78
 8002e54:	2100      	movs	r1, #0
 8002e56:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e02c      	b.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	69da      	ldr	r2, [r3, #28]
 8002e62:	2380      	movs	r3, #128	; 0x80
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	401a      	ands	r2, r3
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d112      	bne.n	8002e96 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2280      	movs	r2, #128	; 0x80
 8002e76:	0112      	lsls	r2, r2, #4
 8002e78:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f000 f8e9 	bl	8003054 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2284      	movs	r2, #132	; 0x84
 8002e86:	2120      	movs	r1, #32
 8002e88:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2278      	movs	r2, #120	; 0x78
 8002e8e:	2100      	movs	r1, #0
 8002e90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e00f      	b.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	425a      	negs	r2, r3
 8002ea6:	4153      	adcs	r3, r2
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	001a      	movs	r2, r3
 8002eac:	1dfb      	adds	r3, r7, #7
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d0a4      	beq.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b004      	add	sp, #16
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b090      	sub	sp, #64	; 0x40
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	1dbb      	adds	r3, r7, #6
 8002ecc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1dba      	adds	r2, r7, #6
 8002ed8:	2158      	movs	r1, #88	; 0x58
 8002eda:	8812      	ldrh	r2, [r2, #0]
 8002edc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1dba      	adds	r2, r7, #6
 8002ee2:	215a      	movs	r1, #90	; 0x5a
 8002ee4:	8812      	ldrh	r2, [r2, #0]
 8002ee6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	015b      	lsls	r3, r3, #5
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d10d      	bne.n	8002f16 <UART_Start_Receive_IT+0x56>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d104      	bne.n	8002f0c <UART_Start_Receive_IT+0x4c>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	225c      	movs	r2, #92	; 0x5c
 8002f06:	4950      	ldr	r1, [pc, #320]	; (8003048 <UART_Start_Receive_IT+0x188>)
 8002f08:	5299      	strh	r1, [r3, r2]
 8002f0a:	e02e      	b.n	8002f6a <UART_Start_Receive_IT+0xaa>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	225c      	movs	r2, #92	; 0x5c
 8002f10:	21ff      	movs	r1, #255	; 0xff
 8002f12:	5299      	strh	r1, [r3, r2]
 8002f14:	e029      	b.n	8002f6a <UART_Start_Receive_IT+0xaa>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10d      	bne.n	8002f3a <UART_Start_Receive_IT+0x7a>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d104      	bne.n	8002f30 <UART_Start_Receive_IT+0x70>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	225c      	movs	r2, #92	; 0x5c
 8002f2a:	21ff      	movs	r1, #255	; 0xff
 8002f2c:	5299      	strh	r1, [r3, r2]
 8002f2e:	e01c      	b.n	8002f6a <UART_Start_Receive_IT+0xaa>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	225c      	movs	r2, #92	; 0x5c
 8002f34:	217f      	movs	r1, #127	; 0x7f
 8002f36:	5299      	strh	r1, [r3, r2]
 8002f38:	e017      	b.n	8002f6a <UART_Start_Receive_IT+0xaa>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	2380      	movs	r3, #128	; 0x80
 8002f40:	055b      	lsls	r3, r3, #21
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d10d      	bne.n	8002f62 <UART_Start_Receive_IT+0xa2>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d104      	bne.n	8002f58 <UART_Start_Receive_IT+0x98>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	225c      	movs	r2, #92	; 0x5c
 8002f52:	217f      	movs	r1, #127	; 0x7f
 8002f54:	5299      	strh	r1, [r3, r2]
 8002f56:	e008      	b.n	8002f6a <UART_Start_Receive_IT+0xaa>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	225c      	movs	r2, #92	; 0x5c
 8002f5c:	213f      	movs	r1, #63	; 0x3f
 8002f5e:	5299      	strh	r1, [r3, r2]
 8002f60:	e003      	b.n	8002f6a <UART_Start_Receive_IT+0xaa>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	225c      	movs	r2, #92	; 0x5c
 8002f66:	2100      	movs	r1, #0
 8002f68:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2284      	movs	r2, #132	; 0x84
 8002f6e:	2100      	movs	r1, #0
 8002f70:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2280      	movs	r2, #128	; 0x80
 8002f76:	2122      	movs	r1, #34	; 0x22
 8002f78:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f7a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002f80:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f84:	2301      	movs	r3, #1
 8002f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8a:	f383 8810 	msr	PRIMASK, r3
}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	609a      	str	r2, [r3, #8]
 8002fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa6:	f383 8810 	msr	PRIMASK, r3
}
 8002faa:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	015b      	lsls	r3, r3, #5
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d107      	bne.n	8002fc8 <UART_Start_Receive_IT+0x108>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d103      	bne.n	8002fc8 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4a22      	ldr	r2, [pc, #136]	; (800304c <UART_Start_Receive_IT+0x18c>)
 8002fc4:	669a      	str	r2, [r3, #104]	; 0x68
 8002fc6:	e002      	b.n	8002fce <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4a21      	ldr	r2, [pc, #132]	; (8003050 <UART_Start_Receive_IT+0x190>)
 8002fcc:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d019      	beq.n	800300a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8002fda:	61fb      	str	r3, [r7, #28]
  return(result);
 8002fdc:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002fde:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	f383 8810 	msr	PRIMASK, r3
}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2190      	movs	r1, #144	; 0x90
 8002ff8:	0049      	lsls	r1, r1, #1
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	f383 8810 	msr	PRIMASK, r3
}
 8003008:	e018      	b.n	800303c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800300a:	f3ef 8310 	mrs	r3, PRIMASK
 800300e:	613b      	str	r3, [r7, #16]
  return(result);
 8003010:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003012:	63bb      	str	r3, [r7, #56]	; 0x38
 8003014:	2301      	movs	r3, #1
 8003016:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f383 8810 	msr	PRIMASK, r3
}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2120      	movs	r1, #32
 800302c:	430a      	orrs	r2, r1
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003032:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	f383 8810 	msr	PRIMASK, r3
}
 800303a:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	0018      	movs	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	b010      	add	sp, #64	; 0x40
 8003044:	bd80      	pop	{r7, pc}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	000001ff 	.word	0x000001ff
 800304c:	08003365 	.word	0x08003365
 8003050:	080031a1 	.word	0x080031a1

08003054 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08e      	sub	sp, #56	; 0x38
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800305c:	f3ef 8310 	mrs	r3, PRIMASK
 8003060:	617b      	str	r3, [r7, #20]
  return(result);
 8003062:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
 8003066:	2301      	movs	r3, #1
 8003068:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	f383 8810 	msr	PRIMASK, r3
}
 8003070:	46c0      	nop			; (mov r8, r8)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4926      	ldr	r1, [pc, #152]	; (8003118 <UART_EndRxTransfer+0xc4>)
 800307e:	400a      	ands	r2, r1
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003084:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f383 8810 	msr	PRIMASK, r3
}
 800308c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800308e:	f3ef 8310 	mrs	r3, PRIMASK
 8003092:	623b      	str	r3, [r7, #32]
  return(result);
 8003094:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003096:	633b      	str	r3, [r7, #48]	; 0x30
 8003098:	2301      	movs	r3, #1
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	f383 8810 	msr	PRIMASK, r3
}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2101      	movs	r1, #1
 80030b0:	438a      	bics	r2, r1
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	f383 8810 	msr	PRIMASK, r3
}
 80030be:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d118      	bne.n	80030fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030c8:	f3ef 8310 	mrs	r3, PRIMASK
 80030cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80030ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030d2:	2301      	movs	r3, #1
 80030d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f383 8810 	msr	PRIMASK, r3
}
 80030dc:	46c0      	nop			; (mov r8, r8)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2110      	movs	r1, #16
 80030ea:	438a      	bics	r2, r1
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f383 8810 	msr	PRIMASK, r3
}
 80030f8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2280      	movs	r2, #128	; 0x80
 80030fe:	2120      	movs	r1, #32
 8003100:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	46bd      	mov	sp, r7
 8003112:	b00e      	add	sp, #56	; 0x38
 8003114:	bd80      	pop	{r7, pc}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	fffffedf 	.word	0xfffffedf

0800311c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	225a      	movs	r2, #90	; 0x5a
 800312e:	2100      	movs	r1, #0
 8003130:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2252      	movs	r2, #82	; 0x52
 8003136:	2100      	movs	r1, #0
 8003138:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	0018      	movs	r0, r3
 800313e:	f7ff fa61 	bl	8002604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	46bd      	mov	sp, r7
 8003146:	b004      	add	sp, #16
 8003148:	bd80      	pop	{r7, pc}

0800314a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b086      	sub	sp, #24
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003152:	f3ef 8310 	mrs	r3, PRIMASK
 8003156:	60bb      	str	r3, [r7, #8]
  return(result);
 8003158:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	2301      	movs	r3, #1
 800315e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f383 8810 	msr	PRIMASK, r3
}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2140      	movs	r1, #64	; 0x40
 8003174:	438a      	bics	r2, r1
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f383 8810 	msr	PRIMASK, r3
}
 8003182:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	0018      	movs	r0, r3
 8003194:	f7ff fa2e 	bl	80025f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	46bd      	mov	sp, r7
 800319c:	b006      	add	sp, #24
 800319e:	bd80      	pop	{r7, pc}

080031a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b094      	sub	sp, #80	; 0x50
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80031a8:	204e      	movs	r0, #78	; 0x4e
 80031aa:	183b      	adds	r3, r7, r0
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	215c      	movs	r1, #92	; 0x5c
 80031b0:	5a52      	ldrh	r2, [r2, r1]
 80031b2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2280      	movs	r2, #128	; 0x80
 80031b8:	589b      	ldr	r3, [r3, r2]
 80031ba:	2b22      	cmp	r3, #34	; 0x22
 80031bc:	d000      	beq.n	80031c0 <UART_RxISR_8BIT+0x20>
 80031be:	e0bf      	b.n	8003340 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031c6:	214c      	movs	r1, #76	; 0x4c
 80031c8:	187b      	adds	r3, r7, r1
 80031ca:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80031cc:	187b      	adds	r3, r7, r1
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	183b      	adds	r3, r7, r0
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	b2d9      	uxtb	r1, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031dc:	400a      	ands	r2, r1
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	225a      	movs	r2, #90	; 0x5a
 80031f0:	5a9b      	ldrh	r3, [r3, r2]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b299      	uxth	r1, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	225a      	movs	r2, #90	; 0x5a
 80031fc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	225a      	movs	r2, #90	; 0x5a
 8003202:	5a9b      	ldrh	r3, [r3, r2]
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d000      	beq.n	800320c <UART_RxISR_8BIT+0x6c>
 800320a:	e0a1      	b.n	8003350 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800320c:	f3ef 8310 	mrs	r3, PRIMASK
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003214:	64bb      	str	r3, [r7, #72]	; 0x48
 8003216:	2301      	movs	r3, #1
 8003218:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	f383 8810 	msr	PRIMASK, r3
}
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	494a      	ldr	r1, [pc, #296]	; (8003358 <UART_RxISR_8BIT+0x1b8>)
 800322e:	400a      	ands	r2, r1
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003238:	f383 8810 	msr	PRIMASK, r3
}
 800323c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800323e:	f3ef 8310 	mrs	r3, PRIMASK
 8003242:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003246:	647b      	str	r3, [r7, #68]	; 0x44
 8003248:	2301      	movs	r3, #1
 800324a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800324c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324e:	f383 8810 	msr	PRIMASK, r3
}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2101      	movs	r1, #1
 8003260:	438a      	bics	r2, r1
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003266:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326a:	f383 8810 	msr	PRIMASK, r3
}
 800326e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2280      	movs	r2, #128	; 0x80
 8003274:	2120      	movs	r1, #32
 8003276:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a34      	ldr	r2, [pc, #208]	; (800335c <UART_RxISR_8BIT+0x1bc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d01f      	beq.n	80032ce <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	041b      	lsls	r3, r3, #16
 8003298:	4013      	ands	r3, r2
 800329a:	d018      	beq.n	80032ce <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800329c:	f3ef 8310 	mrs	r3, PRIMASK
 80032a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80032a2:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80032a4:	643b      	str	r3, [r7, #64]	; 0x40
 80032a6:	2301      	movs	r3, #1
 80032a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	f383 8810 	msr	PRIMASK, r3
}
 80032b0:	46c0      	nop			; (mov r8, r8)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4928      	ldr	r1, [pc, #160]	; (8003360 <UART_RxISR_8BIT+0x1c0>)
 80032be:	400a      	ands	r2, r1
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	f383 8810 	msr	PRIMASK, r3
}
 80032cc:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d12f      	bne.n	8003336 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032dc:	f3ef 8310 	mrs	r3, PRIMASK
 80032e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80032e2:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e6:	2301      	movs	r3, #1
 80032e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f383 8810 	msr	PRIMASK, r3
}
 80032f0:	46c0      	nop			; (mov r8, r8)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2110      	movs	r1, #16
 80032fe:	438a      	bics	r2, r1
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003304:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f383 8810 	msr	PRIMASK, r3
}
 800330c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	2210      	movs	r2, #16
 8003316:	4013      	ands	r3, r2
 8003318:	2b10      	cmp	r3, #16
 800331a:	d103      	bne.n	8003324 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2210      	movs	r2, #16
 8003322:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2258      	movs	r2, #88	; 0x58
 8003328:	5a9a      	ldrh	r2, [r3, r2]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	0011      	movs	r1, r2
 800332e:	0018      	movs	r0, r3
 8003330:	f7ff f970 	bl	8002614 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003334:	e00c      	b.n	8003350 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	0018      	movs	r0, r3
 800333a:	f7fd f991 	bl	8000660 <HAL_UART_RxCpltCallback>
}
 800333e:	e007      	b.n	8003350 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2108      	movs	r1, #8
 800334c:	430a      	orrs	r2, r1
 800334e:	619a      	str	r2, [r3, #24]
}
 8003350:	46c0      	nop			; (mov r8, r8)
 8003352:	46bd      	mov	sp, r7
 8003354:	b014      	add	sp, #80	; 0x50
 8003356:	bd80      	pop	{r7, pc}
 8003358:	fffffedf 	.word	0xfffffedf
 800335c:	40004800 	.word	0x40004800
 8003360:	fbffffff 	.word	0xfbffffff

08003364 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b094      	sub	sp, #80	; 0x50
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800336c:	204e      	movs	r0, #78	; 0x4e
 800336e:	183b      	adds	r3, r7, r0
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	215c      	movs	r1, #92	; 0x5c
 8003374:	5a52      	ldrh	r2, [r2, r1]
 8003376:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2280      	movs	r2, #128	; 0x80
 800337c:	589b      	ldr	r3, [r3, r2]
 800337e:	2b22      	cmp	r3, #34	; 0x22
 8003380:	d000      	beq.n	8003384 <UART_RxISR_16BIT+0x20>
 8003382:	e0bf      	b.n	8003504 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800338a:	214c      	movs	r1, #76	; 0x4c
 800338c:	187b      	adds	r3, r7, r1
 800338e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003394:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003396:	187b      	adds	r3, r7, r1
 8003398:	183a      	adds	r2, r7, r0
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	8812      	ldrh	r2, [r2, #0]
 800339e:	4013      	ands	r3, r2
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	1c9a      	adds	r2, r3, #2
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	225a      	movs	r2, #90	; 0x5a
 80033b4:	5a9b      	ldrh	r3, [r3, r2]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b299      	uxth	r1, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	225a      	movs	r2, #90	; 0x5a
 80033c0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	225a      	movs	r2, #90	; 0x5a
 80033c6:	5a9b      	ldrh	r3, [r3, r2]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d000      	beq.n	80033d0 <UART_RxISR_16BIT+0x6c>
 80033ce:	e0a1      	b.n	8003514 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d0:	f3ef 8310 	mrs	r3, PRIMASK
 80033d4:	623b      	str	r3, [r7, #32]
  return(result);
 80033d6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033d8:	647b      	str	r3, [r7, #68]	; 0x44
 80033da:	2301      	movs	r3, #1
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	f383 8810 	msr	PRIMASK, r3
}
 80033e4:	46c0      	nop			; (mov r8, r8)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	494a      	ldr	r1, [pc, #296]	; (800351c <UART_RxISR_16BIT+0x1b8>)
 80033f2:	400a      	ands	r2, r1
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fc:	f383 8810 	msr	PRIMASK, r3
}
 8003400:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003402:	f3ef 8310 	mrs	r3, PRIMASK
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003408:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800340a:	643b      	str	r3, [r7, #64]	; 0x40
 800340c:	2301      	movs	r3, #1
 800340e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003412:	f383 8810 	msr	PRIMASK, r3
}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2101      	movs	r1, #1
 8003424:	438a      	bics	r2, r1
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800342a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800342e:	f383 8810 	msr	PRIMASK, r3
}
 8003432:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2280      	movs	r2, #128	; 0x80
 8003438:	2120      	movs	r1, #32
 800343a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a34      	ldr	r2, [pc, #208]	; (8003520 <UART_RxISR_16BIT+0x1bc>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d01f      	beq.n	8003492 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	2380      	movs	r3, #128	; 0x80
 800345a:	041b      	lsls	r3, r3, #16
 800345c:	4013      	ands	r3, r2
 800345e:	d018      	beq.n	8003492 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003460:	f3ef 8310 	mrs	r3, PRIMASK
 8003464:	617b      	str	r3, [r7, #20]
  return(result);
 8003466:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003468:	63fb      	str	r3, [r7, #60]	; 0x3c
 800346a:	2301      	movs	r3, #1
 800346c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	f383 8810 	msr	PRIMASK, r3
}
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4928      	ldr	r1, [pc, #160]	; (8003524 <UART_RxISR_16BIT+0x1c0>)
 8003482:	400a      	ands	r2, r1
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003488:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	f383 8810 	msr	PRIMASK, r3
}
 8003490:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003496:	2b01      	cmp	r3, #1
 8003498:	d12f      	bne.n	80034fa <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a0:	f3ef 8310 	mrs	r3, PRIMASK
 80034a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80034a6:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80034aa:	2301      	movs	r3, #1
 80034ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f383 8810 	msr	PRIMASK, r3
}
 80034b4:	46c0      	nop			; (mov r8, r8)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2110      	movs	r1, #16
 80034c2:	438a      	bics	r2, r1
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f383 8810 	msr	PRIMASK, r3
}
 80034d0:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	2210      	movs	r2, #16
 80034da:	4013      	ands	r3, r2
 80034dc:	2b10      	cmp	r3, #16
 80034de:	d103      	bne.n	80034e8 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2210      	movs	r2, #16
 80034e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2258      	movs	r2, #88	; 0x58
 80034ec:	5a9a      	ldrh	r2, [r3, r2]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	0011      	movs	r1, r2
 80034f2:	0018      	movs	r0, r3
 80034f4:	f7ff f88e 	bl	8002614 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80034f8:	e00c      	b.n	8003514 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	0018      	movs	r0, r3
 80034fe:	f7fd f8af 	bl	8000660 <HAL_UART_RxCpltCallback>
}
 8003502:	e007      	b.n	8003514 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2108      	movs	r1, #8
 8003510:	430a      	orrs	r2, r1
 8003512:	619a      	str	r2, [r3, #24]
}
 8003514:	46c0      	nop			; (mov r8, r8)
 8003516:	46bd      	mov	sp, r7
 8003518:	b014      	add	sp, #80	; 0x50
 800351a:	bd80      	pop	{r7, pc}
 800351c:	fffffedf 	.word	0xfffffedf
 8003520:	40004800 	.word	0x40004800
 8003524:	fbffffff 	.word	0xfbffffff

08003528 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003530:	46c0      	nop			; (mov r8, r8)
 8003532:	46bd      	mov	sp, r7
 8003534:	b002      	add	sp, #8
 8003536:	bd80      	pop	{r7, pc}

08003538 <__libc_init_array>:
 8003538:	b570      	push	{r4, r5, r6, lr}
 800353a:	2600      	movs	r6, #0
 800353c:	4d0c      	ldr	r5, [pc, #48]	; (8003570 <__libc_init_array+0x38>)
 800353e:	4c0d      	ldr	r4, [pc, #52]	; (8003574 <__libc_init_array+0x3c>)
 8003540:	1b64      	subs	r4, r4, r5
 8003542:	10a4      	asrs	r4, r4, #2
 8003544:	42a6      	cmp	r6, r4
 8003546:	d109      	bne.n	800355c <__libc_init_array+0x24>
 8003548:	2600      	movs	r6, #0
 800354a:	f000 f821 	bl	8003590 <_init>
 800354e:	4d0a      	ldr	r5, [pc, #40]	; (8003578 <__libc_init_array+0x40>)
 8003550:	4c0a      	ldr	r4, [pc, #40]	; (800357c <__libc_init_array+0x44>)
 8003552:	1b64      	subs	r4, r4, r5
 8003554:	10a4      	asrs	r4, r4, #2
 8003556:	42a6      	cmp	r6, r4
 8003558:	d105      	bne.n	8003566 <__libc_init_array+0x2e>
 800355a:	bd70      	pop	{r4, r5, r6, pc}
 800355c:	00b3      	lsls	r3, r6, #2
 800355e:	58eb      	ldr	r3, [r5, r3]
 8003560:	4798      	blx	r3
 8003562:	3601      	adds	r6, #1
 8003564:	e7ee      	b.n	8003544 <__libc_init_array+0xc>
 8003566:	00b3      	lsls	r3, r6, #2
 8003568:	58eb      	ldr	r3, [r5, r3]
 800356a:	4798      	blx	r3
 800356c:	3601      	adds	r6, #1
 800356e:	e7f2      	b.n	8003556 <__libc_init_array+0x1e>
 8003570:	0800361c 	.word	0x0800361c
 8003574:	0800361c 	.word	0x0800361c
 8003578:	0800361c 	.word	0x0800361c
 800357c:	08003620 	.word	0x08003620

08003580 <memset>:
 8003580:	0003      	movs	r3, r0
 8003582:	1882      	adds	r2, r0, r2
 8003584:	4293      	cmp	r3, r2
 8003586:	d100      	bne.n	800358a <memset+0xa>
 8003588:	4770      	bx	lr
 800358a:	7019      	strb	r1, [r3, #0]
 800358c:	3301      	adds	r3, #1
 800358e:	e7f9      	b.n	8003584 <memset+0x4>

08003590 <_init>:
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003596:	bc08      	pop	{r3}
 8003598:	469e      	mov	lr, r3
 800359a:	4770      	bx	lr

0800359c <_fini>:
 800359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a2:	bc08      	pop	{r3}
 80035a4:	469e      	mov	lr, r3
 80035a6:	4770      	bx	lr
